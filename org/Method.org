* Object #
** _DAcadApplicationEvents Interface (ActiveX)

The event interface for the AutoCAD application.

Supported Platforms: Windows only
Class Information

Class Name

    _DAcadApplicationEvents
Object Inheritance

    Object
       _DAcadApplicationEvents

Create Using

    VBA

    Not applicable

Access Via

    VBA

    Not applicable

Members

These members are part of this object:

Methods
	

Properties
	

Events

None
	

None
	

AppActivate

AppDeactivate

ARXLoaded

ARXUnloaded

BeginCommand

BeginFileDrop

BeginLisp

BeginModal

BeginOpen

BeginPlot

BeginQuit

BeginSave

EndCommand

EndLisp

EndModal

EndOpen

EndPlot

EndSave

LispCancelled

NewDrawing

SysVarChanged

WindowChanged

WindowMovedOrResized
Remarks

IAcadObject interface represents the event interface for the AutoCAD application.

* Object A
** AcadState Object (ActiveX)

A special object to use in monitoring the state of AutoCAD from out-of-process applications.

Supported Platforms: Windows only
Class Information

Class Name

    AcadState
Object Inheritance

    Object
       AcadState

Create Using

    VBA

    User-defined variable, returned via the GetAcadState method

Access Via

    VBA

    User-defined variable

Members

These members are part of this object:

Methods
	

Properties
	

Events

None
	

Application

IsQuiescent
	

None
Remarks

The AcadState object is a transient object that is returned from the GetAcadState method. This object is used to check for AutoCAD quiescence from out-of-process applications.
** AcCmColor Object (ActiveX)

AutoCAD true color object.

Supported Platforms: Windows only
Class Information

Class Name

    AcadAcCmColor
Object Inheritance

    Object
       AcadAcCmColor

Create Using

    VBA

    GetInterfaceObject("AutoCAD.AcCmColor.24")
    Dim col As New AcadAcCmColor

Access Via

    VBA

    Not applicable

Members

These members are part of this object:

Methods
	

Properties
	

Events

Delete

SetColorBookColor

SetNames

SetRGB
	

Blue

BookName

ColorIndex

ColorMethod

ColorName

EntityColor

Green

Red
	

None
Remarks

The AcCmColor object represents colors. You can use the AcCmColor object to set colors and perform other color-related operations on objects.

The object includes properties for colors, color names, color book names, and the color index.

** Application Object (ActiveX)

An instance of the AutoCAD application.

Supported Platforms: Windows only
Class Information

Class Name

    AcadApplication
Object Inheritance

    Object
       AcadApplication

Create Using

    VBA

    GetObject("AutoCAD.Application.24")
    CreateObject("AutoCAD.Application.24")

Access Via

    VBA

    object.Application

Members

These members are part of this object:

Methods
	

Properties
	

Events

Eval

GetAcadState

GetInterfaceObject

ListARX

LoadARX

LoadDVB

Quit

RunMacro

UnloadARX

UnloadDVB

Update

ZoomAll

ZoomCenter

ZoomExtents

ZoomPickWindow

ZoomPrevious

ZoomScaled

ZoomWindow
	

ActiveDocument

Application

Caption

Documents

FullName

Height

HWND

LocaleID

MenuBar

MenuGroups

Name

Path

Preferences

StatusID

VBE

Version

Visible

Width

WindowLeft

WindowState

WindowTop
	

AppActivate

AppDeactivate

ARXLoaded

ARXUnloaded

BeginCommand

BeginFileDrop

BeginLisp

BeginModal

BeginOpen

BeginPlot

BeginQuit

BeginSave

EndCommand

EndLisp

EndModal

EndOpen

EndPlot

EndSave

LispCancelled

NewDrawing

SysVarChanged

WindowChanged

WindowMovedOrResized
Remarks

The properties that are associated with the Application object reflect the properties of the main application window. The methods control the loading or listing of the currently loaded external applications and interface objects.

The active document (AutoCAD drawing) can be accessed with the ActiveDocument property.

To access the Application object from VBA, use ThisDrawing.Application. To access the Application object from VB, use the Visual Basic 7 functions GetObject or CreateObject.

If AutoCAD is running, the GetObject function will retrieve the current AutoCAD Application object. When running multiple sessions of AutoCAD, the GetObject function will return the first instance of AutoCAD in the Windows Running Object Table. See the Microsoft Visual Basic 7 documentation for the Running Object Table (ROT) and the GetObject function (for more information about verifying the session returned by GetObject).

Use version-dependent ProgIDs. If a CreateObject or GetObject function uses a version-independent ProgID, change the function to use a version-dependent ProgID. For example, you would change CreateObject("AutoCAD.Application") to CreateObject("AutoCAD.Application.24").

The application object is also the Global object for the ActiveX interface. This means that all the methods and properties for the Application object are available in the global name space.

Use the Quit method to end the AutoCAD session.

** Arc Object (ActiveX)

A circular arc.

Supported Platforms: Windows only
Class Information

Class Name

    AcadArc
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadArc

Create Using

    VBA

    ModelSpace.AddArc
    PaperSpace.AddArc
    Block.AddArc 

Access Via

    VBA

    ModelSpace.Item
    PaperSpace.Item
    Block.Item
    SelectionSet.Item
    Group.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

Copy

Delete

GetBoundingBox

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

Offset

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update
	

Application

ArcLength

Area

Center

Document

EndAngle

EndPoint

EntityTransparency

Handle

HasExtensionDictionary

Hyperlinks

Layer

Linetype

LinetypeScale

Lineweight

Material

Normal

ObjectID

ObjectName

OwnerID

PlotStyleName

Radius

StartAngle

StartPoint

Thickness

TotalAngle

TrueColor

Visible
	

Modified
Remarks

An arc is always drawn counterclockwise from the start point to the endpoint. The StartPoint and EndPoint properties of an arc are calculated through the StartAngle, EndAngle, and Radius properties.


To create an arc, use the AddArc method.

** Attribute Object (ActiveX)

An object appearing as a text string that describes the characteristics of an attribute reference.

Supported Platforms: Windows only
Class Information

Class Name

    AcadAttribute
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadAttribute

Create Using

    VBA

    ModelSpace.AddAttribute
    PaperSpace.AddAttribute
    Block.AddAttribute 

Access Via

    VBA

    ModelSpace.Item
    PaperSpace.Item
    Block.Item
    SelectionSet.Item
    Group.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

Copy

Delete

GetBoundingBox

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update

UpdateMTextAttribute
	

Alignment

Application

Backward

Constant

Document

EntityTransparency

FieldLength

Handle

HasExtensionDictionary

Height

Hyperlinks

InsertionPoint

Invisible

Layer

Linetype

LinetypeScale

Lineweight

LockPosition

Material

Mode

MTextAttribute

MTextAttributeContent

MTextBoundaryWidth

MTextDrawingDirection

Normal

ObjectID

ObjectName

ObliqueAngle

OwnerID

PlotStyleName

Preset

PromptString

Rotation

ScaleFactor

StyleName

TagString

TextAlignmentPoint

TextGenerationFlag

TextString

Thickness

TrueColor

UpsideDown

Verify

Visible
	

Modified
Remarks

In AutoCAD, this object is called an attribute definition.

To create an attribute (or attribute definition), use the AddAttribute method.

** AttributeReference Object (ActiveX)

An object containing text that links to a block.

Supported Platforms: Windows only
Class Information

Class Name

    AcadAttributeReference
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadAttributeReference

Create Using

    VBA

    ModelSpace.InsertBlock
    PaperSpace.InsertBlock
    Block.InsertBlock

Access Via

    VBA

    Block.GetAttributes

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

Copy

Delete

GetBoundingBox

GetExtensionDictionary

GetExtensionDictionary

GetXData

IntersectWith

Mirror

Mirror3D

Move

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update

UpdateMTextAttribute
	

Alignment

Application

Backward

Constant

Document

EntityTransparency

FieldLength

Handle

HasExtensionDictionary

Height

Hyperlinks

InsertionPoint

Invisible

Layer

Linetype

LinetypeScale

Lineweight

LockPosition

Material

MTextAttribute

MTextAttributeContent

MTextBoundaryWidth

MTextDrawingDirection

Normal

ObjectID

ObjectName

ObliqueAngle

OwnerID

PlotStyleName

Rotation

ScaleFactor

StyleName

TagString

TextAlignmentPoint

TextGenerationFlag

TextString

Thickness

TrueColor

UpsideDown

Visible
	

Modified
Remarks

You cannot directly create an attribute reference. Attribute references are added to the drawing when a block containing an attribute definition is inserted into the drawing. To access an attribute reference of an inserted block, use the GetAttributes method. This method returns an array of all attribute references attached to the inserted block.

* Object B
** Block Object (ActiveX)

A block definition containing a name and a set of objects.

Supported Platforms: Windows only
Class Information

Class Name

    AcadBlock
Object Inheritance

    Object
       AcadObject
          AcadBlock

Create Using

    VBA

    Blocks.Add

Access Via

    VBA

    Blocks.Item
    Layout.Block

Members

These members are part of this object:

Methods
	

Properties
	

Events

Add3DFace

Add3DMesh

Add3DPoly

AddArc

AddAttribute

AddBox

AddCircle

AddCone

AddCustomObject

AddCylinder

AddDim3PointAngular

AddDimAligned

AddDimAngular

AddDimArc

AddDimDiametric

AddDimOrdinate

AddDimRadial

AddDimRadialLarge

AddDimRotated

AddEllipse

AddEllipticalCone

AddEllipticalCylinder

AddExtrudedSolid

AddExtrudedSolidALongPath

AddHatch

AddLeader

AddLightWeightPolyline

AddLine

AddMInsertBlock

AddMLeader

AddMLine

AddMText

AddPoint

AddPolyfaceMesh

AddPolyline

AddRaster

AddRay

AddRegion

AddRevolvedSolid

AddSection

AddShape

AddSolid

AddSphere

AddSpline

AddTable

AddText

AddTolerance

AddTorus

AddTrace

AddWedge

AddXLine

AttachExternalReference

Bind

Delete

Detach

GetExtensionDictionary

GetXData

InsertBlock

Item

Reload

SetXData

Unload
	

Application

BlockScaling

Comments

Count

Document

Explodable

Handle

HasExtensionDictionary

IsDynamicBlock

IsLayout

IsXRef

Layout

Material

Name

ObjectID

ObjectName

Origin

OwnerID

Path

Units

XRefDatabase
	

Modified
Remarks

There are four types of blocks: the simple block, the XRef block, the layout block, and the dynamic block.

A simple block is a collection of objects that you can associate together to form a single object, or block definition. You can insert, scale, and rotate a simple block in a drawing. You can explode a simple block into its component objects, modify them, and redefine the block definition. Simple blocks can be defined from geometry in the current drawing, or by using another AutoCAD drawing. When you use another drawing to create a block, the new simple block is stored in the current drawing database; it is not updated if the original drawing changes. Inserting an instance of a simple block into the current drawing creates a BlockReference object.

An XRef block is an external link from another drawing to the current drawing. Because the XRef block represents a link to geometry, not the geometry itself, it is updated whenever the original drawing changes. Inserting an instance of an XRef block into the current drawing creates an ExternalReference object.

The layout blocks represent the geometry in the model space and paper space layouts. These blocks have a Layout object associated with them that contains the plot settings and other layout definition information. The block name of the active paper space layout is always *PAPER_SPACE. The other paper space layouts will have blocks named *PAPER_SPACEn, where n is an integer. Block names start with *PAPER_SPACE0, and the Integer increments by 1 each time a new layout is inserted.

By default, the layout blocks in a new drawing have the following names:

    *MODEL_SPACE - The model space layout. There is only one model space layout per drawing.

    This block corresponds to the ModelSpace collection.
    *PAPER_SPACE - The first paper space layout created. If the model space layout is currently active, this block contains the last active paper space layout.

    This block corresponds to the PaperSpace collection.
    *PAPER_SPACE0 - The second paper space layout created. If this layout is activated, its block is renamed *PAPER_SPACE and becomes accessible from the PaperSpace collection; the first layout's block is renamed *PAPER_SPACE0.

When you activate a new layout, it swaps block names with the layout that was formerly active. In this way, the block of the active layout is always named *PAPER_SPACE. For example, suppose Layout1 is active and Layout2 is associated with a block named *PAPER_SPACE0. If you then activate Layout2, it's block is renamed to *PAPER_SPACE, and Layout1's block is renamed to *PAPER_SPACE0.

Dynamic blocks enhance simple blocks by increasing their intelligence potential and adaptability. The internal geometry of a dynamic block instance can be adjusted independently of both its base definition and other instances. This flexibility is the central concept of dynamic blocks. Inserting an instance of a dynamic block into the current drawing creates a BlockReference object. From the block reference, you can get the DynamicBlockReferenceProperty object.

To identify a block's type, use the IsLayout , IsXRef , and IsDynamicBlock properties. If these properties are False, then the block is a simple block. If the IsXRef property is True, then the block is an external reference. If the IsLayout property is True, then the block contains all the geometry associated with a layout. If the IsDynamicBlock property is True, then the block is a dynamic block.

There is no limit to the number of objects a block can contain.

To insert a simple, XRef, or dynamic block into a drawing, use the InsertBlock method. To create a new layout block, use the Add method to add a new layout to the Layouts collection. When the new layout is created, an associated block for the layout will also be created.

** BlockReference Object (ActiveX)

An instance of a block definition inserted into a drawing.

Supported Platforms: Windows only
Class Information

Class Name

    AcadBlockReference
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadBlockReference

Create Using

    VBA

    ModelSpace.InsertBlock
    PaperSpace.InsertBlock
    Block.InsertBlock

Access Via

    VBA

    ModelSpace.Item
    PaperSpace.Item
    Block.Item
    SelectionSet.Item
    Group.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

ConvertToAnonymousBlock

ConvertToStaticBlock

Copy

Delete

Explode

GetAttributes

GetBoundingBox

GetConstantAttributes

GetDynamicBlockProperties

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

ResetBlock

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update
	

Application

Document

EffectiveName

EntityTransparency

Handle

HasAttributes

HasExtensionDictionary

Hyperlinks

InsertionPoint

InsUnits

InsUnitsFactor

IsDynamicBlock

Layer

Linetype

LinetypeScale

Lineweight

Material

Name

Normal

ObjectID

ObjectName

OwnerID

PlotStyleName

Rotation

TrueColor

Visible

XEffectiveScaleFactor

XScaleFactor

YEffectiveScaleFactor

YScaleFactor

ZEffectiveScaleFactor

ZScaleFactor
	

Modified
Remarks

To create a block reference, first you must create a block definition, or block, by using the Add method. Once created, you can insert an instance of this block into your drawing using the InsertBlock method.

To add or delete items from the block reference, you must first use the Explode method to break it into its component objects. Even though a block reference is broken into its component objects, the block definition still remains in the drawings block symbol table.

** Blocks Collection (ActiveX)

The collection of all blocks in the drawing.

Supported Platforms: Windows only
Class Information

Class Name

    AcadBlocks
Object Inheritance

    Object
       AcadObject
          AcadBlocks

Create Using

    VBA

    Not applicable

Access Via

    VBA

    Document.Blocks

Members

These members are part of this object:

Methods
	

Properties
	

Events

Add

GetExtensionDictionary

GetXData

Item

SetXData
	

Application

Count

Document

Handle

HasExtensionDictionary

ObjectID

ObjectName

OwnerID
	

None
Remarks

To add a new member to the collection, use the Add method. To select a specific block, use the Item method.

There are two special blocks in the collection. One contains the collection of all model space entities, the ModelSpace collection; the other contains all paper space entities, the PaperSpace collection.

Although the Blocks collection inherits a Delete method, you cannot actually delete the collection. Attempting to delete the Blocks collection will result in an error, therefore the Delete method has been removed from the documentation for this collection.

There is no limit to the number of blocks you can create in your drawing. However, there can be only one instance of the Blocks collection. The Blocks collection is predefined for each drawing. You can make multiple references to it by using the Blocks property. Once done with an object, the reference is automatically released.

* Object C
** Circle Object (ActiveX)

A full circle.

Supported Platforms: Windows only
Class Information

Class Name

    AcadCircle
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadCircle

Create Using

    VBA

    ModelSpace.AddCircle
    PaperSpace.AddCircle
    Block.AddCircle

Access Via

    VBA

    ModelSpace.Item
    PaperSpace.Item
    Block.Item
    SelectionSet.Item
    Group.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

Copy

Delete

GetBoundingBox

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

Offset

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update
	

Application

Area

Center

Circumference

Diameter

Document

EntityTransparency

Handle

HasExtensionDictionary

Hyperlinks

Layer

Linetype

LinetypeScale

Lineweight

Material

Normal

ObjectID

ObjectName

OwnerID

PlotStyleName

Radius

Thickness

TrueColor

Visible
	

Modified
Remarks

To create a circle, use the AddCircle method.

** ComparedReference Object (ActiveX)

External reference that represents the drawing being compared to the current drawing.

Supported Platforms: Windows only
Class Information

Class Name

    AcadComparedReference
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadBlockReference
                AcadExternalReference
                   AcadComparedReference

Create Using

    VBA

    Not applicable

Access Via

    VBA

    ModelSpace.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

ConvertToAnonymousBlock

ConvertToStaticBlock

Copy

Delete

Explode

GetAttributes

GetBoundingBox

GetConstantAttributes

GetDynamicBlockProperties

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

ResetBlock

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update
	

Application

Document

EffectiveName

EntityTransparency

Handle

HasAttributes

HasExtensionDictionary

Hyperlinks

InsertionPoint

InsUnits

InsUnitsFactor

IsDynamicBlock

Layer

LayerPropertyOverrides

Linetype

LinetypeScale

Lineweight

Material

Name

Normal

ObjectID

ObjectName

OwnerID

Path

PlotStyleName

Rotation

TrueColor

Visible

XEffectiveScaleFactor

XScaleFactor

YEffectiveScaleFactor

YScaleFactor

ZEffectiveScaleFactor

ZScaleFactor
	

Modified
Remarks

The ComparedReference object inherits its members from the ExternalReference object. You can use ActiveX to query and edit ComparedReference entities in an AutoCAD drawing. However, you cannot create a ComparedReference object with ActiveX.

There is no member property that allows you to identify an ExternalReference object as being of the ComparedReference type; however, you can cast-type an AcadEntity or AcadExternalReference to the AcadComparedReference object type and use error handling to determine if the cast was successful.

The following code samples show how you can use cast-typing to determine if an entity is of type ComparedReference.

VBA:

' Checks to see if an object is of the ComparedReference type
Sub CheckForComparedReference()
  Dim ent As AcadEntity
  Dim comRef As AcadComparedReference
  
  On Error Resume Next

  ' Step through all the objects in model space
  For Each ent In ThisDrawing.ModelSpace
  
    ' Check to see if the object is a Block Reference
    If ent.ObjectName = "AcDbBlockReference" Then
    
      ' Try to cast the entity (Block Reference) to a ComparedReference
      Set comRef = ent
    
      ' If an occurs, then the entity is not a ComparedReference
      If Err <> 0 Then
        MsgBox "Not a Compared Reference"
      Else
        MsgBox "Xref Name: " + comRef.Name + vbLf + "Compared Reference"
      End If
    
      ' Clear the Error object
      Err.Clear
    End If
  Next ent
End Sub

Visual LISP:

(vl-load-com)
(defun c:CheckForComparedReference()
  ;; Checks to see if an object is of the ComparedReference type
  (setq acadObj (vlax-get-acad-object))
  (setq doc (vla-get-ActiveDocument acadObj))

  ;; Step through all the objects in model space
  (vlax-for obj (vla-get-ModelSpace doc)
    ;; Check to see if the object is a Block Reference
    (if (= (vla-get-objectname obj) "AcDbBlockReference")
      (progn
        ;; Transform the VLA-OBJECT to an ENAME
        (setq entName (vlax-vla-object->ename obj))

        ;; Check to see what the value of the IsComparedReference property is of the entity
        (if (vl-catch-all-error-p (vl-catch-all-apply 'getpropertyvalue (list entName "IsComparedReference")))
          ;; If an error occurs, then the entity is not a ComparedReference
          (alert "Not a Compared Reference")
          (alert (strcat "Xref Name: "
                         (vla-get-name obj)
                         "\nCompared Reference"))
        )
      )
    )
  )
)

* Object D
** Database Object (ActiveX)

The contents of an XRef block.

Supported Platforms: Windows only
Class Information

Class Name

    AcadDatabase
Object Inheritance

    Object
       AcadDatabase

Create Using

    VBA

    Not applicable

Access Via

    VBA

    Block.XRefDatabase

Members

These members are part of this object:

Methods
	

Properties
	

Events

CopyObjects

HandleToObject

ObjectIdToObject
	

Blocks

Dictionaries

DimStyles

ElevationModelSpace

ElevationPaperSpace

Groups

Layers

Layouts

Limits

Linetypes

Material

ModelSpace

PaperSpace

PlotConfigurations

Preferences

RegisteredApplications

SectionManager

SummaryInfo

TextStyles

UserCoordinateSystems

Viewports

Views
	

None
Remarks

This object provides access to the contents of an external reference block. It is only available on blocks whose IsXRef property is equal to True.
Release Information

Releases: AutoCAD 2000 and later

    The FileDependencies property was removed in AutoCAD 2018 and AutoCAD 2018-based products.

** DatabasePreferences Object (ActiveX)

An object that specifies the settings for the current AutoCAD drawing.

Supported Platforms: Windows only
Class Information

Class Name

    AcadDatabasePreferences
Object Inheritance

    Object
       AcadDatabasePreferences

Create Using

    VBA

    Not applicable

Access Via

    VBA

    Document.Preferences

Members

These members are part of this object:

Methods
	

Properties
	

Events

None
	

AllowLongSymbolNames

Application

ContourlinesPerSurface

DisplaySilhouette

Lineweight

LineweightDisplay

MaxActiveViewports

ObjectSortByPlotting

ObjectSortByPSOutput

ObjectSortByRedraws

ObjectSortByRegens

ObjectSortBySelection

ObjectSortBySnap

OLELaunch

RenderSmoothness

SegmentPerPolyline

SolidFill

TextFrameDisplay

XRefEdit

XRefLayerVisibility
	

None
Remarks

Database preferences represent options from the Options dialog box that reside in a drawing. Options that reside in the registry can be accessed through the main Preferences object.

The DatabasePreferences object can be referenced from the Preferences property on the Document object.

** DgnUnderlay Object (ActiveX)

A source of DGN underlay content.

Supported Platforms: Windows only
Class Information

Class Name

    AcadDgnUnderlay
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadUnderlay
                AcadDgnUnderlay

Create Using

    VBA

    Not applicable

Access Via

    VBA

    ModelSpace.Item
    PaperSpace.Item
    Block.Item
    SelectionSet.Item
    Group.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

ClipBoundary

Copy

Delete

GetBoundingBox

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update
	

AdjustForBackground

Application

ClippingEnabled

Contrast

Document

EntityTransparency

Fade

File

Handle

HasExtensionDictionary

Height

Hyperlinks

ItemName

Layer

Linetype

LinetypeScale

Lineweight

Material

Monochrome

ObjectID

ObjectName

OwnerID

PlotStyleName

Position

Rotation

ScaleFactor

TrueColor

UnderlayLayerOverrideApplied

UnderlayName

UnderlayVisibility

Visible

Width
	

Modified
Remarks

Underlays are similar to raster images, except that users can snap to the content of an underlay. The AcadDgnUnderlay class supports DGN files as underlays to AutoCAD drawings.

** Dictionaries Collection (ActiveX)

The collection of all dictionaries in the drawing.

Supported Platforms: Windows only
Class Information

Class Name

    AcadDictionaries
Object Inheritance

    Object
       AcadObject
          AcadDictionaries

Create Using

    VBA

    Not applicable

Access Via

    VBA

    Document.Dictionaries

Members

These members are part of this object:

Methods
	

Properties
	

Events

Add

GetExtensionDictionary

GetXData

Item

SetXData
	

Application

Count

Document

Handle

HasExtensionDictionary

ObjectID

ObjectName

OwnerID
	

Modified
Remarks

To add a new member to the collection, use the Add method. To select a specific dictionary, use the Item method.

Although the Dictionaries collection inherits a Delete method, you cannot actually delete the collection. Attempting to delete the Dictionaries collection will result in an error. The Delete method has been removed from the documentation for this collection.

There is no limit to the number of dictionaries that you can create in your drawing. However, there can be only one instance of the Dictionaries collection. The Dictionaries collection is predefined for each drawing. You can make multiple references to it by using the Dictionaries property. Once done with an object, the reference is automatically released.

** Dictionary Object (ActiveX)

A container object for storing and retrieving objects.

Supported Platforms: Windows only
Class Information

Class Name

    AcadDictionary
Object Inheritance

    Object
       AcadObject
          AcadDictionary

Create Using

    VBA

    Dictionaries.Add

Access Via

    VBA

    Dictionaries.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

AddObject

AddXRecord

Delete

GetExtensionDictionary

GetName

GetObject

GetXData

Item

Remove

Rename

Replace

SetXData
	

Application

Count

Document

Handle

HasExtensionDictionary

Name

ObjectID

ObjectName

OwnerID
	

Modified
Remarks

Dictionaries provide a mechanism for storing and retrieving objects with associated string keywords.

The objects in a dictionary may be referenced by their keywords. A dictionary can contain any type of object, including other dictionaries. A dictionary does not perform type checking of entries.

You can create new dictionaries, add entries to an existing dictionary, and get the keyword for a given object or the object for a given keyword. You can change the object that is associated with a given keyword, or rename the keyword for a given object.

This dictionary is similar to a collection in AutoCAD, and is used for custom object implementation. This object does not represent the spell checking dictionary. The spell checking dictionary is specified in the Preferences object.

To add a dictionary to the application, use the Add method.

** Dim3PointAngular Object (ActiveX)

A dimension measuring the angular distance between three points.

Supported Platforms: Windows only
Class Information

Class Name

    AcadDim3PointAngular
Object Inheritance

    Object
       AcadObject
          AcadEntity
             AcadDimension
                AcadDim3PointAngular

Create Using

    VBA

    ModelSpace.AddDim3PointAngular
    PaperSpace.AddDim3PointAngular
    Block.AddDim3PointAngular

Access Via

    VBA

    ModelSpace.Item
    PaperSpace.Item
    Block.Item
    SelectionSet.Item
    Group.Item

Members

These members are part of this object:

Methods
	

Properties
	

Events

ArrayPolar

ArrayRectangular

Copy

Delete

GetBoundingBox

GetExtensionDictionary

GetXData

Highlight

IntersectWith

Mirror

Mirror3D

Move

Rotate

Rotate3D

ScaleEntity

SetXData

TransformBy

Update
	

AngleFormat

AngleVertex

Application

Arrowhead1Block

Arrowhead1Type

Arrowhead2Block

Arrowhead2Type

ArrowheadSize

DecimalSeparator

DimConstrDesc

DimConstrExpression

DimConstrForm

DimConstrName

DimConstrReference

DimConstrValue

DimensionLineColor

DimensionLinetype

DimensionLineWeight

DimLine1Suppress

DimLine2Suppress

DimLineInside

DimTxtDirection

Document

EntityTransparency

ExtensionLineColor

ExtensionLineExtend

ExtensionLineOffset

ExtensionLineWeight

ExtLine1EndPoint

ExtLine1Linetype

ExtLine1Suppress

ExtLine2EndPoint

ExtLine2Linetype

ExtLine2Suppress

ExtLineFixedLen

ExtLineFixedLenSuppress

Fit

ForceLineInside

Handle

HasExtensionDictionary

HorizontalTextPosition

Hyperlinks

Layer

Linetype

LinetypeScale

Lineweight

Material

Measurement

Normal

ObjectID

ObjectName

OwnerID

PlotStyleName

Rotation

ScaleFactor

StyleName

SuppressLeadingZeros

SuppressTrailingZeros

TextColor

TextFill

TextFillColor

TextGap

TextHeight

TextInside

TextInsideAlign

TextMovement

TextOutsideAlign

TextOverride

TextPosition

TextPrecision

TextPrefix

TextRotation

TextStyle

TextSuffix

ToleranceDisplay

ToleranceHeightScale

ToleranceJustification

ToleranceLowerLimit

TolerancePrecision

ToleranceSuppressLeadingZeros

ToleranceSuppressTrailingZeros

ToleranceUpperLimit

TrueColor

VerticalTextPosition

Visible
	

Modified
Remarks

When creating a three point angular dimension, AutoCAD draws the dimension line arc between the extension lines. The extension lines are drawn from the angle endpoints to the intersection of the dimension line arc.


A 3 point angular dimension

AutoCAD uses the location of the dimension line arc to choose between the minor and major angles specified by the angle vertex and extension lines.

To create a three point angular dimension, use the AddDim3PointAngular method.

*  Methods A
** Activate Method (ActiveX)

Makes the specified drawing active.

Supported platforms: Windows only
Signature

VBA:

object.Activate

object

    Type: Document

    The object this method applies to.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_ActivateMethod()
    ' This example creates two new drawings and activates each drawing in turn.
    
    Dim NewDrawing1 As AcadDocument
    Dim Newdrawing2 As AcadDocument
    Set NewDrawing1 = ThisDrawing.Application.Documents.Add("")
    Set Newdrawing2 = ThisDrawing.Application.Documents.Add("")
    
    Dim drawing As AcadDocument
    For Each drawing In ThisDrawing.Application.Documents
        drawing.Activate
        MsgBox "Drawing " & drawing.name & " is active."
    Next drawing
End Sub

Visual LISP:

Not available

** Add Method (ActiveX)

Creates a member object and adds it to the appropriate collection.

Supported platforms: Windows only
Signature - Blocks

VBA:

RetVal = object.Add(InsertionPoint, Name)

object

    Type: Blocks

    The object this method applies to.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying where the Blocks object will be added.
Name

    Access: Input-only

    Type: String

    The name of the block to add to the collection.

Signature - UCSs

VBA:

RetVal = object.Add(Origin, XAxisPoint, YAxisPoint, Name)

object

    Type: UCSs

    The object this method applies to.
Origin

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying where the UCS is to be added.
XAxisPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the positive X axis of the UCS. The XAxisPoint and YAxisPoint together cannot specify the same location as the Origin.
YAxisPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the positive Y axis of the UCS. (The Z axis follows by applying the right-hand rule.)
Name

    Access: Input-only

    Type: String

    The name of the UCS to add to the collection.

Signature - Hyperlinks

VBA:

RetVal = object.Add(Name [, Description] [, NamedLocation])

object

    Type: Hyperlinks

    The object this method applies to.
Name

    Access: Input-only

    Type: String

    The name of the hyperlink to add.
Description

    Access: Input-only; optional

    Type: Variant

    The description of the hyperlink to add.
NamedLocation

    Access: Input-only; optional

    Type: Variant

    A given location, such as a named view in AutoCAD or a bookmark in a word processing program. If you specify a named view to jump to in an AutoCAD drawing, AutoCAD restores that view when the hyperlink is opened.

Signature - PlotConfigurations

VBA:

RetVal = object.Add(Name [, ModelType])

object

    Type: PlotConfigurations

    The object this method applies to.
Name

    Access: Input-only

    Type: String

    The name of the object to add to the collection.
ModelType

    Access: Input-only; optional

    Type: Boolean

        True: The plot configuration applies only to the Model tab.
        False: The plot configuration applies to all layouts.

Signature - All other supported objects

VBA:

RetVal = object.Add(Name)

object

    Type: Dictionaries, DimStyles, Documents, Groups, Layers, Layouts, Linetypes, Materials, PopupMenus, RegisteredApplications, SelectionSets, TextStyles, Toolbars, Views, Viewports

    The object this method applies to.
Name

    Access: Input-only; optional the Documents object

    Type: String

    The name of the object to add to the collection. For the Documents, this name represents the name of the drawing template to use and will accept a URL address or a fully qualified path and file name.

Return Value (RetVal)

Type: Block, Dictionary, DimStyle, Document, Group, Hyperlink, Layer, Layout, Linetype, Material, PlotConfiguration, PopupMenu, RegisteredApplication, SelectionSet, TextStyle, Toolbar, UCS, View, Viewport

The newly added object.
Remarks

Although you can create a linetype and add it to the Linetypes object using this method, it will be created with the default properties only. Because you cannot edit properties of the Linetype object with this release of ActiveX Automation, use the Load method to load existing linetypes into your drawing.

Layers are created with default color and linetype properties. The default color is white, and the default linetype is standard.

Documents: When accessing a secure URL, a dialog box will be posted that prompts the user for the necessary password information. Message boxes may also be displayed if the user has not suppressed this activity in the browser. When downloading a file, AutoCAD creates a temporary file for internal processing. Do not attempt to access this temporary file. Information in this file is deleted at the end of the AutoCAD session.

Group: You should not specify a Name that is excessively long or contains spaces, because these names are not handled well in the Group dialog box and cannot be entered at the command line.
Examples

VBA:

Sub Example_Add()
    ' This example adds a block, dictionary, dimension style,
    ' group, layer, registered application, selection set,
    ' textstyle, view, viewport and UCS using the Add method.
    
    GoSub ADDBLOCK
    GoSub ADDDICTIONARY
    GoSub ADDDIMSTYLE
    GoSub ADDGROUP
    GoSub ADDLAYER
    GoSub ADDREGISTEREDAPP
    GoSub ADDSELECTIONSET
    GoSub ADDTEXTSTYLE
    GoSub ADDVIEW
    GoSub ADDVIEWPORT
    GoSub ADDUCS
	GoSub ADDMATERIAL
    Exit Sub
    
ADDBLOCK:
    ' Create a new block called "New_Block"
    Dim blockObj As AcadBlock
    
    ' Define the block
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    
    ' Add the block to the blocks collection
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, "New_Block")
    MsgBox blockObj.name & " has been added." & vbCrLf & _
            "Origin: " & blockObj.origin(0) & ", " & blockObj.origin(1) _
            & ", " & blockObj.origin(2), , "Add Example"
    Return
    
ADDDICTIONARY:
    ' Create a new dictionary called "New_Dictionary"
    Dim dictObj As AcadDictionary
    
    ' Add the dictionary to the dictionaries collection
    Set dictObj = ThisDrawing.Dictionaries.Add("New_Dictionary")
    MsgBox dictObj.name & " has been added.", , "Add Example"
    Return

ADDDIMSTYLE:
    ' Create a new dimension style called "New_Dimstyle" in current drawing
    Dim DimStyleObj As AcadDimStyle
    
    ' Add the dimstyle to the dimstyles collection
    Set DimStyleObj = ThisDrawing.DimStyles.Add("New_Dimstyle")
    MsgBox DimStyleObj.name & " has been added.", , "Add Example"
    Return
    
ADDGROUP:
    ' Create a new group called "New_Group" in current drawing
    Dim groupObj As AcadGroup
    
    ' Add the group to the groups collection
    Set groupObj = ThisDrawing.Groups.Add("New_Group")
    MsgBox groupObj.name & " has been added.", , "Add Example"
    Return
    
ADDLAYER:
    ' This example creates a new layer called "New_Layer"
    Dim layerObj As AcadLayer
    
    ' Add the layer to the layers collection
    Set layerObj = ThisDrawing.Layers.Add("New_Layer")
    
    ' Make the new layer the active layer for the drawing
    ThisDrawing.ActiveLayer = layerObj
    
    ' Display the status of the new layer
     MsgBox layerObj.name & " has been added." & vbCrLf & _
            "LayerOn Status: " & layerObj.LayerOn & vbCrLf & _
            "Freeze Status: " & layerObj.Freeze & vbCrLf & _
            "Lock Status: " & layerObj.Lock & vbCrLf & _
            "Color: " & layerObj.Color, , "Add Example"
    Return
    
ADDREGISTEREDAPP:
    ' Create a registered application named "New_RegApp" in current drawing
    Dim RegAppObj As AcadRegisteredApplication
    
    ' Add the registered application to the registered applications collection
    Set RegAppObj = ThisDrawing.RegisteredApplications.Add("New_RegApp")
    MsgBox RegAppObj.name & " has been added.", , "Add Example"
    Return

ADDSELECTIONSET:
    ' Create a selectionset named "New_SelectionSet" in current drawing
    Dim ssetObj As AcadSelectionSet
    
    ' Add the selection set to the selection sets collection
    Set ssetObj = ThisDrawing.SelectionSets.Add("New_SelectionSet")
    MsgBox ssetObj.name & " has been added." & vbCrLf & _
           "The number of items in the selection set is " & ssetObj.count _
           , , "Add Example"
    Return
    
ADDTEXTSTYLE:
    ' Create a textstyle named "New_Textstyle" in current drawing
    Dim txtStyleObj As AcadTextStyle
    
    ' Add the textstyle to the textstyles collection
    Set txtStyleObj = ThisDrawing.TextStyles.Add("New_Textstyle")
    MsgBox txtStyleObj.name & " has been added." & vbCrLf & _
           "Height: " & txtStyleObj.height & vbCrLf & _
           "Width: " & txtStyleObj.width, , "Add Example"
    Return
    
ADDVIEW:
    ' Create a view named "New_View" in current drawing
    Dim viewObj As AcadView
    
    ' Add the view to the views collection
    Set viewObj = ThisDrawing.Views.Add("New_View")
    MsgBox viewObj.name & " has been added." & vbCrLf & _
           "Height: " & viewObj.height & vbCrLf & _
           "Width: " & viewObj.width, , "Add Example"
    Return
    
ADDVIEWPORT:
    ' Create a viewport named "New_Viewport" in current drawing
    Dim vportObj As AcadViewport
    
    ' Add the viewport to the viewports collection
    Set vportObj = ThisDrawing.Viewports.Add("New_Viewport")
    MsgBox vportObj.name & " has been added." & vbCrLf & _
           "GridOn Status: " & vportObj.GridOn & vbCrLf & _
           "OrthoOn Status: " & vportObj.OrthoOn & vbCrLf & _
           "SnapOn Status: " & vportObj.SnapOn, , "Add Example"
    Return
    
ADDUCS:
    ' Create a UCS named "New_UCS" in current drawing
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPnt(0 To 2) As Double
    Dim yAxisPnt(0 To 2) As Double
    
    ' Define the UCS
    origin(0) = 4#: origin(1) = 5#: origin(2) = 3#
    xAxisPnt(0) = 5#: xAxisPnt(1) = 5#: xAxisPnt(2) = 3#
    yAxisPnt(0) = 4#: yAxisPnt(1) = 6#: yAxisPnt(2) = 3#
    
    ' Add the UCS to the UserCoordinatesSystems collection
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPnt, yAxisPnt, "New_UCS")
    MsgBox ucsObj.name & " has been added." & vbCrLf & _
            "Origin: " & ucsObj.origin(0) & ", " & ucsObj.origin(1) _
            & ", " & ucsObj.origin(2), , "Add Example"
    Return

ADDMATERIAL:    
	Dim oMaterial As AcadMaterial
    Dim oMaterials As AcadMaterials
    Set oMaterial = ThisDrawing.Materials.Add("TestMaterial")
    oMaterial.Description = "This example demonstrates how to add a material to a database."
    ThisDrawing.ActiveMaterial = oMaterial
        ' Display the status of the new layer
    MsgBox oMaterial.Name & " has been added." & vbCrLf & _
            "Name: " & oMaterial.Name & vbCrLf & vbCrLf & _
            "Description: " & vbCrLf & vbCrLf & _
            oMaterial.Description
    Return
	
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Add()
    ;; This example adds a block, dictionary, dimension style,
    ;; group, layer, registered application, selection set,
    ;; textstyle, view, viewport and UCS using the Add method.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
;; ADDBLOCK:
    ;; Create a new block called "New_Block"

    ;; Define the insertion point
    (setq insertionPnt (vlax-3d-point 0 0 0))
    
    ;; Add the block to the blocks collection
    (setq blocks (vla-get-Blocks doc))
    (setq blockObj (vla-Add blocks insertionPnt "New_Block"))
    (alert (strcat (vla-get-Name blockObj) " has been added."
                    "\nOrigin: " (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin blockObj)) 0) 2 2) ", "
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin blockObj)) 1) 2 2) ", "
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin blockObj)) 2) 2 2)
           )
    )
    
;; ADDDICTIONARY:
    ;; Create a new dictionary called "New_Dictionary"

    ;; Add the dictionary to the dictionaries collection
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Add dictionaries "New_Dictionary"))
    (alert (strcat (vla-get-Name dictObj) " has been added."))

;; ADDDIMSTYLE:
    ;; Create a new dimension style called "New_Dimstyle" in current drawing
    
    ;; Add the dimstyle to the dimstyles collection
    (setq dimStyles (vla-get-DimStyles doc))
    (setq dimStyleObj (vla-Add dimStyles "New_Dimstyle"))
    (alert (strcat (vla-get-Name dimStyleObj) " has been added."))
    
;; ADDGROUP:
    ;; Create a new group called "New_Group" in current drawing
    
    ;; Add the group to the groups collection
    (setq groups (vla-get-Groups doc))
    (setq groupObj (vla-Add dimStyles "New_Group"))
    (alert (strcat (vla-get-Name groupObj) " has been added."))
    
;; ADDLAYER:
    ;; This example creates a new layer called "New_Layer"
    
    ;; Add the layer to the layers collection
    (setq layers (vla-get-Layers doc))
    (setq layerObj (vla-Add layers "New_Layer"))
    
    ;; Make the new layer the active layer for the drawing
    (vla-put-ActiveLayer doc layerObj)
    
    ;; Display the status of the new layer
    (alert (strcat (vla-get-Name layerObj) " has been added."
                   "\nLayerOn Status: " (if (= (vla-get-LayerOn layerObj) :vlax-true) "1" "0")
                   "\nFreeze Status: " (if (= (vla-get-Freeze layerObj) :vlax-true) "1" "0")
                   "\nLock Status: "  (if (= (vla-get-Lock layerObj) :vlax-true) "1" "0")
                   "\nColor: " (itoa (vla-get-Color layerObj))
           )
    )
    
;; ADDREGISTEREDAPP:
    ;; Create a registered application named "New_RegApp" in current drawing
    
    ;; Add the registered application to the registered applications collection
    (setq regApps (vla-get-RegisteredApplications doc))
    (setq regAppObj (vla-Add regApps "New_RegApp"))
    (alert (strcat (vla-get-Name regAppObj) " has been added."))

;; ADDSELECTIONSET:
    ;; Create a selectionset named "New_SelectionSet" in current drawing
    
    ;; Add the selection set to the selection sets collection
    (setq ssets (vla-get-SelectionSets doc))
    (setq ssetObj (vla-Add ssets "New_SelectionSet"))
    (alert (strcat (vla-get-Name ssetObj) " has been added."
                    "\nThe number of items in the selection set is " (itoa (vla-get-Count ssetObj))
           )
    )
    
;; ADDTEXTSTYLE:
    ;; Create a textstyle named "New_Textstyle" in current drawing
    
    ;; Add the textstyle to the textstyles collection
    (setq textStyles (vla-get-TextStyles doc))
    (setq txtStyleObj (vla-Add textStyles "New_Textstyle"))
    (alert (strcat (vla-get-Name txtStyleObj) " has been added."
                    "\nHeight: " (rtos (vla-get-Height txtStyleObj) 2 2)
                    "\nWidth: " (rtos (vla-get-Width txtStyleObj) 2 2)
           )
    )
    
;; ADDVIEW:
    ;; Create a view named "New_View" in current drawing
    
    ;; Add the view to the views collection
    (setq views (vla-get-Views doc))
    (setq viewObj (vla-Add views "New_View"))
    (alert (strcat (vla-get-Name viewObj) " has been added."
                    "\nHeight: " (rtos (vla-get-Height viewObj) 2 2)
                    "\nWidth: " (rtos (vla-get-Width viewObj) 2 2)
           )
    )
    
;; ADDVIEWPORT:
    ;; Create a viewport named "New_Viewport" in current drawing
    
    ;; Add the viewport to the viewports collection
    (setq viewports (vla-get-Viewports doc))
    (setq vportObj (vla-Add viewports "New_Viewport"))
    (alert (strcat (vla-get-Name vportObj) " has been added."
                    "\nGridOn Status: " (if (= (vla-get-GridOn vportObj) :vlax-true) "1" "0")
                    "\nOrthoOn Status: " (if (= (vla-get-OrthoOn vportObj) :vlax-true) "1" "0")
                    "\nSnapOn Status: " (if (= (vla-get-SnapOn vportObj) :vlax-true) "1" "0")
           )
    )  
    
;; ADDUCS:
    ;; Create a UCS named "New_UCS" in current drawing
  
    ;; Define the UCS
    (setq origin (vlax-3d-point 4 5 3)
          xAxisPnt (vlax-3d-point 5 5 3)
          yAxisPnt (vlax-3d-point 4 6 4))
  
    ;; Add the UCS to the UserCoordinatesSystems collection
    (setq UCSs (vla-get-UserCoordinateSystems doc))
    (setq ucsObj (vla-Add UCSs origin xAxisPnt yAxisPnt "New_UCS"))
    (alert (strcat (vla-get-Name ucsObj) " has been added."
                    "\nOrigin: " (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 0) 2 2) ", "
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 1) 2 2) ", "
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 2) 2 2)
           )
    )  

;; ADDMATERIAL:
    ;; Creates a material named "New_UCS" in the current drawing  
    (setq oMaterials (vla-get-Materials doc))
    (setq oMaterial (vla-Add oMaterials "TestMaterial"))
    (vla-put-Description oMaterial "This example demonstrates how to add a material to a database.")
    (vla-put-ActiveMaterial doc oMaterial)

    ;; Display information about the material
    (alert (strcat (vla-get-Name oMaterial) " has been added."
                    "\nName: " (vla-get-Name oMaterial)
                    "\nDescription: " (vla-get-Description oMaterial)
           )
    )
)

** Add3DFace Method (ActiveX)

Creates a 3DFace object given four vertices.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.Add3DFace(Point1, Point2, Point3 [, Point4])

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Point1

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the 3DFace object.
Point2

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the 3DFace object.
Point3

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the 3DFace object.
Point4

    Access: Input-only; optional

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the 3DFace object. If omitted, this point will default to the coordinates of Point3 in order to create a three-sided face.

Return Value (RetVal)

Type: 3DFace

The newly created 3DFace object.
Remarks

To create a three-sided face, omit the last point. Use the SetInvisibleEdge method to set the visibility of an edge.

Points must be entered sequentially in either a clockwise or counterclockwise direction to create a 3DFace object. You can create multiple adjacent faces by specifying the first two points of an additional face exactly as the last two points of the previous face.


Examples

VBA:

Sub Example_Add3DFace()
    ' This example creates a 3D face in model space.

    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim point3(0 To 2) As Double
    Dim point4(0 To 2) As Double
    
    ' Define the four coordinates of the face
    point1(0) = 0#: point1(1) = 0#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 0#: point2(2) = 1#
    point3(0) = 5#: point3(1) = 5#: point3(2) = 1#
    point4(0) = 1#: point4(1) = 10#: point4(2) = 0#
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Add3DFace()
    ;; This example creates a 3D face in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 5 0 1)
          point3 (vlax-3d-point 5 10 1)
          point4 (vlax-3d-point 0 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
)

** Add3DMesh Method (ActiveX)

Creates a free-form 3D mesh, given the number of points in the M and N directions and the coordinates of the points in the M and N directions.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.Add3Dmesh(M, N, PointsMatrix)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
M, N

    Access: Input-only

    Type: Integer

    Dimensions of the point array. The size of the mesh in both the M and N directions is limited to between 2 and 256.
PointsMatrix

    Access: Input-only

    Type: Variant (array of doubles)

    M x N matrix of 3D WCS coordinates. Defining vertices begins with vertex (0,0). Supplying the coordinate locations for each vertex in row M must be done before specifying vertices in row M + 1.

Return Value (RetVal)

Type: PolygonMesh

A PolygonMesh as the newly created 3DMesh object.
Remarks

Vertices may be any distance from each other.


A PolygonMesh is always open in both M and N directions. A mesh can be closed after creation by using the MClose and NClose properties on the PolygonMesh object.

A PolygonMesh is always created as a simple mesh. A mesh can be smoothed after creation by using the Type property.
Examples

VBA:

Sub Example_Add3DMesh()
    ' This example creates a 4 X 4 polygonmesh in model space.
    Dim meshObj As AcadPolygonMesh
    Dim mSize, nSize, count As Integer
    Dim points(0 To 47) As Double
    
    ' Create the matrix of points
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 2: points(4) = 0: points(5) = 1
    points(6) = 4: points(7) = 0: points(8) = 0
    points(9) = 6: points(10) = 0: points(11) = 1
    points(12) = 0: points(13) = 2: points(14) = 0
    points(15) = 2: points(16) = 2: points(17) = 1
    points(18) = 4: points(19) = 2: points(20) = 0
    points(21) = 6: points(22) = 2: points(23) = 1
    points(24) = 0: points(25) = 4: points(26) = 0
    points(27) = 2: points(28) = 4: points(29) = 1
    points(30) = 4: points(31) = 4: points(32) = 0
    points(33) = 6: points(34) = 4: points(35) = 0
    points(36) = 0: points(37) = 6: points(38) = 0
    points(39) = 2: points(40) = 6: points(41) = 1
    points(42) = 4: points(43) = 6: points(44) = 0
    points(45) = 6: points(46) = 6: points(47) = 0
    
    mSize = 4: nSize = 4
    
    ' creates a 3Dmesh in model space
    Set meshObj = ThisDrawing.ModelSpace.Add3DMesh(mSize, nSize, points)
    
    ' Change the viewing direction of the viewport to better see the polygonmesh
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Add3DMesh()
    ;; This example creates a 4 X 4 polygonmesh in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the matrix of points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 47)))  
    (vlax-safearray-fill points '(0 0 0
                                  2 0 1
                                  4 0 0
                                  6 0 1
                                  0 2 0
                                  2 2 1
                                  4 2 0
                                  6 2 1
                                  0 4 0
                                  2 4 1
                                  4 4 0
                                  6 4 0
                                  0 6 0
                                  2 6 1
                                  4 6 0
                                  6 6 0
                                 )
    )
    (setq mSize 4
	         nSize 4)
    
    ;; creates a 3Dmesh in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq meshObj (vla-Add3DMesh modelSpace mSize nSize points))
    
    ;; Change the viewing direction of the viewport to better see the polygonmesh
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** Add3DPoly Method (ActiveX)

Creates a 3D polyline from the given array of coordinates.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.Add3Dpoly(PointsArray)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
PointsArray

    Access: Input-only

    Type: Variant (array of doubles)

    An array of 3D WCS coordinates. The polyline will be created according to the order of the coordinates in the array. The number of elements in the array must be a multiple of three. (Three elements define a single coordinate.)

Return Value (RetVal)

Type: 3DPolyline

The newly created 3DPolyline object.
Remarks

To close the polyline, use the Closed property on the 3DPolyline object.
Examples

VBA:

Sub Example_Add3DPoly()
    
    Dim polyObj As Acad3DPolyline
    Dim points(0 To 8) As Double
    
    ' Create the array of points
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 10: points(4) = 10: points(5) = 10
    points(6) = 30: points(7) = 20: points(8) = 30
    
    ' Create a 3DPolyline in model space
    Set polyObj = ThisDrawing.ModelSpace.Add3DPoly(points)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Add3DPoly()
    ;; This example creates a 3 segment 3D polyline in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the array of points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 0 0
                                  10 10 10
                                  30 20 30
                                 )
    )  
    
    ;; Create a 3D polyline in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq polyObj (vla-Add3DPoly modelSpace points))
    (vla-ZoomAll acadObj)
)

** AddArc Method (ActiveX)

Creates an arc given the center, radius, start angle, and end angle of the arc.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddArc(Center, Radius, StartAngle, EndAngle)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center point of the arc.
Radius

    Access: Input-only

    Type: Double

    The radius of the arc.
StartAngle, EndAngle

    Access: Input-only

    Type: Double

    The start and end angles, in radians, defining the arc. A start angle greater than an end angle defines a counterclockwise arc.

Return Value (RetVal)

Type: Arc

The newly created Arc object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddArc()
    ' This example creates an arc in model space.
   
    Dim arcObj As AcadArc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngleInDegree As Double
    Dim endAngleInDegree As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    startAngleInDegree = 10#
    endAngleInDegree = 230#
    
    ' Convert the angles in degrees to angles in radians
    Dim startAngleInRadian As Double
    Dim endAngleInRadian As Double
    startAngleInRadian = startAngleInDegree * 3.141592 / 180#
    endAngleInRadian = endAngleInDegree * 3.141592 / 180#
    
    ' Create the arc object in model space
    Set arcObj = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngleInRadian, endAngleInRadian)
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddArc()
    ;; This example creates an arc in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5
          startAngleInDegree 10
          endAngleInDegree 230)
    
    ;; Convert the angles in degrees to angles in radians
    (setq startAngleInRadian (/ (* startAngleInDegree 3.141592) 180))
    (setq endAngleInRadian (/ (* endAngleInDegree 3.141592) 180))
    
    ;; Create the arc object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq arcObj (vla-AddArc modelSpace centerPoint radius startAngleInRadian endAngleInRadian))
    (vla-ZoomAll acadObj)
)

** AddAttribute Method (ActiveX)

Creates an attribute definition at the given location with the specified properties.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddAttribute(Height, Mode, Prompt, InsertionPoint, Tag, Value)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Height

    Access: Input-only

    Type: Double

    The text height in the current drawing unit.
Mode

    Access: Input-only

    Type: AcAttributeMode enum

    Any combination of constants can be used by adding them together:

        acAttributeModeInvisible: Specifies that attribute values will not appear when you insert the block. The AutoCAD ATTDISP command overrides the Invisible mode.
        acAttributeModeConstant: Gives attributes a fixed value for block insertions.
        acAttributeModeVerify: Prompts to verify the attribute value is correct when the block is inserted.
        acAttributeModeLockPosition: Locks the position of the attributes.
        acAttributeModeMultipleLine: Allows the attributes to carry-over onto multiple lines. Prompts you to verify that the attribute value is correct when you insert the block.
        acAttributeModePreset: Sets the attribute to its default value when you insert a block containing a current attribute. The value cannot be edited in this mode.

Prompt

    Access: Input-only

    Type: String

    This string appears when a block containing this attribute is inserted. The default for this string is the Tag string. Inputting acAttributeModeConstant for the Mode parameter disables the prompt.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the location for the attribute.
Tag

    Access: Input-only

    Type: String

    This non-null string identifies each occurrence of the attribute. Enter any characters except spaces or exclamation points. AutoCAD changes lowercase letters to uppercase.
Value

    Access: Input-only

    Type: String

    This non-null string is the default attribute value.

Return Value (RetVal)

Type: Attribute

The newly created Attribute object.
Remarks

An attribute definition is associated to the block for which it is created. Attribute definitions created in model space or paper space are not considered to be attached to any given block.

The AutoCAD AFLAGS system variable stores the mode setting. You can query this value using the GetVariable method, or set it using the SetVariable method.
Examples

VBA:

Sub Example_AddAttribute()
    ' This example creates an attribute definition in model space.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = "New Prompt"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = "NEW_TAG"
    value = "New Value"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddAttribute()
    ;; This example creates an attribute definition in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt "New Prompt"
          attTag "NEW_TAG"
          attValue "New Value")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
)

** AddBox Method (ActiveX)

Creates a 3D solid box with edges parallel to the axes of the WCS.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddBox(Origin, Length, Width, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Origin

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the origin of the box. This coordinate represents the center of the bounding box for the object, not a corner.
Length

    Access: Input-only

    Type: Double

    The length of the box. Must be a positive number.
Width

    Access: Input-only

    Type: Double

    The width of the box. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The height of the box. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created box.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddBox()
    ' This example creates a box in model space.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddBox()
    ;; This example creates a box in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddCircle Method (ActiveX)

Creates a circle given a center point and radius.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddCircle(Center, Radius)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the circle's center.
Radius

    Access: Input-only

    Type: Double

    The radius of the circle. Must be a positive number.

Return Value (RetVal)

Type: Circle

The newly created Circle object.
Remarks

This circle is created on the XY plane of the WCS.
Examples

VBA:

Sub Example_AddCircle()
    ' This example creates a circle in model space.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddCircle()
    ;; This example creates a circle in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
)

** AddCone Method (ActiveX)

Creates a 3D solid cone with the base on the XY plane of the WCS.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddCone(Center, BaseRadius, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the bounding box.
BaseRadius

    Access: Input-only

    Type: Double

    The radius of the cone base. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The height of the cone. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created cone.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddCone()
    ' This example creates a cone in model space.
   
    Dim coneObj As Acad3DSolid
    Dim radius As Double
    Dim center(0 To 2) As Double
    Dim height As Double
    
    ' Define the cone
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    radius = 5#
    height = 20#
    
    ' Create the Cone (3DSolid) object in model space
    Set coneObj = ThisDrawing.ModelSpace.AddCone(center, radius, height)
    
    ' Change the viewing direction of the viewport to better see the cone
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddCone()
    ;; This example creates a cone in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the cone
    (setq center (vlax-3d-point 0 0 0)
          coneRadius 5
	         coneHeight 20)
    
    ;; Create the Cone (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq coneObj (vla-AddCone modelSpace center coneRadius coneHeight))
  
    ;; Change the viewing direction of the viewport to better see the cone
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddCustomInfo Method (ActiveX)

Adds a custom property field at the end of the existing list of fields.

Supported platforms: Windows only
Signature

VBA:

object.AddCustomInfo key, Value

object

    Type: SummaryInfo

    The object this method applies to.
key

    Access: Input-only

    Type: String

    The name of the custom property.
Value

    Access: Input-only

    Type: String

    The value of the custom property.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddCustomInfo()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = "John Doe"
    ThisDrawing.SummaryInfo.Comments = "Includes all ten levels of Building Five"
    ThisDrawing.SummaryInfo.HyperlinkBase = "https://www.autodesk.com"
    ThisDrawing.SummaryInfo.Keywords = "Building Complex"
    ThisDrawing.SummaryInfo.LastSavedBy = "JD"
    ThisDrawing.SummaryInfo.RevisionNumber = "4"
    ThisDrawing.SummaryInfo.Subject = "Plan for Building Five"
    ThisDrawing.SummaryInfo.Title = "Building Five"

    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox "The standard drawing properties are " & vbCrLf & _
           "Author = " & Author & vbCrLf & _
           "Comments = " & Comments & vbCrLf & _
           "HyperlinkBase = " & HLB & vbCrLf & _
           "Keywords = " & KW & vbCrLf & _
           "LastSavedBy = " & LSB & vbCrLf & _
           "RevisionNumber = " & RN & vbCrLf & _
           "Subject = " & Subject & vbCrLf & _
           "Title = " & Title & vbCrLf

    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String

    CustomPropertyBranch = "Branch"
    PropertyBranchValue = "Main"
    CustomPropertyZone = "Zone"
    PropertyZoneValue = "Industrial"

    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If

    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, "Satellite"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If

    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1

    MsgBox "The custom drawing properties are " & vbCrLf & _
           "First property name = " & Key0 & vbCrLf & _
           "First property value = " & Value0 & vbCrLf & _
           "Second property name = " & Key1 & vbCrLf & _
           "Second property value = " & Value1 & vbCrLf
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddCustomInfo()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo "John Doe")
    (vla-put-Comments summaryInfo "Includes all ten levels of Building Five")
    (vla-put-HyperlinkBase summaryInfo "https://www.autodesk.com")
    (vla-put-Keywords summaryInfo "Building Complex")
    (vla-put-LastSavedBy summaryInfo "JD")
    (vla-put-RevisionNumber summaryInfo "4")
    (vla-put-Subject summaryInfo "Plan for Building Five")
    (vla-put-Title summaryInfo "Building Five")

    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat "The standard drawing properties are "
                   "\nAuthor = " author
                   "\nComments = " comments
                   "\nHyperlinkBase = " HLB
                   "\nKeywords = " KW
                   "\nLastSavedBy = " LSB
                   "\nRevisionNumber = " RN
                   "\nSubject = " Subject
                   "\nTitle = " Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch "Branch")
    (setq PropertyBranchValue "Main")
    (setq CustomPropertyZone "Zone")
    (setq PropertyZoneValue "Industrial")

    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )

    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch "Satellite")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )

    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat "The custom drawing properties are "
                   "\nFirst property name = " Key0
                   "\nFirst property value = " Value0
                   "\nSecond property name = " Key1
                   "\nSecond property value = " Value1
           )
    )
)

** AddCustomObject Method (ActiveX)

Creates a custom object.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddCustomObject(ClassName)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
ClassName

    Access: Input-only

    Type: String

    The rxClassName must be defined in an ObjectARX® application (ObjectARX DLL) or the method will fail.

Return Value (RetVal)

Type: Custom object

The newly created Custom object.
Remarks

The ObjectARX DLL defining the rxClassName custom class must be loaded. Use the LoadARX method on the Application object to explicitly load the ObjectARX file.
Examples

VBA:

Sub Example_AddCustomObject()
    ' This example adds a custom object to model space.
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX Application.
    ThisDrawing.Application.LoadArx "MyARXApp.dll"
    
    ' Once the application has been loaded successfully,
    ' add the custom object to model space.
    Dim customObj As AcadObject
    Set customObj = ThisDrawing.ModelSpace.AddCustomObject("MyNewObject")
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddCustomObject()
    ;; This example adds a custom object to model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX Application.
    (vla-LoadArx acadObj "MyARXApp.dll")
    
    ;; Once the application has been loaded successfully,
    ;; add the custom object to model space.
    (setq customObj (vla-AddCustomObject (vla-get-ModelSpace doc) "MyNewObject"))
)

** AddCylinder Method (ActiveX)

Creates a 3D solid cylinder whose base is on the XY plane of the WCS.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddCylinder(Center, Radius, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    A 3D WCS coordinates specifying the center of the bounding box.
Radius

    Access: Input-only

    Type: Double

    The cylinder radius. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The cylinder height. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created cylinder.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddCylinder()
    ' This example creates a cylinder in model space.
    
    Dim cylinderObj As Acad3DSolid
    Dim radius As Double
    Dim center(0 To 2) As Double
    Dim height As Double
    
    ' Define the cylinder
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    radius = 5#
    height = 20#
    
    ' Create the Cylinder (3DSolid) object in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddCylinder(center, radius, height)
    
    ' Change the viewing direction of the viewport to better see the cylinder
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddCylinder()
    ;; This example creates a cylinder in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the cylinder
    (setq center (vlax-3d-point 0 0 0)
          cylRadius 5
	         cylHeight 20)
    
    ;; Create the Cylinder (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq cylinderObj (vla-AddCylinder modelSpace center cylRadius cylHeight))
    
    ;; Change the viewing direction of the viewport to better see the cylinder
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddDim3PointAngular Method (ActiveX)

Creates an angular dimension using 3 points.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDim3PointAngular(AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
AngleVertex

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the vertex of the angle to be measured.
FirstEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point through which the first extension line passes.
SecondEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point through which the second extension line passes.
TextPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point at which the dimension text is to be displayed.

Return Value (RetVal)

Type: Dim3PointAngular

The newly created angular dimension.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddDim3PointAngular()
    ' This example creates a Dim3PointAngular object in model space
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 2: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0

    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    
    MsgBox "A Dim3PointAngular object has been created."
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDim3PointAngular()
    ;; This example creates a Dim3PointAngular object in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 2 4 0)
          TextPoint (vlax-3d-point 6 6 0))

    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)

    (alert "A Dim3PointAngular object has been created.")
)

** AddDimAligned Method (ActiveX)

Creates an aligned dimension object.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimAligned(ExtLine1Point, ExtLine2Point, TextPosition)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
ExtLine1Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the first endpoint of the extension line.
ExtLine2Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the second endpoint of the extension line.
TextPosition

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the text position.

Return Value (RetVal)

Type: DimAligned

The newly created aligned dimension.
Remarks

In aligned dimensions, the dimension line is parallel to the extension line origins. The extension line origins are specified using the ExtLine1Point and ExtLine2Point properties.


Examples

VBA:

Sub Example_AddDimAligned()
    ' This example creates an aligned dimension in model space.

    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 5#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 5#: point2(2) = 0#
    location(0) = 5#: location(1) = 7#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimAligned()
    ;; This example creates an aligned dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
)

** AddDimAngular Method (ActiveX)

Creates an angular dimension for an arc, two lines, or a circle.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimAngular(AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
AngleVertex

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the circle or arc, or the common vertex between the two dimensioned lines.
FirstEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point through which the first extension line passes.
SecondEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point through which the second extension line passes.
TextPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point at which the dimension text is to be displayed.

Return Value (RetVal)

Type: DimAngular

The newly created angular dimension.
Remarks


The AngleVertex is the center of the circle or arc, or the common vertex between the two lines being dimensioned. FirstEndPoint and SecondEndPoint are the points through which the two extension lines pass.

The AngleVertex can be the same as one of the angle endpoints. If you need extension lines, they will be added automatically. The endpoints provided are used as origin points for the extension lines.
Examples

VBA:

Sub Example_AddDimAngular()
    ' This example creates an angular dimension in model space.
    
    Dim dimObj As AcadDimAngular
    Dim angVert(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the dimension
    angVert(0) = 0#: angVert(1) = 5#: angVert(2) = 0#
    FirstPoint(0) = 1#: FirstPoint(1) = 7#: FirstPoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    TextPoint(0) = 3#: TextPoint(1) = 5#: TextPoint(2) = 0#
    
    ' Create the angular dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAngular(angVert, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimAngular()
    ;; This example creates an angular dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq angVert (vlax-3d-point 0 5 0)
          FirstPoint (vlax-3d-point 1 7 0)
          SecondPoint (vlax-3d-point 1 3 0)
          TextPoint (vlax-3d-point 3 5 0))
  
    ;; Create the angular dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAngular modelSpace angVert FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
)

** AddDimArc Method (ActiveX)

Creates an arc length dimension for an arc.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimArc(ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
ArcCenter

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the arc.
FirstEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point through which the first extension line passes.
SecondEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point through which the second extension line passes.
ArcPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the arc.

Return Value (RetVal)

Type: DimArcLength

The newly created arc length dimension.
Remarks


The ArcCenter is the center of the arc being dimensioned. FirstEndPoint and SecondEndPoint are the points through which the two extension lines pass.
Examples

VBA:

Sub Example_AddDimArc()
    Dim PI As Double: PI = 3.141592
    Dim oMS As AcadModelSpace
    Set oMS = ThisDrawing.ModelSpace

    Dim ptCenter(2) As Double
    Dim oA As AcadArc
    Set oA = oMS.AddArc(ptCenter, 10, PI / 3, PI * 3 / 4)
    
    Dim ptArcPoint(2) As Double
    ptArcPoint(0) = 0: ptArcPoint(1) = 15
    
    Dim oAcadDimArcLength As AcadDimArcLength
    Set oAcadDimArcLength = oMS.AddDimArc(oA.Center, oA.startPoint, oA.endPoint, ptArcPoint)
    
    Update
    ZoomExtents
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimArc()
    ;; This example creates an arc and arc length dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq modelSpace (vla-get-ModelSpace doc))

    ;; Define the arc
    (setq center (vlax-3d-point 0 0 0))

    ;; Create the arc in model space
    (setq arc (vla-AddArc modelSpace center 10 (/ PI 3) (/ (* PI 3) 4)))
    
    ;; Define the arc length dimension
    (setq arcPoint (vlax-3d-point 0 15 0)
          startPoint (vla-get-StartPoint arc)
          endPoint (vla-get-EndPoint arc))
  
    ;; Create the arc length dimension in model space
    (setq dimArcLength (vla-AddDimArc modelSpace center startPoint endPoint arcPoint))
    (vla-ZoomExtents acadObj)
)

** AddDimDiametric Method (ActiveX)

Creates a diametric dimension for a circle or arc given the two points on the diameter and the length of the leader line.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimDiametric(ChordPoint, FarChordPoint, LeaderLength)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
ChordPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the first diameter point on the circle or arc.
FarChordPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the second diameter point on the circle or arc.
LeaderLength

    Access: Input-only

    Type: Double

    The positive value representing the length from the ChordPoint to the annotation text or dogleg.

Return Value (RetVal)

Type: DimDiametric

The newly created diameter dimension object.
Remarks

Different types of diameter dimensions are created depending on the size of the circle or arc, the length of the leader line, and the values of the AutoCAD DIMUPT, DIMTOFL, DIMFIT, DIMTIH, DIMTOH, DIMJUST, and DIMTAD system variables.

For horizontal dimension text, if the angle of the dimension line is more than 15 degrees from horizontal, and is outside the circle or arc, AutoCAD draws a hook line, also called a landing or dogleg. The hook line is one arrowhead long, and is placed next to the dimension text, as shown in the first two illustrations.


This function uses the LeaderLength parameter as the distance from the ChordPoint to the point where the dimension will do a horizontal dogleg to the annotation text (or stop if no dogleg is necessary).

The LeaderLength setting will only be used during the creation of the dimension (and even then only if the dimension is set to use the default text position value). After the dimension has been closed for the first time, changing the LeaderLength value will not affect how the dimension displays, but the new setting will be stored and will show up in DXF, LISP, and ARX.
Examples

VBA:

Sub Example_AddDimDiametric()
    ' This example creates a diametric dimension in model space.
    
    Dim dimObj As AcadDimDiametric
    Dim chordPoint(0 To 2) As Double
    Dim farChordPoint(0 To 2) As Double
    Dim leaderLength As Double
    
    ' Define the dimension
    chordPoint(0) = 5#: chordPoint(1) = 3#: chordPoint(2) = 0#
    farChordPoint(0) = 5#: farChordPoint(1) = 5#: farChordPoint(2) = 0#
    leaderLength = 1#
    
    ' Create the diametric dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimDiametric(chordPoint, farChordPoint, leaderLength)
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimDiametric()
    ;; This example creates a diametric dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq chordPoint (vlax-3d-point 5 3 0)
          farChordPoint (vlax-3d-point 5 5 0)
          leaderLength 1)
    
    ;; Create the diametric dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimDiametric modelSpace chordPoint farChordPoint leaderLength))
    (vla-ZoomAll acadObj)
)

** AddDimOrdinate Method (ActiveX)

Creates an ordinate dimension given the definition point and the leader endpoint.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimOrdinate(DefinitionPoint, LeaderEndPoint, UseXAxis)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
DefinitionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point to be dimensioned.
LeaderEndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the endpoint of the leader. This will be the location at which the dimension text is displayed.
UseXAxis

    Access: Input-only

    Type: Integer

        True: Creates an ordinate dimension displaying the X axis value.
        False: Creates an ordinate dimension displaying the Y axis value.

Return Value (RetVal)

Type: DimOrdinate

The newly created ordinate dimension object.
Remarks

Ordinate dimensions display the X or Y coordinate of an object along with a simple leader line. The absolute value of the coordinate is used according to the prevailing standards for ordinate dimensions.

An ordinate dimension measuring the absolute X position of a point tangent to a circle
Examples

VBA:

Sub Example_AddDimOrdinate()
    ' This example creates an ordinate dimension in model space.
    
    Dim dimObj As AcadDimOrdinate
    Dim definingPoint(0 To 2) As Double
    Dim leaderEndPoint(0 To 2) As Double
    Dim useXAxis As Long
    
    ' Define the dimension
    definingPoint(0) = 5#: definingPoint(1) = 5#: definingPoint(2) = 0#
    leaderEndPoint(0) = 10#: leaderEndPoint(1) = 5#: leaderEndPoint(2) = 0#
    useXAxis = 5#
    
    ' Create an ordinate dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimOrdinate(definingPoint, leaderEndPoint, useXAxis)
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimOrdinate()
    ;; This example creates an ordinate dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq definingPoint (vlax-3d-point 5 5 0)
          leaderEndPoint (vlax-3d-point 10 5 0)
          useXAxis 5)
    
    ;; Create an ordinate dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimOrdinate modelSpace definingPoint leaderEndPoint useXAxis))
    (vla-ZoomAll acadObj)
)

** AddDimRadial Method (ActiveX)

Creates a radial dimension for the selected object at the given location.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimRadial(Center, ChordPoint, LeaderLength)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center point on the circle or arc.
ChordPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the point on the circle or arc to attach the leader line.
LeaderLength

    Access: Input-only

    Type: Double

    The positive value representing the length from the ChordPoint to the annotation text or dogleg.

Return Value (RetVal)

Type: DimRadial

The newly created radius dimension object.
Remarks

Different types of radial dimensions are created depending on the size of the circle or arc, the TextPosition property and the values in the AutoCAD DIMUPT, DIMTOFL, DIMFIT, DIMTIH, DIMTOH, DIMJUST, and DIMTAD dimension system variables. (System variables can be queried or set using the GetVariable and SetVariable methods.)

For horizontal dimension text, if the angle of the dimension line is more than 15 degrees from horizontal, and is outside the circle or arc, AutoCAD draws a hook line, also called a landing or dogleg. The hook line is one arrowhead long, and is placed next to the dimension text, as shown in the first two illustrations.


This method uses length as the distance from the ChordPoint out to where the dimension will do a horizontal dogleg to the annotation text (or stop if no dogleg is necessary).

The LeaderLength setting will only be used during the creation of the dimension (and even then only if the dimension is set to use the default text position value). After the dimension has been closed for the first time, changing the LeaderLength value will not affect how the dimension displays, but the new setting will be stored and will show up in DXF, LISP, and ARX.
Examples

VBA:

Sub Example_AddDimRadial()
    ' This example creates a radial dimension in model space.
    
    Dim dimObj As AcadDimRadial
    Dim center(0 To 2) As Double
    Dim chordPoint(0 To 2) As Double
    Dim leaderLen As Integer
    
    ' Define the dimension
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    chordPoint(0) = 5#: chordPoint(1) = 5#: chordPoint(2) = 0#
    leaderLen = 5
    
    ' Create the radial dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimRadial(center, chordPoint, leaderLen)
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimRadial()
    ;; This example creates a radial dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq center (vlax-3d-point 0 0 0)
          chordPoint (vlax-3d-point 5 5 0)
          leaderLen 5)
    
    ;; Create the radial dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimRadial modelSpace center chordPoint leaderLen))
    (vla-ZoomAll acadObj)
)

** AddDimRadialLarge Method (ActiveX)

Creates a jogged radial dimension for an arc, circle, or polyline arc segment.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimRadialLarge(Center, ChordPoint, OverrideCenter, JogPoint, JogAngle)

object

    Type: Block, ModelSpace, PaperSpace

    The object this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the arc, circle, or polyline arc segment.
ChordPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the chord point for the arc.
OverrideCenter

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the override center location or pick point.
JogPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the jog location or pick point.
JogAngle

    Access: Input-only

    Type: Double

    The value for the jog angle.

Return Value (RetVal)

Type: DimRadialLarge

The newly created jogged radius dimension.
Remarks


The Center is the center of the arc, circle, or polyline arc segment being dimensioned. The OverrideCenter is the origin point of the dimension.
Examples

VBA:

Sub Example_AddDimRadialLarge()
    Dim PI As Double: PI = 3.141592
    Dim oMS As AcadModelSpace
    Set oMS = ThisDrawing.ModelSpace
    
    Dim ptCenter(2) As Double
    Dim oA As AcadArc
    Set oA = oMS.AddArc(ptCenter, 10, PI / 3, PI * 3 / 4)

    Dim ptChordPoint(2) As Double
    ptChordPoint(0) = 0: ptChordPoint(1) = 10: ptChordPoint(2) = 0

    Dim ptOverrideCenter(2) As Double
    ptOverrideCenter(0) = -3: ptOverrideCenter(1) = -6: ptOverrideCenter(2) = 0
    
    Dim ptJogPoint(2) As Double
    ptJogPoint(0) = 0: ptJogPoint(1) = 5: ptJogPoint(2) = 0

    Dim oDimRadialLarge As AcadDimRadialLarge
    Set oDimRadialLarge = oMS.AddDimRadialLarge(oA.Center, ptChordPoint, ptOverrideCenter, ptJogPoint, PI / 4)

    Dim ptTextPosition(2) As Double
    ptTextPosition(0) = 0: ptTextPosition(1) = 6: ptTextPosition(2) = 0
    oDimRadialLarge.TextPosition = ptTextPosition
    
    Update
    ZoomExtents
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimRadialLarge()
    ;; This example creates an arc and a jogged arc dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    
    ;; Define the arc
    (setq center (vlax-3d-point 0 0 0))

    ;; Create the arc in model space
    (setq arc (vla-AddArc modelSpace center 10 (/ PI 3) (/ (* PI 3) 4)))

    ;; Define the jogged arc dimension
    (setq ptChordPoint (vlax-3d-point 0 10 0)
          ptOverrideCenter (vlax-3d-point -3 -6 0)
          ptJogPoint (vlax-3d-point 0 5 0))

    ;; Create the jogged arc dimension in model space
    (setq oDimRadialLarge (vla-AddDimRadialLarge modelSpace center ptChordPoint ptOverrideCenter ptJogPoint (/ PI 4)))

    ;; Set the position of the text for the dimension
    (setq ptTextPosition (vlax-3d-point 0 6 0))
    (vla-put-TextPosition oDimRadialLarge ptTextPosition)
    
    (vla-ZoomExtents acadObj)
)

** AddDimRotated Method (ActiveX)

Creates a rotated linear dimension.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddDimRotated(XLine1Point, XLine2Point, DimLineLocation, RotationAngle)

object

    Type: Block, ModelSpace, PaperSpace

    The object this method applies to.
XLine1Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the first end of the linear dimension to be measured. This is where the first extension line will be attached.
XLine2Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the second end of the linear dimension to be measured. This is where the second extension line will be attached.
DimLineLocation

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point on the dimension line. This will define the placement of the dimension line and the dimension text.
RotationAngle

    Access: Input-only

    Type: Double

    The angle, in radians, of rotation displaying the linear dimension.

Return Value (RetVal)

Type: DimRotated

The newly created rotated linear dimension object.
Remarks

A linear dimension created at 45 degrees
Examples

VBA:

Sub Example_AddDimRotated()
    ' This example creates a rotated dimension in model space.
        
    Dim dimObj As AcadDimRotated
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim rotAngle As Double
    
    ' Define the dimension
    point1(0) = 0#: point1(1) = 5#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 5#: point2(2) = 0#
    location(0) = 0#: location(1) = 0#: location(2) = 0#
    rotAngle = 120
    rotAngle = rotAngle * 3.141592 / 180#       ' covert to Radians
    
    ' Create the rotated dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimRotated(point1, point2, location, rotAngle)
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddDimRotated()
    ;; This example creates a rotated dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 0 0 0)
          rotAngle (/ (* 120 3.141592) 180))
    
    ;; Create the rotated dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimRotated modelSpace point1 point2 location rotAngle))
    (vla-ZoomAll acadObj)
)

** AddEllipse Method (ActiveX)

Creates an ellipse in the XY plane of the WCS given the center point, a point on the major axis, and the radius ratio.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddEllipse(Center, MajorAxis, RadiusRatio)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the ellipse.
MajorAxis

    Access: Input-only

    Type: Variant (double)

    A positive value defining the length of the major axis of the ellipse.
RadiusRatio

    Access: Input-only

    Type: Double

    A positive value defining the major to minor axis ratio of an ellipse. A radius ratio of 1.0 defines a circle.

    Radius ratio = 0.25


    Radius ratio = 0.75

Return Value (RetVal)

Type: Ellipse

The newly created Ellipse object.
Remarks

The ellipse may be closed, or open (elliptical arc), and is created on the XY plane of the current WCS.

This object represents a true ellipse, not a polyline approximation.


Examples

VBA:

Sub Example_AddEllipse()
    ' This example creates an ellipse in model space.
    
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddEllipse()
    ;; This example creates an ellipse in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)

    ;; Create the ellipse in mode space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
)

** AddEllipticalCone Method (ActiveX)

Creates a 3D solid elliptical cone on the XY plane of the WCS given the Center, MajorRadius, MinorRadius, and Height.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddEllipticalCone(Center, MajorRadius, MinorRadius, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the bounding box.
MajorRadius

    Access: Input-only

    Type: Double

    The length of the major radius for the ellipse base. Must be a positive number.
MinorRadius

    Access: Input-only

    Type: Double

    The length of the minor radius for the ellipse base. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The height of the cone. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created elliptical cone.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddEllipticalCone()
    ' This example creates an elliptical cone in model space.
    
    Dim coneObj As Acad3DSolid
    Dim center(0 To 2) As Double
    Dim majorRadius As Double
    Dim minorRadius As Double
    Dim height As Double
    
    ' Define the elliptical cone
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    majorRadius = 10#
    minorRadius = 5#
    height = 20#
    
    ' Create the elliptical cone in model space
    Set coneObj = ThisDrawing.ModelSpace.AddEllipticalCone(center, majorRadius, minorRadius, height)
    
    ' Change the viewing direction of the viewport to better see the cone
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddEllipticalCone()
    ;; This example creates an elliptical cone in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Define the elliptical cone
    (setq center (vlax-3d-point 0 0 0)
          majorRadius 10
	         minorRadius 5
	         height 20)
    
    ;; Create the elliptical cone in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq coneObj (vla-AddEllipticalCone modelSpace center majorRadius minorRadius height))

    ;; Change the viewing direction of the viewport to better see the cone
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddEllipticalCylinder Method (ActiveX)

Creates a 3D solid elliptical cylinder whose base is on the XY plane of the WCS, given the Center, MajorRadius, MinorRadius, and Height.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddEllipticalCylinder(Center, MajorRadius, MinorRadius, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the bounding box.
MajorRadius

    Access: Input-only

    Type: Double

    The length of the major radius for the ellipse base. Must be a positive number.
MinorRadius

    Access: Input-only

    Type: Double

    The length of the minor radius for the ellipse base. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The height of the cylinder. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created elliptical cylinder.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddEllipticalCylinder()
    ' This example creates an elliptical cylinder in model space.
   
    Dim cylinderObj As Acad3DSolid
    Dim center(0 To 2) As Double
    Dim majorRadius As Double
    Dim minorRadius As Double
    Dim height As Double
    
    ' Define the elliptical cylinder
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    majorRadius = 5#
    minorRadius = 2.5
    height = 10#
    
    ' Create the elliptical cylinder in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddEllipticalCylinder(center, majorRadius, minorRadius, height)
    
    ' Change the viewing direction of the viewport to better see the cylinder
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddEllipticalCylinder()
    ;; This example creates an elliptical cylinder in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Define the elliptical cylinder
    (setq center (vlax-3d-point 0 0 0)
          majorRadius 5
          minorRadius 2.5
          height 10)
    
    ;; Create the elliptical cylinder in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq cylinderObj (vla-AddEllipticalCylinder modelSpace center majorRadius minorRadius height))
  
    ;; Change the viewing direction of the viewport to better see the cylinder
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddExtrudedSolid Method (ActiveX)

Creates an extruded solid given the profile, height, and taper angle.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddExtrudedSolid(Profile, Height, TaperAngle)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Profile

    Access: Input-only

    Type: Region

    A profile can only be a Region object.
Height

    Access: Input-only

    Type: Double

    The height of the extrusion along the Z axis of the object's coordinate system. If you enter a positive number, AutoCAD extrudes the object along the positive Z axis. If you enter a negative number, AutoCAD extrudes the object along the negative Z axis.
TaperAngle

    Access: Input-only

    Type: Double

    The taper angle of the extrusion must be provided in radians. The range of the taper angle is from -90 to +90 degrees.

    Positive angles taper in from the base, negative angles taper out. The default angle, 0, extrudes a 2D object perpendicular to its plane.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created extruded solid.
Remarks

You can extrude only 2D planar regions.

Tapered extrusions are possible only with loops that are continuous at the vertices. A large taper angle or long extrusion height can cause the object, or portions of the object, to intersect with itself before reaching the extrusion height. AutoCAD does not allow an extrusion when the resulting solid intersects with itself.
Examples

VBA:

Sub Example_AddExtrudedSolid()
    ' This example extrudes a solid from a region.
    ' The region is created from an arc and a line.
    
    Dim curves(0 To 1) As AcadEntity

    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    
    ' Define the extrusion
    Dim height As Double
    Dim taperAngle As Double
    height = 3
    taperAngle = 0
    
    ' Create the solid
    Dim solidObj As Acad3DSolid
    Set solidObj = ThisDrawing.ModelSpace.AddExtrudedSolid(regionObj(0), height, taperAngle)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
        
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddExtrudedSolid()
    ;; This example extrudes a solid from a region.
    ;; The region is created from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))

    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))

    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
        
    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    
    ;; Define the extrusion
    (setq height 3
          taperAngle 0)
    
    ;; Create the solid
    (setq solidObj (vla-AddExtrudedSolid modelSpace (vlax-safearray-get-element (vlax-variant-value regionObj) 0) height taperAngle))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddExtrudedSolidAlongPath Method (ActiveX)

Creates an extruded solid given the profile and an extrusion path.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddExtrudedSolidAlongPath(Profile, Path)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Profile

    Access: Input-only

    Type: Region

    A profile can only be a Region object.
Path

    Access: Input-only

    Type: Arc, Circle, Ellipse, Polyline, Spline

    The path can only be a Polyline, Circle, Ellipse, Spline, or Arc object.

Return Value (RetVal)

Type: 3DSolid

The extruded 3DSolid object.
Remarks

You can extrude only 2D planar regions.

The path should not lie on the same plane as the profile, nor should it have areas of high curvature.
Examples

VBA:

Sub Example_AddExtrudedSolidAlongPath()
    ' This example extrudes a solid from a region
    ' along a path defined by a spline.
    ' The region is created from an arc and a line.
    
    Dim curves(0 To 1) As AcadEntity

    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    
    ' Define the extrusion path (spline object)
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    ' Define the Spline Object
    startTan(0) = 10: startTan(1) = 10: startTan(2) = 10
    endTan(0) = 10: endTan(1) = 10: endTan(2) = 10
    fitPoints(0) = 0: fitPoints(1) = 10: fitPoints(2) = 10
    fitPoints(0) = 10: fitPoints(1) = 10: fitPoints(2) = 10
    fitPoints(0) = 15: fitPoints(1) = 10: fitPoints(2) = 10
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ' Create the solid
    Dim solidObj As Acad3DSolid
    Set solidObj = ThisDrawing.ModelSpace.AddExtrudedSolidAlongPath(regionObj(0), splineObj)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddExtrudedSolidAlongPath()
    ;; This example extrudes a solid from a region
    ;; along a path defined by a spline.
    ;; The region is created from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))

    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))

    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
        
    ;; Create the region
    ;(setq regionObj (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq regionObj (vla-AddRegion modelSpace curves))
    
    ;; Define the extrusion path (spline object)
    (setq startTan (vlax-3d-point 10 10 10)
          endTan (vlax-3d-point 10 10 10))
    (setq fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 10 10
				                                 10 10 10
				                                 15 10 10
				                                )
    )
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    
    ;; Create the solid
    (setq solidObj (vla-AddExtrudedSolidAlongPath modelSpace (vlax-safearray-get-element (vlax-variant-value regionObj) 0) splineObj))
 
    (vla-ZoomAll acadObj)
)

** AddFitPoint Method (ActiveX)

Adds the fit point to the spline at a given index.

Supported platforms: Windows only
Signature

VBA:

object.AddFitPoint Index, FitPoint

object

    Type: Spline

    The object this method applies to.
Index

    Access: Input-only

    Type: Integer

    Position in the fit point list to add the fit point. If the index is a negative number, then the point is added to the beginning of the spline. If the index exceeds the number of fit points in the spline, then the point is added to the end of the spline.
FitPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the fit point to be added.

Return Value (RetVal)

No return value.
Remarks

AutoCAD adds the point and refits the spline through the new set of points. To view the changes, use the Update or Regen method.
Examples

VBA:

Sub Example_AddFitPoint()
    ' This example creates a spline object in model space.
    ' It then adds a fit point to the spline.

    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create the spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    MsgBox "The Spline has " & splineObj.NumberOfFitPoints & " fit points.", , "AddFitPoint Example"
    
    ' Define the new fit point
    Dim newFitPoint(0 To 2) As Double
    newFitPoint(0) = 8: newFitPoint(1) = 5: newFitPoint(2) = 0
    
    ' Add the new fit point at the first index in the spline's array of points
    splineObj.AddFitPoint 1, newFitPoint
    ThisDrawing.Regen True
    MsgBox "A fit point has been added at Index:1  WCS: 8, 5, 0" & vbCrLf & "The Spline has " & splineObj.NumberOfFitPoints & " fit points.", , "AddFitPoint Example"

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddFitPoint()
    ;; This example creates a spline object in model space.
    ;; It then adds a fit point to the spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 10)
          endTan (vlax-3d-point 0.5 0.5 10))
    (setq fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 10
                                     5 5 10
                                     10 0 10
                                    )
    )
    
    ;; Create the spline object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    (alert (strcat "The Spline has " (itoa (vla-get-NumberOfFitPoints splineObj)) " fit points."))
    
    ;; Define the new fit point
    (setq newFitPoint (vlax-3d-point 8 5 0))
    
    ;; Add the new fit point at the first index in the spline's array of points
    (vla-AddFitPoint splineObj 1 newFitPoint)
    (vla-Regen doc :vlax-true)
    (alert (strcat "A fit point has been added at Index:1  WCS: 8, 5, 0"
		                 "\nThe Spline has " (itoa (vla-get-NumberOfFitPoints splineObj)) " fit points."
           )
    )
)

** AddHatch Method (ActiveX)

Creates a Hatch object.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddHatch(PatternType, PatternName, Associativity [, HatchObjectType])

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
PatternType

    Access: Input-only

    Type: AcPatternType or AcGradientPatternType enum

    If the HatchObjectType parameter value is acHatchObject, then use the AcPatternType enum; if the HatchObjectType parameter value is AcGradientObject, then use the AcGradientPatternType enum.

        AcPatternType enum
        acHatchPatternTypePredefined: Selects the pattern name from those defined in the acad.pat file.
        acHatchPatternTypeUserDefined: Defines a pattern of lines using the current linetype.
        acHatchPatternTypeCustomDefined: Selects the pattern name from a PAT file other than the acad.pat file.

        AcGradientPatternType enum
        acPreDefinedGradient: Selects the fill name from one of the standard values.
        acUserDefinedGradient: Defines a pattern based on property values.

PatternName

    Access: Input-only

    Type: String

    If the HatchObjectType parameter value is acHatchObject, then PatternName should contain the hatch pattern name. If the HatchObjectType parameter value is acGradientObject, then PatternName should contain one of the gradient pattern names listed in GradientName.
Associativity

    Access: Input-only

    Type: Boolean

        True: The hatch will be associative.
        False: The hatch will not be associative.

HatchObjectType

    Access: Input-only

    Type: AcHatchObjectType enum

    The default value is the AcHatchObjectType enum value of AcHatchObject. If the AcHatchObjectType enum value is AcGradientObject, then PatternType should be of type AcGradientPatternType, and PatternName should contain the gradient pattern name.

Return Value (RetVal)

Type: Hatch

The newly created Hatch object.
Remarks

After the Hatch object is created, you must add the outer loop using the AppendOuterLoop method. The outer loop must be closed and must be created before any inner loops can be created. Inner loops are created one at a time, using the AppendInnerLoop method.
Note: Once the Hatch object has been created, you must append the outer loop to the Hatch object for it to become a valid AutoCAD object. If you attempt any operation other than calling the AppendOuterLoop method, AutoCAD will enter an unpredictable state.
Examples

VBA:

Sub Example_AddHatch()
    ' This example creates an associative gradient hatch in model space.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = "CYLINDER"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject("AutoCAD.AcCmColor." & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject("AutoCAD.AcCmColor." & Left(AcadApplication.Version, 2))
    Call col1.SetRGB(255, 0, 0)
    Call col2.SetRGB(0, 255, 0)
    hatchObj.GradientColor1 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop outerLoop
    hatchObj.Evaluate
    ThisDrawing.Regen True
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddHatch()
    ;; This example creates an associative gradient hatch in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName "CYLINDER")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))

    (setq col1 (vlax-create-object (strcat "AutoCAD.AcCmColor." (substr (getvar "ACADVER") 1 2))))
    (setq col2 (vlax-create-object (strcat "AutoCAD.AcCmColor." (substr (getvar "ACADVER") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0))
  
    (setq radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))

    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)

    (vlax-release-object col1)
    (vlax-release-object col2)
)

** AddItems Method (ActiveX)

Adds one or more objects to the specified selection set.

Supported platforms: Windows only
Signature

VBA:

object.AddItems Items

object

    Type: SelectionSet

    The object this method applies to.
Items

    Access: Input-only

    Type: Variant

    An array of objects to add to the selection set.

Return Value (RetVal)

No return value.
Remarks

Objects currently in the specified selection set remain in the selection set. To replace the objects in the selection set, clear the selection set using the Clear method, then add the objects.

To remove individual objects from a selection set, use the RemoveItems method.
Examples

VBA:

Sub Example_AddItems()
    ' This example creates a selection set and several objects.
    ' It then adds the objects to the selection set.
    
    ' Create the new selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add("TEST_SELECTIONSET")
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True

    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)

    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)

    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the selection set.
    ReDim ssobjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set ssobjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the selection set
    ssetObj.AddItems ssobjs
    
    ThisDrawing.Regen acActiveViewport
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddItems()
    ;; This example creates a selection set and several objects.
    ;; It then adds the objects to the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))  
  
    ;; Create the new selection set
    (setq ssets (vla-get-SelectionSets doc))
    (setq ssetObj (vla-Add ssets "TEST_SELECTIONSET"))
    
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)

    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))

    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))

    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the selection set.
    (setq ssobjs (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count modelSpace) 1))))

    (setq cnt 0)
    (vlax-for each-item modelSpace
        (vlax-safearray-put-element ssobjs cnt each-item)
        (setq cnt (1+ cnt))
    )
    
    ;; Add the array of objects to the selection set
    (vla-AddItems ssetObj ssobjs)
    
    (vla-Regen doc acActiveViewport)
)

** AddLeader Method (ActiveX)

Creates a leader line based on the provided coordinates or adds a new leader cluster to the MLeader object.

Supported platforms: Windows only
Signature - Block, ModelSpace, PaperSpace

VBA:

RetVal = object.AddLeader(PointsArray, Annotation, Type)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
PointsArray

    Access: Input-only

    Type: Variant (array of doubles)

    The array of 3D WCS coordinates specifying the leader. You must provide at least two points to define the leader. The third point is optional.
Annotation

    Access: Input-only

    Type: BlockReference, MText, Tolerance

    The object that should be attached to the leader. The value can also be NULL to not attach an object.
Type

    Access: Input-only

    Type: AcLeaderType enum

        acLineNoArrow
        acLineWithArrow
        acSplineNoArrow
        acSplineWithArrow

Signature - MLeader

VBA:

RetVal = object.AddLeader

object

    Type: MLeader

    The object this method applies to.

Return Value (RetVal) - Block, ModelSpace, PaperSpace

Type: Leader

The newly created Leader object.
Return Value (RetVal) - MLeader

Type: Long

The index of the added leader cluster
Remarks

Block, ModelSpace, PaperSpace: The leader is a line that connects some annotation to a feature in a drawing. Leaders and their annotation are associative, which means if you modify the annotation, the leader updates accordingly. The annotation can be a Tolerance, MText, or BlockReference object.

You can also create leaders that are not associated to a particular object. To do this, simply input a NULL object as the annotation.
Examples

VBA:

Sub Example_AddLeader()
    ' This example creates a leader in model space.
    ' The leader is not attached to any annotation object
    ' in this example.
   
    Dim leaderObj As AcadLeader
    Dim points(0 To 8) As Double
    Dim leaderType As Integer
    Dim annotationObject As AcadObject
    
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    points(6) = 4: points(7) = 5: points(8) = 0
    leaderType = acLineWithArrow
    Set annotationObject = Nothing
        
    ' Create the leader object in model space
    Set leaderObj = ThisDrawing.ModelSpace.AddLeader(points, annotationObject, leaderType)
    ZoomAll
    
End Sub

Sub Example_MLeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)

    Dim r As Long
    r = oML.AddLeader()

    points(4) = 10
    Call oML.AddLeaderLine(r, points)

    MsgBox "LeaderCount = " & oML.LeaderCount
    ZoomExtents
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddLeader()
    ;; This example creates a leader in model space.
    ;; The leader is not attached to any annotation object
    ;; in this example.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 0 0
                                  4 4 0
                                  4 5 0
                                 )
    )
    (setq leaderType acLineWithArrow)
  
    ;; Create a temporary annotaion object
    (setq point (vlax-3d-point 4 5 0))
    (setq annotationObject (vla-AddMText modelSpace point 1 ""))  

    ;; Create the leader object in model space
    (setq leaderObj (vla-AddLeader modelSpace points annotationObject leaderType))

    ;; Remove the temporary annotaion object and adjust the last coordinate of the leader
    (vla-Erase annotationObject)
    (vla-put-Coordinate leaderObj 2 (vlax-3D-point 4 5 0))
    (vla-ZoomAll acadObj)
)

(defun c:Example_MLeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
                                 )
    )  
    (setq i 0)

    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))

    (setq r (vla-AddLeader oML))

    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)

    (alert (strcat "LeaderCount = " (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)

** AddLeaderLine Method (ActiveX)

Adds a leader line to the leader cluster with specified index.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddLeaderLine(leaderIndex, pointArray)

object

    Type: MLeader

    The object this method applies to.
leaderIndex

    Access: Input-only

    Type: Long

    The index of the leader cluster where the new leader line is to be added. Index must be a positive integer.
pointArray

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D OCS coordinates at which to create the new leader line.

Return Value (RetVal)

Type: Long

The index of the added leader line.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_MLeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)

    Dim r As Long
    r = oML.AddLeader()

    points(4) = 10
    Call oML.AddLeaderLine(r, points)

    MsgBox "LeaderCount = " & oML.LeaderCount
    ZoomExtents
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_MLeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				                             )
    )  
    (setq i 0)

    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))

    (setq r (vla-AddLeader oML))

    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)

    (alert (strcat "LeaderCount = " (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)

** AddLeaderLineEx Method (ActiveX)

Adds a leader line to the leader cluster.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddLeaderLineEx(pointArray)

object

    Type: MLeader

    The object this method applies to.
pointArray

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The position of the first (head) vertex of the new leader line.

Return Value (RetVal)

Type: Long

The index of the added leader line.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** AddLightWeightPolyline Method (ActiveX)

Creates a lightweight polyline from a list of vertices.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddLightWeightPolyline(VerticesList)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
VerticesList

    Access: Input-only

    Type: Variant (array of doubles)

    The array of 2D OCS coordinates specifying the vertices of the polyline. At least two points (four elements) are required for constructing a lightweight polyline. The array size must be a multiple of 2.

Return Value (RetVal)

Type: LightweightPolyline

The newly created LightweightPolyline object.
Remarks

The vertices specify the endpoints for the line segments that make up the polyline. To add an arc segment, first create the polyline with all line segments, and then add a bulge to the individual segments you want to be arcs. To add a bulge value to a segment, use the SetBulge method.

The elevation for the polyline will be set at the current elevation for the layout. Use the ElevationModelspace or ElevationPaperspace property to determine the elevation for the polyline.

Coordinates can be converted to and from the OCS using the TranslateCoordinates method.
Examples

VBA:

Sub Example_AddLightWeightPolyline()
    ' This example creates a lightweight polyline in model space.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 9) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddLightWeightPolyline()
    ;; This example creates a lightweight polyline in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 9)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                 )
    ) 
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
)

** AddLine Method (ActiveX)

Creates a line passing through two points.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddLine(StartPoint, EndPoint)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
StartPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the line start point.
EndPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the line endpoint.

Return Value (RetVal)

Type: Line

The newly created Line object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddLine()
    ' This example adds a line in model space
    
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    
    ' Define the start and end points for the line
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
    
    ' Create the line in model space
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddLine()
    ;; This example adds a line in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the start and end points for the line
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    
    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
)

** AddMenuItem Method (ActiveX)

Adds a popup menu item to a popup menu.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddMenuItem(Index, Label, Macro)

object

    Type: PopupMenu

    The object this method applies to.
Index

    Access: Input-only

    Type: Variant

    The index location in the popup menu where the item is to be added. The index must be either an integer or a string.

    If an integer is supplied to specify a given location in the menu, the index must be between 0 and N-1, where N is the number of objects in the popup menu. The new item will be added immediately before the specified index location. To add the new menu item to the end of a menu, set the index to be greater than N.

    If a string is specified and the indexed item does not exist, then the new menu item is added at the end of the menu.
Label

    Access: Input-only

    Type: String

    The label for the menu item. The label may contain DIESEL string expressions. Labels also identify the accelerator keys (keyboard key sequences) that correspond to the menu item by placing an ampersand (&) in front of the accelerator character.
Macro

    Access: Input-only

    Type: String

    The name of the macro associated with this menu item.

Return Value (RetVal)

Type: PopupMenuItem

The newly created popup menu item.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddMenuItem()
    ' This example creates a new menu called TestMenu and inserts a menu item
    ' into it. The menu is then displayed on the menu bar.
    ' To remove the menu after execution of this macro, use the Customize Menu
    ' option from the Tools menu.
    
    Dim currMenuGroup As acadMenuGroup
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(0)
    
    ' Create the new menu
    Dim newMenu As AcadPopupMenu
    Set newMenu = currMenuGroup.Menus.Add("TestMenu")
    
    ' Add a menu item to the new menu
    Dim newMenuItem As AcadPopupMenuItem
    Dim openMacro As String
    ' Assign the macro string the VB equivalent of "ESC ESC _open "
    openMacro = Chr(3) & Chr(3) & Chr(95) & "open" & Chr(32)
    
    Set newMenuItem = newMenu.AddMenuItem(newMenu.count + 1, "Open", openMacro)
    
    ' Display the menu on the menu bar
    newMenu.InsertInMenuBar ThisDrawing.Application.MenuBar.count + 1
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddMenuItem()
    ;; This example creates a new menu called TestMenu and inserts a menu item
    ;; into it. The menu is then displayed on the menu bar.
    ;; To remove the menu after execution of this macro, use the Customize Menu
    ;; option from the Tools menu.
    (setq acadObj (vlax-get-acad-object))
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) 0))
    
    ;; Create the new menu
    (setq newMenu (vla-Add (vla-get-Menus currMenuGroup) "TestMenu"))
    
    ;; Add a menu item to the new menu
    ;; Assign the macro string the VB equivalent of "ESC ESC _open "
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) "open" (Chr 32)))
    (setq newMenuItem (vla-AddMenuItem newMenu (1+ (vla-get-Count newMenu)) "Open" openMacro))
    
    ;; Display the menu on the menu bar
    (vla-InsertInMenuBar newMenu (1+ (vla-get-Count (vla-get-MenuBar acadObj))))

    ;; Display the menu bar
    (vla-SetVariable doc "MENUBAR" 1)
)

** AddMInsertBlock Method (ActiveX)

Inserts an array of blocks.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddMInsertBlock(InsertionPoint, Name, XScale, YScale, ZScale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing [, Password])

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates at which to insert the array of blocks.
Name

    Access: Input-only

    Type: String

    The name of the MInsertBlock.
    Note: You cannot precede the name of an MInsertBlock with an asterisk to separate the block's objects during insertion, as you can with a standard Block.
XScale

    Access: Input-only

    Type: Double

    The X scale factor.
YScale

    Access: Input-only

    Type: Double

    The Y scale factor.
ZScale

    Access: Input-only

    Type: Double

    The Z scale factor.
Rotation

    Access: Input-only

    Type: Double

    The rotation angle in radians.
NumRows

    Access: Input-only

    Type: Long

    A positive integer representing the number of rows for the array.
NumColumns

    Access: Input-only

    Type: Long

    A positive integer representing the number of columns for the array.
RowSpacing

    Access: Input-only

    Type: Double

    The distance between the array rows.
ColumnSpacing

    Access: Input-only

    Type: Double

    The distance between the array columns.
Password

    Access: Input-only

    Type: Variant

    The password that is required to open and insert the drawing.

Return Value (RetVal)

Type: MInsertBlock

The newly created array of blocks.
Remarks

The following illustration shows an array of inserted blocks.


Original block


Array of inserted blocks
Examples

VBA:

Sub Example_AddMInsertBlock()
    ' This example creates a new Block in the current drawing, adds a
    ' Circle object to the new block, and uses the newly created block
    ' to create a rectangular array of block references using AddMInsertBlock
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newMBlock As AcadMInsertBlock
    Dim newBlock As AcadBlock
    
    ' Define the Circle object that will be inserted into the block
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle object
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, "CBlock")
    
    ' Add the Circle object to the new block object
    Set circleObj = ThisDrawing.Blocks("CBlock").AddCircle(centerPoint, radius)
    
    ' Create a rectangular array of Circles using the new block containing the Circle
    ' and the AddMInsertBlock method
    Set newMBlock = ThisDrawing.ModelSpace.AddMInsertBlock(InsertPoint, "CBlock", 1, 1, 1, 1, 2, 2, 1, 1)
        
    ThisDrawing.Application.ZoomAll
    
    MsgBox "A rectangular array has been created from the original block."

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddMInsertBlock()
    ;; This example creates a new Block in the current drawing, adds a
    ;; Circle object to the new block, and uses the newly created block
    ;; to create a rectangular array of block references using AddMInsertBlock
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Circle object that will be inserted into the block
    (setq centerPoint (vlax-3d-point 0 0 0)
          InsertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle object
    (setq blocks (vla-get-Blocks doc))
    (setq newBlock (vla-Add blocks centerPoint "CBlock"))
    
    ;; Add the Circle object to the new block object
    (setq circleObj (vla-AddCircle newBlock centerPoint radius))
    
    ;; Create a rectangular array of Circles using the new block containing the Circle
    ;; and the AddMInsertBlock method
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq newMBlock (vla-AddMInsertBlock modelSpace InsertPoint "CBlock" 1 1 1 1 2 2 1 1))
        
    (vla-ZoomAll acadObj)
    
    (alert "A rectangular array has been created from the original block.")
)

** AddMLeader Method (ActiveX)

Creates an mleader line, given coordinates.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddMLeader(pointsArray, leaderLineIndex)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
pointsArray

    Access: Input-only

    Type: Variant (three-element array of Doubles)

    The array of 3D WCS coordinates specifying the leader. You must provide at least two point to define the leader. The third point is optional.
leaderLineIndex

    Access: Input-only

    Type: Long

    Input index of the mleader cluster.

Return Value (RetVal)

Type: MLeader

The newly created MLeader object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddMLeader()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddMLeader()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
  
    ;; Add the mleader object to model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq mLeader (vla-AddMLeader modelSpace points i))
)

** AddMLine Method (ActiveX)

Creates multiple lines passing through an array of points.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddMLine(VertexList)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
VertexList

    Access: Input-only

    Type: Variant (array of doubles)

    An array of the 3D WCS coordinates specifying the vertices for the multiline.

Return Value (RetVal)

Type: MLine

The newly created MLine object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddMLine()
   ' This example adds an Mline in model space

    Dim mLineObj As AcadMLine
    Dim vertexList(0 To 17) As Double
   
    ' Define data for new object
    vertexList(0) = 4: vertexList(1) = 7: vertexList(2) = 0
    vertexList(3) = 5: vertexList(4) = 7: vertexList(5) = 0
    vertexList(6) = 6: vertexList(7) = 7: vertexList(8) = 0
    vertexList(9) = 4: vertexList(10) = 6: vertexList(11) = 0
    vertexList(12) = 5: vertexList(13) = 6: vertexList(14) = 0
    vertexList(15) = 6: vertexList(16) = 6: vertexList(17) = 6

    ' Create the line in model space
    Set mLineObj = ThisDrawing.ModelSpace.AddMLine(vertexList)

    ThisDrawing.Application.ZoomAll
    
    MsgBox "A new MLine has been added to the drawing."
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddMLine()
    ;; This example adds an Mline in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define data for new object
    (setq vertexList (vlax-make-safearray vlax-vbDouble '(0 . 17)))
    (vlax-safearray-fill vertexList '(4 7 0
                                      5 7 0
                                      6 7 0
                                      4 6 0
                                      5 6 0
                                      6 6 0
                                     )
    )

    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq mLineObj (vla-AddMLine modelSpace vertexList))

    (vla-ZoomAll acadObj)
    
    (alert "A new MLine has been added to the drawing.")
)

** AddMText Method (ActiveX)

Creates an MText entity in a rectangle defined by the insertion point and width of the bounding box.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddMText(InsertionPoint, Width, Text)

object

    Type: Block, ModelSpace, PaperSpace

    The object this method applies to.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The insertion point of the MText bounding box.
Width

    Access: Input-only

    Type: Double

    The width of the MText bounding box.
Text

    Access: Input-only

    Type: String

    The actual text string for the MText object.

Return Value (RetVal)

Type: MText

The newly created MText object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddMtext()
    ' This example creates an MText object in model space.
    
    Dim MTextObj As AcadMText
    Dim corner(0 To 2) As Double
    Dim width As Double
    Dim text As String
    corner(0) = 0#: corner(1) = 10#: corner(2) = 0#
    width = 10
    text = "This is the text String for the mtext Object"

    ' Creates the mtext Object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddMtext()
    ;; This example creates an MText object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the multiline text object
    (setq corner (vlax-3d-point 0 10 0)
          width 10
          text "This is the text String for the mtext Object")

    ;; Creates the mtext Object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
)

** AddObject Method (ActiveX)

Adds an object to a named dictionary.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddObject(Keyword, ObjectName)

object

    Type: Dictionary

    The object this method applies to.
Keyword

    Access: Input-only

    Type: String

    The keyword to be listed in the dictionary for this object.
ObjectName

    Access: Input-only

    Type: String

    The rxClassName of the object to be created in the dictionary.

Return Value (RetVal)

Type: Object

The newly created object.
Remarks

This method adds a new entry specified by ObjectName to the dictionary. If the entry already exists, it is replaced by the new object. The name of the object is specified by Keyword.

For example, an object with the Keyword "ThirdKeyword" and an object type "Object3" can be added to MyDictionary to create the following:

MyDictionary

Keyword Object

FirstKeyword Object1

SecondKeyword Object2

ThirdKeyword Object3
Note: The ObjectARX application that defines the object must be loaded for this method to function correctly. See the LoadARX method for information on loading ObjectARX applications.
Examples

VBA:

Sub Example_AddObject()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add("TEST_DICTIONARY")
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX application.
    ThisDrawing.Application.LoadArx "MyARXApp.dll"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = "OBJ1"
    className = "CAsdkDictObject"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddObject()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries "TEST_DICTIONARY"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj "MyARXApp.dll")
    
    ;; Create the custom object in the dictionary
    (setq keyName "OBJ1")
    (setq className "CAsdkDictObject")

    (setq customObj (vla-AddObject dictObj keyName className))
)

** AddPoint Method (ActiveX)

Creates a Point object at a given location.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddPoint(Point)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The coordinates of the point to be created.

Return Value (RetVal)

Type: Point

The newly created Point object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddPoint()
    ' This example creates a point in model space.
    Dim pointObj As AcadPoint
    Dim location(0 To 2) As Double
    
    ' Define the location of the point
    location(0) = 5#: location(1) = 5#: location(2) = 0#
    
    ' Create the point
    Set pointObj = ThisDrawing.ModelSpace.AddPoint(location)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddPoint()
    ;; This example creates a point in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the location of the point
    (setq location (vlax-3d-point 5 5 0))
    
    ;; Create the point
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq pointObj (vla-AddPoint modelSpace location))
    (vla-ZoomAll acadObj)
)

** AddPolyfaceMesh Method (ActiveX)

Creates a polyface mesh from a list of vertices.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddPolyfaceMesh(VerticesList, FaceList)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
VerticesList

    Access: Input-only

    Type: Variant (array of doubles)

    An array of 3D WCS coordinates used to create the polyface mesh vertices. At least four points (twelve elements) are required for constructing a polyface mesh object. The array size must be a multiple of three.
FaceList

    Access: Input-only

    Type: Variant (array of integers)

    An array of integers representing the vertex numbers for each face. Faces are defined in groups of four vertex index values, so the size of this array must be a multiple of four.

Return Value (RetVal)

Type: PolyfaceMesh

The newly created PolyfaceMesh object.
Remarks

Creating a polyface mesh is similar to creating a rectangular mesh. To create a polyface mesh, you specify the coordinates for its vertices and the vertex numbers for all the vertices of that face.

In the following illustration, face 1 is defined by vertices 1, 5, 6, and 2. Face 2 is defined by vertices 1, 4, 3, and 2. Face 3 is defined by vertices 1, 4, 7, and 5, and face 4 is defined by vertices 3, 4, 7, and 8.


To make an edge invisible, enter the vertex number for the edge as a negative value. For instance, to make the edge between vertices 5 and 7 invisible in the following illustration, you would set the following:

Face 3, vertex 3: -7
Examples

VBA:

Sub Example_AddPolyfaceMesh()
    
    Dim vertexList(0 To 17) As Double

    'Data
    vertexList(0) = 4: vertexList(1) = 7: vertexList(2) = 0
    vertexList(3) = 5: vertexList(4) = 7: vertexList(5) = 0
    vertexList(6) = 6: vertexList(7) = 7: vertexList(8) = 0
    vertexList(9) = 4: vertexList(10) = 6: vertexList(11) = 0
    vertexList(12) = 5: vertexList(13) = 6: vertexList(14) = 0
    vertexList(15) = 6: vertexList(16) = 6: vertexList(17) = 1
    

    Dim FaceList(0 To 7) As Integer

    FaceList(0) = 1
    FaceList(1) = 2
    FaceList(2) = 5
    FaceList(3) = 4
    FaceList(4) = 2
    FaceList(5) = 3
    FaceList(6) = 6
    FaceList(7) = 5

    Dim obj As AcadPolyfaceMesh
    Set obj = ModelSpace.AddPolyfaceMesh(vertexList, FaceList)
    obj.Update

    ' Change the viewing direction of the viewport to
    ' better see the polyface mesh
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddPolyfaceMesh()
    ;; This example creates a polyface mesh in model space   
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Define the vertices for the polyface mesh
    (setq vertexList (vlax-make-safearray vlax-vbDouble '(0 . 17)))
    (vlax-safearray-fill vertexList '(4 7 0
                                      5 7 0
                                      6 7 0
                                      4 6 0
                                      5 6 0
                                      6 6 1
                                     )
    )  

    ;; Define the face order for the polyface mesh
    (setq FaceList (vlax-make-safearray vlax-vbInteger '(0 . 7)))
    (vlax-safearray-fill FaceList '(1
                                    2
                                    5
                                    4
                                    2
                                    3
                                    6
                                    5
                                   )
    )

    (setq modelSpace (vla-get-ModelSpace doc))
    (setq obj (vla-AddPolyfaceMesh modelSpace vertexList FaceList))

    ;; Change the viewing direction of the viewport to
    ;; better see the polyface mesh
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddPolyline Method (ActiveX)

Creates a polyline from a list of vertices.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddPolyline(VerticesList)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
VerticesList

    Access: Input-only

    Type: Variant (array of doubles)

    An array of OCS coordinates used to create the polyline vertices. Each vertex is represented with three elements, with the first two being the X and Y coordinates in OCS; the third element is ignored. At least two points (six elements) are required for constructing a polyline object. The array size must be a multiple of three.

Return Value (RetVal)

Type: Polyline

The newly created Polyline object.
Remarks

To create a polyline containing arcs, first create the straight polyline, and then set the bulge at specific vertices using the SetBulge method.

This method exists for backward compatibility only. Use the AddLightweightPolyline method to create polylines with an optimized format that saves memory and disk space.

Coordinates can be converted to and from the OCS using the TranslateCoordinates method.
Examples

VBA:

Sub Example_AddPolyline()
    ' This example creates a polyline in model space.
    
    Dim plineObj As AcadPolyline
    Dim points(0 To 14) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddPolyline()
    ;; This example creates a polyline in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
)

** AddPViewport Method (ActiveX)

Adds a paper space viewport, given the center, height, and width.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddPViewport(Center, Width, Height)

object

    Type: PaperSpace

    The object this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The center coordinates of the viewport.
Width

    Access: Input-only

    Type: Double

    The width of the viewport. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The height of the viewport. Must be a positive number.

Return Value (RetVal)

Type: PViewport

The newly created PViewport object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddPViewport()
    ' This example creates a new paper space viewport
    
    Dim pviewportObj As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the paper space viewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40
    height = 40
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    
    ' Create the paper space viewport
    Set pviewportObj = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    
    ThisDrawing.Regen acAllViewports
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddPViewport()
    ;; This example creates a new paper space viewport
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
          height 40)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    
    ;; Create the paper space viewport
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj (vla-AddPViewport paperSpace center width height))

    ;; Turn the viewport on, by default it is off
    (vla-Display pviewportObj :vlax-true)
    
    (vla-Regen doc acAllViewports)
)

** AddRaster Method (ActiveX)

Creates a new raster image based on an existing image file.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddRaster(ImageFileName, InsertionPoint, ScaleFactor, RotationAngle)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
ImageFileName

    Access: Input-only

    Type: String

    The full path and file name of the image.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates in the drawing where the raster image will be created.
ScaleFactor

    Access: Input-only

    Type: Double

    The raster image scale factor. The default image scale factor is 1. The scale factor must be a positive number. You can set the scale of the image to the scale of the geometry created in the AutoCAD drawing.
RotationAngle

    Access: Input-only

    Type: Double

    The rotation angle in radians for the raster image.

Return Value (RetVal)

Type: RasterImage

The newly created RasterImage object.
Remarks

Images placed through the AddRaster method are not actually part of the drawing file. The raster image is linked to the drawing file through a path name or document ID. Linked image paths can be changed or removed at any time by using the SupportPath property. By attaching images using linked image paths, you place images in your drawing without increasing the file size of the drawing.

You can add the same raster image file to your drawing file multiple times. Each instance has its own clip boundary and its own settings for brightness, contrast, fade, and transparency. A single image can be cut into multiple pieces that can be rearranged independently in your drawing.
Examples

VBA:

Sub Example_AddRaster()
    ' This example adds a raster image in model space.
    
    ' This example uses a file named "2d Projected Polylines.jpg."
    ' You should change this example to use
    ' a raster file on your computer.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    imageName = "C:\AutoCAD\2d Projected Polylines.jpg"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotationAngle = 0
    
    On Error Resume Next
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    If Err.Description = "File error" Then
        MsgBox imageName & " could not be found."
        Exit Sub
    End If
    ZoomExtents
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddRaster()
    ;; This example adds a raster image in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; This example uses a file named "2d Projected Polylines.jpg." 
    ;; You should change this example to use 
    ;; a raster file on your computer.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName ".\\Sample\\VBA\\2d Projected Polylines.jpg"
          scalefactor 1
          rotationAngle 0)
    
    ;; Creates a raster image in model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotationAngle))
    
            (vla-ZoomExtents acadObj)
        )
        (alert (strcat imageName " could not be found."))
    )
)

** AddRay Method (ActiveX)

Creates a ray passing through two unique points.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddRay(Point1, Point2)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Point1

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the finite start point of the ray.
Point2

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point through which the ray will pass. The ray extends from Point1, through Point2 to infinity.

Return Value (RetVal)

Type: Ray

The newly created Ray object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddRay()
    ' This example creates a ray in model space.
    
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    
    ' Define the ray
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 4#: SecondPoint(1) = 4#: SecondPoint(2) = 0#
    
    ' Creates a Ray object in model space
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddRay()
    ;; This example creates a ray in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the ray
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 4 4 0))
    
    ;; Creates a Ray object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    (vla-ZoomAll acadObj)
)

** AddRegion Method (ActiveX)

Creates a region from a set of entities. The given entities must form a closed coplanar region.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddRegion(ObjectList)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
ObjectList

    Access: Input-only

    Type: Variant (array of Arc, Circle, Ellipse, Line, LWPolyline, Spline objects)

    The array of objects forming the closed coplanar face to be made into a region.

Return Value (RetVal)

Type: Variant (array of Region objects)

This method outputs an array of the newly created Region objects.
Remarks

This method will create a region out of every closed loop formed by the input array of curves. AutoCAD converts closed 2D and planar 3D polylines to separate regions, and then converts polylines, lines, and curves that form closed planar loops. If more than two curves share an endpoint, the resultant region might be arbitrary.

You can explode a region into the individual loops by using the Explode method. The Boolean method allows you to create composite 3D solids or regions from the intersection, union, or subtraction of a solid or region from another solid or region.

The total number of Region objects created is Ubound(objRegions) - Lbound(objRegions) + 1.
Examples

VBA:

Sub Example_AddRegion()
    ' This example creates a region from an arc and a line.
    
    Dim curves(0 To 1) As AcadEntity

    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddRegion()
    ;; This example creates a region from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))

    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    
    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))

    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
  
    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    (vla-ZoomAll acadObj)
)

** AddRevolvedSolid Method (ActiveX)

Creates a revolved solid, given the region around an axis.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddRevolvedSolid(Profile, AxisPoint, AxisDir, Angle)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Profile

    Access: Input-only

    Type: Region

    A profile can only a Region object.
AxisPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the start point of the axis of revolution.
AxisDir

    Access: Input-only

    Type: Variant (three-element array of doubles)

    A 3D vector specifying the direction of the axis of revolution.
Angle

    Access: Input-only

    Type: Double

    The angle of revolution in radians. Enter 6.28 for a full circle revolution.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created revolved solid.
Remarks

The region to revolve must be closed. You cannot revolve objects contained within a block. You can revolve only one object at a time.

The right-hand rule determines the positive direction of rotation.
Examples

VBA:

Sub Example_AddRevolvedSolid()
    ' This example creates a solid from a region
    ' rotated around an axis.
    ' The region is created from an arc and a line.
    Dim curves(0 To 1) As AcadEntity

    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    ZoomAll
    MsgBox "Revolve the region to create the solid.", , "AddRevolvedSolid Example"
    
    ' Define the rotation axis
    Dim axisPt(0 To 2) As Double
    Dim axisDir(0 To 2) As Double
    Dim angle As Double
    axisPt(0) = 7: axisPt(1) = 2.5: axisPt(2) = 0
    axisDir(0) = 11: axisDir(1) = 1: axisDir(2) = 3
    angle = 6.28
        
    ' Create the solid
    Dim solidObj As Acad3DSolid
    Set solidObj = ThisDrawing.ModelSpace.AddRevolvedSolid(regionObj(0), axisPt, axisDir, angle)
    ZoomAll
    
     ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    MsgBox "Solid created.", , "AddRevolvedSolid Example"

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddRevolvedSolid()
    ;; This example creates a solid from a region
    ;; rotated around an axis.
    ;; The region is created from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))

    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    
    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
        
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)

    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    (vla-ZoomAll acadObj)
    (alert "Revolve the region to create the solid.")
    
    ;; Define the rotation axis
    (setq rotAxisPt (vlax-3d-point 7 2.5 0)
          rotAxisDir (vlax-3d-point 11 1 3)
          rotAngle 6.28)
        
    ;; Create the solid
    (setq solidObj (vla-AddRevolvedSolid modelSpace (vlax-safearray-get-element (vlax-variant-value regionObj) 0) rotAxisPt rotAxisDir rotAngle))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    (alert "Solid created.")
)

** AddSection Method (ActiveX)

Creates a section plane.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddSection(FromPoint, ToPoint, planeVector)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
FromPoint

    Access: Input-only

    Type: Variant

    The 3D WCS coordinates specifying the finite start point of the section.
ToPoint

    Access: Input-only

    Type: Variant

    The 3D WCS coordinates specifying a point through which the section will pass. The section extends from FromPoint, through ToPoint to infinity.
planeVector

    Access: Input-only

    Type: Variant

    A 3D directional vector specifying the direction of the section plane.

Return Value (RetVal)

Type: Section

The newly created Section object.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** AddSeparator Method (ActiveX)

Adds a separator to an existing menu or toolbar.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddSeparator(Index)

object

    Type: PopupMenu, Toolbar

    The objects this method applies to.
Index

    Access: Input-only

    Type: Variant

    The index location in the menu or toolbar where the item is to be added.

    If an integer is used to specify a given location in the menu or toolbar, the index must be between 1 and N-1, where N is the number of objects in the popup menu or in the toolbar. The separator will be added immediately before the specified index location. To add the separator to the end of a menu or toolbar, set the index to be greater than N.

    If a string is specified and the indexed item does not exist, then the separator is added at the end of the menu or toolbar.

Return Value (RetVal)

Type: PopupMenuItem, ToolbarItem

The newly created separator item.
Remarks

The first item in a menu or toolbar cannot be a separator, therefore you cannot add a separator into index position 0.

You cannot add a separator immediately next to another separator.
Examples

VBA:

Sub Example_AddSeparator()
    ' This example creates a new menu called TestMenu and inserts a menu item
    ' and a separator into it. The menu is then displayed on the menu bar.
    ' To remove the menu after execution of this macro, use the Customize Menu
    ' option from the Tools menu.
    
    Dim currMenuGroup As acadMenuGroup
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(0)
    
    ' Create the new menu
    Dim newMenu As AcadPopupMenu
    Set newMenu = currMenuGroup.Menus.Add("TestMenu")
    
    ' Add a menu item to the new menu
    Dim newMenuItem As AcadPopupMenuItem
    Dim openMacro As String
    
    ' Assign the macro string the VB equivalent of "ESC ESC _open "
    openMacro = Chr(3) & Chr(3) & Chr(95) & "open" & Chr(32)
    
    Set newMenuItem = newMenu.AddMenuItem(newMenu.count + 1, "Open", openMacro)
    
    ' Add a separator to the end of the menu
    Dim newMenuSeparator As AcadPopupMenuItem
    Set newMenuSeparator = newMenu.AddSeparator("")
    
    ' Display the menu on the menu bar
    newMenu.InsertInMenuBar ThisDrawing.Application.MenuBar.count + 1
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddSeparator()
    ;; This example creates a new menu called TestMenu and inserts a menu item
    ;; and a separator into it. The menu is then displayed on the menu bar.
    ;; To remove the menu after execution of this macro, use the Customize Menu
    ;; option from the Tools menu.
    (setq acadObj (vlax-get-acad-object))
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) 0))

    ;; Create the new menu
    (setq newMenu (vla-Add (vla-get-Menus currMenuGroup) "TestMenu"))
    
    ;; Add a menu item to the new menu
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) "open" (Chr 32)))
    (setq newMenuItem (vla-AddMenuItem newMenu (1+ (vla-get-Count newMenu)) "Open" openMacro))
    
    ;; Add a separator to the end of the menu
    (setq newMenuSeparator (vla-AddSeparator newMenu ""))
    
    ;; Display the menu on the menu bar
    (vla-InsertInMenuBar newMenu (1+ (vla-get-Count (vla-get-MenuBar acadObj))))
    
    ;; Display the menu bar
    (vla-SetVariable doc "MENUBAR" 1)
)

** AddShape Method (ActiveX)

Creates a Shape object based on a template identified by name, at the given insertion point, scale factor, and rotation.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddShape(Name, InsertionPoint, ScaleFactor, Rotation)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Name

    Access: Input-only

    Type: String

    The name of the shape to insert.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates at which to insert the shape.
ScaleFactor

    Access: Input-only

    Type: Double

    The scale factor to be applied to the shape. Use 1.0 to specify no scale. Must be a positive number.
Rotation

    Access: Input-only

    Type: Double

    The angle of rotation in radians to be applied to the shape.

Return Value (RetVal)

Type: Shape

The newly created Shape object.
Remarks

Before adding a Shape object, you must load the file containing the desired shape using the LoadShapeFile method.
Examples

VBA:

Sub Example_AddShape()
    ' This example creates a BAT shape from the ltypeshp.shx file.
    
    ' Load the shape file containing the shape you wish to create.
    ' Note: Replace the ltypeshp.shx file name
    ' with a valid shape file for your system.
    On Error GoTo ERRORHANDLER
    ThisDrawing.LoadShapeFile ("C:/Program Files/AutoCAD/Support/ltypeshp.shx")

    
    Dim shapeObj As AcadShape
    Dim shapeName As String
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotation As Double
    
    ' "diode" is defined in es.shx file
    shapeName = "BAT"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotation = 0#       ' Radians
    
    ' Create the diode shape object in model space
    Set shapeObj = ThisDrawing.ModelSpace.AddShape(shapeName, insertionPoint, scalefactor, rotation)
    Exit Sub
    
ERRORHANDLER:
    MsgBox "Cannot find the shape file.", , "AddShape Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddShape()
    ;; This example creates a BAT shape from the ltypeshp.shx file.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Load the shape file containing the shape you wish to create.
    ;; Note: Replace the ltypeshp.shx file name
    ;; with a valid shape file for your system.
    (setq shapeFile ".\\ltypeshp.shx")

    (if (/= (findfile shapeFile) nil)
        (progn
	           (vla-LoadShapeFile doc (findfile shapeFile))

            ;; "diode" is defined in es.shx file
            (setq insertionPoint (vlax-3d-point 2 2 0)
                  shapeName "BAT"
                  scalefactor 1
                  rotation 0)      ;; Radians
    
            ;; Create the diode shape object in model space
	           (setq modelSpace (vla-get-ModelSpace doc))
	           (setq shapeObj (vla-AddShape modelSpace shapeName insertionPoint scalefactor rotation))
        )
        (alert "Cannot find the shape file.")
    )
)

** AddSolid Method (ActiveX)

Creates a 2D solid polygon.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddSolid(Point1, Point2, Point3, Point4)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Point1

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the first point.
Point2

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the second point.
Point3

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the third point.
Point4

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the fourth point.

Return Value (RetVal)

Type: Solid

The newly created polygon.
Remarks

The first two points define one edge of the polygon. The third point is defined diagonally opposite from the second. If the fourth point is set equal to the third point, then a filled triangle is created.

Solids are filled only when the AutoCAD FILLMODE system variable is set to On. To set or query a system variable, use the SetVariable and GetVariable methods, respectively.
Examples

VBA:

Sub Example_AddSolid()
    ' This example creates a solid in model space.
    
    Dim solidObj As AcadSolid
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim point3(0 To 2) As Double
    Dim point4(0 To 2) As Double
    
    ' Define the solid
    point1(0) = 0#: point1(1) = 1#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 1#: point2(2) = 0#
    point3(0) = 4#: point3(1) = 6#: point3(2) = 0#
    point4(0) = 8#: point4(1) = 8#: point4(2) = 0#

    ' Create the solid object in model space
    Set solidObj = ThisDrawing.ModelSpace.AddSolid(point1, point2, point3, point4)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddSolid()
    ;; This example creates a solid in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the solid
    (setq point1 (vlax-3d-point 0 1 0)
          point2 (vlax-3d-point 5 1 0)
          point3 (vlax-3d-point 4 6 0)
          point4 (vlax-3d-point 8 8 0))

    ;; Create the solid object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq solidObj (vla-AddSolid modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
)

** AddSphere Method (ActiveX)

Creates a sphere given the center and radius.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddSphere(Center, Radius)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the sphere center point.
Radius

    Access: Input-only

    Type: Double

    The radius of the sphere. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created sphere.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddSphere()
    ' This example creates a sphere in model space.
    
    Dim sphereObj As Acad3DSolid
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    centerPoint(0) = 5#: centerPoint(1) = 5#: centerPoint(2) = 0#
    radius = 5#
    Set sphereObj = ThisDrawing.ModelSpace.AddSphere(centerPoint, radius)
        
     ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddSphere()
    ;; This example creates a sphere in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the solid sphere
    (setq centerPoint (vlax-3d-point 5 5 0)
          radius 5)
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq sphereObj (vla-AddSphere modelSpace centerPoint radius))
        
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddSpline Method (ActiveX)

Creates a quadratic or cubic NURBS (nonuniform rational B-spline) curve.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddSpline(PointsArray, StartTangent, EndTangent)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
PointsArray

    Access: Input-only

    Type: Variant (three-element array of doubles)

    An array of 3D WCS coordinates defining the spline curve. At least two points (six elements) are required for constructing a Spline object. The array size must be in multiples of three.
StartTangent

    Access: Input-only

    Type: Variant (three-element array of doubles)

    A 3D vector specifying the tangency of the spline curve at the first point.
EndTangent

    Access: Input-only

    Type: Variant (three-element array of doubles)

    A 3D vector specifying the tangency of the spline curve at the last point.

Return Value (RetVal)

Type: Spline

The newly created Spline object.
Remarks

The StartTangent and EndTangent parameters specify the tangents at the two ends of the spline. By default, a spline is created open. The read-only Closed property indicates whether the spline is open or closed.
Examples

VBA:

Sub Example_AddSpline()
    ' This example creates a spline object in model space.

    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddSpline()
    ;; This example creates a spline object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0))
    (setq fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
  
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
)

** AddSubMenu Method (ActiveX)

Adds a submenu to an existing menu.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddSubMenu(Index, Label)

object

    Type: PopupMenu

    The object this method applies to.
Index

    Access: Input-only

    Type: Variant

    The index location in the menu where the item is to be added.

    If an integer is used to specify a given location in the menu, the index must be between 0 and N-1, where N is the number of objects in the popup menu. The new item will be added immediately before the specified index location. To add the new menu item to the end of a menu, set the index to be greater than N.

    If a string is specified and the indexed item does not exist, then the new menu item is added at the end of the menu.
Label

    Access: Input-only

    Type: String

    The label for the menu item. The label may contain DIESEL string expressions. Labels also identify the accelerator keys (keyboard key sequences) that correspond to the menu item by placing an ampersand (&) in front of the accelerator character.

Return Value (RetVal)

Type: PopupMenu

The newly created submenu. This new cascading menu is blank, and can be populated with standard menu handling techniques.
Remarks

This method creates a new PopupMenuItem object and adds it to the designated menu. This special kind of PopupMenuItem object is assigned the type of acSubmenu.

In the following example menu, the Align Text menu item has been inserted into the Dimension menu at the 17th index. The Align Text menu item is of the type acSubmenu. All other menu entries in the example are of the type acMenuItem or acMenuSeparator. The small cascading menu that is displayed when Align Text is selected is the new menu that was returned by the AddSubmenu method. It has been populated using the AddMenuItem and AddSeparator methods.


Examples

VBA:

Sub Example_AddSubMenu()
    ' This example creates a new menu called TestMenu and inserts a submenu item
    ' called NewFile. It then creates a menu item, called open,
    ' on the submenu.
    
    ' The menu is then displayed on the menu bar.
    ' To remove the menu after execution of this macro, use the Customize Menu
    ' option from the Tools menu.
    
    Dim currMenuGroup As acadMenuGroup
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(0)
    
    ' Create the new menu
    Dim newMenu As AcadPopupMenu
    Set newMenu = currMenuGroup.Menus.Add("TestMenu")
    
    ' Add the submenu
    Dim FileSubMenu As AcadPopupMenu
    Set FileSubMenu = newMenu.AddSubMenu("", "NewFile")
    
    
    ' Add a menu item to the sub menu
    Dim newMenuItem As AcadPopupMenuItem
    Dim openMacro As String
    
    ' Assign the macro string the VB equivalent of "ESC ESC _open "
    openMacro = Chr(3) & Chr(3) & Chr(95) & "open" & Chr(32)
    
    Set newMenuItem = FileSubMenu.AddMenuItem(newMenu.count + 1, "Open", openMacro)
    
    ' Display the menu on the menu bar
    newMenu.InsertInMenuBar ThisDrawing.Application.MenuBar.count + 1
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddSubMenu()
    ;; This example creates a new menu called TestMenu and inserts a submenu item
    ;; called NewFile. It then creates a menu item, called open,
    ;; on the submenu.
    
    ;; The menu is then displayed on the menu bar.
    ;; To remove the menu after execution of this macro, use the Customize Menu
    ;; option from the Tools menu.
    (setq acadObj (vlax-get-acad-object))
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) 0))
    
    ;; Create the new menu
    (setq newMenu (vla-Add (vla-get-Menus currMenuGroup) "TestMenu"))
    
    ;; Add the submenu
    (setq FileSubMenu (vla-AddSubMenu newMenu "" "NewFile"))
    
    ;; Assign the macro string the VB equivalent of "ESC ESC _open "
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) "open" (Chr 32)))
    (setq newMenuItem (vla-AddMenuItem FileSubMenu (1+ (vla-get-Count newMenu)) "Open" openMacro))
    
    ;; Display the menu on the menu bar
    (vla-InsertInMenuBar newMenu (1+ (vla-get-Count (vla-get-MenuBar acadObj))))

    ;; Display the menu bar
    (vla-SetVariable doc "MENUBAR" 1)
)

** AddTable Method (ActiveX)

Adds a table to a drawing.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddTable(InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates in the drawing where the table is inserted.
NumRows

    Access: Input-only

    Type: Long

    The number of rows in the table.
NumColumns

    Access: Input-only

    Type: Long

    The number of columns in the table.
RowHeight

    Access: Input-only

    Type: Double

    The height of the rows in the table.
ColWidth

    Access: Input-only

    Type: Double

    The width of the columns in the table.

Return Value (RetVal)

Type: Table

The newly created table object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddTable()
    ' This example adds a table in model space

    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.ModelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    ZoomExtents

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddTable()
    ;; This example adds a table in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    (setq pt (vlax-3d-point 0 0 0))

    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-ZoomExtents acadObj)
)

** AddText Method (ActiveX)

Creates a single line of text.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddText(TextString, InsertionPoint, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
TextString

    Access: Input-only

    Type: String

    The actual text to be displayed.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates on the drawing where the text is placed.
Height

    Access: Input-only

    Type: Double

    The height of the text. Must be a positive number.

Return Value (RetVal)

Type: Text

The newly created Text object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddText()
    ' This example creates a text object in model space.

    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = "Hello, World."
    insertionPoint(0) = 2: insertionPoint(1) = 2: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddText()
    ;; This example creates a text object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 2 2 0)  
          textString "Hello, World."
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))  
    (vla-ZoomAll acadObj)
)

** AddTolerance Method (ActiveX)

Creates a tolerance entity.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddTolerance(Text, InsertionPoint, Direction)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Text

    Access: Input-only

    Type: String

    The text string for the tolerance.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates in the drawing specifying the placement of the tolerance symbol.
Direction

    Access: Input-only

    Type: Variant (three-element array of doubles)

    A 3D directional vector specifying the direction of the tolerance symbol.

Return Value (RetVal)

Type: Tolerance

The newly created Tolerance object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddTolerance()
    ' This example creates a tolerance object in model space.
    
    Dim toleranceObj As AcadTolerance
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim direction(0 To 2) As Double
	    
    ' Define the tolerance object
    textString = "{\Fgdt;r}%%vasdf{\Fgdt;l}%%vdf%%vxc%%v12{\Fgdt;m}%%vsd" & vbCrLf & _
                 "{\Fgdt;t}%%vdfd%%v3dd{\Fgdt;l}%%vv%%v%%vxc{\Fgdt;m}" & vbCrLf & _
                 "123"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    direction(0) = 1#: direction(1) = 1#: direction(2) = 0#
	
    ' Create the tolerance object in model space
    Set toleranceObj = ThisDrawing.ModelSpace.AddTolerance(textString, insertionPoint, direction)
    ZoomAll
   
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddTolerance()
    ;; This example creates a tolerance object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the tolerance object
    (setq insertionPoint (vlax-3d-point 5 5 0)
          direction (vlax-3d-point 1 0 0))
  
    (setq textString (strcat "{\\Fgdt;r}%%vasdf{\\Fgdt;l}%%vdf%%vxc%%v12{\\Fgdt;m}%%vsd\n"
                             "{\\Fgdt;t}%%vdfd%%v3dd{\\Fgdt;l}%%vv%%v%%vxc{\\Fgdt;m}\n"
                             "123"
                     )
    )
	
    ;; Create the tolerance object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq toleranceObj (vla-AddTolerance modelSpace textString insertionPoint direction))  
    (vla-ZoomAll acadObj)
)

** AddToolbarButton Method (ActiveX)

Adds a toolbar item to a toolbar at a specified position.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddToolbarButton(Index, Name, HelpString, Macro [, FlyoutButton])

object

    Type: Toolbar

    The object this method applies to.
Index

    Access: Input-only

    Type: Variant

    The index location in the toolbar where the item is to be added.

    The index must be either an integer or a string. If an integer is specified, the index must be between 0 and N-1, where N is the number of objects in the toolbar. The new item will be added immediately before the specified index location.
Name

    Access: Input-only

    Type: String

    The string that identifies the toolbar button. The string must comprise alphanumeric characters with no punctuation other than a dash (-) or an underscore (_). This string is displayed as the tooltip when the cursor is placed over the toolbar button.
HelpString

    Access: Input-only

    Type: String

    The string that is displayed in the AutoCAD status line for the button.
Macro

    Access: Input-only

    Type: String

    The name of the macro associated with this item.
FlyoutButton

    Access: Input-only; optional

    Type: Variant

    A Boolean variable stating if the new button is to be a flyout button or not. If the button is a flyout button, this parameter must be set to True. If the button is not a flyout button, this parameter can be set to False or ignored and the new ToolbarItem object will be returned.

        True: The button is a flyout button.
        False: The button is not a flyout button.

Return Value (RetVal)

Type: ToolbarItem

The newly created toolbar item.
Remarks

You can only add or remove toolbar buttons when the toolbar is visible.
Examples

VBA:

Sub Example_AddToolbarButton()
    ' This example creates a new toolbar called TestToolbar and inserts a
    ' toolbar button into it. The toolbar is then displayed.
    ' To remove the toolbar after execution of this macro, use the Customize Menu
    ' option from the Tools menu.
    
    Dim currMenuGroup As acadMenuGroup
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(0)
    
    ' Create the new toolbar
    Dim newToolBar As AcadToolbar
    Set newToolBar = currMenuGroup.Toolbars.Add("TestToolbar")
    
    ' Add a button to the new toolbar
    Dim newButton As AcadToolbarItem
    Dim openMacro As String
    
    ' Assign the macro string the VB equivalent of "ESC ESC _open "
    openMacro = Chr(3) & Chr(3) & Chr(95) & "open" & Chr(32)
    
    Set newButton = newToolBar.AddToolbarButton("", "NewButton", "Open a file.", openMacro)
    
    ' Display the toolbar
    newToolBar.Visible = True
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddToolbarButton()
    ;; This example creates a new toolbar called TestToolbar and inserts a
    ;; toolbar button into it. The toolbar is then displayed.
    ;; To remove the toolbar after execution of this macro, use the Customize Menu
    ;; option from the Tools menu.
    (setq acadObj (vlax-get-acad-object))
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) 0))
    
    ;; Create the new toolbar
    (setq newToolBar (vla-Add (vla-get-Toolbars currMenuGroup) "TestToolbar"))
    
    ;; Assign the macro string the VB equivalent of "ESC ESC _open "
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) "open" (Chr 32)))
    (setq newButton (vla-AddToolbarButton newToolBar "" "NewButton" "Open a file." openMacro))
    
    ;; Display the toolbar
    (vla-put-Visible newToolBar :vlax-true)
)

** AddTorus Method (ActiveX)

Creates a torus at the given location.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddTorus(Center, TorusRadius, TubeRadius)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates in the drawing around which the torus is centered.
TorusRadius

    Access: Input-only

    Type: Double

    The distance from the center of the torus to the center of the tube. Must be a positive number.
TubeRadius

    Access: Input-only

    Type: Double

    The radius of the tube. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created torus.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddTorus()
    ' This example creates a torus in model space.
    
    Dim torusObj As Acad3DSolid
    Dim centerPoint(0 To 2) As Double
    Dim torusRadius As Double
    Dim tubeRadius As Double
    
    ' Define the torus
    centerPoint(0) = 5: centerPoint(1) = 5: centerPoint(2) = 0
    torusRadius = 15
    tubeRadius = 5
    
    ' Create the torus
    Set torusObj = ThisDrawing.ModelSpace.AddTorus(centerPoint, torusRadius, tubeRadius)
            
     ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddTorus()
    ;; This example creates a torus in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the torus
    (setq centerPoint (vlax-3d-point 5 5 0)
          torusRadius 15
          tubeRadius 5)
    
    ;; Create the torus
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq torusObj (vla-AddTorus modelSpace centerPoint torusRadius tubeRadius))
            
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddTrace Method (ActiveX)

Creates a Trace object from an array of points.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddTrace(PointsArray)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
PointsArray

    Access: Input-only

    Type: Variant (array of doubles)

    An array of 3D WCS coordinates specifying the trace endpoints.

Return Value (RetVal)

Type: Trace

The newly created Trace object.
Remarks

The endpoints of a trace are always on the centerline and are always cut square. AutoCAD automatically calculates the correct bevels for connection to adjacent trace segments.

Traces are solid filled when the Fill mode is on. When Fill mode is off, only the outline of a trace appears.

To set the Fill mode, use the AutoCAD FILLMODE system variable. The AutoCAD TRACEWID system variable stores the current width used for Trace objects.
Examples

VBA:

Sub Example_AddTrace()
    ' This example creates a trace in model space.
    
    Dim traceObj As AcadTrace
    Dim tracePts(0 To 11) As Double       ' 4 (3D) points
    
    ' Define the points of the trace
    tracePts(0) = 1: tracePts(1) = 1: tracePts(2) = 0
    tracePts(3) = 3: tracePts(4) = 3: tracePts(5) = 0
    tracePts(6) = 5: tracePts(7) = 3: tracePts(8) = 0
    tracePts(9) = 5: tracePts(10) = 1: tracePts(11) = 0
    
    ' Turn on the system variable (FILLMODE)
    ' to fill the outline of the trace
    ThisDrawing.SetVariable "FILLMODE", 1
        
    ' Create the trace object in model space
    Set traceObj = ThisDrawing.ModelSpace.AddTrace(tracePts)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddTrace()
    ;; This example creates a trace in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the points of the trace
    (setq tracePts (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill tracePts '(1 1 0
                                    3 3 0
                                    5 3 0
                                    5 1 0
                                   )
    )
    
    ;; Turn on the system variable (FILLMODE)
    ;; to fill the outline of the trace
    (vla-SetVariable doc "FILLMODE" 1)
        
    ;; Create the trace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq traceObj (vla-AddTrace modelSpace tracePts))
    (vla-ZoomAll acadObj)
)

** AddVertex Method (ActiveX)

Adds a vertex to a lightweight polyline or a section.

Supported platforms: Windows only
Signature

VBA:

object.AddVertex Index, Point

object

    Type: LWPolyline, Section

    The objects this method applies to.
Index

    Access: Input-only

    Type: Long

    The index in the array of vertices where the vertex is to be added. Index must be a positive integer. The first element of the array is index 0.
Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D OCS coordinates at which to create the new vertex.

Return Value (RetVal)

No return value.
Remarks

LWPolyline: The vertex specifies the endpoint for a new line segment. To add an arc segment to a lightweight polyline, first create the line segment, and then add a "bulge" to the individual segment that is to become an arc. To add a bulge value to a segment, use the SetBulge method.

Section: The vertex specifies a point on the section line.

Coordinates can be converted to and from the OCS using the TranslateCoordinates method.
Examples

VBA:

Sub Example_AddVertex()
    ' This example creates a lightweight polyline in model space.
    ' It then adds a vertex to the polyline.

    Dim plineObj As AcadLWPolyline
    Dim points(0 To 9) As Double
    
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ZoomAll
    MsgBox "Add a vertex to the end of the polyline.", , "AddVertex Example"
    
    ' Define the new vertex
    Dim newVertex(0 To 1) As Double
    newVertex(0) = 4: newVertex(1) = 1
    
    ' Add the vertex to the polyline
    plineObj.AddVertex 5, newVertex
    plineObj.Update
    MsgBox "Vertex added.", , "AddVertex Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddVertex()
    ;; This example creates a lightweight polyline in model space.
    ;; It then adds a vertex to the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 9)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    (alert "Add a vertex to the end of the polyline.")
    
    ;; Define the new vertex
    (setq newVertex (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-fill newVertex '(4 1))
    
    ;; Add the vertex to the polyline
    (vla-AddVertex plineObj 5 newVertex)
    (vla-Update plineObj)
    (alert "Vertex added.")
)

** AddWedge Method (ActiveX)

Creates a wedge with edges parallel to the axes given the length, width, and height.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddWedge(Center, Length, Width, Height)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Center

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center of the wedge face.
Length

    Access: Input-only

    Type: Double

    The length of the wedge corresponding to the X axis. Must be a positive number.
Width

    Access: Input-only

    Type: Double

    The width of the wedge corresponding to the Y axis. Must be a positive number.
Height

    Access: Input-only

    Type: Double

    The height of the wedge corresponding to the Z axis. Must be a positive number.

Return Value (RetVal)

Type: 3DSolid

A 3DSolid object as the newly created wedge.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddWedge()
    ' This example creates a wedge in model space.
    
    Dim wedgeObj As Acad3DSolid
    Dim center(0 To 2) As Double
    Dim length As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the wedge
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 10#: width = 15#: height = 20#
    
    ' Create the wedge in model space
    Set wedgeObj = ThisDrawing.ModelSpace.AddWedge(center, length, width, height)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddWedge()
    ;; This example creates a wedge in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the wedge
    (setq wedgeCenter (vlax-3d-point 5 5 0)
          wedgeLength 10
          wedgeWidth 15
          wedgeHeight 20)
    
    ;; Create the wedge in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq wedgeObj (vla-AddWedge modelSpace wedgeCenter wedgeLength wedgeWidth wedgeHeight))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)

** AddXLine Method (ActiveX)

Creates an xline (an infinite line) passing through two specified points.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddXline(Point1, Point2)

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
Point1

    Access: Input-only

    Type:Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the infinite start point of the xline.
Point2

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying a point through which the xline will pass. The xline extends through Point1 and Point2 in both directions to infinity.

Return Value (RetVal)

Type: XLine

The newly created XLine object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddXLine()
    ' This example creates an XLine in model space.
    
    Dim xlineObj As AcadXline
    Dim basePoint(0 To 2) As Double
    Dim directionVec(0 To 2) As Double
    
    ' Define the xline
    basePoint(0) = 2#: basePoint(1) = 2#: basePoint(2) = 0#
    directionVec(0) = 1#: directionVec(1) = 1#: directionVec(2) = 0#
    
    ' Create the xline in model space
    Set xlineObj = ThisDrawing.ModelSpace.AddXline(basePoint, directionVec)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddXLine()
    ;; This example creates an XLine in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the xline
    (setq basePoint (vlax-3d-point 2 2 0)
          directionVec (vlax-3d-point 1 1 0))
    
    ;; Create the xline in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq xlineObj (vla-AddXline modelSpace basePoint directionVec))
    (vla-ZoomAll acadObj)
)

** AddXRecord Method (ActiveX)

Creates an XRecord object in any dictionary.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AddXRecord(Keyword)

object

    Type: Dictionary

    The object this method applies to.
Keyword

    Access: Input-only

    Type: String

    The name of the XRecord within the dictionary.

Return Value (RetVal)

Type: XRecord

The newly created XRecord object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AddXRecord()
    ' This example creates a new XRecord if one does not exist,
    ' appends data to the XRecord, and then reads it back.  To see data being added,
    ' run the example more than once.
    
    Dim TrackingDictionary As AcadDictionary, TrackingXRecord As AcadXRecord
    Dim XRecordDataType As Variant, XRecordData As Variant
    Dim ArraySize As Long, iCount As Long
    Dim DataType As Integer, Data As String, msg As String
    
    ' Unique identifiers to distinguish this XRecordData from other XRecordData
    Const TYPE_STRING = 1
    Const TAG_DICTIONARY_NAME = "ObjectTrackerDictionary"
    Const TAG_XRECORD_NAME = "ObjectTrackerXRecord"

    ' Connect to the dictionary in which to store the XRecord
    On Error GoTo CREATE
    Set TrackingDictionary = ThisDrawing.Dictionaries(TAG_DICTIONARY_NAME)
    Set TrackingXRecord = TrackingDictionary.GetObject(TAG_XRECORD_NAME)
    On Error GoTo 0
    
    ' Get current XRecordData
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    
    ' If there is no array yet then create one
    If VarType(XRecordDataType) And vbArray = vbArray Then
        ArraySize = UBound(XRecordDataType) + 1       ' Get the size of the data elements returned
        ArraySize = ArraySize + 1                        ' Increase to hold new data
    
        ReDim Preserve XRecordDataType(0 To ArraySize)
        ReDim Preserve XRecordData(0 To ArraySize)
    Else
        ArraySize = 0
        ReDim XRecordDataType(0 To ArraySize) As Integer
        ReDim XRecordData(0 To ArraySize) As Variant
    End If
    
    ' Append new XRecord Data
    '
    ' For this sample we only append the current time to the XRecord
    XRecordDataType(ArraySize) = TYPE_STRING: XRecordData(ArraySize) = CStr(Now)
    TrackingXRecord.SetXRecordData XRecordDataType, XRecordData
    
    ' Read back all XRecordData entries
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    ArraySize = UBound(XRecordDataType)
    
    ' Retrieve and display stored XRecordData
    For iCount = 0 To ArraySize
        ' Get information for this element
        DataType = XRecordDataType(iCount)
        Data = XRecordData(iCount)
        
        If DataType = TYPE_STRING Then
            msg = msg & Data & vbCrLf
        End If
    Next
    
    MsgBox "The data in the XRecord is: " & vbCrLf & vbCrLf & msg, vbInformation
    
    Exit Sub

CREATE:
    ' Create the objects that hold this XRecordData
    If TrackingDictionary Is Nothing Then  ' Make sure to have tracking object
        Set TrackingDictionary = ThisDrawing.Dictionaries.Add(TAG_DICTIONARY_NAME)
        Set TrackingXRecord = TrackingDictionary.AddXRecord(TAG_XRECORD_NAME)
    End If
    
    Resume
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AddXRecord()
    ;; This example creates a new XRecord if one does not exist,
    ;; appends data to the XRecord, and then reads it back.  To see data being added,
    ;; run the example more than once.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Unique identifiers to distinguish this XRecordData from other XRecordData
    (setq TYPE_STRING 1
          TAG_DICTIONARY_NAME "ObjectTrackerDictionary"
          TAG_XRECORD_NAME "ObjectTrackerXRecord")

    ;; Connect to the dictionary in which to store the XRecord
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq TrackingDictionary (vl-catch-all-apply 'vla-Item (list dictionaries TAG_DICTIONARY_NAME)))

    ;; (= (vl-catch-all-error-message TrackingDictionary) "Automation Error. Key not found")
  
    (if (= (type TrackingDictionary) 'VLA-OBJECT)
        (setq TrackingXRecord (vla-GetObject TrackingDictionary TAG_XRECORD_NAME))
        (progn
            ;; Create the objects that hold this XRecordData
            (setq TrackingDictionary (vla-Add dictionaries TAG_DICTIONARY_NAME))
            (setq TrackingXRecord  (vla-AddXRecord TrackingDictionary TAG_XRECORD_NAME))
	       )
    )

    ;; Get current XRecordData
    (vla-GetXRecordData TrackingXRecord 'temp-XRecordDataType 'temp-XRecordData)
    
    ;; If there is no array yet then create one
    (setq ArraySize 0)
    (if (/= temp-XRecordDataType nil)
        (progn
	           (setq ArraySize (vlax-safearray-get-u-bound temp-XRecordDataType 1))
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger (cons 0 (1+ ArraySize))))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant (cons 0 (1+ ArraySize))))

            (setq iCount 0)
            (while (>= ArraySize iCount)
                ;; Get information for this element
                (setq DataType (vlax-safearray-get-element temp-XRecordDataType iCount))
                (setq Data (vlax-variant-value (vlax-safearray-get-element temp-XRecordData iCount)))

                (vlax-safearray-put-element XRecordDataType iCount DataType)
                (vlax-safearray-put-element XRecordData iCount Data)
	      
                (setq iCount (1+ iCount))
            )
	       )
        (progn
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger '(0 . 0)))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant '(0 . 0)))
	       )
    )
    
    ;; Append new XRecord Data
    ;;
    ;; For this sample we only append the current time to the XRecord
    (vlax-safearray-put-element XRecordDataType ArraySize TYPE_STRING)
    (setq cdate (rtos (vlax-variant-value (vla-GetVariable doc "CDATE")) 2 6))
    (vlax-safearray-put-element XRecordData ArraySize (strcat (substr cdate 5 2) "/"
                                                              (substr cdate 7 2) "/"
                                                              (substr cdate 1 4) "-"
                                                              (substr cdate 10 2) ":"
                                                              (substr cdate 12 2) ":"
                                                              (substr cdate 14)))
    (vla-SetXRecordData TrackingXRecord XRecordDataType XRecordData)
    
    ;; Read back all XRecordData entries
    (vla-GetXRecordData TrackingXRecord XRecordDataType XRecordData)
    (setq ArraySize (vlax-safearray-get-u-bound XRecordDataType 1))
    
    ;; Retrieve and display stored XRecordData
    (setq iCount 0
	         msg "")
    (while (>= ArraySize iCount)
        ;; Get information for this element
        (setq DataType (vlax-safearray-get-element XRecordDataType iCount))
        (setq Data (vlax-variant-value (vlax-safearray-get-element XRecordData iCount)))

        (if (= DataType TYPE_STRING)
            (setq msg (strcat msg Data "\n"))
        )
      
        (setq iCount (1+ iCount))
    )
    
    (alert (strcat "The data in the XRecord is: \n\n" msg))
)

** AngleFromXAxis Method (ActiveX)

Gets the angle of a line from the X axis.

Supported platforms: Windows only
Signature

VBA:

RetVal = AngleFromXAxis(Point1, Point2)

object

    Type: Utility

    The object this method applies to.
Point1

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The start point of the line.
Point2

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The endpoint of the line.

Return Value (RetVal)

Type: Double

The angle of the line in radians.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AngleFromXAxis()
    ' This example finds the angle, in radians, between the X axis
    ' and a line defined by two points.
    
    Dim pt1(0 To 2) As Double
    Dim pt2(0 To 2) As Double
    Dim retAngle As Double
    
    pt1(0) = 2: pt1(1) = 5: pt1(2) = 0
    pt2(0) = 5: pt2(1) = 2: pt2(2) = 0
    
    ' Return the angle
    retAngle = ThisDrawing.Utility.AngleFromXAxis(pt1, pt2)
    
    ' Create the line for a visual reference
    Dim lineObj As AcadLine
    Set lineObj = ThisDrawing.ModelSpace.AddLine(pt1, pt2)
    ZoomAll
    
    ' Display the angle found
    MsgBox "The angle in radians between the X axis and the line is " & retAngle, , "AngleFromXAxis Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AngleFromXAxis()
    ;; This example finds the angle, in radians, between the X axis
    ;; and a line defined by two points.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Return the angle
    (setq pt1 (vlax-3d-point 2 5 0)
          pt2 (vlax-3d-point 5 2 0))
    (setq retAngle (vla-AngleFromXAxis (vla-get-Utility doc) pt1 pt2))
    
    ;; Create the line for a visual reference
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace pt1 pt2))

    (vla-ZoomAll acadObj)
    
    ;; Display the angle found
    (alert (strcat "The angle in radians between the X axis and the line is " (rtos retAngle 2)))
)

** AngleToReal Method (ActiveX)

Converts an angle as a string to a real (double) value.

Supported platforms: Windows only
Signature

VBA:

RetVal = AngleToReal(Angle, Unit)

object

    Type: Utility

    The object this method applies to.
Angle

    Access: Input-only

    Type: String

    The angle as a string value.
Unit

    Access: Input-only

    Type: AcAngleUnits enum

    The unit to which the string will be converted.

        acDegrees
        acDegreeMinuteSeconds
        acGrads
        acRadians

Return Value (RetVal)

Type: Double

The angle as a real number.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AngleToReal()
    ' This example passes several different strings representing
    ' an angle in different units to be converted to radians.
    
    Dim angAsStr As String
    Dim unit As Integer
    Dim angAsReal As Double
    
    ' Convert the angle given in degrees unit to a real
    angAsStr = "45"
    unit = acDegrees
    angAsReal = ThisDrawing.Utility.AngleToReal(angAsStr, unit)
    MsgBox "45 degrees converts to " & angAsReal & " radians.", , "AngleAsReal Example"
    
    ' Convert the angle given in degrees/minutes/seconds unit to Radians
    angAsStr = "45d0' 0"""
    unit = acDegreeMinuteSeconds
    angAsReal = ThisDrawing.Utility.AngleToReal(angAsStr, unit)
    MsgBox "45 degrees, 0 minutes, 0 seconds converts to " & angAsReal & " radians.", , "AngleAsReal Example"
    
    ' Convert the angle given in grads unit to Radians
    angAsStr = "50"
    unit = acGrads
    angAsReal = ThisDrawing.Utility.AngleToReal(angAsStr, unit)
    MsgBox "50 grads converts to " & angAsReal & " radians.", , "AngleAsReal Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AngleToReal()
    ;; This example passes several different strings representing
    ;; an angle in different units to be converted to radians.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Convert the angle given in degrees unit to a real
    (setq angAsStr "45"
          unit acDegrees
          angAsReal (vla-AngleToReal (vla-get-Utility doc) angAsStr unit))
    (alert (strcat "45 degrees converts to " (rtos angAsReal 2) " radians."))
    
    ;; Convert the angle given in degrees/minutes/seconds unit to Radians
    (setq angAsStr "45d0' 0\""
          unit acDegreeMinuteSeconds
          angAsReal (vla-AngleToReal (vla-get-Utility doc) angAsStr unit))
    (alert (strcat "45 degrees, 0 minutes, 0 seconds converts to " (rtos angAsReal 2) " radians."))
    
    ;; Convert the angle given in grads unit to Radians
    (setq angAsStr "50"
          unit acGrads
          angAsReal (vla-AngleToReal (vla-get-Utility doc) angAsStr unit))
    (alert (strcat "50 grads converts to " (rtos angAsReal 2) " radians."))
)

** AngleToString Method (ActiveX)

Converts an angle from a real (double) value to a string.

Supported platforms: Windows only
Signature

VBA:

RetVal = AngleToString(Angle, Unit, Precision)

object

    Type: Utility

    The object this method applies to.
Angle

    Access: Input-only

    Type: Double

    The angle as a double value.
Unit

    Access: Input-only

    Type: AcAngleUnits enum

    The unit to which the string will be converted.

        acDegrees
        acDegreeMinuteSeconds
        acGrads
        acRadians

Precision

    Access: Input-only

    Type: Long

    The precision of the angle. An integer between 0 and 8.

Return Value (RetVal)

Type: String

The angle as a string.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_AngleToString()
    ' This example converts a radian value to several different
    ' strings representing the value in different units.
    
    Dim angAsRad As Double
    Dim unit As Integer
    Dim precision As Long
    Dim angAsString As String
    angAsRad = 0.785398163397448
    unit = acDegrees
    precision = 6
    
    ' Convert the radian value to degrees with a precision of 6
    angAsString = ThisDrawing.Utility.AngleToString(angAsRad, unit, precision)
    MsgBox "0.785398163397448 radians =  " & angAsString & " degrees", , "AngleAsString Example"
    
    ' Convert the radian value to degrees/Minutes/Seconds with a precision of 6
    unit = acDegreeMinuteSeconds
    angAsString = ThisDrawing.Utility.AngleToString(angAsRad, unit, precision)
    MsgBox "0.785398163397448 radians =  " & angAsString, , "AngleAsString Example"
    
    ' Convert the radian value to grads with a precision of 6
    unit = acGrads
    angAsString = ThisDrawing.Utility.AngleToString(angAsRad, unit, precision)
    MsgBox "0.785398163397448 radians =  " & angAsString, , "AngleAsString Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AngleToString()
    ;; This example converts a radian value to several different
    ;; strings representing the value in different units.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq angAsRad 0.785398163397448
          unit acDegrees
          precision 6)
    
    ;; Convert the radian value to degrees with a precision of 6
    (setq angAsString (vla-AngleToString (vla-get-Utility doc) angAsRad unit precision))
    (alert (strcat "0.785398163397448 radians =  " angAsString))
    
    ;; Convert the radian value to degrees/Minutes/Seconds with a precision of 6
    (setq unit acDegreeMinuteSeconds)
    (setq angAsString (vla-AngleToString (vla-get-Utility doc) angAsRad unit precision))
    (alert (strcat "0.785398163397448 radians =  " angAsString))
    
    ;; Convert the radian value to grads with a precision of 6
    (setq unit acGrads)
    (setq angAsString (vla-AngleToString (vla-get-Utility doc) angAsRad unit precision))
    (alert (strcat "0.785398163397448 radians =  " angAsString))
)

** AppendInnerLoop Method (ActiveX)

Appends an inner loop to the hatch.

Supported platforms: Windows only
Signature

VBA:

object.AppendInnerLoop Loop

object

    Type: Hatch

    The object this method applies to.
Loop

    Access: Input-only

    Type: Variant (array of Arc, Circle, Ellipse, Line, Polyline, Region, Spline objects)

    An array of objects forming a closed boundary. The array can consist of one or more objects. If more than one object is used, their endpoints must coincide for the loop to be created properly.

Return Value (RetVal)

No return value.
Remarks

After the Hatch object has been created using the AddHatch method, add the outer loop using AppendOuterLoop. The outer loop must be closed and must be created before any inner loops can be added.
Examples

VBA:

Sub Example_AppendInnerLoop()
    ' This example creates an associative hatch in model space, and then appends an outer loop to the hatch.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = "ANSI31"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append a circle as the inner loop for the hatch.
    Dim innerLoop(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AppendInnerLoop()
    ;; This example creates an associative hatch in model space, and then appends an outer loop to the hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName "ANSI31"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)

    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append a circle as the inner loop for the hatch.
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))

    (setq innerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop 0 circle)

    (vla-AppendInnerLoop hatchObj innerLoop)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
)

** AppendItems Method (ActiveX)

Appends one or more entities to the specified group.

Supported platforms: Windows only
Signature

VBA:

object.AppendItems Objects

object

    Type: Group

    The object this method applies to.
Objects

    Access: Input-only

    Type: Variant (array of any drawing objects)

    An array of objects to append. The array can consist of any drawing objects.

Return Value (RetVal)

No return value.
Remarks

To query items in a group, use the Item method.

To remove individual items from a group, use the RemoveItems method.
Examples

VBA:

Sub Example_AppendItems()
    ' This example creates a group and several objects.
    ' It then appends the objects to the group.
    
    ' Create the new group
    Dim groupObj As AcadGroup
    Set groupObj = ThisDrawing.Groups.Add("TEST_GROUP")
            
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True

    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)

    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)

    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the group.
    ReDim appendObjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set appendObjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the group
    groupObj.AppendItems appendObjs
    
    ThisDrawing.Regen acActiveViewport
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AppendItems()
    ;; This example creates a group and several objects.
    ;; It then appends the objects to the group.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the new group
    (setq groupObj (vla-Add (vla-get-Groups doc) "TEST_GROUP"))
            
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))

    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )

    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)

    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))

    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))

    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the group.
    (setq I 0
	         totalObjs (vla-get-Count modelSpace))
    (setq appendObjs (vlax-make-safearray vlax-vbObject (cons 0 (- totalObjs 1))))
    (while (>= (- totalObjs 1) I)
        (vlax-safearray-put-element appendObjs I (vla-Item modelSpace I))
        (setq I (1+ I))
    )
    
    ;; Add the array of objects to the group
    (vla-AppendItems groupObj appendObjs)
    
    (vla-Regen doc acActiveViewport)
)

** AppendOuterLoop Method (ActiveX)

Appends an outer loop to the hatch.

Supported platforms: Windows only
Signature

VBA:

object.AppendOuterLoop loop

object

    Type: Hatch

    The object this method applies to.
Loop

    Access: Input-only

    Type: Variant (array of Arc, Circle, Ellipse, Line, Polyline, Region, Spline objects)

    An array of objects forming a closed boundary. The array can consist of one or more objects. If more than one object is used, their endpoints must coincide for the loop to be created properly.

Return Value (RetVal)

No return value.
Remarks

After the Hatch object has been created using the AddHatch method, add the outer loop. The outer loop must be closed and must be created before any inner loops can be added. After a valid outer loop has been created, add any inner loops, one at a time, using the AppendInnerLoop method.

Once you have finished defining the boundaries for the hatch, use the Evaluate method to calculate the hatch lines or fill for the boundaries, then use the Regen method to update the display of the hatch.
Examples

VBA:

Sub Example_AppendOuterLoop()
    ' This example creates an associative hatch in model space, and then creates an outer loop for the hatch.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = "ANSI31"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 1
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AppendOuterLoop()
    ;; This example creates an associative hatch in model space, and
    ;; then creates an outer loop for the hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the hatch
    (setq patternName "ANSI31"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)

    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-ZoomAll acadObj)
)

** AppendVertex Method (ActiveX)

Appends a vertex to the end of a 3DPolyline, Polyline, or PolygonMesh object.

Supported platforms: Windows only
Signature

VBA:

object.AppendVertex Point

object

    Type: 3DPolyline, PolygonMesh, Polyline

    The objects this method applies to.
Point

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The coordinates specifying the vertex to be appended.

    PolygonMesh: An array of 3D WCS coordinates specifying the appended row of vertices.

    3DPolyline: An array of 3D WCS coordinates specifying the vertex to append.

    Polyline: An array of 3D coordinates. The X and Y coordinates are given in OCS, the Z coordinate is ignored.

Return Value (RetVal)

No return value.
Remarks

PolygonMesh: When you append a vertex to the end of a PolygonMesh object, you are appending a row of vertices. For example, for a 4 x 3 PolygonMesh you define 12 vertices. Appending a vertex would make the matrix 5 x 3, thereby requiring three additional coordinates. If the 4 x 3 matrix had the following as its last vertex:

    vertex(3,0): 6,6,6
    vertex(3,1): 7,7,7
    vertex(3,2): 8,8,8

You would append:

    vertex(4,0): 10,10,10
    vertex(4,1): 10,5,0
    vertex(4,2): 10,20,30

The OCS coordinates for the Polyline object can be converted to and from other coordinate systems using the TranslateCoordinates method.
Examples

VBA:

Sub Example_AppendVertex()
    ' This example creates a polyline in model space.
    ' It then appends a vertex to the polyline.
    
    Dim plineObj As AcadPolyline
    Dim points(0 To 14) As Double
    
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ZoomAll
    MsgBox "Append the vertex 4, 1, 0.", , "AppendVertex Example"
    
    Dim newVertex(0 To 2) As Double
    newVertex(0) = 4: newVertex(1) = 1: newVertex(2) = 0
    plineObj.AppendVertex newVertex
    ZoomAll
    MsgBox "The vertex 4, 1, 0 as been appended.", , "AppendVertex Example"

End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AppendVertex()
    ;; This example creates a polyline in model space.
    ;; It then appends a vertex to the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the 2D polyline points
    (setq center (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill center '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    (alert "Append the vertex 4, 1, 0.")
    
    (setq newVertex (vlax-3d-point 4 1 0))
    (vla-AppendVertex plineObj newVertex)
    (vla-ZoomAll acadObj)
    (alert "The vertex 4, 1, 0 as been appended.")
)

** ArrayPolar Method (ActiveX)

Creates a polar array of objects given a NumberOfObjects, AngleToFill, and CenterPoint.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.ArrayPolar(NumberOfObjects, AngleToFill, CenterPoint)

object

    Type: All drawing objects

    The objects this method applies to.
NumberOfObjects

    Access: Input-only

    Type: Long

    The number of objects to be created in the polar array. This must be a positive integer greater than 1.
AngleToFill

    Access: Input-only

    Type: Double

    The angle to fill in radians. A positive value specifies counterclockwise rotation. A negative value specifies clockwise rotation. An error is returned for an angle that equals 0.
CenterPoint

    Access: Input-only

    Type: Variant (three-element array of doubles)

    The 3D WCS coordinates specifying the center point for the polar array.

Return Value (RetVal)

Type: Variant (array of objects)

The array of new objects.
Remarks

AutoCAD determines the distance from the array's center point to a reference point on the last object selected. The reference point used depends on the type of object previously selected. AutoCAD uses the center point of a circle or arc, the insertion point of a block or shape, the start point of text, and one endpoint of a line or trace.

Note that this method does not support the Rotate While Copying option of the AutoCAD ARRAY command.


Polar array with NumberOfObjects = 5, AngleToFill = 180, CenterPoint = 0,0,0.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.

AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Examples

VBA:

Sub Example_ArrayPolar()
    ' This example creates a circle and then performs a polar array
    ' on that circle.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 1
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    MsgBox "Perform the polar array on the circle.", , "ArrayPolar Example"
    
    ' Define the polar array
    Dim noOfObjects As Integer
    Dim angleToFill As Double
    Dim basePnt(0 To 2) As Double
    noOfObjects = 4
    angleToFill = 3.14          ' 180 degrees
    basePnt(0) = 4#: basePnt(1) = 4#: basePnt(2) = 0#
    
    ' The following example will create 4 copies of an object
    ' by rotating and copying it about the point (3,3,0).
    Dim retObj As Variant
    retObj = circleObj.ArrayPolar(noOfObjects, angleToFill, basePnt)
    
    ZoomAll
    MsgBox "Polar array completed.", , "ArrayPolar Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ArrayPolar()
    ;; This example creates a circle and then performs a polar array
    ;; on that circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)  
          radius 1)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
  
    (alert "Perform the polar array on the circle.")
    
    ;; Define the polar array
    (setq basePnt (vlax-3d-point 3 3 0) 
          noOfObjects 4
          angleToFill 3.14)          ;; 180 degrees
    
    ;; The following example will create 4 copies of an object
    ;; by rotating and copying it about the point (3,3,0).
    (setq retObj (vla-ArrayPolar circleObj noOfObjects angleToFill basePnt))
    
    (vla-ZoomAll acadObj)
    (alert "Polar array completed.")
)

** ArrayRectangular Method (ActiveX)

Creates a 2D or 3D rectangular array of objects.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.ArrayRectangular(NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenColumns, DistBetweenLevels)

object

    Type: All drawing objects

    The objects this method applies to.
NumberOfRows

    Access: Input-only

    Type: Long

    The number of rows in the rectangular array. This must be a positive number. If this number is 1, then NumberOfColumns must be greater than 1.
NumberOfColumns

    Access: Input-only

    Type: Long

    The number of columns in the rectangular array. This must be a positive number. If this number is 1, then NumberOfRows must be greater than 1.
NumberOfLevels

    Access: Input-only

    Type: Long

    The number of levels in a 3D array.
DistBetweenRows

    Access: Input-only

    Type: Double

    The distance between the rows. If the distance between rows is a positive number, rows are added upward from the base entity. If the distance is a negative number, rows are added downward.
DistBetweenColumns

    Access: Input-only

    Type: Double

    The distance between the columns. If the distance between columns is a positive number, columns are added to the right of the base entity. If the distance is a negative number, columns are added to the left.
DistBetweenLevels

    Access: Input-only

    Type: Double

    The distance between the array levels. If the distance between levels is a positive number, levels are added in the positive direction from the base entity. If the distance is a negative number, levels are added in the negative direction.

Return Value (RetVal)

Type: Variant (array of objects)

The array of newly created objects.
Remarks

For a 2D array, specify the NumberOfRows, NumberOfColumns, DistBetweenRow, and DistBetweenColumns. For creating a 3D array, specify the NumberOfLevels and DistBetweenLevels as well.

A rectangular array is constructed by replicating the object in the selection set the appropriate number of times. If you define one row, you must specify more than one column and vice versa.

The object in the selection set is assumed to be in the lower left-hand corner, and the array is generated up and to the right. If the distance between rows is a negative number, rows are added downward. If the distance between columns is a negative number, the columns are added to the left.

AutoCAD builds the rectangular array along a baseline defined by the current snap rotation angle. This angle is zero by default, so the rows and columns of a rectangular array are orthogonal with respect to the X and Y drawing axes. You can change this angle and create a rotated array by setting the snap rotation angle to a nonzero value. To do this, use the SnapRotationAngle property.


Rectangular array with NumberOfRows = 4, NumberOfColumns = 3, DistBetweenRows = a, DistBetweenColumns = b. The base entity is represented in blue.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.

AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Examples

VBA:

Sub Example_ArrayRectangular()
    ' This example creates a circle and then performs
    ' a rectangular array on that circle.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 0.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ThisDrawing.Application.ZoomAll
    MsgBox "Perform the rectangular array on the circle.", , "ArrayRectangular Example"
    
    ' Define the rectangular array
    Dim numberOfRows As Long
    Dim numberOfColumns As Long
    Dim numberOfLevels As Long
    Dim distanceBwtnRows As Double
    Dim distanceBwtnColumns As Double
    Dim distanceBwtnLevels As Double
    numberOfRows = 5
    numberOfColumns = 5
    numberOfLevels = 2
    distanceBwtnRows = 1
    distanceBwtnColumns = 1
    distanceBwtnLevels = 1
    
    ' Create the array of objects
    Dim retObj As Variant
    retObj = circleObj.ArrayRectangular(numberOfRows, numberOfColumns, numberOfLevels, distanceBwtnRows, distanceBwtnColumns, distanceBwtnLevels)
    
    ZoomAll
    MsgBox "Rectangular array completed.", , "ArrayRectangular Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ArrayRectangular()
    ;; This example creates a circle and then performs
    ;; a rectangular array on that circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)  
          radius 0.5)

    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)

    (alert "Perform the rectangular array on the circle.")

    ;; Define the rectangular array
    (setq numberOfRows 5
          numberOfColumns 5
          numberOfLevels 2
          distanceBwtnRows 1.0
          distanceBwtnColumns 1.0
          distanceBwtnLevels 1.0)

    ;; Create the array of objects
    (setq retObj (vla-ArrayRectangular circleObj numberOfRows numberOfColumns numberOfLevels
		                                 distanceBwtnRows distanceBwtnColumns distanceBwtnLevels))

    (vla-ZoomAll acadObj)
    (alert "Rectangular array completed.")
)

** AttachExternalReference Method (ActiveX)

Attaches an external reference (xref) to the drawing.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.AttachExternalReference(PathName, Name, InsertionPoint, XScale, YScale, ZScale, Rotation, Overlay [, Password])

object

    Type: Block, ModelSpace, PaperSpace

    The objects this method applies to.
PathName

    Access: Input-only

    Type: String

    The full path and file name of the drawing to be referenced.
Name

    Access: Input-only

    Type: String

    The name for the xref to be created.
InsertionPoint

    Access: Input-only

    Type: Variant (three-element array of Doubles)

    The 3D WCS coordinates specifying the point at which an ExternalReference instance is inserted into the drawing. The insertion point in the current drawing is aligned with the point defined by the AutoCAD BASE system variable in the referenced file.
XScale

    Access: Input-only

    Type: Double

    The X scaling factor for the xref instance.
YScale

    Access: Input-only

    Type: Double

    The Y scaling factor for the xref instance.
ZScale

    Access: Input-only

    Type: Double

    The Z scaling factor for the xref instance.
Rotation

    Access: Input-only

    Type: Double

    The rotation angle for the xref instance. This angle is specified in radians.
Overlay

    Access: Input-only

    Type: Boolean

        True: The xref instance is an overlay.
        False: The xref instance is an attachment.

Password

    Access: Input-only; optional

    Type: Variant

    ; optional

Return Value (RetVal)

Type: ExternalReference

The newly created ExternalReference object.
Remarks

Like Block objects, attached ExternalReference objects can be nested. If another person is editing the drawing to be referenced, the drawing attached is based on the most recently saved version.

If the referenced file is missing or corrupt, its data is not displayed in the current drawing.
Examples

VBA:

Sub Example_AttachExternalReference()
    ' This example displays all the blocks in the current drawing
    ' before and after adding an external reference.
    '
    ' This example uses the "city map.dwg" found in the Sample
    ' directory. If you do not have this drawing, or if it is 
    ' in a different directory, insert a valid path and file name
    ' for the PathName variable below.
    
    Dim InsertPoint(0 To 2) As Double
    Dim insertedBlock As AcadExternalReference
    Dim tempBlock As AcadBlock
    Dim msg As String, PathName As String
    
    ' Define external reference to be inserted
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    PathName = "c:\program files\autocad\sample\city map.dwg"
    
    ' Display current Block information for this drawing
    GoSub ListBlocks
    
    ' Add the external reference to the drawing
    Set insertedBlock = ThisDrawing.ModelSpace.AttachExternalReference(PathName, "XREF_IMAGE", InsertPoint, 1, 1, 1, 0, False)
        
    ThisDrawing.Application.ZoomAll
    
    ' Display new Block information for this drawing
    GoSub ListBlocks
    
    Exit Sub

ListBlocks:
    msg = vbCrLf    ' Reset message
    
    For Each tempBlock In ThisDrawing.Blocks
        msg = msg & tempBlock.name & vbCrLf     ' Add Block to list
    Next
    
    MsgBox "The current blocks in this drawing are: " & msg
    
    Return
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AttachExternalReference()
    ;; This example displays all the blocks in the current drawing
    ;; before and after adding an external reference.
    ;;
    ;; This example uses the "STAIR1.dwg" found in the Sample
    ;; directory. If you do not have this drawing, or if it is 
    ;; in a different directory, insert a valid path and file name
    ;; for the PathName variable below.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define external reference to be inserted
    (setq InsertPoint (vlax-3d-point 1 1 0))
    (setq pathName (findfile ".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg"))
    
    ;; Display current Block information for this drawing
    (setq msg "")
    (vlax-for tempBlock (vla-get-Blocks doc)
        (setq msg (strcat msg (vla-get-Name tempBlock) "\n"))     ;; Add Block to list
    )
    
    (alert (strcat "The current blocks in this drawing are: " msg))
    
    ;; Add the external reference to the drawing
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq insertedBlock (vla-AttachExternalReference modelSpace pathName "XREF_IMAGE" InsertPoint 1 1 1 0 :vlax-false))
        
    (vla-ZoomAll acadObj)
    
    ;; Display new Block information for this drawing
    (setq msg "")
    (vlax-for tempBlock (vla-get-Blocks doc)
        (setq msg (strcat msg (vla-get-Name tempBlock) "\n"))     ;; Add Block to list
    )
    
    (alert (strcat "The current blocks in this drawing are: " msg))
)

** AttachToolbarToFlyout Method (ActiveX)

Attaches a toolbar to a toolbar button defined as a flyout.

Supported platforms: Windows only
Signature

VBA:

object.AttachToolbarToFlyout MenuGroupName, ToolbarName

object

    Type: ToolbarItem

    The object this method applies to.
MenuGroupName

    Access: Input-only

    Type: String

    The name of the menu group containing the toolbar you want to attach.
ToolbarName

    Access: Input-only

    Type: String

    The name of the toolbar you want to attach.

Return Value (RetVal)

No return value.
Remarks

To create a new button as a flyout, use the AddToolBarButton method and set the FlyoutButton parameter to True. Once a button has been created as a flyout button, you can then use the AttachToolbarToFlyout method to attach a flyout toolbar to that button.

To query a toolbar button to see if it is a flyout button, use the Type property. To find the toolbar attached to a flyout toolbar button, use the Flyout property.
Examples

VBA:

Sub Example_AttachToolbarToFlyout()
    ' This example uses MenuGroups to obtain a reference to the AutoCAD main menu.
    ' It then creates a new Toolbar(TestMenu) with a Toolbar button that will act
    ' as a flyout.  It then sets the Flyout menu to an existing Toolbar menu.
    ' The Toolbar will automatically be displayed and will display the UCS menu
    ' as a flyout.
        
    Dim currMenuGroup As acadMenuGroup
    Dim newToolBar As AcadToolbar, newToolBarFlyoutButton As AcadToolbarItem
    
    On Error GoTo ERRORTRAP
    
    ' Use MenuGroups property to obtain reference to main AutoCAD menu
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item("ACAD")
    
    ' Create a new Toolbar in this group
    Set newToolBar = currMenuGroup.Toolbars.Add("TestMenu")
    
    ' Add new button to TestMenu that will link to the Flyout menu
    '
    ' * NOTE: Set the macro name to the name of the flyout toolbar because
    ' setting it to an empty string causes an error.  The paremeter
    ' is actually ignored when the style is flyout, but must have any value other than "".
    Set newToolBarFlyoutButton = newToolBar.AddToolbarButton(newToolBar.count + 1, "Flyout", "Flyout", "UCS", True)
    
    ' Link the existing toolbar "UCS" as the flyout for the new toolbar button
    '
    ' * NOTE: To change the flyout, simply change the MenuGroup and Toolbar name below
    newToolBarFlyoutButton.AttachToolbarToFlyout "ACAD", "UCS"
   
    MsgBox "A new Toolbar with a flyout has been added to the AutoCAD menu system!"
    
    Exit Sub

ERRORTRAP:
    MsgBox "The following error has occurred: " & Err.Description
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AttachToolbarToFlyout()
    ;; This example uses MenuGroups to obtain a reference to the AutoCAD main menu.
    ;; It then creates a new Toolbar(TestMenu) with a Toolbar button that will act
    ;; as a flyout.  It then sets the Flyout menu to an existing Toolbar menu.
    ;; The Toolbar will automatically be displayed and will display the UCS menu
    ;; as a flyout.
    (setq acadObj (vlax-get-acad-object))
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) 0))
      
    ;; Create a new Toolbar in this group
    (setq newToolBar (vla-Add (vla-get-Toolbars currMenuGroup) "TestMenu"))
    
    ;; Add new button to TestMenu that will link to the Flyout menu
    ;;
    ;; * NOTE: Set the macro name to the name of the flyout toolbar because
    ;; setting it to an empty string causes an error.  The paremeter
    ;; is actually ignored when the style is flyout, but must have any value other than "".
    (setq newToolBarFlyoutButton (vla-AddToolbarButton newToolBar (1+ (vla-get-Count newToolBar)) "Flyout" "Flyout" "UCS" :vlax-true))
    
    ;; Link the existing toolbar "UCS" as the flyout for the new toolbar button
    ;;
    ;; * NOTE: To change the flyout, simply change the MenuGroup and Toolbar name below
    (vla-AttachToolbarToFlyout newToolBarFlyoutButton "ACAD" "UCS")
   
    (alert "A new Toolbar with a flyout has been added to the AutoCAD menu system!")
)

** AuditInfo Method (ActiveX)

Evaluates the integrity of the drawing.

Supported platforms: Windows only
Signature

VBA:

object.AuditInfo FixError

object

    Type: Document

    The object this method applies to.
FixError

    Access: Input-only

    Type: Boolean

        True: AutoCAD should attempt to fix any problems it encounters.
        False: AutoCAD should not attempt to fix any problems it encounters.

Return Value (RetVal)

No return value.
Remarks

For every error detected, AutoCAD provides a description of the error and recommends corrective action.

If you specify FixError = True, AutoCAD will attempt to fix any errors it encounters.
Examples

VBA:

Sub Example_AuditInfo()
    ' This example has AutoCAD audit
    ' and fix any problems found
    
    ThisDrawing.AuditInfo True
    
    MsgBox "Auditing has been requested." & vbCrLf & _
           "The fix error flag is set to True", , "AuditInfo Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_AuditInfo()
    ;; This example has AutoCAD audit
    ;; and fix any problems found
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    (vla-AuditInfo doc :vlax-true)
    
    (alert (strcat "Auditing has been requested."
                   "\nThe fix error flag is set to True."))
)

*  Methods B
** Bind Method (ActiveX)

Binds an external reference (xref) to a drawing.

Supported platforms: Windows only
Signature

VBA:

object.Bind bPrefixName

object

    Type: Block

    The object this method applies to.
bPrefixName

    Access: Input-only

    Type: Boolean

        True: Symbol names are not prefixed.
        False: Symbol names are prefixed with <blockname>$x$.

Return Value (RetVal)

No return value.
Remarks

Binding an xref to a drawing makes the xref a permanent part of the drawing and no longer an externally referenced file. The externally referenced information becomes a block. When the externally referenced drawing is updated, the bound xref is not updated. This method binds the entire drawing's database, including all of its dependent symbols. Dependent symbols are named objects such as blocks, dimension styles, layers, linetypes, and text styles. Binding the xref allows named objects from the xref to be used in the current drawing.

If the bPrefixName parameter is set to False, the symbol names of the xref drawing are prefixed in the current drawing with <blockname>$x$, where x is an integer that is automatically incremented to avoid overriding existing block definitions. If the bPrefixName parameter is set to True, the symbol names of the xref drawing are merged into the current drawing without the prefix. If duplicate names exist, AutoCAD uses the symbols already defined in the local drawing. If you are unsure whether your drawing contains duplicate symbol names, it is recommended that you set bPrefixName to False.
Examples

VBA:

Sub Example_Bind()
    On Error GoTo ERRORHANDLER
                          
    ' Define external reference to be inserted
    Dim xrefHome As AcadBlock
    Dim xrefInserted As AcadExternalReference
    Dim insertionPnt(0 To 2) As Double
    Dim PathName As String
    insertionPnt(0) = 1
    insertionPnt(1) = 1
    insertionPnt(2) = 0
    PathName = "c:/AutoCAD/sample/City map.dwg"
    
    ' Add the external reference
    Set xrefInserted = ThisDrawing.ModelSpace. _
            AttachExternalReference(PathName, "XREF_IMAGE", _
            insertionPnt, 1, 1, 1, 0, False)
    ZoomAll
    MsgBox "The external reference is attached."
    
    ' Bind the external reference definition
    ThisDrawing.Blocks.Item(xrefInserted.name).Bind False
    MsgBox "The external reference is bound."
    Exit Sub
ERRORHANDLER:
    MsgBox Err.Description
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Bind()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
                          
    ;; Define external reference to be inserted
    (setq insertionPnt (vlax-3d-point 1 1 0)
          pathName (findfile ".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg"))

    ;; Add the external reference
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq xrefInserted (vla-AttachExternalReference modelSpace pathName "XREF_IMAGE" insertionPnt 1 1 1 0 :vlax-false))
    (vla-ZoomAll acadObj)
    (alert "The external reference is attached.")
    
    ;; Bind the external reference definition
    (vla-Bind (vla-Item (vla-get-Blocks doc) (vla-get-Name xrefInserted)) :vlax-false)
    (alert "The external reference is bound.")
)

** Block Method (ActiveX)

Returns the block of a SortentsTable object.
Signature

VBA:

RetVal = object.Block

object

    Type: SortentsTable

    The object this method applies to.

Return Value (RetVal)

Type: Block

The Block of the object.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.

    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject("AutoCAD.AcCmColor." & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne

    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject("ACAD_SORTENTS")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject("ACAD_SORTENTS", "AcDbSortentsTable")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))

    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat "AutoCAD.AcCmColor." (substr (getvar "ACADVER") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
				  6 20 0
				 )
    )

    (setq plineObj (vla-AddPolyline modelSpace points))

    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)

    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))

    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)

    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)

    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))

    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary "ACAD_SORTENTS")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary "ACAD_SORTENTS" "AcDbSortentsTable"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)

    (vlax-release-object MyColorObjOne)
)

** Boolean Method (ActiveX)

Performs a Boolean operation (union, intersect, or subtract) between the object and another 3DSolid or Region object.

Supported platforms: Windows only
Signature

VBA:

object.Boolean(Operation, Object)

object

    Type: 3DSolid, Region

    The objects this method applies to.
Operation

    Access: Input-only

    Type: AcBooleanType enum

        acUnion: Performs a union operation.
        acIntersection: Performs an intersection operation.
        acSubtraction: Performs a subtraction operation.

Object

    Access: input-only

    Type: 3DSolid, Region

    The object the operation is performed against.

Return Value (RetVal)

No return value.
Remarks

The first object is modified as a result of the operation.


Solids before Boolean intersection


Resulting solid from Boolean intersection
Note: If there is no result from the operation, the first object is not changed. For example, when finding the intersection between two non-intersecting objects, there is no change to the first object.
Examples

VBA:

Sub Example_Boolean()
    ' This example creates a box and a cylinder in model space.
    ' It then performs a Boolean operation on the two solids.
    
    Dim boxObj As Acad3DSolid
    Dim boxLength As Double, boxWidth As Double, boxHeight As Double
    Dim boxCenter(0 To 2) As Double
    boxCenter(0) = 5#: boxCenter(1) = 5#: boxCenter(2) = 0
    boxLength = 10#: boxWidth = 7: boxHeight = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(boxCenter, boxLength, boxWidth, boxHeight)
    
    ' Define the cylinder
    Dim cylinderObj As Acad3DSolid
    Dim cylinderCenter(0 To 2) As Double
    Dim cylinderRadius As Double
    Dim cylinderHeight As Double
    cylinderCenter(0) = 0#: cylinderCenter(1) = 0#: cylinderCenter(2) = 0#
    cylinderRadius = 5#
    cylinderHeight = 20#
    
    ' Create the Cylinder (3DSolid) object in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddCylinder(cylinderCenter, cylinderRadius, cylinderHeight)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Perform an intersection on the two solids
    MsgBox "Perform an intersection on the two solids.", vbOKOnly, "Boolean Example"
    boxObj.Boolean acIntersection, cylinderObj
    ThisDrawing.Regen True
    
    MsgBox "Intersection complete.", , "Boolean Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Boolean()
    ;; This example creates a box and a cylinder in model space.
    ;; It then performs a Boolean operation on the two solids.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq boxCenter (vlax-3d-point 5 5 0)
          boxLength 10
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq boxObj (vla-AddBox modelSpace boxCenter boxLength boxWidth boxHeight))
    
    ;; Define the cylinder
    (setq cylinderCenter (vlax-3d-point 0 0 0)
          cylinderRadius 5
          cylinderHeight 20)
    
    ;; Create the Cylinder (3DSolid) object in model space
    (setq cylinderObj (vla-AddCylinder modelSpace cylinderCenter cylinderRadius cylinderHeight))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Perform an intersection on the two solids
    (alert "Perform an intersection on the two solids.")
    (vla-Boolean boxObj acIntersection cylinderObj)
    (vla-Regen doc :vlax-true)
    
    (alert "Intersection complete.")
)

*  Methods C
** CheckInterference Method (ActiveX)

Checks for interference between two solids and, if specified, creates a solid from the interference.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.CheckInterference(Object, CreateInterferenceSolid, SolidsInterfere)

object

    Type: 3DSolid

    The object this method applies to.
Object

    Access: input-only

    Type: 3DSolid

    The object to check against.
CreateInterferenceSolid

    Access: input-only

    Type: Boolean

        True: Creates the interference solid.
        False: Does not create the interference solid.

SolidsInterfere

    Access: output-only

    Type: Boolean

        True: The solids do interfere.
        False: The solids do not interfere.

Return Value (RetVal)

Type: 3DSolid

The resulting object if CreateInterferenceSolid is set to True.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_CheckInterference()
    ' This example creates a box and a cylinder in model space.
    ' It then finds the interference between the two solids and
    ' creates a new solid from that interference.
    
    ' For ease of viewing, different colors are used for the box, the
    ' cylinder, and the interference solid.
    
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject("AutoCAD.AcCmColor." & Left(AcadApplication.Version, 2))

    Dim boxObj As Acad3DSolid
    Dim boxLength As Double, boxWidth As Double, boxHeight As Double
    Dim boxCenter(0 To 2) As Double
    boxCenter(0) = 5#: boxCenter(1) = 5#: boxCenter(2) = 0
    boxLength = 10#: boxWidth = 7: boxHeight = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(boxCenter, boxLength, boxWidth, boxHeight)
    Call color.SetRGB(80, 100, 244)
	   boxObj.TrueColor = color
    
    ' Define the cylinder
    Dim cylinderObj As Acad3DSolid
    Dim cylinderCenter(0 To 2) As Double
    Dim cylinderRadius As Double
    Dim cylinderHeight As Double
    cylinderCenter(0) = 0#: cylinderCenter(1) = 0#: cylinderCenter(2) = 0#
    cylinderRadius = 5#
    cylinderHeight = 20#
    
    ' Create the Cylinder (3DSolid) object in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddCylinder(cylinderCenter, cylinderRadius, cylinderHeight)
    Call color.SetRGB(244, 150, 50)
	   cylinderObj.TrueColor = color
    
    ' Find the interference between the two solids and create a new solid from it
    Dim solidObj As Acad3DSolid
    Dim bSolidsInterfere As Boolean
    Set solidObj = boxObj.CheckInterference(cylinderObj, True, bSolidsInterfere)
    Call color.SetRGB(200, 150, 244)
	   solidObj.TrueColor = color

    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' You can now delete the box and cylinder in AutoCAD to
    ' see the interference solid more clearly.
               
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CheckInterference()
    ;; This example creates a box and a cylinder in model space.
    ;; It then finds the interference between the two solids and
    ;; creates a new solid from that interference.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))   
    
    ;; For ease of viewing, different colors are used for the box, the
    ;; cylinder, and the interference solid.
    (setq color (vlax-create-object (strcat "AutoCAD.AcCmColor." (substr (getvar "ACADVER") 1 2))))

    (setq boxCenter (vlax-3d-point 5 5 0)
          boxLength 10
	         boxWidth 7
	         boxHeight 10)

    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace boxCenter boxLength boxWidth boxHeight))

    (vla-SetRGB color 80 100 244)
    (vla-put-TrueColor boxObj color)
    
    ;; Define the cylinder
    (setq cylinderCenter (vlax-3d-point 0 0 0)
          cylinderRadius 5
	         cylinderHeight 20)
    
    ;; Create the Cylinder (3DSolid) object in model space
    (setq cylinderObj (vla-AddCylinder modelSpace cylinderCenter cylinderRadius cylinderHeight))
    (vla-SetRGB color 244 150 50)
    (vla-put-TrueColor cylinderObj color)
    
    ;; Find the interference between the two solids and create a new solid from it
    (setq solidObj (vla-CheckInterference boxObj cylinderObj :vlax-true :vlax-true))
    (vla-SetRGB color 200 150 244)
    (vla-put-TrueColor solidObj color)

    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; You can now delete the box and cylinder in AutoCAD to
    ;; see the interference solid more clearly.
    (vlax-release-object color)
)

** Clear Method (ActiveX)

Clears the specified selection set of all items.

Supported platforms: Windows only
Signature

VBA:

object.Clear

object

    Type: SelectionSet

    The object this method applies to.

Return Value (RetVal)

No return value.
Remarks

Items cleared from a selection set remain in the drawing; they are simply no longer associated to the selection set.

To clear a subset of the items in a selection set, use the RemoveItems method.

This method differs from the Delete method in that it does not remove objects from the drawing.
Examples

VBA:

Sub Example_Clear()
    ' This example creates a selection set and several objects.
    ' It then adds the objects to the selection set. It then
    ' clears the objects from the selection set.
    
    ' Create the new selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add("TEST_SELECTIONSET")
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True

    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)

    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)

    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the selection set.
    ReDim ssobjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set ssobjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the selection set
    ssetObj.AddItems ssobjs
    GoSub LISTOBJS
    
    ' Clear the selection set
    ssetObj.Clear
    
    ThisDrawing.Regen acActiveViewport
    GoSub LISTOBJS
Exit Sub
LISTOBJS:
    
        ' List all the objects in the selection set
        If ssetObj.count = 0 Then
            MsgBox "The selection set is empty"
        Else
            For I = 0 To ssetObj.count - 1
                MsgBox "The selection set contains: " & ssetObj.Item(I).ObjectName
            Next
        End If
        Return
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Clear()
    ;; This example creates a selection set and several objects.
    ;; It then adds the objects to the selection set. It then
    ;; clears the objects from the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    ;; Create the new selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) "TEST_SELECTIONSET"))
    
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
				                              9 2
				                              3 5
				                             )
    )

    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)

    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))

    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))

    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the selection set.
    (setq ssobjs (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count modelSpace) 1))))
    (setq I 0)
    (while (>= (- (vla-get-Count modelSpace) 1) I)
        (vlax-safearray-put-element ssobjs I (vla-Item modelSpace I))
        (setq I (1+ I))
    )
    
    ;; Add the array of objects to the selection set
    (vla-AddItems ssetObj ssobjs)

    ;; List all the objects in the selection set
    (if (> (vla-get-Count ssetObj) 0)
        (progn
	    (setq msg (strcat "The selection set contains " (itoa (vla-get-Count ssetObj)) " objects of types: "))
            (vlax-for obj ssetObj
                (setq msg (strcat msg "\n" (vla-get-ObjectName obj)))
            )
            (alert msg)	  
        )
    )
  
    ;; Clear the selection set
    (vla-Clear ssetObj)
    
    (vla-Regen doc acActiveViewport)

    ;; List all the objects in the selection set
    (if (= (vla-get-Count ssetObj) 0)
        (alert "The selection set is empty.")
    )
)

** ClearSubSelection Method (ActiveX)

Removes a subselection set of cells from a table.

Supported platforms: Windows only
Signature

VBA:

object.ClearSubSelection

object

    Type: Table

    The object this method applies to.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** ClearTableStyleOverrides Method (ActiveX)

Clears table style overrides.

Supported platforms: Windows only
Signature

VBA:

object.ClearTableStyleOverrides flag

object

    Type: Table

    The object this method applies to.
flag

    Access: Input-only

    Type: Long; one of three integer values

        0: Deletes all table and cell overrides.
        1: Deletes all table overrides, but retains cell overrides.
        2: Deletes all cell overrides, but retains table overrides.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** ClipBoundary Method (ActiveX)

Specifies the clipping boundary for a raster image or an underlay.

Supported platforms: Windows only
Signature

VBA:

object.ClipBoundary PointsArray

object

    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay, RasterImage, Wipeout

    The objects this method applies to.
PointsArray

    Access: Input-only

    Type: Variant (array of two-element array of doubles)

    An array of 2D WCS coordinates specifying the clipping boundary of a raster image or underlay.

Return Value (RetVal)

No return value.
Remarks

You can define a region of an image or underlay object for display and plotting by clipping the object. Multiple instances of the same object can have different boundaries.

The clipping boundary must be a closed 2D polygon or rectangle with vertices constrained to lie within the boundaries of the image or underlay.

To clip an image or underlay, the object's boundary must be visible. Use the ClippingEnabled property to turn the clipping boundary on or off.
Examples

VBA:

Sub Example_ClipBoundary()
    ' This example adds a raster image in model space.
    ' It then clips the image based on a clip boundary.
    
    ' This example uses the "2d Projected Polylines.jpg" found in the Sample
    ' directory. If you do not have the image, or if it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    
    imageName = "C:\AutoCAD\sample\2d Projected Polylines.jpg"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 2#
    rotationAngle = 0
    
    On Error Resume Next
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    If Err.Description = "Filer error" Then
        MsgBox imageName & " could not be found."
        Exit Sub
    End If
    
    ZoomAll
    MsgBox "Clip the image?", , "ClipBoundary Example"
    
    ' Establish the clip boundary with an array of points
    Dim clipPoints(0 To 9) As Double
    clipPoints(0) = 6: clipPoints(1) = 6.75
    clipPoints(2) = 7: clipPoints(3) = 6
    clipPoints(4) = 6: clipPoints(5) = 5
    clipPoints(6) = 5: clipPoints(7) = 6
    clipPoints(8) = 6: clipPoints(9) = 6.75
    
    ' Clip the image
    rasterObj.clipBoundary clipPoints
    
    ' Enable the display of the clip
    rasterObj.ClippingEnabled = True
    ThisDrawing.Regen acActiveViewport
    MsgBox "The image has been clipped.", , "ClipBoundary Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ClipBoundary()
    ;; This example adds a raster image in model space.
    ;; It then clips the image based on a clip boundary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; This example uses the "2d Projected Polylines.jpg" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName ".\\Sample\\VBA\\2d Projected Polylines.jpg"
          scalefactor 2
          rotationAngle 0)

    (if (/= (findfile ".\\Sample\\VBA\\2d Projected Polylines.jpg") nil)
        (progn  
	    ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile ".\\Sample\\VBA\\2d Projected Polylines.jpg") insertionPoint scalefactor rotationAngle))
    
	    (vla-ZoomAll acadObj)
	    (alert "Clip the image?")
	    
	    ;; Establish the clip boundary with an array of points
	    (setq clipPoints (vlax-make-safearray vlax-vbDouble '(0 . 9)))
	    (vlax-safearray-fill clipPoints '(6 6.75
					                                  7 6
					                                  6 5
					                                  5 6
					                                  6 6.75
					                                 )
	    )
	    
	    ;; Clip the image
	    (vla-ClipBoundary rasterObj clipPoints)
	    
	    ;; Enable the display of the clip
	    (vla-put-ClippingEnabled rasterObj :vlax-true)
	    (vla-Regen doc acActiveViewport)
	    (alert "The image has been clipped.")
        )
        (alert (strcat imageName " could not be found."))
    )    
)

** Close Method (ActiveX)

Closes the specified drawing, or all open drawings.

Supported platforms: Windows only
Signature

VBA:

object.Close [SaveChanges] [, FileName]

object

    Type: Document, Documents

    The objects this method applies to.
SaveChanges

    Access: Input-only; optional

    Type: Variant

    Specifies if the drawing is to be saved or not. (Not applicable when called from Documents collection.)

        True: Save the drawing.
        False: Do not save the drawing.

FileName

    Access: Input-only; optional

    Type: String

    The name to assign to the drawing. If no name is provided when saving a drawing for the first time, the drawing will be saved using the VBA project information: ThisDrawing.Path\ThisDrawing.Name. (Not applicable when called from Documents collection.)

Return Value (RetVal)

No return value.
Remarks

If there are no changes to the drawing, SaveChanges and FileName are ignored. If there are changes to the drawing, SaveChanges specifies whether changes should be saved. The default value for the SaveChanges parameter is True.

    If SaveChanges is True and there is not yet a file name associated with a drawing, then the FileName argument is used. If FileName is omitted, or if calling this method from the Documents collection, an error will be issued.
    If SaveChanges is False, then the drawing is closed and the changes are not saved.

Calling this method from the Documents collection in MDI mode will close all open drawings. To close a single drawing, call this method from the drawing to be closed.

You cannot close a drawing from inside an event handler for that drawing.
Note: Closing a drawing destroys the Document object. Never try to reference an object once it has been destroyed, or in this case, closed. In-process clients (VBA macros) may notice that objects are not destroyed until the subroutine is exited. However, references to destroyed objects are not recommended at all, even in the in-process code.
Examples

VBA:

Sub Example_Close()
    ' This example cycles through the documents collection
    ' and closes all open drawings using the Close method.

    Dim DOC As AcadDocument
    
    ' If there are no open documents, then exit
    If Documents.count = 0 Then
        MsgBox "There are no open documents!"
        Exit Sub
    End If
    
    ' Close all open documents
    For Each DOC In Documents
        If MsgBox("Do you wish to close the document: " & DOC.WindowTitle, vbYesNo & vbQuestion) = vbYes Then
            If DOC.FullName <> "" Then
                DOC.Close
            Else
                MsgBox DOC.name & " has not been saved yet, so it will not be closed."
            End If
        End If
    Next
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Close()
    ;; This example cycles through the documents collection
    ;; and closes all open drawings using the Close method
    ;; except the current drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq curDoc (vla-get-ActiveDocument acadObj))
    (setq docs (vla-get-Documents acadObj))

    ;; Close all open documents and discard changes, except for the current drawing
    (vlax-for doc docs
        (if (/= (vla-get-Name doc) (vla-get-Name curDoc))
	    (progn
	        (alert (strcat "Closing " (vla-get-Name doc) " file."))
                (vla-Close doc :vlax-false)
	    )
        )
    )
)

** ConvertToAnonymousBlock Method (ActiveX)

Converts a dynamic block to a regular anonymous block.

Supported platforms: Windows only
Signature

VBA:

object.ConvertToAnonymousBlock

object

    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock

    The objects this method applies to.

Return Value (RetVal)

No return value.
Remarks

The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples

VBA:

Not available

Visual LISP:

Not available

** ConvertToStaticBlock Method (ActiveX)

Converts a dynamic block to a regular named block.

Supported platforms: Windows only
Signature

VBA:

object.ConvertToStaticBlock newBlockName

object

    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock

    The objects this method applies to.
newBlockName

    Access: Input-only

    Type: String

    The name for the block.

Return Value (RetVal)

No return value.
Remarks

The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples

VBA:

Not available

Visual LISP:

Not available

** Copy Method (ActiveX)

Duplicates the given object to the same location.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.Copy

object

    Type: All drawing objects, AttributeReference, Dimension

    The objects this method applies to.

Return Value (RetVal)

Type: All drawing objects, AttributeReference, Dimension

The newly created duplicate object.
Remarks

AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
Examples

VBA:

Sub Example_Copy()
    ' This example creates a circle and then copies
    ' that circle. The new circle is then moved.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 0.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    MsgBox "Copy the circle.", , "Copy Example"
    
    ' Copy the circle
    Dim copyCircleObj As AcadCircle
    Set copyCircleObj = circleObj.Copy()
    
    ' Define the points that make up the move vector
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 2: point2(1) = 0: point2(2) = 0
        
    MsgBox "Move the copied circle 2 units in the X direction.", , "Copy Example"
    
    ' Move the circle and color it
    copyCircleObj.Move point1, point2
    
    ZoomAll
    MsgBox "Move completed.", , "Copy Example"
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Copy()
    ;; This example creates a circle and then copies
    ;; that circle. The new circle is then moved.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)
          radius 0.5)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    (alert "Copy the circle.")
    
    ;; Copy the circle
    (setq copyCircleObj (vla-Copy circleObj))
    
    ;; Define the points that make up the move vector
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 2 0 0))
        
    (alert "Move the copied circle 2 units in the X direction.")
    
    ;; Move the circle and color it
    (vla-Move copyCircleObj point1 point2)
    
    (vla-ZoomAll acadObj)
    (alert "Move completed.")
)

** CopyFrom Method (ActiveX)

Copies the settings for a dimension style, layout, or plot configuration.

Supported platforms: Windows only
Signature

VBA:

object.CopyFrom SourceObject

object

    Type: DimStyle, Layout, PlotConfiguration

    The objects this method applies to.
SourceObject

    Access: Input-only

    Type: DimStyle, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Document, Layout, Leader, PlotConfiguration

    The source object to be copied.

    Layout and PlotConfiguration: The source object must be a PlotConfiguration object.

    DimStyle: The source object must be either a DimStyle, Document, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, or Leader.

Return Value (RetVal)

No return value.
Remarks

DimStyle: This method allows users to copy dimension style data into an existing dimension style from three different types of sources.

    If SourceObject is a dimension (this includes all dimension objects), Tolerance, or Leader object, this method copies the style for that object plus any object overrides.
    If SourceObject is a DimStyle object, this method copies the style data from that dimension style.
    If SourceObject is a Document object, this method copies the active dimension style settings for the drawing plus any drawing overrides.

Examples

VBA:

Sub Example_CopyFrom()
    ' This example will create two new plot configurations, NewPC1 and NewPC2, and will use
    ' the CopyFrom method to duplicate the settings in the first plot configuration
    ' to the second plot configuration.

    Dim PlotConfigurations As AcadPlotConfigurations
    Dim PlotConfiguration As AcadPlotConfiguration
    Dim NewPC1 As AcadPlotConfiguration, NewPC2 As AcadPlotConfiguration
    
    ' Get PlotConfigurations collection from document object
    Set PlotConfigurations = ThisDrawing.PlotConfigurations
    
    ' Add NewPC1 and customize some of the properties
    Set NewPC1 = PlotConfigurations.Add("NEW_CONFIGURATION1")
    NewPC1.PlotRotation = ac270degrees
    NewPC1.PlotHidden = True
    NewPC1.PaperUnits = acMillimeters
    
    ' Add NewPC2 and leave default values intact
    Set NewPC2 = PlotConfigurations.Add("NEW_CONFIGURATION2")
    
    ' Show NewPC2 settings before we copy information from NewPC1
    GoSub VIEWPC2SETTINGS
    
    ' Copy setting information from NewPC1 to NewPC2
    NewPC2.CopyFrom NewPC1
    NewPC2.name = "NEW_CONFIGURATION2"
    
    ' Show NewPC2 settings after we copy information from NewPC1
    GoSub VIEWPC2SETTINGS
    
    Exit Sub
    
VIEWPC2SETTINGS:
    MsgBox "The settings for NEW_CONFIGURATION2 are: " & vbCrLf & _
           "Plot Rotation: " & NewPC2.PlotRotation & vbCrLf & _
           "Plot Hidden: " & NewPC2.PlotHidden & vbCrLf & _
           "Paper Units: " & NewPC2.PaperUnits

    Return
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CopyFrom()
    ;; This example will create two new plot configurations, NewPC1 and NewPC2, and will use
    ;; the CopyFrom method to duplicate the settings in the first plot configuration
    ;; to the second plot configuration.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Get PlotConfigurations collection from document object
    (setq PlotConfigurations (vla-get-PlotConfigurations doc))
    
    ;; Add NewPC1 and customize some of the properties
    (setq NewPC1 (vla-Add PlotConfigurations "NEW_CONFIGURATION1"))
    (vla-put-PlotRotation NewPC1 ac270degrees)
    (vla-put-PlotHidden NewPC1 :vlax-true)
    (vla-put-PaperUnits NewPC1 acMillimeters)
    
    ;; Add NewPC2 and leave default values intact
    (setq NewPC2 (vla-Add PlotConfigurations "NEW_CONFIGURATION2"))
    
    ;; Show NewPC2 settings before we copy information from NewPC1
    (alert (strcat "The settings for NEW_CONFIGURATION2 are: "
                   "\nPlot Rotation: " (itoa (vla-get-PlotRotation NewPC2))
                   "\nPlot Hidden: " (if (= (vla-get-PlotHidden NewPC2) :vlax-true) "True" "False")
                   "\nPaper Units: " (itoa (vla-get-PaperUnits NewPC2))
	          )
    )
    
    ;; Copy setting information from NewPC1 to NewPC2
    (vla-CopyFrom NewPC2 NewPC1)
    (vla-put-Name NewPC2 "NEW_CONFIGURATION2")

    ;; Show NewPC2 settings after we copy information from NewPC1
    (alert (strcat "The settings for NEW_CONFIGURATION2 are: "
                   "\nPlot Rotation: " (itoa (vla-get-PlotRotation NewPC2))
                   "\nPlot Hidden: " (if (= (vla-get-PlotHidden NewPC2) :vlax-true) "True" "False")
                   "\nPaper Units: " (itoa (vla-get-PaperUnits NewPC2))
	          )
    )
)

** CopyObjects Method (ActiveX)

Duplicates multiple objects (deep cloning).

Supported platforms: Windows only
Signature

VBA:

RetVal = object.CopyObjects(Objects [, Owner] [, IDPairs])

object

    Type: Database, Document

    The objects this method applies to.
Objects

    Access: Input-only

    Type: Variant (array of Objects)

    The array of primary objects to be copied. All the objects must have the same owner, and the owner must belong to the database or document that is calling this method.
Owner

    Access: Input-only; optional

    Type: Variant (a single object)

    The new owner for the copied objects. If no owner is specified, the objects will be created with the same owner as the objects in the Objects array.
IDPairs

    Access: Input-output; optional

    Type: Variant (array of IDPair objects)

    Information on what happened during the copy and translation process.

        Input: an empty variant.
        Output: an array of IDPair objects.

Return Value (RetVal)

Type: Variant (array of objects)

An array of newly created duplicate objects. Only primary objects are returned in this array. For more information on what occurred during the CopyObjects operation, or a list of objects owned by primary objects that were also copied, consult the IDPairs parameter.
Remarks

To copy objects to another open drawing, set the Owner parameter to the other drawing's model space.

During the CopyObjects operation, objects that are owned or referenced by the primary objects in the Objects parameter will also be copied.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
Examples

VBA:

Sub Example_CopyObjects()
    ' This example creates a Circle object and uses the CopyObjects
    ' method to make a copy of the new Circle.

    Dim DOC1 As AcadDocument
    Dim circleObj1 As AcadCircle, circleObj2 As AcadCircle
    Dim circleObj1Copy As AcadCircle, circleObj2Copy As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius1 As Double, radius2 As Double
    Dim radius1Copy As Double, radius2Copy As Double
    Dim objCollection(0 To 1) As Object
    Dim retObjects As Variant
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius1 = 5#: radius2 = 7#
    radius1Copy = 1#: radius2Copy = 2#
    
    ' Create a new drawing
    Set DOC1 = Documents.Add
    
    ' Add two circles to the drawing
    Set circleObj1 = DOC1.ModelSpace.AddCircle(centerPoint, radius1)
    Set circleObj2 = DOC1.ModelSpace.AddCircle(centerPoint, radius2)
    ThisDrawing.Application.ZoomAll
    
    ' Copy objects
    '
    ' First put the objects to be copied into a form compatible with CopyObjects
    Set objCollection(0) = circleObj1
    Set objCollection(1) = circleObj2
    
    ' Copy object and get back a collection of the new objects (copies)
    retObjects = DOC1.CopyObjects(objCollection)
    
    ' Get newly created object and apply new properties to the copies
    Set circleObj1Copy = retObjects(0)
    Set circleObj2Copy = retObjects(1)
    
    circleObj1Copy.radius = radius1Copy
    circleObj2Copy.radius = radius2Copy
        
    ThisDrawing.Application.ZoomAll
    
    MsgBox "Circles copied."
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CopyObjects()
    ;; This example creates a Circle object and uses the CopyObjects
    ;; method to make a copy of the new Circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Load the ObjectDBX library
    (if (= acLibImport nil)
	       (progn
	           (vlax-import-type-library :tlb-filename "C:\\Program Files\\Common Files\\Autodesk Shared\\axdb24enu.tlb"
	                                     :methods-prefix "acdbm-"
	                                     :properties-prefix "acdbp-"
	                                     :constants-prefix "acdbc-"
	           )
            (setq acLibImport T)
        )
    )

    ;; Create a reference to the ObjectDBX object
    (setq acdbObj (vlax-create-object "ObjectDBX.AxDbDocument.24"))

    ;; Open an external drawing file
    (acdbm-open acdbObj (findfile ".\\Sample\\VBA\\Tower.dwg"))

    ;; Add two circles to the drawing
    (setq objCollection (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count (vla-get-ModelSpace acdbObj)) 1)))
	  count 0)

    ;; Copy objects
    (vlax-for eachObj (vla-get-ModelSpace acdbObj)
        (vlax-safearray-put-element objCollection count eachObj)
        (setq count (1+ count))
    )
     
    ;; Copy object and get back a collection of the new objects (copies)
    (setq retObjects (vla-CopyObjects acdbObj objCollection (vla-get-ModelSpace (vla-get-Database doc))))
    
    (vla-ZoomAll acadObj)
    
    (alert "Model space objects copied.")

    ;; Close the in memory drawing
    (vlax-release-object acdbObj)
)

** CopyProfile Method (ActiveX)

Copies the specified profile.

Supported platforms: Windows only
Signature

VBA:

object.CopyProfile oldProfileName, newProfileName

object

    Type: PreferencesProfiles

    The object this method applies to.
oldProfileName

    Access: Input-only

    Type: String

    The name of the profile to copy.
newProfileName

    Access: Input-only

    Type: String

    The name of the new profile to be created.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_CopyProfile()
    ' This example copies an existing profile.
    ' You can see the new profile under Options/Profiles
    '
    ' *Note: This example relies on the default profile "<<Unnamed Profile>>".
    ' If this profile has already been renamed or removed, be sure to change the
    ' name of the SourceProfile to one that currently exists.
    
    Dim ACADPref As AcadPreferencesProfiles
    Dim SourceProfile As String, DestinationProfile As String
    
    ' Use the PreferencesProfiles object
    Set ACADPref = ThisDrawing.Application.Preferences.Profiles
    
    ' Copy the default profile
    On Error GoTo ERRORTRAP
    
    SourceProfile = "<<Unnamed Profile>>"
    DestinationProfile = "NEW_PROFILE"
    
    ACADPref.CopyProfile SourceProfile, DestinationProfile
    
    MsgBox "We have just copied the existing profile " & SourceProfile & " to " & DestinationProfile
    
    Exit Sub
    
ERRORTRAP:
    If Err.Description <> "" Then
        MsgBox "The default profile '" & SourceProfile & "' cannot be found, please use a different source profile."
    End If
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CopyProfile()
    ;; This example copies an existing profile.
    ;; You can see the new profile under Options/Profiles
    ;;
    ;; *Note: This example relies on the default profile "<<Unnamed Profile>>".
    ;; If this profile has already been renamed or removed, be sure to change the
    ;; name of the SourceProfile to one that currently exists.
    (setq acadObj (vlax-get-acad-object))
    (setq preferences (vla-get-Preferences acadObj))
  
    ;; Use the PreferencesProfiles object
    (setq ACADPref (vla-get-Profiles preferences))
    
    (setq SourceProfile "<<Unnamed Profile>>"
          DestinationProfile "NEW_PROFILE")
    
    (vla-CopyProfile ACADPref SourceProfile DestinationProfile)
    
    (alert (strcat "We have just copied the existing profile " SourceProfile " to " DestinationProfile))
)

** CreateCellStyle Method (ActiveX)

Creates a cell style with the given name.

Supported platforms: Windows only
Signature

VBA:

object.CreateCellStyle StringCellStyle

object

    Type: TableStyle

    The object this method applies to.
StringCellStyle

    Access: Input-only

    Type: String

    New cell style name.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item("acad_tablestyle")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = "NewStyle"
    className = "AcDbTableStyle"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = "NewStyle"
    customObj.Description = "New Style for My Tables"
  
    customObj.CreateCellStyle ("NewTestStyle")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 "NewTestStyle", "test format"
    customObj.GetFormat2 "NewTestStyle", cellTestFormat
      
    MsgBox "Cell Style Name = " & cellTestFormat

    customObj.RenameCellStyle "NewTestStyle", "NewTestStyle2"
    customObj.GetFormat2 "NewTestStyle2", cellTestFormat
    
    MsgBox "Cell Style Name = " & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName("testbase")
      
    MsgBox "Cell Style Name = " & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse("testbase") = False Then
        MsgBox "That cell style is not being used!"
    End If
    
    customObj.CreateCellStyleFromStyle "TestStyleFromStyle", "NewTestStyle2"
      
    customObj.DeleteCellStyle "NewTestStyle2"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries "acad_tablestyle"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName "NewStyle"
          className "AcDbTableStyle")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj "NewStyle")
    (vla-put-Description customObj "New Style for My Tables")
  
    (vla-CreateCellStyle customObj "NewTestStyle")

    (setq cellTestFormat "")
    (vla-SetFormat2 customObj "NewTestStyle" "test format")
    (vla-GetFormat2 customObj "NewTestStyle" 'cellTestFormat)
      
    (alert (strcat "Cell Style Name = " cellTestFormat))

    (vla-RenameCellStyle customObj "NewTestStyle" "NewTestStyle2")
    (vla-GetFormat2 customObj "NewTestStyle2" 'cellTestFormat)
      
    (alert (strcat "Cell Style Name = " cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj "testbase"))
      
    (alert (strcat "Cell Style Name = " uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj "testbase") :vlax-false)
        (alert "That cell style is not being used!")
    )
    
    (vla-CreateCellStyleFromStyle customObj "TestStyleFromStyle" "NewTestStyle2")
      
    (vla-DeleteCellStyle customObj "NewTestStyle2")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat "Number of Cell Styles = " (itoa numOfStyles)))
)

** CreateCellStyleFromStyle Method (ActiveX)

Creates a cell style from a given name.

Supported platforms: Windows only
Signature

VBA:

object.CreateCellStyleFromStyle StringCellStyle, StringSourceCellStyle

object

    Type: TableStyle

    The object this method applies to.
StringCellStyle

    Access: Input-only

    Type: String

    New cell style name.
StringSourceCellStyle

    Access: Input-only

    Type: String

    Source cell style name.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item("acad_tablestyle")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = "NewStyle"
    className = "AcDbTableStyle"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = "NewStyle"
    customObj.Description = "New Style for My Tables"
  
    customObj.CreateCellStyle ("NewTestStyle")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 "NewTestStyle", "test format"
    customObj.GetFormat2 "NewTestStyle", cellTestFormat
      
    MsgBox "Cell Style Name = " & cellTestFormat

    customObj.RenameCellStyle "NewTestStyle", "NewTestStyle2"
    customObj.GetFormat2 "NewTestStyle2", cellTestFormat
    
    MsgBox "Cell Style Name = " & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName("testbase")
      
    MsgBox "Cell Style Name = " & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse("testbase") = False Then
        MsgBox "That cell style is not being used!"
    End If
    
    customObj.CreateCellStyleFromStyle "TestStyleFromStyle", "NewTestStyle2"
      
    customObj.DeleteCellStyle "NewTestStyle2"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries "acad_tablestyle"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName "NewStyle"
          className "AcDbTableStyle")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj "NewStyle")
    (vla-put-Description customObj "New Style for My Tables")
  
    (vla-CreateCellStyle customObj "NewTestStyle")

    (setq cellTestFormat "")
    (vla-SetFormat2 customObj "NewTestStyle" "test format")
    (vla-GetFormat2 customObj "NewTestStyle" 'cellTestFormat)
      
    (alert (strcat "Cell Style Name = " cellTestFormat))

    (vla-RenameCellStyle customObj "NewTestStyle" "NewTestStyle2")
    (vla-GetFormat2 customObj "NewTestStyle2" 'cellTestFormat)
      
    (alert (strcat "Cell Style Name = " cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj "testbase"))
      
    (alert (strcat "Cell Style Name = " uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj "testbase") :vlax-false)
        (alert "That cell style is not being used!")
    )
    
    (vla-CreateCellStyleFromStyle customObj "TestStyleFromStyle" "NewTestStyle2")
      
    (vla-DeleteCellStyle customObj "NewTestStyle2")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat "Number of Cell Styles = " (itoa numOfStyles)))
)

** CreateContent Method (ActiveX)

Creates new content in a cell.

Supported platforms: Windows only
Signature

VBA:

RetVal = object.CreateContent(nRow, nCol, nIndex)

object

    Type: Table

    The object this method applies to.
nRow

    Access: Input-only

    Type: Long

    The row number of the cell to check.
nCol

    Access: Input-only

    Type: Long

    The column number of the cell to check.
nIndex

    Access: Input-only

    Type: Long

    Index at which to create the new context.

Return Value (RetVal)

Type: Long

An ID for the created content.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_ContentChange()
    ' This example adds a table in model space
    ' and manipulates its contents
    
    ' Note: One content is created for each cell by default;
    ' this function need to be called only to create additional contents.
    
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As IAcadTable
    Dim sID As Long
    Dim newSID As Long
    Dim row As Long
    Dim col As Long
    
    ' Creates arbitrary cell points to check
    row = 2
    col = 2
    
    ' Creates the table with an arbitrary number of cells
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)

    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox "There is no content in the cell, but it is editable"
        End If
    End If

    ' Create some content in an arbitrary cell
    sID = MyTable.CreateContent(row, col, 8)

    MsgBox "The content ID is " & sID
 
    ' Move the content to another index
    MyTable.MoveContent row, col, sID, 4
    
    ' Check that the content has been deleted
    MyTable.DeleteContent row, col
    
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox "There is no content in the cell, but it is editable"
        End If
    End If
    
    ZoomExtents
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ContentChange()
    ;; This example adds a table in model space
    ;; and manipulates its contents
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Note: One content is created for each cell by default;
    ;; this function need to be called only to create additional contents.
    
    (setq pt (vlax-3d-point 0 0 0))
    
    ;; Creates arbitrary cell points to check
    (setq row 2
          col 2)
    
    ;; Creates the table with an arbitrary number of cells
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    (vla-SetTextHeight MyTable (+ acDataRow acHeaderRow acTitleRow) 1)
  
    (vla-Regen doc :vlax-true)
    (vla-ZoomExtents acadObj)

    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert "There is no content in the cell, but it is editable")
        )
    )

    ;; Create some content in an arbitrary cell
    (setq sID1 (vla-CreateContent MyTable row col 0))
    (setq sID2 (vla-CreateContent MyTable row col 1))
    (vla-SetTextString MyTable row col sID1 "Value1")
    (vla-SetTextString MyTable row col sID2 "Value2")
    (vla-Regen doc :vlax-true)
  
    (alert (strcat "The content IDs are "
		   "\nValue1: " (itoa sID1)
		   "\nValue2: " (itoa sID2)))
 
    ;; Move the content to another index
    (vla-MoveContent MyTable row col sID2 sID1)
    (vla-Regen doc :vlax-true)
    (alert "Content order changed")
  
    ;  Check that the content has been deleted
    (vla-DeleteContent MyTable row col)
    (vla-Regen doc :vlax-true)
    
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert "There is no content in the cell, but it is editable")
        )
    )
)

** CreateJog Method (ActiveX)

Creates a jog on the section plane.

Supported platforms: Windows only
Signature

VBA:

object.CreateJog varPt

object

    Type: Section

    The object this method applies to.
varPt

    Access: Input-only

    Type: Variant

    Point at which to create the jog.

Return Value (RetVal)

No return value.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** CreateTypedArray Method (ActiveX)

Creates a variant that contains an array of typed arguments.

Supported platforms: Windows only
Signature

VBA:

object.CreateTypedArray VarArr, Type, Value1, [value2, value3, ...valueN]

object

    Type: Utility

    The object this method applies to.
VarArr

    Access: Output-only

    Type: Variant

    The array of values as a variant.
Type

    Access: Input-only

    Type: VbVarType enum

    The type of values you are supplying.

    vbBoolean, vbInteger, vbLong, vbSingle, or vbDouble.
Value1 [Value2, ...ValueN]

    Access: Input-only

    Type: Of the type specified in the Type parameter above.

    The value(s) to be included in the variant.

Return Value (RetVal)

No return value.
Remarks

The resulting variant can be passed into any AutoCAD method or property that accepts an array of numbers as a variant.

This method can only be accessed using late-binding programming techniques. To use this method, define the Utility object as Object (Dim myObj As Object), not as AcadUtility.
Examples

VBA:

Sub Example_CreateTypedArray()
    ' This example creates a spline from variant arrays created
    ' from doubles using the CreateTypedArray method.
    ' Note that this method must be late bound. This is done
    ' by declaring the utility object (utilObj) as Object,
    ' not as AcadUtility.
        
    Dim splineObj As AcadSpline
    
    ' Even though these are arrays, they are declared as variants
    Dim startTan As Variant
    Dim endTan As Variant
    Dim fitPoints As Variant
    
    Dim utilObj As Object   ' Late bound object
    Set utilObj = ThisDrawing.Utility
    
    ' Define the spline.
    utilObj.CreateTypedArray startTan, vbDouble, 0.5, 0.5, 0
    utilObj.CreateTypedArray endTan, vbDouble, 0.5, 0.5, 0
    utilObj.CreateTypedArray fitPoints, vbDouble, 0, 0, 0, 5, 5, 0, 10, 0, 0
    
    ' Create the spline
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_CreateTypedArray()
    ;; This example creates a spline from variant arrays created
    ;; from doubles using the CreateTypedArray method.
    ;; Note that this method must be late bound. This is done
    ;; by declaring the utility object (utilObj) as Object,
    ;; not as AcadUtility.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    (setq utilObj (vla-get-Utility doc))
    
    ;; Define the spline.
    (vla-CreateTypedArray utilObj 'startTan vlax-vbDouble 0.5 0.5 0)
    (vla-CreateTypedArray utilObj 'endTan vlax-vbDouble 0.5 0.5 0)
    (vla-CreateTypedArray utilObj 'fitPoints vlax-vbDouble 0 0 0 5 5 0 10 0 0)
    
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
)

*  Methods XXX
* Property A
** Action Property (ActiveX)

Specifies the security-related operations to be performed on a drawing.

Supported platforms: Windows only
Signature

VBA:

object.Action

object

    Type: SecurityParams

    The object this property applies to.

Property Value

Read-only: No

Type: Long; AcadSecurityParamsType enum

Specify one or more of the following constants for drawing encryption, drawing properties encryption, a digital signature, or a time stamp.

    ACADSECURITYPARAMS_ENCRYPT_DATA: 0x00000001
    ACADSECURITYPARAMS_ENCRYPT_PROPS: 0x00000002
    ACADSECURITYPARAMS_SIGN_DATA: 0x00000010
    ACADSECURITYPARAMS_ADD_TIMESTAMP: 0x00000020

Note: Starting with AutoCAD-2016 based products, the ability to password protect a drawing file has been discontinued. The constant values ACADSECURITYPARAMS_ENCRYPT_DATA and ACADSECURITYPARAMS_ENCRYPT_DATA are obsolete. The SaveAs method produces an error if either of the two constants is used.
Remarks

Each constant represents a security-related operation. When you use the Action property, at some point in the set of operations you must set the Action property to the ACADSECURITYPARAMS_SIGN_DATA constant.

To specify multiple security-related operations, add the constants representing the operations. For example, to sign a drawing and use a time stamp, specify the following:

ACADSECURITYPARAMS_SIGN_DATA + ACADSECURITYPARAMS_ADD_TIMESTAMP

Examples

VBA:

Sub Example_Action()
    ' This example encrypts and saves a file.
    Dim sp As AcadSecurityParams
    Set sp = GetInterfaceObject("AutoCAD.SecurityParams." + Left(AcadApplication.Version, 2))
    
    sp.Action = AcadSecurityParamsType.ACADSECURITYPARAMS_ENCRYPT_DATA
    sp.Algorithm = AcadSecurityParamsConstants.ACADSECURITYPARAMS_ALGID_RC4
    sp.KeyLength = 40
    sp.Password = UCase("mypassword") 'AutoCAD converts all passwords to uppercase before applying them
    sp.ProviderName = "Microsoft Base Cryptographic Provider v1.0"
    sp.ProviderType = 1
    
    ThisDrawing.SaveAs "C:\MyDrawing.dwg", , sp
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Action()
    ;; This example encrypts and saves a drawing file.
    (setq acadObj (vlax-get-acad-object))
    (setq sp (vlax-create-object (strcat "AutoCAD.SecurityParams." (substr (getvar "ACADVER") 1 2))))

    (vla-put-Visible acadObj :vlax-true)

    (vla-put-Action sp ACADSECURITYPARAMS_ENCRYPT_DATA)
    (vla-put-Algorithm sp ACADSECURITYPARAMS_ALGID_RC4)
    (vla-put-KeyLength sp 40)
    (vla-put-Password sp (strcase "mypassword"))
    (vla-put-ProviderName sp "Microsoft Base Cryptographic Provider v1.0")
    (vla-put-ProviderType sp 1)

    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-SaveAs doc "C:\\MyDrawing.dwg" acNative sp)

    (vlax-release-object sp)
)

** Active Property (ActiveX)

Determines if the document is the active document for the session.

Supported platforms: Windows only
Signature

VBA:

object.Active

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: Yes

Type: Boolean

Determines if the document is the active document for the session.

    True: The document is the active document.
    False: The document is not the active document.

Remarks

No additional remarks.
Examples

VBA:

Sub Example_Active()
    ' This example creates two new drawings and determines
    ' which of the drawings is the active drawing.
    
    Dim NewDrawing1 As AcadDocument
    Dim Newdrawing2 As AcadDocument
    Set NewDrawing1 = ThisDrawing.Application.Documents.Add("")
    Set Newdrawing2 = ThisDrawing.Application.Documents.Add("")
    
    Dim activeStatus As String
    Dim drawing As AcadDocument
    activeStatus = ""
    For Each drawing In ThisDrawing.Application.Documents
        If drawing.Active Then
                activeStatus = activeStatus & drawing.Name & " is active." & vbCrLf
        Else
                activeStatus = activeStatus & drawing.Name & " is not active." & vbCrLf
        End If
    Next drawing
    MsgBox activeStatus
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Active()
    ;; This example creates two new drawings and determines
    ;; which open drawing is the active drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq docs (vla-get-Documents acadObj))

    (setq NewDrawing1 (vla-Add docs ""))
    (setq NewDrawing2 (vla-Add docs ""))

    (setq activeStatus "")
  
    (vlax-for each-doc docs
      (princ (vla-get-Active each-doc))
        (if (= (vla-get-Active each-doc) :vlax-true)
           (setq activeStatus (strcat activeStatus (vla-get-name each-doc) " is active.\n"))
           (setq activeStatus (strcat activeStatus (vla-get-name each-doc) " is not active.\n"))
        )
    )

    (alert activeStatus)
)

** ActiveDimStyle Property (ActiveX)

Specifies the active dimension style.

Supported platforms: Windows only
Signature

VBA:

object.ActiveDimStyle

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: DimStyle

A user-specified variable declared as an AcadDimStyle object type.
Remarks

This style will be applied to all newly created dimensions. To change the style on an existing dimension, use the StyleName property.

To control the settings of the current document overrides, use the dimensioning system variables. See "System Variables" in the AutoCAD documentation for a list of dimensioning system variables.

When you change a dimensioning system variable, you are actually setting a document override for the active dimension style. You are not changing the active dimension style itself. To change the settings of a given dimension style, use the CopyFrom method. This method copies a dimension style configuration, including overrides, from a document, dimension, or other dimension style.

Dimensions created via the AutoCAD user interface are created with the active dimension style plus all document overrides. Dimensions created via ActiveX are created with the active dimension style only. To have the dimensions created via ActiveX take on the document overrides, use the CopyFrom method to copy the dimension style from the document to the active dimension style. This process will copy all existing overrides into the active dimension style.
Examples

VBA:

Sub Example_ActiveDimStyle()
    ' This example returns the current dimension style
    ' and then sets a new style.
    ' Finally, it returns the style to the previous setting.
    Dim newDimStyle As AcadDimStyle
    Dim currDimStyle As AcadDimStyle
    
    ' Return current dimension style of active document
    Set currDimStyle = ThisDrawing.ActiveDimStyle
    MsgBox "The current dimension style is " & currDimStyle.name, vbInformation, "ActiveDimStyle Example"
    
    ' Create a dimension style and makes it current
    Set newDimStyle = ThisDrawing.DimStyles.Add("TestDimStyle")
    ThisDrawing.ActiveDimStyle = newDimStyle    ' set current dimension style to newDimStyle
    MsgBox "The new dimension style is " & newDimStyle.name, vbInformation, "ActiveDimStyle Example"
    
    ' Reset the dimension style to its previous setting
    ThisDrawing.ActiveDimStyle = currDimStyle
    MsgBox "The dimension style is reset to " & currDimStyle.name, vbInformation, "ActiveDimStyle Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveDimStyle()
    ;; This example returns the current dimension style
    ;; and then sets a new style.
    ;; Finally, it returns the style to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the current dimension style of the active document
    (setq currDimStyle (vla-get-ActiveDimStyle doc))
    (alert (strcat "The current dimension style is " (vla-get-Name currDimStyle)))
    
    ;; Create a dimension style and make it current
    (setq dimStyles (vla-get-DimStyles doc))
    (setq newDimStyle (vla-Add dimStyles "TestDimStyle"))
    (vla-put-ActiveDimStyle doc newDimStyle)    ;; set current dimension style to newDimStyle
    (alert (strcat "The new dimension style is " (vla-get-Name newDimStyle)))
    
    ;; Restore the previously active dimension style
    (vla-put-ActiveDimStyle doc currDimStyle)
    (alert (strcat "The dimension style is restored to " (vla-get-Name currDimStyle)))
)

** ActiveDocument Property (ActiveX)

Specifies the active document (drawing file).

Supported platforms: Windows only
Signature

VBA:

object.ActiveDocument

object

    Type: Application

    The object this property applies to.

Property Value

Read-only: No

Type: Document

The default is drawing.dwg.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_ActiveDocument()
    Dim activeDoc As AcadDocument
    ' Returns current document in AutoCAD
    Set activeDoc = ThisDrawing.Application.ActiveDocument
    MsgBox "The active document is: " & activeDoc.name, vbInformation, "ActiveDocument Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveDocument()
    ;; Returns current document in AutoCAD
    (setq acadObj (vlax-get-acad-object))
    (setq activeDoc (vla-get-ActiveDocument acadObj))
    (alert (strcat "The active document is: " (vla-get-Name activeDoc)))
)

** ActiveInvProject Property (ActiveX)

Specifies the active Inventor project being used by the Model Documentation feature. (Internal Use Only)

Supported platforms: Windows only
Signature

VBA:

object.ActiveInvProject

object

    Type: PreferencesFiles

    The object this property applies to.

Property Value

Read-only: No

Type: String

The name of the active Autodesk Inventor project.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** ActiveLayer Property (ActiveX)

Specifies the active layer.

Supported platforms: Windows only
Signature

VBA:

object.ActiveLayer

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: Layer

The layer that is currently active.
Remarks

New objects are placed on the active layer as they are created. To change the layer on which an existing object resides, use the Layer property for that object.

To create a new layer, use the Add method.

To change the visibility or another property of a layer, refer to the Layer object.
Examples

VBA:

Sub Example_ActiveLayer()
    ' This example returns the current layer
    ' and then adds a new layer.
    ' Finally, it returns the layer to the previous setting.
    Dim currLayer As AcadLayer
    Dim newLayer As AcadLayer
    
    ' Return the current layer of the active document
    Set currLayer = ThisDrawing.ActiveLayer
    MsgBox "The current layer is " & currLayer.name, vbInformation, "ActiveLayer Example"
    
    ' Create a Layer and make it the active layer
    Set newLayer = ThisDrawing.Layers.Add("TestLayer")
    ThisDrawing.ActiveLayer = newLayer
    MsgBox "The new layer is " & newLayer.name, vbInformation, "ActiveLayer Example"

    ' Reset the layer to its previous setting
    ThisDrawing.ActiveLayer = currLayer
    MsgBox "The active layer is reset to " & currLayer.name, vbInformation, "ActiveLayer Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveLayer()
    ;; This example returns the current layer
    ;; and then adds a new layer.
    ;; Finally, it returns the layer to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Return the current layer of the active document
    (setq currLayer (vla-get-ActiveLayer doc))
    (alert (strcat "The current layer is " (vla-get-Name currLayer)))
    
    ;; Create a Layer and make it the active layer
    (setq layers (vla-get-Layers doc))
    (setq newLayer (vla-Add layers "TestLayer"))
    (alert (strcat "The new layer is " (vla-get-Name newLayer)))

    ;; Restore the previous layer
    (setq currLayer (vla-get-ActiveLayer doc))
    (alert (strcat "The active layer is restored to " (vla-get-Name currLayer)))
)

** ActiveLayout Property (ActiveX)

Specifies the active layout.

Supported platforms: Windows only
Signature

VBA:

object.ActiveLayout

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: Layout

The layout that is currently active for the drawing.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_ActiveLayout()
    ' This example cycles through the documents collection
    ' and uses the ActiveLayout object to list the active layout
    ' for all open documents.

    Dim DOC As AcadDocument
    Dim msg As String
    
    ' If there are no open documents, then exit
    If Documents.Count = 0 Then
        MsgBox "There are no open documents!"
        Exit Sub
    End If
    
    msg = vbCrLf   ' Start with a space
    
    ' Cycle through documents and determine the active layout name using the
    ' ActiveLayout property of the document object
    For Each DOC In Documents
        msg = msg & DOC.WindowTitle & ": " & DOC.ActiveLayout.Name & vbCrLf
    Next
    
    ' Display results
    MsgBox "The active layouts for the open drawings are: " & msg
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveLayout()
    ;; This example cycles through the documents collection
    ;; and uses the ActiveLayout object to list the active layout
    ;; for all open documents.
    (setq acadObj (vlax-get-acad-object))
    (setq docs (vla-get-Documents acadObj))  
    
    (setq msg "")
    
    ;; Cycle through the Documents collection and determine the active layout name using the
    ;; ActiveLayout property of the document object
    (vlax-for each-doc docs
        (setq msg (strcat msg (vla-get-WindowTitle each-doc) ": " (vla-get-Name (vla-get-ActiveLayout each-doc)) "\n"))
    )
    
    ;; Display results
    (alert (strcat "The active layouts for the open drawings are: \n\n" msg))
)

** ActiveLinetype Property (ActiveX)

Specifies the active linetype for the drawing.

Supported platforms: Windows only
Signature

VBA:

object.ActiveLinetype

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: Linetype

The active linetype for the drawing.
Remarks

The specified linetype must already exist in the drawing. To add a new linetype, use the Add method.
Examples

VBA:

Sub Example_ActiveLinetype()
    ' This example finds the current linetype. It then sets
    ' the new linetype to be the first entry in the linetype
    ' collection that is not equal to the current linetype.
    ' Finally, it resets the active linetype to the original
    ' setting.
    
    Dim currLineType As AcadLineType
    Dim newLineType As AcadLineType
    
    ' Find the current LineType of the active document
    Set currLineType = ThisDrawing.ActiveLinetype
    MsgBox "The current linetype is " & currLineType.name, vbInformation, "ActiveLinetype Example"
    
    ' Set the current Linetype to anything else in the collection
    Dim entry
    Dim found As Boolean
    For Each entry In ThisDrawing.Linetypes
        If StrComp(entry.name, currLineType.name, 1) <> 0 Then
            Set newLineType = entry
            found = True
            Exit For
        End If
    Next
    If found Then
        ThisDrawing.ActiveLinetype = newLineType
        MsgBox "The new linetype is " & newLineType.name, vbInformation, "ActiveLinetype Example"
        ' Reset the linetype to the previous setting
        ThisDrawing.ActiveLinetype = currLineType
        MsgBox "The active linetype is reset to " & currLineType.name, vbInformation, "ActiveLinetype Example"
    End If
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveLinetype()
    ;; This example finds the current linetype. It then sets
    ;; the new linetype to be the first entry in the linetype
    ;; collection that is not equal to the current linetype.
    ;; Finally, it resets the active linetype to the original
    ;; setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Find the current LineType of the active document
    (setq currLineType (vla-get-ActiveLinetype doc))
    (alert (strcat "The current linetype is " (vla-get-Name currLineType)))
    
    ;; Set the current Linetype to anything else in the collection
    (setq newLineType nil)
    (setq found :vlax-false)
    (vlax-for each-linetype (vla-get-Linetypes doc)
        (if (and (/= (vla-get-Name each-linetype) (vla-get-Name currLineType)) (/= found :vlax-true))
            (progn
                (setq newLineType each-linetype)
                (setq found :vlax-true)
            )
        )
    )
  
    (if (= found :vlax-true)
        (progn
            (vla-put-ActiveLinetype doc newLineType)
            (alert (strcat "The new linetype is " (vla-get-Name newLineType)))
            ;; Restore the previous linetype
            (vla-put-ActiveLinetype doc currLineType)
            (alert (strcat "The active linetype is restored to " (vla-get-Name currLineType)))
        )
    )
)

** ActiveMaterial Property (ActiveX)

Specifies the current default material for this document.

Supported platforms: Windows only
Signature

VBA:

object.ActiveMaterial

object

    Type: Document

    The object to which this property applies.

Property Value

Read-only: No

Type: Material

The material assigned to new objects.
Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** ActiveProfile Property (ActiveX)

Specifies the active profile for the AutoCAD session.

Supported platforms: Windows only
Signature

VBA:

object.ActiveProfile

object

    Type: PreferencesProfiles

    The object this property applies to.

Property Value

Read-only: No

Type: String

The name of the active profile.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_ActiveProfile()
    ' This example returns the current setting of
    ' ActiveProfile.
    
    Dim preferences As AcadPreferences
    Dim currActiveProfile As String
    
    Set preferences = ThisDrawing.Application.preferences
    
    ' Retrieve the current ActiveProfile value
    currActiveProfile = preferences.Profiles.ActiveProfile
    MsgBox "The current value for ActiveProfile is " & currActiveProfile, vbInformation, "ActiveProfile Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveProfile()
    ;; This example returns the current setting of
    ;; ActiveProfile.
    (setq acadObj (vlax-get-acad-object))
    (setq preferences (vla-get-Preferences acadObj))
    
    ;; Retrieve the current ActiveProfile value
    (setq currActiveProfile (vla-get-ActiveProfile (vla-get-Profiles preferences)))
    (alert (strcat "The current value for ActiveProfile is " currActiveProfile))
)

** ActivePViewport Property (ActiveX)

Specifies the active paper space viewport for the drawing.

Supported platforms: Windows only
Signature

VBA:

object.ActivePViewport

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: PViewport

The active paper space viewport.
Remarks

A viewport must be set active using this property before you can see any changes to it.
Examples

VBA:

Sub Example_ActivePViewport()
   
    Dim newPViewport As AcadPViewport
    Dim centerPoint(0 To 2) As Double
    Dim height As Double
    Dim width As Double
    height = 5#
    width = 5#
    centerPoint(0) = 5#: centerPoint(1) = 5#: centerPoint(2) = 0#
    
    ' Create a paper space Viewport object
    ThisDrawing.ActiveSpace = acPaperSpace
    Set newPViewport = ThisDrawing.PaperSpace.AddPViewport(centerPoint, width, height)
    ZoomAll
    newPViewport.DISPLAY (True)
    
    ' Before making a paper space Viewport active,
    ' the mspace property needs to be True
    ThisDrawing.mspace = True
    ThisDrawing.ActivePViewport = newPViewport
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActivePViewport()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq centerPoint (vlax-3d-point 5 5 0)
          height 5.0
          width 5.0)
    
    ;; Create a paper space Viewport object
    (vla-put-ActiveSpace doc acPaperSpace)
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq newPViewport (vla-AddPViewport paperSpace centerPoint width height))
    (vla-ZoomAll acadObj)
    (vla-Display newPViewport :vlax-true)
    
    ;; Before making a paper space Viewport active,
    ;; the mspace property needs to be True
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc newPViewport)
)

** ActiveSelectionSet Property (ActiveX)

Gets the active selection set for the drawing.

Supported platforms: Windows only
Signature

VBA:

object.ActiveSelectionSet

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: Yes

Type: SelectionSet

The active selection set for the drawing.
Remarks

No additional remarks.
Examples

VBA:

Sub Example_ActiveSelectionSet()
    Dim sset As AcadSelectionSet
    ' The following example returns current selection set from current drawing
    Set sset = ThisDrawing.ActiveSelectionSet
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveSelectionSet()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; The following example returns the current selection set from the current drawing
    (setq sset (vla-get-ActiveSelectionSet doc))
)

** ActiveSpace Property (ActiveX)

Toggles the active space between paper space and model space.

Supported platforms: Windows only
Signature

VBA:

object.ActiveSpace

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: acActiveSpace enum

    acModelSpace
    acPaperSpace

Remarks

For model space floating viewports, this value is set to acPaperSpace. Even though you have the capability of editing the model, you are still technically in paper space.

For more information on this property, see the PViewport object.
Note: The value of this property is stored in the TILEMODE system variable.
Examples

VBA:

Sub Example_ActiveSpace()
    ' This example toggles the ActiveSpace property from
    ' paper space to model space.
    ' Display the current setting for TILEMODE
    MsgBox "TILEMODE = " & ThisDrawing.ActiveSpace, vbInformation, "ActiveSpace Example"
     
    ' Changes active document to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    MsgBox "TILEMODE = " & ThisDrawing.ActiveSpace, vbInformation, "ActiveSpace Example"
   
    ' Changes active document to model space
    ThisDrawing.ActiveSpace = acModelSpace
    MsgBox "TILEMODE = " & ThisDrawing.ActiveSpace, vbInformation, "ActiveSpace Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveSpace()
    ;; This example toggles the ActiveSpace property from
    ;; paper space to model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))

    ;; Display the current setting for TILEMODE
    (alert (strcat "TILEMODE = " (itoa (vla-get-ActiveSpace doc))))
     
    ;; Changes active document to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    (alert (strcat "TILEMODE = " (itoa (vla-get-ActiveSpace doc))))
   
    ;; Changes active document to model space
    (vla-put-ActiveSpace doc acModelSpace)
    (alert (strcat "TILEMODE = " (itoa (vla-get-ActiveSpace doc))))
)

** ActiveTextStyle Property (ActiveX)

Specifies the active text style for the drawing.

Supported platforms: Windows only
Signature

VBA:

object.ActiveTextStyle

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: TextStyle

The active text style for the drawing.
Remarks

New text added to the drawing will adopt the active text style. Existing text that has no distinct text style specified will adopt the new active text style.

Changes made to the current active text style will become visible only after that text style is reset as the active text style. To reset the active text style, simply call this property with the updated text style object.
Note: A call to the Regen method is necessary to see this change.

To specify a distinct text style for an object so it will not change along with the active text style, use the StyleName property.
Examples

VBA:

Sub Example_ActiveTextStyle()
    ' This example returns the current text style
    ' and then sets a new style.
    ' Finally, it returns the style to the previous setting.
    Dim newTextStyle As AcadTextStyle
    Dim currTextStyle As AcadTextStyle
    
    ' Return current text style of active document
    Set currTextStyle = ThisDrawing.ActiveTextStyle
    MsgBox "The current text style is " & currTextStyle.name, vbInformation, "ActiveTextStyle Example"
    
    ' Create a text style and make it current
    Set newTextStyle = ThisDrawing.TextStyles.Add("TestTextStyle")
    ThisDrawing.ActiveTextStyle = newTextStyle
    MsgBox "The new text style is " & newTextStyle.name, vbInformation, "ActiveTextStyle Example"
    
    ' Reset the text style to its previous setting
    ThisDrawing.ActiveTextStyle = currTextStyle
    MsgBox "The text style is reset to " & currTextStyle.name, vbInformation, "ActiveTextStyle Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveTextStyle()
    ;; This example returns the current text style
    ;; and then sets a new style.
    ;; Finally, it returns the style to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Return current text style of active document
    (setq currTextStyle (vla-get-ActiveTextStyle doc))
    (alert (strcat "The current text style is " (vla-get-Name currTextStyle)))
    
    ;; Create a text style and make it current
    (setq textStyles (vla-get-TextStyles doc))
    (setq newTextStyle (vla-Add textStyles "TestTextStyle"))
    (vla-put-ActiveTextStyle doc newTextStyle)
    (alert (strcat "The new text style is " (vla-get-Name newTextStyle)))
    
    ;; Restore the previous text style
    (vla-put-ActiveTextStyle doc currTextStyle)
    (alert (strcat "The text style is restored to " (vla-get-Name currTextStyle)))
)

** ActiveUCS Property (ActiveX)

Specifies the active UCS for the drawing.

Supported platforms: Windows only
Signature

VBA:

object.ActiveUCS

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: UCS

The active UCS for the drawing.
Remarks

Changes made to the current active UCS will become visible only after that UCS is reset as the active UCS.

If you try to get the active UCS value when the current UCS is unsaved, an error will occur. It is recommended that you confirm that the value of the UCSNAME system variable is not empty before you get the active UCS value. Alternatively, you can add a new UCS object and set it to active before getting the active UCS value.
Examples

VBA:

Sub Example_ActiveUCS()
    ' This example returns the current saved UCS (or saves a new one dynamically)
    ' and then sets a new UCS.
    ' Finally, it returns the UCS to the previous setting.
    
    Dim newUCS As AcadUCS
    Dim currUCS As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxis(0 To 2) As Double
    Dim yAxis(0 To 2) As Double
    
    ' Get the current saved UCS of the active document. If the current UCS is
    ' not saved, then add a new UCS to the UserCoordinateSystems collection
    If ThisDrawing.GetVariable("UCSNAME") = "" Then
        ' Current UCS is not saved so get the data and save it
        With ThisDrawing
            Set currUCS = .UserCoordinateSystems.Add( _
                            .GetVariable("UCSORG"), _
                            .Utility.TranslateCoordinates(.GetVariable("UCSXDIR"), acUCS, acWorld, 0), _
                            .Utility.TranslateCoordinates(.GetVariable("UCSYDIR"), acUCS, acWorld, 0), _
                            "OriginalUCS")
        End With
    Else
        Set currUCS = ThisDrawing.ActiveUCS  'current UCS is saved
    End If
    
    MsgBox "The current UCS is " & currUCS.name, vbInformation, "ActiveUCS Example"
    
    ' Create a UCS and make it current
    origin(0) = 0: origin(1) = 0: origin(2) = 0
    xAxis(0) = 1: xAxis(1) = 1: xAxis(2) = 0
    yAxis(0) = -1: yAxis(1) = 1: yAxis(2) = 0
    Set newUCS = ThisDrawing.UserCoordinateSystems.Add(origin, xAxis, yAxis, "TestUCS")
    ThisDrawing.ActiveUCS = newUCS
    MsgBox "The new UCS is " & newUCS.name, vbInformation, "ActiveUCS Example"
    
    ' Reset the UCS to its previous setting
    ThisDrawing.ActiveUCS = currUCS
    MsgBox "The UCS is reset to " & currUCS.name, vbInformation, "ActiveUCS Example"
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveUCS()
    ;; This example returns the current saved UCS (or saves a new one dynamically)
    ;; and then sets a new UCS.
    ;; Finally, it returns the UCS to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq UCSs (vla-get-UserCoordinateSystems doc))
  
    ;; Get the current saved UCS of the active document. If the current UCS is
    ;; not saved, then add a new UCS to the UserCoordinateSystems collection
    (if (= (vlax-variant-value (vla-GetVariable doc "UCSNAME")) "")
        (progn
	           (setq utility (vla-get-Utility doc))
            (setq currUCS (vla-Add UCSs
	                                  (vla-GetVariable doc "UCSORG")
	                                  (vla-TranslateCoordinates utility (vla-GetVariable doc "UCSXDIR") acUCS acWorld :vlax-false)
	                                  (vla-TranslateCoordinates utility (vla-GetVariable doc "UCSYDIR") acUCS acWorld :vlax-false)
	                                  "OriginalUCS"
			                       )
            )
        )
        (setq currUCS (vla-get-ActiveUCS doc))  ;; current UCS is saved
    )
    
    (alert (strcat "The current UCS is " (vla-get-Name currUCS)))
    
    ;; Create a UCS and make it current
    (setq origin (vlax-3d-point 0 0 0)
          xAxis (vlax-3d-point 1 1 0)
          yAxis (vlax-3d-point -1 1 0))

    (setq newUCS (vla-Add UCSs origin xAxis yAxis "TestUCS"))
    (vla-put-ActiveUCS doc newUCS)
    (alert (strcat "The new UCS is " (vla-get-Name newUCS)))
    
    ;; Restore the previous UCS
    (vla-put-ActiveUCS doc currUCS)
    (alert (strcat "The UCS is restored to " (vla-get-Name currUCS)))
)


** ActiveViewport Property (ActiveX)

Specifies the active viewport for the drawing.

Supported platforms: Windows only
Signature

VBA:

object.ActiveViewport

object

    Type: Document

    The object this property applies to.

Property Value

Read-only: No

Type: Viewport

The active viewport for the drawing.
Remarks

Changes made to the current active viewport will become visible only after you reset the viewport as the active viewport. To reset the active viewport, simply call this property with the updated viewport object.

Use the StatusID property to determine if a viewport is currently active.

You can iterate through existing viewports to find a particular viewport. To do this, first identify the name of the viewport configuration on which the desired viewport resides using the Name property. Additionally, if the viewport configuration has been split, each individual viewport on the configuration can be identified through the LowerLeftCorner and UpperRightCorner properties.

The LowerLeftCorner and UpperRightCorner properties represent the graphic placement of the viewport on the display. These properties are defined as follows (using a four-way split as an example):


Viewport 1—LowerLeftCorner = (0, .5), UpperRightCorner = (.5, 1)

Viewport 2—LowerLeftCorner = (.5, .5), UpperRightCorner = (1, 1)

Viewport 3—LowerLeftCorner = (0, 0), UpperRightCorner = (.5, .5)

Viewport 4—LowerLeftCorner = (.5, 0), UpperRightCorner = (1, .5)
Examples

VBA:

Sub Example_ActiveViewport()
    ' This example returns the current viewport.
    ' It creates a new viewport and makes it active, and
    ' Then it splits the viewport into four windows.
    ' It then takes one of the four windows, and splits that
    ' window horizontally into half.
    Dim currViewport As AcadViewport
    Dim newViewport As AcadViewport
    
    ' Returns current viewport of active document
    Set currViewport = ThisDrawing.ActiveViewport
    MsgBox "The current viewport is " & currViewport.name, vbInformation, "ActiveViewport Example"
    
    ' Create a new viewport and make it active
    Set newViewport = ThisDrawing.Viewports.Add("TESTVIEWPORT")
    ThisDrawing.ActiveViewport = newViewport
    MsgBox "The new active viewport is " & newViewport.name, vbInformation, "ActiveViewport Example"
    
    ' Split the viewport in four windows
    newViewport.Split acViewport4
    
    ' Make the newly split viewport active
    ThisDrawing.ActiveViewport = newViewport
    
    ' Note that current drawing layout will show four windows.
    ' However, only one of the windows will be active.
    ' The following code sets the lower-left corner window
    ' to be the active window and then splits that
    ' window into two horizontal windows.
    Dim entry
    For Each entry In ThisDrawing.Viewports
        If entry.name = "TESTVIEWPORT" Then
            Dim lowerLeft
            lowerLeft = entry.LowerLeftCorner
            If lowerLeft(0) = 0 And lowerLeft(1) = 0 Then
                Set newViewport = entry
                Exit For
            End If
        End If
    Next

    newViewport.Split acViewport2Horizontal
    ThisDrawing.ActiveViewport = newViewport
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ActiveViewport()
    ;; This example returns the current viewport.
    ;; It creates a new viewport and makes it active, and
    ;; Then it splits the viewport into four windows.
    ;; It then takes one of the four windows, and splits that
    ;; window horizontally into half.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Returns current viewport of active document
    (setq currViewport (vla-get-ActiveViewport doc))
    (alert (strcat "The current viewport is " (vla-get-Name currViewport)))
    
    ;; Create a new viewport and make it active
    (setq viewports (vla-get-Viewports doc))
    (setq newViewport (vla-Add viewports "TESTVIEWPORT"))
    (vla-put-ActiveViewport doc newViewport)
    (alert (strcat "The new active viewport is " (vla-get-Name newViewport)))
    
    ;; Split the viewport in four windows
    (vla-Split newViewport acViewport4)
    
    ;; Make the newly split viewport active
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Note that current drawing layout will show four windows.
    ;; However, only one of the windows will be active.
    ;; The following code sets the lower-left corner window
    ;; to be the active window and then splits that
    ;; window into two horizontal windows.
    (vlax-for each-viewport viewports
        (if (= (vla-get-Name each-viewport) "TESTVIEWPORT")
            (progn
                (setq lowerLeft (vla-get-LowerLeftCorner each-viewport))

                (if (and (= (vlax-safearray-get-element (vlax-variant-value lowerLeft) 0) 0)
                         (= (vlax-safearray-get-element (vlax-variant-value lowerLeft) 1) 0)
                    )
                    (setq newViewport each-viewport)
                )
            )
        )
    )
    (vla-Split newViewport acViewport2Horizontal)
    (vla-put-ActiveViewport doc newViewport)
)

** ADCInsertUnitsDefaultSource Property (ActiveX)

Determines the units to use automatically for objects in DesignCenter for a source drawing that does not have assigned insert units.

Supported platforms: Windows only
Signature

VBA:

object.ADCInsertUnitsDefaultSource

object

    Type: PreferencesUser

    The object this property applies to.

Property Value

Read-only: No

Type: acInsertUnits enum

    acInsertUnitsAngstroms
    acInsertUnitsAstronomicalUnits
    acInsertUnitsCentimeters
    acInsertUnitsDecameters
    acInsertUnitsDecimeters
    acInsertUnitsFeet
    acInsertUnitsGigameters
    acInsertUnitsHectometers
    acInsertUnitsInches
    acInsertUnitsKilometers
    acInsertUnitsLightYears
    acInsertUnitsMeters
    acInsertUnitsMicroinches
    acInsertUnitsMicrons
    acInsertUnitsMiles
    acInsertUnitsMillimeters
    acInsertUnitsMils
    acInsertUnitsNanometers
    acInsertUnitsParsecs
    acInsertUnitsUnitless
    acInsertUnitsUSSurveyFeet
    acInsertUnitsUSSurveyInch
    acInsertUnitsUSSurveyMile
    acInsertUnitsUSSurveyYard
    acInsertUnitsYards

Remarks

The initial value for this property is acInsertUnitsUnitless.
Note: The value of this property is stored in the INSUNITSDEFSOURCE system variable.
Examples

VBA:

Sub Example_ADCInsertUnitsDefaultSource()
    ' This example reads and modifies the ADCInsertUnitsDefaultSource
    ' preference value.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadPreferencesUser
    Dim originalValue As Integer, newValue As Integer
    
    ' Get the user preferences object

    Set ACADPref = ThisDrawing.Application.preferences.User
    
    ' Read and display the original value
    originalValue = ACADPref.ADCInsertUnitsDefaultSource
    MsgBox "The ADCInsertUnitsDefaultSource preference is set to: " & originalValue

    ' Modify the ADCInsertUnitsDefaultSource preference by toggling the value
    ACADPref.ADCInsertUnitsDefaultSource = acInsertUnitsMillimeters

    MsgBox "The ADCInsertUnitsDefaultSource preference has been set to: " & ACADPref.ADCInsertUnitsDefaultSource

    ' Reset the preference back to its original value
    ACADPref.ADCInsertUnitsDefaultSource = originalValue
    MsgBox "The ADCInsertUnitsDefaultSource preference was reset back to: " & originalValue
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ADCInsertUnitsDefaultSource()
    ;; This example reads and modifies the ADCInsertUnitsDefaultSource
    ;; preference value.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))

    ;; Get the user preferences object
    (setq pref (vla-get-Preferences acadObj))
    (setq user (vla-get-User pref))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ADCInsertUnitsDefaultSource user))
    (alert (strcat "The ADCInsertUnitsDefaultSource preference is set to: " (itoa originalValue)))

    ;; Modify the ADCInsertUnitsDefaultSource preference by toggling the value
    (vla-put-ADCInsertUnitsDefaultSource user acInsertUnitsMillimeters)
    (alert (strcat "The ADCInsertUnitsDefaultSource preference has been set to: " (itoa (vla-get-ADCInsertUnitsDefaultSource user))))

    ;; Restore the preference back to its original value
    (vla-put-ADCInsertUnitsDefaultSource user originalValue)
    (alert (strcat "The ADCInsertUnitsDefaultSource preference was restored back to: " (itoa originalValue)))
)

** ADCInsertUnitsDefaultTarget Property (ActiveX)

Determines the units to use automatically for objects in DesignCenter for a target drawing that does not have assigned insert units.

Supported platforms: Windows only
Signature

VBA:

object.ADCInsertUnitsDefaultTarget

object

    Type: PreferencesUser

    The object this property applies to.

Property Value

Read-only: No

Type: acInsertUnits enum

    acInsertUnitsAngstroms
    acInsertUnitsAstronomicalUnits
    acInsertUnitsCentimeters
    acInsertUnitsDecameters
    acInsertUnitsDecimeters
    acInsertUnitsFeet
    acInsertUnitsGigameters
    acInsertUnitsHectometers
    acInsertUnitsInches
    acInsertUnitsKilometers
    acInsertUnitsLightYears
    acInsertUnitsMeters
    acInsertUnitsMicroinches
    acInsertUnitsMicrons
    acInsertUnitsMiles
    acInsertUnitsMillimeters
    acInsertUnitsMils
    acInsertUnitsNanometers
    acInsertUnitsParsecs
    acInsertUnitsUnitless
    acInsertUnitsUSSurveyFeet
    acInsertUnitsUSSurveyInch
    acInsertUnitsUSSurveyMile
    acInsertUnitsUSSurveyYard
    acInsertUnitsYards

Remarks

The initial value for this property is acInsertUnitsUnitless.
Note: The value of this property is stored in the INSUNITSDEFTARGET system variable.
Examples

VBA:

Sub Example_ADCInsertUnitsDefaultTarget()
    ' This example reads and modifies the ADCInsertUnitsDefaultTarget
    ' preference value.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadPreferencesUser
    Dim originalValue As Integer, newValue As Integer
    
    ' Get the user preferences object

    Set ACADPref = ThisDrawing.Application.preferences.User
    
    ' Read and display the original value
    originalValue = ACADPref.ADCInsertUnitsDefaultTarget
    MsgBox "The ADCInsertUnitsDefaultTarget preference is set to: " & originalValue

    ' Modify the ADCInsertUnitsDefaultTarget preference by toggling the value
    ACADPref.ADCInsertUnitsDefaultTarget = acInsertUnitsMillimeters

    MsgBox "The ADCInsertUnitsDefaultTarget preference has been set to: " & ACADPref.ADCInsertUnitsDefaultTarget

    ' Reset the preference back to its original value
    ACADPref.ADCInsertUnitsDefaultTarget = originalValue
    MsgBox "The ADCInsertUnitsDefaultTarget preference was reset back to: " & originalValue
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_ADCInsertUnitsDefaultTarget()
    ;; This example reads and modifies the ADCInsertUnitsDefaultTarget
    ;; preference value.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))

    ;; Get the user preferences object
    (setq pref (vla-get-Preferences acadObj))
    (setq user (vla-get-User pref))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ADCInsertUnitsDefaultTarget user))
    (alert (strcat "The ADCInsertUnitsDefaultTarget preference is set to: " (itoa originalValue)))
  
    ;; Modify the ADCInsertUnitsDefaultTarget preference by toggling the value
    (vla-put-ADCInsertUnitsDefaultTarget user acInsertUnitsMillimeters)
    (alert (strcat "The ADCInsertUnitsDefaultTarget preference has been set to: " (itoa (vla-get-ADCInsertUnitsDefaultTarget user))))

    ;; Restore the preference back to its original value
    (vla-put-ADCInsertUnitsDefaultTarget user originalValue)
    (alert (strcat "The ADCInsertUnitsDefaultTarget preference was restored back to: " (itoa originalValue)))
)

** AdjustForBackground Property (ActiveX)

Determines whether the underlay colors are adjusted for the current background color.

Supported platforms: Windows only
Signature

VBA:

object.AdjustForBackground

object

    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay

    The object to which this property applies.

Property Value

Read-only: No

Type: Boolean

    True: Colors in the underlay are adjusted.
    False: Colors in the underlay are not adjusted.

Remarks

No additional remarks.
Examples

VBA:

Not available

Visual LISP:

Not available

** Alignment Property (ActiveX)

Specifies both the vertical and horizontal alignments for the attribute, attribute reference, or text.

Supported platforms: Windows only
Signature

VBA:

object.Alignment

object

    Type: Attribute, AttributeRef, Text

    The objects this property applies to.

Property Value

Read-only: No

Type: acAlignment enum

    acAlignmentLeft
    acAlignmentCenter
    acAlignmentRight
    acAlignmentAligned
    acAlignmentMiddle
    acAlignmentFit
    acAlignmentTopLeft
    acAlignmentTopCenter
    acAlignmentTopRight
    acAlignmentMiddleLeft
    acAlignmentMiddleCenter
    acAlignmentMiddleRight
    acAlignmentBottomLeft
    acAlignmentBottomCenter
    acAlignmentBottomRight

Remarks

Text aligned to acAlignmentLeft uses the InsertionPoint property to position the text.

Text aligned to acAlignmentAligned or acAlignmentFit uses both the InsertionPoint and TextAlignmentPoint properties to position the text.

Text aligned to any other position uses the TextAlignmentPoint property to position the text.


Examples

VBA:

Sub Example_Alignment()
   ' This example creates a text object in model space and
   ' demonstrates setting the alignment of the new text string
    
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double, alignmentPoint(0 To 2) As Double
    Dim height As Double
    Dim oldPDMODE As Integer
    Dim pointObj As AcadPoint
    
    ' Define the new Text object
    textString = "Hello, World."
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    alignmentPoint(0) = 3: alignmentPoint(1) = 3: alignmentPoint(2) = 0
    height = 0.5
    
    ' Create the Text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    
    oldPDMODE = ThisDrawing.GetVariable("PDMODE")   ' Record existing point style
    
    ' Create a crosshair over the text alignment point
    ' to better visualize the alignment process
    Set pointObj = ThisDrawing.ModelSpace.AddPoint(alignmentPoint)
    
    ThisDrawing.SetVariable "PDMODE", 2             ' Set point style to crosshair
        
    ThisDrawing.Application.ZoomAll
    
    ' Set the text alignment to a value other than acAlignmentLeft, which is the default.
    ' Create a point that will act as an alignment reference point
    textObj.Alignment = acAlignmentRight
    
    ' Create the text alignment reference point and the text will automatically
    ' align to the right of this point, because the text
    ' alignment was set to acAlignmentRight
    textObj.TextAlignmentPoint = alignmentPoint
    ThisDrawing.Regen acActiveViewport
    MsgBox "The Text object is now aligned to the right of the alignment point"
    
    ' Center the text to the alignment point
    textObj.Alignment = acAlignmentCenter
    ThisDrawing.Regen acActiveViewport
    MsgBox "The Text object is now centered to the alignment point"
    
    ' Reset point style
    ThisDrawing.SetVariable "PDMODE", oldPDMODE
End Sub

Visual LISP:

(vl-load-com)
(defun c:Example_Alignment()
   ;; This example creates a text object in model space and
   ;; demonstrates setting the alignment of the new text string
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Text object
    (setq insertionPoint (vlax-3d-point 3 3 0)  
          alignmentPoint (vlax-3d-point 3 3 0)  
          textString "Hello, World."
          height 0.5)
    
    ;; Create the Text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    
    (setq oldPDMODE (vlax-variant-value (vla-GetVariable doc "PDMODE")))   ;; Record existing point style
    
    ;; Create a crosshair over the text alignment point
    ;; to better visualize the alignment process
    (setq pointObj (vla-AddPoint modelSpace alignmentPoint))
    
    (vla-SetVariable doc "PDMODE" 2)             ;; Set point style to crosshair
        
    (vla-ZoomAll acadObj)
    
    ;; Set the text alignment to a value other than acAlignmentLeft, which is the default.
    ;; Create a point that will act as an alignment reference point
    (vla-put-Alignment textObj acAlignmentRight)
    
    ;; Create the text alignment reference point and the text will automatically
    ;; align to the right of this point, because the text
    ;; alignment was set to acAlignmentRight
    (vla-put-TextAlignmentPoint textObj alignmentPoint)
    (vla-Regen doc acActiveViewport)
    (alert "The Text object is now aligned to the right of the alignment point.")
    
    ;; Center the text to the alignment point
    (vla-put-Alignment textObj acAlignmentCenter)
    (vla-Regen doc acActiveViewport)
    (alert "The Text object is now centered to the alignment point.")
    
    ;; Reset point style
    (vla-SetVariable doc "PDMODE" oldPDMODE)
)

* Property XXX
