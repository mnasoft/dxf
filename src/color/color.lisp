;;;; ./src/color/color.lisp

(defpackage #:dxf/color
  (:use #:cl)
  (:export +ac-Color-Method-ByLayer+
           +ac-Color-Method-ByBlock+
           +ac-Color-Method-ByRGB+
           +ac-Color-Method-ByACI+
           +ac-Color-Method-Foreground+
           )
  (:export *bylayer*
           *byblock*
           *byentity*
           *byentity-start*
           *byentity-end*
           *byindex*
           *byindex-start*
           *byindex-end*
           )
  (:export index->true
           index->rgb
           index->entity
           )
  (:export true->rgb
           true->entity
           true->index
           )
  (:export rgb->index
           rgb->true
           rgb->entity
           )
  (:export <color>
           )
  (:export entity->index
           )
  (:export red
           green
           blue
           color-index
           color-method
           rgb
           )
  (:export dxf-out-text
	   dxf-in-text
           )
  (:export dxf-out-binary
           dxf-in-binary
           ))

(in-package :dxf/color)

(defparameter +ac-Color-Method-ByLayer+    192)

(defparameter +ac-Color-Method-ByBlock+    193)

(defparameter +ac-Color-Method-ByRGB+      194)

(defparameter +ac-Color-Method-ByACI+      195)

(defparameter +ac-Color-Method-Foreground+ 197)

(defparameter *bylayer*  (* -64 256 256 256)
  "@b(Описание:) переменная @b(*byblock*) определяет значение цвета по блоку.

 @b(Пример использования:)
@begin[lang=lisp](code)
 (format t \"~X~%\" *bylayer*) => -40000000
@end(code)
"
  )

(defparameter *byblock*  (* -63 256 256 256)
  "@b(Описание:) переменная @b(*byblock*) определяет значение цвета по блоку.

 @b(Пример использования:)
@begin[lang=lisp](code)
 (format t \"~X~%\" *byblock*) => -3F000000
@end(code)
"
  )

(defparameter *byentity*
  (* -62 256 256 256)  
    "@b(Описание:) переменная @b(*byentity*) участвует в вычислении
 параметров цвета по EntityColor.")

(defparameter *byentity-start*
  *byentity*)

(defparameter *byentity-end*
  (+ (+ (* 256 256 255) (* 256 255) 255) *byentity*))
    
(defparameter *byindex* (* -61 256 256 256)
  "@b(Описание:) переменная @b(*byindex*) участвует в вычислении
 параметров цвета по его индексу.
")

(defparameter *byindex-start*
  (+ 1   *byindex*))

(defparameter *byindex-end*
  (+ 255 *byindex*))

(defparameter +index->rgb+-bak
  '((0   (  0   0   0))
    (1   (255   0   0))
    (2   (255 255   0))
    (3   (  0 255   0))
    (4   (  0 255 255))
    (5   (  0   0 255))
    (6   (255   0 255))
    (7   (255 255 255))
    (8   (128 128 128))
    (9   (192 192 192))
    (10  (255   0   0))
    (11  (255 127 127))
    (12  (204   0   0))
    (13  (204 102 102))
    (14  (153   0   0))
    (15  (153  76  76))
    (16  (127   0   0))
    (17  (127  63  63))
    (18  ( 76   0   0))
    (19  ( 76  38  38))
    (20  (255  63   0))
    (21  (255 159 127))
    (22  (204  51   0))
    (23  (204 127 102))
    (24  (153  38   0))
    (25  (153  95  76))
    (26  (127  31   0))
    (27  (127  79  63))
    (28  ( 76  19   0))
    (29  ( 76  47  38))
    (30  (255 127   0))
    (31  (255 191 127))
    (32  (204 102   0))
    (33  (204 153 102))
    (34  (153  76   0))
    (35  (153 114  76))
    (36  (127  63   0))
    (37  (127  95  63))
    (38  ( 76  38   0))
    (39  ( 76  57  38))
    (40  (255 191   0))
    (41  (255 223 127))
    (42  (204 153   0))
    (43  (204 178 102))
    (44  (153 114   0))
    (45  (153 133  76))
    (46  (127  95   0))
    (47  (127 111  63))
    (48  ( 76  57   0))
    (49  ( 76  66  38))
    (50  (255 255   0))
    (51  (255 255 127))
    (52  (204 204   0))
    (53  (204 204 102))
    (54  (153 153   0))
    (55  (153 153  76))
    (56  (127 127   0))
    (57  (127 127  63))
    (58  ( 76  76   0))
    (59  ( 76  76  38))
    (60  (191 255   0))
    (61  (223 255 127))
    (62  (153 204   0))
    (63  (178 204 102))
    (64  (114 153   0))
    (65  (133 153  76))
    (66  ( 95 127   0))
    (67  (111 127  63))
    (68  ( 57  76   0))
    (69  ( 66  76  38))
    (70  (127 255   0))
    (71  (191 255 127))
    (72  (102 204   0))
    (73  (153 204 102))
    (74  ( 76 153   0))
    (75  (114 153  76))
    (76  ( 63 127   0))
    (77  ( 95 127  63))
    (78  ( 38  76   0))
    (79  ( 57  76  38))
    (80  ( 63 255   0))
    (81  (159 255 127))
    (82  ( 51 204   0))
    (83  (127 204 102))
    (84  ( 38 153   0))
    (85  ( 95 153  76))
    (86  ( 31 127   0))
    (87  ( 79 127  63))
    (88  ( 19  76   0))
    (89  ( 47  76  38))
    (90  (  0 255   0))
    (91  (127 255 127))
    (92  (  0 204   0))
    (93  (102 204 102))
    (94  (  0 153   0))
    (95  ( 76 153  76))
    (96  (  0 127   0))
    (97  ( 63 127  63))
    (98  (  0  76   0))
    (99  ( 38  76  38))
    (100 (  0 255  63))
    (101 (127 255 159))
    (102 (  0 204  51))
    (103 (102 204 127))
    (104 (  0 153  38))
    (105 ( 76 153  95))
    (106 (  0 127  31))
    (107 ( 63 127  79))
    (108 (  0  76  19))
    (109 ( 38  76  47))
    (110 (  0 255 127))
    (111 (127 255 191))
    (112 (  0 204 102))
    (113 (102 204 153))
    (114 (  0 153  76))
    (115 ( 76 153 114))
    (116 (  0 127  63))
    (117 ( 63 127  95))
    (118 (  0  76  38))
    (119 ( 38  76  57))
    (120 (  0 255 191))
    (121 (127 255 223))
    (122 (  0 204 153))
    (123 (102 204 178))
    (124 (  0 153 114))
    (125 ( 76 153 133))
    (126 (  0 127  95))
    (127 ( 63 127 111))
    (128 (  0  76  57))
    (129 ( 38  76  66))
    (130 (  0 255 255))
    (131 (127 255 255))
    (132 (  0 204 204))
    (133 (102 204 204))
    (134 (  0 153 153))
    (135 ( 76 153 153))
    (136 (  0 127 127))
    (137 ( 63 127 127))
    (138 (  0  76  76))
    (139 ( 38  76  76))
    (140 (  0 191 255))
    (141 (127 223 255))
    (142 (  0 153 204))
    (143 (102 178 204))
    (144 (  0 114 153))
    (145 ( 76 133 153))
    (146 (  0  95 127))
    (147 ( 63 111 127))
    (148 (  0  57  76))
    (149 ( 38  66  76))
    (150 (  0 127 255))
    (151 (127 191 255))
    (152 (  0 102 204))
    (153 (102 153 204))
    (154 (  0  76 153))
    (155 ( 76 114 153))
    (156 (  0  63 127))
    (157 ( 63  95 127))
    (158 (  0  38  76))
    (159 ( 38  57  76))
    (160 (  0  63 255))
    (161 (127 159 255))
    (162 (  0  51 204))
    (163 (102 127 204))
    (164 (  0  38 153))
    (165 ( 76  95 153))
    (166 (  0  31 127))
    (167 ( 63  79 127))
    (168 (  0  19  76))
    (169 ( 38  47  76))
    (170 (  0   0 255))
    (171 (127 127 255))
    (172 (  0   0 204))
    (173 (102 102 204))
    (174 (  0   0 153))
    (175 ( 76  76 153))
    (176 (  0   0 127))
    (177 ( 63  63 127))
    (178 (  0   0  76))
    (179 ( 38  38  76))
    (180 ( 63   0 255))
    (181 (159 127 255))
    (182 ( 51   0 204))
    (183 (127 102 204))
    (184 ( 38   0 153))
    (185 ( 95  76 153))
    (186 ( 31   0 127))
    (187 ( 79  63 127))
    (188 ( 19   0  76))
    (189 ( 47  38  76))
    (190 (127   0 255))
    (191 (191 127 255))
    (192 (102   0 204))
    (193 (153 102 204))
    (194 ( 76   0 153))
    (195 (114  76 153))
    (196 ( 63   0 127))
    (197 ( 95  63 127))
    (198 ( 38   0  76))
    (199 ( 57  38  76))
    (200 (191   0 255))
    (201 (223 127 255))
    (202 (153   0 204))
    (203 (178 102 204))
    (204 (114   0 153))
    (205 (133  76 153))
    (206 ( 95   0 127))
    (207 (111  63 127))
    (208 ( 57   0  76))
    (209 ( 66  38  76))
    (210 (255   0 255))
    (211 (255 127 255))
    (212 (204   0 204))
    (213 (204 102 204))
    (214 (153   0 153))
    (215 (153  76 153))
    (216 (127   0 127))
    (217 (127  63 127))
    (218 ( 76   0  76))
    (219 ( 76  38  76))
    (220 (255   0 191))
    (221 (255 127 223))
    (222 (204   0 153))
    (223 (204 102 178))
    (224 (153   0 114))
    (225 (153  76 133))
    (226 (127   0  95))
    (227 (127  63 111))
    (228 ( 76   0  57))
    (229 ( 76  38  66))
    (230 (255   0 127))
    (231 (255 127 191))
    (232 (204   0 102))
    (233 (204 102 153))
    (234 (153   0  76))
    (235 (153  76 114))
    (236 (127   0  63))
    (237 (127  63  95))
    (238 ( 76   0  38))
    (239 ( 76  38  57))
    (240 (255   0  63))
    (241 (255 127 159))
    (242 (204   0  51))
    (243 (204 102 127))
    (244 (153   0  38))
    (245 (153  76  95))
    (246 (127   0  31))
    (247 (127  63  79))
    (248 ( 76   0  19))
    (249 ( 76  38  47))
    (250 ( 51  51  51))
    (251 ( 91  91  91))
    (252 (132 132 132))
    (253 (173 173 173))
    (254 (214 214 214))
    (255 (255 255 255))
    (256 (  0   0   0))))

(defparameter +index->rgb+
  '((000 (000 000 000))
    (001 (255 000 000))
    (002 (255 255 000))
    (003 (000 255 000))
    (004 (000 255 255))
    (005 (000 000 255))
    (006 (255 000 255))
    (007 (255 255 255))
    (008 (128 128 128))
    (009 (192 192 192))
    (010 (255 000 000))
    (011 (255 127 127))
    (012 (165 000 000))
    (013 (165 082 082))
    (014 (127 000 000))
    (015 (127 063 063))
    (016 (076 000 000))
    (017 (076 038 038))
    (018 (038 000 000))
    (019 (038 019 019))
    (020 (255 063 000))
    (021 (255 159 127))
    (022 (165 041 000))
    (023 (165 103 082))
    (024 (127 031 000))
    (025 (127 079 063))
    (026 (076 019 000))
    (027 (076 047 038))
    (028 (038 009 000))
    (029 (038 023 019))
    (030 (255 127 000))
    (031 (255 191 127))
    (032 (165 082 000))
    (033 (165 124 082))
    (034 (127 063 000))
    (035 (127 095 063))
    (036 (076 038 000))
    (037 (076 057 038))
    (038 (038 019 000))
    (039 (038 028 019))
    (040 (255 191 000))
    (041 (255 223 127))
    (042 (165 124 000))
    (043 (165 145 082))
    (044 (127 095 000))
    (045 (127 111 063))
    (046 (076 057 000))
    (047 (076 066 038))
    (048 (038 028 000))
    (049 (038 033 019))
    (050 (255 255 000))
    (051 (255 255 127))
    (052 (165 165 000))
    (053 (165 165 082))
    (054 (127 127 000))
    (055 (127 127 063))
    (056 (076 076 000))
    (057 (076 076 038))
    (058 (038 038 000))
    (059 (038 038 019))
    (060 (191 255 000))
    (061 (223 255 127))
    (062 (124 165 000))
    (063 (145 165 082))
    (064 (095 127 000))
    (065 (111 127 063))
    (066 (057 076 000))
    (067 (066 076 038))
    (068 (028 038 000))
    (069 (033 038 019))
    (070 (127 255 000))
    (071 (191 255 127))
    (072 (102 204 000))
    (073 (124 165 082))
    (074 (076 153 000))
    (075 (095 127 063))
    (076 (063 127 000))
    (077 (057 076 038))
    (078 (038 076 000))
    (079 (028 038 019))
    (080 (063 255 000))
    (081 (159 255 127))
    (082 (041 165 000))
    (083 (103 165 082))
    (084 (031 127 000))
    (085 (079 127 063))
    (086 (019 076 000))
    (087 (047 076 038))
    (088 (009 038 000))
    (089 (023 038 019))
    (090 (000 255 000))
    (091 (127 255 127))
    (092 (000 165 000))
    (093 (082 165 082))
    (094 (000 127 000))
    (095 (063 127 063))
    (096 (000 076 000))
    (097 (038 076 038))
    (098 (000 038 000))
    (099 (019 038 019))
    (100 (000 255 063))
    (101 (127 255 159))
    (102 (000 165 041))
    (103 (082 165 103))
    (104 (000 127 031))
    (105 (063 127 079))
    (106 (000 076 019))
    (107 (038 076 047))
    (108 (000 038 009))
    (109 (019 038 023))
    (110 (000 255 127))
    (111 (127 255 191))
    (112 (000 165 082))
    (113 (082 165 124))
    (114 (000 127 063))
    (115 (063 127 095))
    (116 (000 076 038))
    (117 (038 076 057))
    (118 (000 038 019))
    (119 (019 038 028))
    (120 (000 255 191))
    (121 (127 255 223))
    (122 (000 165 124))
    (123 (082 165 145))
    (124 (000 127 095))
    (125 (063 127 111))
    (126 (000 076 057))
    (127 (038 076 066))
    (128 (000 038 028))
    (129 (019 038 033))
    (130 (000 255 255))
    (131 (127 255 255))
    (132 (000 165 165))
    (133 (082 165 165))
    (134 (000 127 127))
    (135 (063 127 127))
    (136 (000 076 076))
    (137 (038 076 076))
    (138 (000 038 038))
    (139 (019 038 038))
    (140 (000 191 255))
    (141 (127 223 255))
    (142 (000 124 165))
    (143 (082 145 165))
    (144 (000 095 127))
    (145 (063 111 127))
    (146 (000 057 076))
    (147 (038 066 076))
    (148 (000 028 038))
    (149 (019 033 038))
    (150 (000 127 255))
    (151 (127 191 255))
    (152 (000 102 204))
    (153 (082 124 165))
    (154 (000 076 153))
    (155 (063 095 127))
    (156 (000 063 127))
    (157 (038 057 076))
    (158 (000 038 076))
    (159 (019 028 038))
    (160 (000 063 255))
    (161 (127 159 255))
    (162 (000 041 165))
    (163 (082 103 165))
    (164 (000 031 127))
    (165 (063 079 127))
    (166 (000 019 076))
    (167 (038 047 076))
    (168 (000 009 038))
    (169 (019 023 038))
    (170 (000 000 255))
    (171 (127 127 255))
    (172 (000 000 165))
    (173 (082 082 165))
    (174 (000 000 127))
    (175 (063 063 127))
    (176 (000 000 076))
    (177 (038 038 076))
    (178 (000 000 038))
    (179 (019 019 038))
    (180 (063 000 255))
    (181 (159 127 255))
    (182 (041 000 165))
    (183 (103 082 165))
    (184 (031 000 127))
    (185 (079 063 127))
    (186 (019 000 076))
    (187 (047 038 076))
    (188 (009 000 038))
    (189 (023 019 038))
    (190 (127 000 255))
    (191 (191 127 255))
    (192 (082 000 165))
    (193 (124 082 165))
    (194 (063 000 127))
    (195 (095 063 127))
    (196 (038 000 076))
    (197 (057 038 076))
    (198 (019 000 038))
    (199 (028 019 038))
    (200 (191 000 255))
    (201 (223 127 255))
    (202 (124 000 165))
    (203 (145 082 165))
    (204 (095 000 127))
    (205 (111 063 127))
    (206 (057 000 076))
    (207 (066 038 076))
    (208 (028 000 038))
    (209 (033 019 038))
    (210 (255 000 255))
    (211 (255 127 255))
    (212 (165 000 165))
    (213 (165 082 165))
    (214 (127 000 127))
    (215 (127 063 127))
    (216 (076 000 076))
    (217 (076 038 076))
    (218 (038 000 038))
    (219 (038 019 038))
    (220 (255 000 191))
    (221 (255 127 223))
    (222 (165 000 124))
    (223 (165 082 145))
    (224 (127 000 095))
    (225 (127 063 111))
    (226 (076 000 057))
    (227 (076 038 066))
    (228 (038 000 028))
    (229 (038 019 033))
    (230 (255 000 127))
    (231 (255 127 191))
    (232 (204 000 102))
    (233 (165 082 124))
    (234 (153 000 076))
    (235 (127 063 095))
    (236 (127 000 063))
    (237 (076 038 057))
    (238 (076 000 038))
    (239 (038 019 028))
    (240 (255 000 063))
    (241 (255 127 159))
    (242 (165 000 041))
    (243 (165 082 103))
    (244 (127 000 031))
    (245 (127 063 079))
    (246 (076 000 019))
    (247 (076 038 047))
    (248 (038 000 009))
    (249 (038 019 023))
    (250 (051 051 051))
    (251 (091 091 091))
    (252 (132 132 132))
    (253 (173 173 173))
    (254 (214 214 214))
    (255 (255 255 255))
    (256 (000 000 000))(000 (000 000 000))
    (001 (255 000 000))
    (002 (255 255 000))
    (003 (000 255 000))
    (004 (000 255 255))
    (005 (000 000 255))
    (006 (255 000 255))
    (007 (255 255 255))
    (008 (128 128 128))
    (009 (192 192 192))
    (010 (255 000 000))
    (011 (255 127 127))
    (012 (165 000 000))
    (013 (165 082 082))
    (014 (127 000 000))
    (015 (127 063 063))
    (016 (076 000 000))
    (017 (076 038 038))
    (018 (038 000 000))
    (019 (038 019 019))
    (020 (255 063 000))
    (021 (255 159 127))
    (022 (165 041 000))
    (023 (165 103 082))
    (024 (127 031 000))
    (025 (127 079 063))
    (026 (076 019 000))
    (027 (076 047 038))
    (028 (038 009 000))
    (029 (038 023 019))
    (030 (255 127 000))
    (031 (255 191 127))
    (032 (165 082 000))
    (033 (165 124 082))
    (034 (127 063 000))
    (035 (127 095 063))
    (036 (076 038 000))
    (037 (076 057 038))
    (038 (038 019 000))
    (039 (038 028 019))
    (040 (255 191 000))
    (041 (255 223 127))
    (042 (165 124 000))
    (043 (165 145 082))
    (044 (127 095 000))
    (045 (127 111 063))
    (046 (076 057 000))
    (047 (076 066 038))
    (048 (038 028 000))
    (049 (038 033 019))
    (050 (255 255 000))
    (051 (255 255 127))
    (052 (165 165 000))
    (053 (165 165 082))
    (054 (127 127 000))
    (055 (127 127 063))
    (056 (076 076 000))
    (057 (076 076 038))
    (058 (038 038 000))
    (059 (038 038 019))
    (060 (191 255 000))
    (061 (223 255 127))
    (062 (124 165 000))
    (063 (145 165 082))
    (064 (095 127 000))
    (065 (111 127 063))
    (066 (057 076 000))
    (067 (066 076 038))
    (068 (028 038 000))
    (069 (033 038 019))
    (070 (127 255 000))
    (071 (191 255 127))
    (072 (102 204 000))
    (073 (124 165 082))
    (074 (076 153 000))
    (075 (095 127 063))
    (076 (063 127 000))
    (077 (057 076 038))
    (078 (038 076 000))
    (079 (028 038 019))
    (080 (063 255 000))
    (081 (159 255 127))
    (082 (041 165 000))
    (083 (103 165 082))
    (084 (031 127 000))
    (085 (079 127 063))
    (086 (019 076 000))
    (087 (047 076 038))
    (088 (009 038 000))
    (089 (023 038 019))
    (090 (000 255 000))
    (091 (127 255 127))
    (092 (000 165 000))
    (093 (082 165 082))
    (094 (000 127 000))
    (095 (063 127 063))
    (096 (000 076 000))
    (097 (038 076 038))
    (098 (000 038 000))
    (099 (019 038 019))
    (100 (000 255 063))
    (101 (127 255 159))
    (102 (000 165 041))
    (103 (082 165 103))
    (104 (000 127 031))
    (105 (063 127 079))
    (106 (000 076 019))
    (107 (038 076 047))
    (108 (000 038 009))
    (109 (019 038 023))
    (110 (000 255 127))
    (111 (127 255 191))
    (112 (000 165 082))
    (113 (082 165 124))
    (114 (000 127 063))
    (115 (063 127 095))
    (116 (000 076 038))
    (117 (038 076 057))
    (118 (000 038 019))
    (119 (019 038 028))
    (120 (000 255 191))
    (121 (127 255 223))
    (122 (000 165 124))
    (123 (082 165 145))
    (124 (000 127 095))
    (125 (063 127 111))
    (126 (000 076 057))
    (127 (038 076 066))
    (128 (000 038 028))
    (129 (019 038 033))
    (130 (000 255 255))
    (131 (127 255 255))
    (132 (000 165 165))
    (133 (082 165 165))
    (134 (000 127 127))
    (135 (063 127 127))
    (136 (000 076 076))
    (137 (038 076 076))
    (138 (000 038 038))
    (139 (019 038 038))
    (140 (000 191 255))
    (141 (127 223 255))
    (142 (000 124 165))
    (143 (082 145 165))
    (144 (000 095 127))
    (145 (063 111 127))
    (146 (000 057 076))
    (147 (038 066 076))
    (148 (000 028 038))
    (149 (019 033 038))
    (150 (000 127 255))
    (151 (127 191 255))
    (152 (000 102 204))
    (153 (082 124 165))
    (154 (000 076 153))
    (155 (063 095 127))
    (156 (000 063 127))
    (157 (038 057 076))
    (158 (000 038 076))
    (159 (019 028 038))
    (160 (000 063 255))
    (161 (127 159 255))
    (162 (000 041 165))
    (163 (082 103 165))
    (164 (000 031 127))
    (165 (063 079 127))
    (166 (000 019 076))
    (167 (038 047 076))
    (168 (000 009 038))
    (169 (019 023 038))
    (170 (000 000 255))
    (171 (127 127 255))
    (172 (000 000 165))
    (173 (082 082 165))
    (174 (000 000 127))
    (175 (063 063 127))
    (176 (000 000 076))
    (177 (038 038 076))
    (178 (000 000 038))
    (179 (019 019 038))
    (180 (063 000 255))
    (181 (159 127 255))
    (182 (041 000 165))
    (183 (103 082 165))
    (184 (031 000 127))
    (185 (079 063 127))
    (186 (019 000 076))
    (187 (047 038 076))
    (188 (009 000 038))
    (189 (023 019 038))
    (190 (127 000 255))
    (191 (191 127 255))
    (192 (082 000 165))
    (193 (124 082 165))
    (194 (063 000 127))
    (195 (095 063 127))
    (196 (038 000 076))
    (197 (057 038 076))
    (198 (019 000 038))
    (199 (028 019 038))
    (200 (191 000 255))
    (201 (223 127 255))
    (202 (124 000 165))
    (203 (145 082 165))
    (204 (095 000 127))
    (205 (111 063 127))
    (206 (057 000 076))
    (207 (066 038 076))
    (208 (028 000 038))
    (209 (033 019 038))
    (210 (255 000 255))
    (211 (255 127 255))
    (212 (165 000 165))
    (213 (165 082 165))
    (214 (127 000 127))
    (215 (127 063 127))
    (216 (076 000 076))
    (217 (076 038 076))
    (218 (038 000 038))
    (219 (038 019 038))
    (220 (255 000 191))
    (221 (255 127 223))
    (222 (165 000 124))
    (223 (165 082 145))
    (224 (127 000 095))
    (225 (127 063 111))
    (226 (076 000 057))
    (227 (076 038 066))
    (228 (038 000 028))
    (229 (038 019 033))
    (230 (255 000 127))
    (231 (255 127 191))
    (232 (204 000 102))
    (233 (165 082 124))
    (234 (153 000 076))
    (235 (127 063 095))
    (236 (127 000 063))
    (237 (076 038 057))
    (238 (076 000 038))
    (239 (038 019 028))
    (240 (255 000 063))
    (241 (255 127 159))
    (242 (165 000 041))
    (243 (165 082 103))
    (244 (127 000 031))
    (245 (127 063 079))
    (246 (076 000 019))
    (247 (076 038 047))
    (248 (038 000 009))
    (249 (038 019 023))
    (250 (051 051 051))
    (251 (091 091 091))
    (252 (132 132 132))
    (253 (173 173 173))
    (254 (214 214 214))
    (255 (255 255 255))
    (256 (000 000 000))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(loop
  :for (i (j k l)) :in (sort +index->rgb+ #'< :key #'first)
  :do
     (format
      t
      "(~3,'0D (~3,'0D ~3,'0D ~3,'0D))~%"
      i j k l))

(defun foo ()
  (progn
    (loop :for i :from 10 :to 89
          :collect
          (let ((tmp (assoc i +INDEX->RGB+)))
            (rotate-3 tmp))))
  (loop :for i :from 90 :to 169
        :collect
        (let ((tmp (assoc i +INDEX->RGB+)))
          (rotate-3 tmp))))

(defun rotate-3 (lst-3)
  (let ((index (first lst-3))
        (rgb   (second lst-3)))
    (list (+ index 80)
          (list (third  rgb)
                (first  rgb)
                (second rgb)))))

(defun index->rgb (index)
  "@b(Описание:) функция @b(index->rgb) преобразует @b(index)
в диапазоне от 1 до 256 в представление rgb.

 @b(Пример использования:) @begin[lang=lisp](code)
 (index->rgb 0) => NIL 
 (index->rgb 1) => (255 0 000)
 (index->rgb 2) => (255 255 0)
 (index->rgb 4) => (0   255 255)
 (index->rgb 7) => (255 255 255)
 (index->rgb 250) => (51 51 51)
 (index->rgb 253) => (173 173 173)
 (index->rgb 256) => NIL
@end(code)
"
  (cadr (assoc index +index->rgb+)))

(defun rgb->index-bak (rgb)
  "@b(Описание:) функция @b(rgb->index) преобразует цвет в
представлении rgb в индекс системы AutoCad.

 @b(Пример использования:) @begin[lang=lisp](code)
 (rgb->index '(256 0 0))    => 1 
 (rgb->index '(0 256 0))    => 3
 (rgb->index '(0 0 256))    => 5
 (rgb->index '(56  56  56)) => 250 
 (rgb->index '(114 208 47)) => 72 
 #+nil
@end(code)
"
  (assert (and (consp rgb) (= (length rgb) 3)))
  (caadar (sort (mapcar #'(lambda (el)
			    (let ((r (- (first (cadr el))  (first  rgb)))
				  (g (- (second (cadr el)) (second rgb)))
				  (b (- (third  (cadr el)) (third  rgb))))
			      (list (+ (* r r) (* g g) (* b b)) el)))
			+index->rgb+)
		#'<
		:key #'(lambda (el) (first el)))))

 
(defun rgb->index (rgb)
  "@b(Описание:) функция @b(rgb->index) преобразует цвет в
представлении rgb в индекс системы AutoCad.

 @b(Пример использования:) @begin[lang=lisp](code)
 (rgb->index '(256 0 0))    => 1 
 (rgb->index '(0 256 0))    => 3
 (rgb->index '(0 0 256))    => 5
 (rgb->index '(56  56  56)) => 250 
 (rgb->index '(114 208 47)) => 72 
 (progn
   (format t \"(list \")
           (dotimes (i 50)  (let ((r (random 255)) (g (random 255)) (b (random 255)))
   		              (format t \"(= ~A (rgb-2-ac-ci '~S))~%\"
			              (rgb->index (list r g b ))
			              (list r g b))))
           (format t \")\"))
@end(code)

 @b(Пример использования:)
@begin[lang=Autolisp](code)
 (defun rgb-2-ac-ci (rgb)
  (if (null *po*)
    (setq *po* (vlax-ename->vla-object (car (entsel)))))
  (setq	col (vlax-create-object
	      (strcat \"AutoCAD.AcCmColor.\"
		      (substr (getvar \"ACADVER\") 1 2))))
  (vla-SetRGB col (car rgb) (cadr rgb) (caddr rgb))
  (vlax-put-property *po* 'TrueColor col)
  (vla-put-color *po* (vla-get-color *po*))
  (vla-get-color *po*))
@end(code)
"
  (assert (and (consp rgb) (= (length rgb) 3)))
  (caadr
   (reduce
    #'(lambda (x y)
        (if (< (first x) (first y))
            x y
            ))
    (mapcar #'(lambda (el)
	        (let ((r (- (first (cadr el))  (first  rgb)))
		      (g (- (second (cadr el)) (second rgb)))
		      (b (- (third  (cadr el)) (third  rgb))))
	          (list #+nil (+ (* r r) (* g g) (* b b))
                        (+ (abs r) (abs g) (abs b)) el)))
	    +index->rgb+)
    :initial-value (list (* 256 256 3)))))

(defun rgb->true (rgb)
  "
 @b(Пример использования:)
@begin[lang=lisp](code)
   (rgb->true '(114 208 47))   7524399
@end(code)
"
  (+
   (* (first  rgb) 256 256)
   (* (second rgb) 256)
   (* (third  rgb))))

;;;;

(defun true->rgb (true)
  "@b(Описание:) функция @b(true->rgb) выполяет преобразование цвета,
  представленного в 32-битном выражении EntityColor список трех целых
  RGB.

 @b(Пример использования:)
@begin[lang=lisp](code)
 (true->rgb *byblock*)   => '(0 0 0)
 (true->rgb *bylayer*)   => '(0 0 0)
 (true->rgb -1032662993) => '(114 208 47)
 (true->rgb     7524399) => '(114 208 47)

 (true->rgb -7524399)    => '(141 47 209)
@end(code)
"
  (let* ((rg-b (multiple-value-list (floor  true 256)))
	 (b    (+ 256 -256 (second rg-b)))
	 (r-g  (multiple-value-list (floor (first rg-b) 256)))
	 (g    (+ 256 -256 (second r-g)))
	 (r-   (multiple-value-list (floor (first r-g) 256)))
	 (r    (+ 256 -256 (second r-))))
    (list r g b )))

(defun true->entity (true)
  "@b(Описание:) функция @b(true->entity) возвращает цвет в формате
 EntityColor."
  (rgb->entity (true->rgb true)))

(defun true->index (true)
  "@b(Описание:) функция @b(true->index) возвращает индекс цвета.

 @b(Пример использования:)
@begin[lang=lisp](code)
 (true->index 40)    => 178 
 (true->index 15000) => 154
 (true->index 15568) => 162 
@end(code)"
  (rgb->index (true->rgb true)))

(defun index->true (index)
  "@b(Описание:) функция @b(index->true)

 @b(Пример использования:)
@begin[lang=lisp](code)
  (index->true   1) => 16711680 (24 bits, #xFF0000)
  (index->true 255) => 16777215 (24 bits, #xFFFFFF) 
@end(code)
"
  (rgb->true (index->rgb index)))

(defun rgb->entity (rgb)
  "@b(Описание:) функция @b(rgb->entity)
"
  (+ (* 65536 (first rgb))
     (* 256 (second rgb))
     (third rgb)
     *byentity*))

(defun index->entity (index)
  "@b(Описание:) функция @b(index->entity)

 @b(Пример использования:)
@begin[lang=lisp](code)
 (index->entity   1) => -1023410175
 (index->entity   4) => -1023410172
 (index->entity   7) => -1023410169
 (index->entity 255) => -1023409921
@end(code)"
  (+ index *byindex*))

(defun entity->index (entity)
  "@b(Описание:) функция @b(entity->index)

 @b(Пример использования:)
@begin[lang=lisp](code)
 (entity->index  *bylayer*)  => 256
 (entity->index  *byblock*)  => 0
 (entity->index -1023410175) => 1 
 (entity->index -1023410172) => 4 
 (entity->index -1023410169) => 7
 (entity->index -1023409921) => 255
 (entity->index 
  (rgb->entity 
   '( 10 250  65))) => 100
 (entity->index 
  (rgb->entity 
   '(165   0 124))) => 224
@end(code)"
  (let ((ec entity))
    (cond
      ((= ec *bylayer*) 256)
      ((= ec *byblock*) 0)
      ((<= *byindex-start* ec *byindex-end*)
       (- ec *byindex*))
      ((< *byentity-start* ec *byentity-end*)
       (rgb->index (true->rgb ec))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass <color> ()
  ((entity-color
    :accessor entity-color
    :initarg :entity-color
    :initform *bylayer*
    :documentation
    "Код 62 и 420"))
  (:documentation
   "
; Blue (RO) = 0
; BookName (RO) = \"\"
; ColorIndex = 18
; ColorMethod = 194
; ColorName (RO) = \"\"
; EntityColor = -1040187392
; Green (RO) = 0
; Red (RO) = 0

#+nil (
       IAcadAcCmColor (New)
       EntityColor       - Property
       ColorName         - Property
       BookName          - Property
       Red               - Property
       Blue              - Property
       Green             - Property
       ColorMethod       - Property
       ColorIndex        - Property
       SetColorBookColor - Method
       SetNames          - Method
       Delete            - Method
       SetRGB            - Method)"
   ))

(defmethod red ((color <color>))
  (let ((ec (entity-color color)))
    (cond
      ((= ec *bylayer*) 0)
      ((= ec *byblock*) 0)
      ((<= *byindex-start* ec *byindex-end*)
       (first (index->rgb (entity->index ec))))
      ((< *byentity-start* ec *byentity-end*)
       (first (true->rgb ec))))))

(defmethod green ((color <color>))
  (let ((ec (entity-color color)))
    (cond
      ((= ec *bylayer*) 0)
      ((= ec *byblock*) 0)
      ((<= *byindex-start* ec *byindex-end*)
       (second (index->rgb (entity->index ec))))
      ((< *byentity-start* ec *byentity-end*)
       (second (true->rgb ec))))))

(defmethod blue ((color <color>))
  (let ((ec (entity-color color)))
    (cond
      ((= ec *bylayer*) 0)
      ((= ec *byblock*) 0)
      ((<= *byindex-start* ec *byindex-end*)
       (third (index->rgb (entity->index ec))))
      ((< *byentity-start* ec *byentity-end*)
       (third (true->rgb ec))))))

(defmethod color-index ((color <color>))
  (entity->index (entity-color color)))

(defmethod (setf color-index) (index (color <color>))
  (cond
    ((= 0   index) (setf (entity-color color) *byblock*))
    ((< 0 index 256) (setf (entity-color color) (+ *byindex* index)))
    (t (setf (entity-color color) *bylayer*)))
  color)

(defmethod color-method ((color <color>))
  (let ((ec (entity-color color)))
    (cond
      ((= ec *bylayer*)                       +ac-Color-Method-ByLayer+)
      ((= ec *byblock*)                       +ac-Color-Method-ByBlock+)
      ((<= *byindex-start* ec *byindex-end*)  +ac-Color-Method-ByACI+)
      ((< *byentity-start* ec *byentity-end*) +ac-Color-Method-ByRGB+)
      #+nil (()                               +ac-Color-Method-Foreground+) )))

(defmethod (setf rgb) (rgb (color <color>))
  (setf (entity-color color)
        (rgb->entity
         (list
          (first  rgb)
          (second rgb)
          (third  rgb)))))

(defmethod rgb ((color <color>))
  (list
   (red   color)
   (green color)
   (blue  color)))

(defmethod print-object ((color <color>) s)
  (format s "<color>(color-index=~A; RGB=~S)"
             (color-index color)
             (list (red color) (green color) (blue color))))

;;;;

(defparameter *color* (make-instance '<color>))

(setf (rgb *color*) '(255 255 0))

(setf (color-index *color*) 10)

(color-method *color*)

(setf (entity-color *color*) *byblock*)

 
