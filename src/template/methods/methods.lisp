("Activate" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8131A6DF-ED9F-4281-9207-C17BBDB187BF"
            "
Activate Method (ActiveX)
Makes the specified drawing active.
Supported platforms: Windows only
Signature
VBA:
object.Activate
object
    Type: Document
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ActivateMethod()
    ' This example creates two new drawings and activates each drawing in turn.
    
    Dim NewDrawing1 As AcadDocument
    Dim Newdrawing2 As AcadDocument
    Set NewDrawing1 = ThisDrawing.Application.Documents.Add(\"\")
    Set Newdrawing2 = ThisDrawing.Application.Documents.Add(\"\")
    
    Dim drawing As AcadDocument
    For Each drawing In ThisDrawing.Application.Documents
        drawing.Activate
        MsgBox \"Drawing \" & drawing.name & \" is active.\"
    Next drawing
End Sub
Visual LISP:
Not available
")
("Add" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6DB6EFDF-C393-4BD0-9E59-A57BCDA3456F"
       "
Add Method (ActiveX)
Creates a member object and adds it to the appropriate collection.
Supported platforms: Windows only
Signature - Blocks
VBA:
RetVal = object.Add(InsertionPoint, Name)
object
    Type: Blocks
    The object this method applies to.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying where the Blocks object will be added.
Name
    Access: Input-only
    Type: String
    The name of the block to add to the collection.
Signature - UCSs
VBA:
RetVal = object.Add(Origin, XAxisPoint, YAxisPoint, Name)
object
    Type: UCSs
    The object this method applies to.
Origin
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying where the UCS is to be added.
XAxisPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the positive X axis of the UCS. The XAxisPoint and YAxisPoint together cannot specify the same location as the Origin.
YAxisPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the positive Y axis of the UCS. (The Z axis follows by applying the right-hand rule.)
Name
    Access: Input-only
    Type: String
    The name of the UCS to add to the collection.
Signature - Hyperlinks
VBA:
RetVal = object.Add(Name [, Description] [, NamedLocation])
object
    Type: Hyperlinks
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the hyperlink to add.
Description
    Access: Input-only; optional
    Type: Variant
    The description of the hyperlink to add.
NamedLocation
    Access: Input-only; optional
    Type: Variant
    A given location, such as a named view in AutoCAD or a bookmark in a word processing program. If you specify a named view to jump to in an AutoCAD drawing, AutoCAD restores that view when the hyperlink is opened.
Signature - PlotConfigurations
VBA:
RetVal = object.Add(Name [, ModelType])
object
    Type: PlotConfigurations
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the object to add to the collection.
ModelType
    Access: Input-only; optional
    Type: Boolean
        True: The plot configuration applies only to the Model tab.
        False: The plot configuration applies to all layouts.
Signature - All other supported objects
VBA:
RetVal = object.Add(Name)
object
    Type: Dictionaries, DimStyles, Documents, Groups, Layers, Layouts, Linetypes, Materials, PopupMenus, RegisteredApplications, SelectionSets, TextStyles, Toolbars, Views, Viewports
    The object this method applies to.
Name
    Access: Input-only; optional the Documents object
    Type: String
    The name of the object to add to the collection. For the Documents, this name represents the name of the drawing template to use and will accept a URL address or a fully qualified path and file name.
Return Value (RetVal)
Type: Block, Dictionary, DimStyle, Document, Group, Hyperlink, Layer, Layout, Linetype, Material, PlotConfiguration, PopupMenu, RegisteredApplication, SelectionSet, TextStyle, Toolbar, UCS, View, Viewport
The newly added object.
Remarks
Although you can create a linetype and add it to the Linetypes object using this method, it will be created with the default properties only. Because you cannot edit properties of the Linetype object with this release of ActiveX Automation, use the Load method to load existing linetypes into your drawing.
Layers are created with default color and linetype properties. The default color is white, and the default linetype is standard.
Documents: When accessing a secure URL, a dialog box will be posted that prompts the user for the necessary password information. Message boxes may also be displayed if the user has not suppressed this activity in the browser. When downloading a file, AutoCAD creates a temporary file for internal processing. Do not attempt to access this temporary file. Information in this file is deleted at the end of the AutoCAD session.
Group: You should not specify a Name that is excessively long or contains spaces, because these names are not handled well in the Group dialog box and cannot be entered at the command line.
Examples
VBA:
Sub Example_Add()
    ' This example adds a block, dictionary, dimension style,
    ' group, layer, registered application, selection set,
    ' textstyle, view, viewport and UCS using the Add method.
    
    GoSub ADDBLOCK
    GoSub ADDDICTIONARY
    GoSub ADDDIMSTYLE
    GoSub ADDGROUP
    GoSub ADDLAYER
    GoSub ADDREGISTEREDAPP
    GoSub ADDSELECTIONSET
    GoSub ADDTEXTSTYLE
    GoSub ADDVIEW
    GoSub ADDVIEWPORT
    GoSub ADDUCS
	GoSub ADDMATERIAL
    Exit Sub
    
ADDBLOCK:
    ' Create a new block called \"New_Block\"
    Dim blockObj As AcadBlock
    
    ' Define the block
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    
    ' Add the block to the blocks collection
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"New_Block\")
    MsgBox blockObj.name & \" has been added.\" & vbCrLf & _
            \"Origin: \" & blockObj.origin(0) & \", \" & blockObj.origin(1) _
            & \", \" & blockObj.origin(2), , \"Add Example\"
    Return
    
ADDDICTIONARY:
    ' Create a new dictionary called \"New_Dictionary\"
    Dim dictObj As AcadDictionary
    
    ' Add the dictionary to the dictionaries collection
    Set dictObj = ThisDrawing.Dictionaries.Add(\"New_Dictionary\")
    MsgBox dictObj.name & \" has been added.\", , \"Add Example\"
    Return
ADDDIMSTYLE:
    ' Create a new dimension style called \"New_Dimstyle\" in current drawing
    Dim DimStyleObj As AcadDimStyle
    
    ' Add the dimstyle to the dimstyles collection
    Set DimStyleObj = ThisDrawing.DimStyles.Add(\"New_Dimstyle\")
    MsgBox DimStyleObj.name & \" has been added.\", , \"Add Example\"
    Return
    
ADDGROUP:
    ' Create a new group called \"New_Group\" in current drawing
    Dim groupObj As AcadGroup
    
    ' Add the group to the groups collection
    Set groupObj = ThisDrawing.Groups.Add(\"New_Group\")
    MsgBox groupObj.name & \" has been added.\", , \"Add Example\"
    Return
    
ADDLAYER:
    ' This example creates a new layer called \"New_Layer\"
    Dim layerObj As AcadLayer
    
    ' Add the layer to the layers collection
    Set layerObj = ThisDrawing.Layers.Add(\"New_Layer\")
    
    ' Make the new layer the active layer for the drawing
    ThisDrawing.ActiveLayer = layerObj
    
    ' Display the status of the new layer
     MsgBox layerObj.name & \" has been added.\" & vbCrLf & _
            \"LayerOn Status: \" & layerObj.LayerOn & vbCrLf & _
            \"Freeze Status: \" & layerObj.Freeze & vbCrLf & _
            \"Lock Status: \" & layerObj.Lock & vbCrLf & _
            \"Color: \" & layerObj.Color, , \"Add Example\"
    Return
    
ADDREGISTEREDAPP:
    ' Create a registered application named \"New_RegApp\" in current drawing
    Dim RegAppObj As AcadRegisteredApplication
    
    ' Add the registered application to the registered applications collection
    Set RegAppObj = ThisDrawing.RegisteredApplications.Add(\"New_RegApp\")
    MsgBox RegAppObj.name & \" has been added.\", , \"Add Example\"
    Return
ADDSELECTIONSET:
    ' Create a selectionset named \"New_SelectionSet\" in current drawing
    Dim ssetObj As AcadSelectionSet
    
    ' Add the selection set to the selection sets collection
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"New_SelectionSet\")
    MsgBox ssetObj.name & \" has been added.\" & vbCrLf & _
           \"The number of items in the selection set is \" & ssetObj.count _
           , , \"Add Example\"
    Return
    
ADDTEXTSTYLE:
    ' Create a textstyle named \"New_Textstyle\" in current drawing
    Dim txtStyleObj As AcadTextStyle
    
    ' Add the textstyle to the textstyles collection
    Set txtStyleObj = ThisDrawing.TextStyles.Add(\"New_Textstyle\")
    MsgBox txtStyleObj.name & \" has been added.\" & vbCrLf & _
           \"Height: \" & txtStyleObj.height & vbCrLf & _
           \"Width: \" & txtStyleObj.width, , \"Add Example\"
    Return
    
ADDVIEW:
    ' Create a view named \"New_View\" in current drawing
    Dim viewObj As AcadView
    
    ' Add the view to the views collection
    Set viewObj = ThisDrawing.Views.Add(\"New_View\")
    MsgBox viewObj.name & \" has been added.\" & vbCrLf & _
           \"Height: \" & viewObj.height & vbCrLf & _
           \"Width: \" & viewObj.width, , \"Add Example\"
    Return
    
ADDVIEWPORT:
    ' Create a viewport named \"New_Viewport\" in current drawing
    Dim vportObj As AcadViewport
    
    ' Add the viewport to the viewports collection
    Set vportObj = ThisDrawing.Viewports.Add(\"New_Viewport\")
    MsgBox vportObj.name & \" has been added.\" & vbCrLf & _
           \"GridOn Status: \" & vportObj.GridOn & vbCrLf & _
           \"OrthoOn Status: \" & vportObj.OrthoOn & vbCrLf & _
           \"SnapOn Status: \" & vportObj.SnapOn, , \"Add Example\"
    Return
    
ADDUCS:
    ' Create a UCS named \"New_UCS\" in current drawing
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPnt(0 To 2) As Double
    Dim yAxisPnt(0 To 2) As Double
    
    ' Define the UCS
    origin(0) = 4#: origin(1) = 5#: origin(2) = 3#
    xAxisPnt(0) = 5#: xAxisPnt(1) = 5#: xAxisPnt(2) = 3#
    yAxisPnt(0) = 4#: yAxisPnt(1) = 6#: yAxisPnt(2) = 3#
    
    ' Add the UCS to the UserCoordinatesSystems collection
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPnt, yAxisPnt, \"New_UCS\")
    MsgBox ucsObj.name & \" has been added.\" & vbCrLf & _
            \"Origin: \" & ucsObj.origin(0) & \", \" & ucsObj.origin(1) _
            & \", \" & ucsObj.origin(2), , \"Add Example\"
    Return
ADDMATERIAL:    
	Dim oMaterial As AcadMaterial
    Dim oMaterials As AcadMaterials
    Set oMaterial = ThisDrawing.Materials.Add(\"TestMaterial\")
    oMaterial.Description = \"This example demonstrates how to add a material to a database.\"
    ThisDrawing.ActiveMaterial = oMaterial
        ' Display the status of the new layer
    MsgBox oMaterial.Name & \" has been added.\" & vbCrLf & _
            \"Name: \" & oMaterial.Name & vbCrLf & vbCrLf & _
            \"Description: \" & vbCrLf & vbCrLf & _
            oMaterial.Description
    Return
	
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Add()
    ;; This example adds a block, dictionary, dimension style,
    ;; group, layer, registered application, selection set,
    ;; textstyle, view, viewport and UCS using the Add method.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
;; ADDBLOCK:
    ;; Create a new block called \"New_Block\"
    ;; Define the insertion point
    (setq insertionPnt (vlax-3d-point 0 0 0))
    
    ;; Add the block to the blocks collection
    (setq blocks (vla-get-Blocks doc))
    (setq blockObj (vla-Add blocks insertionPnt \"New_Block\"))
    (alert (strcat (vla-get-Name blockObj) \" has been added.\"
                    \"\nOrigin: \" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin blockObj)) 0) 2 2) \", \"
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin blockObj)) 1) 2 2) \", \"
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin blockObj)) 2) 2 2)
           )
    )
    
;; ADDDICTIONARY:
    ;; Create a new dictionary called \"New_Dictionary\"
    ;; Add the dictionary to the dictionaries collection
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Add dictionaries \"New_Dictionary\"))
    (alert (strcat (vla-get-Name dictObj) \" has been added.\"))
;; ADDDIMSTYLE:
    ;; Create a new dimension style called \"New_Dimstyle\" in current drawing
    
    ;; Add the dimstyle to the dimstyles collection
    (setq dimStyles (vla-get-DimStyles doc))
    (setq dimStyleObj (vla-Add dimStyles \"New_Dimstyle\"))
    (alert (strcat (vla-get-Name dimStyleObj) \" has been added.\"))
    
;; ADDGROUP:
    ;; Create a new group called \"New_Group\" in current drawing
    
    ;; Add the group to the groups collection
    (setq groups (vla-get-Groups doc))
    (setq groupObj (vla-Add dimStyles \"New_Group\"))
    (alert (strcat (vla-get-Name groupObj) \" has been added.\"))
    
;; ADDLAYER:
    ;; This example creates a new layer called \"New_Layer\"
    
    ;; Add the layer to the layers collection
    (setq layers (vla-get-Layers doc))
    (setq layerObj (vla-Add layers \"New_Layer\"))
    
    ;; Make the new layer the active layer for the drawing
    (vla-put-ActiveLayer doc layerObj)
    
    ;; Display the status of the new layer
    (alert (strcat (vla-get-Name layerObj) \" has been added.\"
                   \"\nLayerOn Status: \" (if (= (vla-get-LayerOn layerObj) :vlax-true) \"1\" \"0\")
                   \"\nFreeze Status: \" (if (= (vla-get-Freeze layerObj) :vlax-true) \"1\" \"0\")
                   \"\nLock Status: \"  (if (= (vla-get-Lock layerObj) :vlax-true) \"1\" \"0\")
                   \"\nColor: \" (itoa (vla-get-Color layerObj))
           )
    )
    
;; ADDREGISTEREDAPP:
    ;; Create a registered application named \"New_RegApp\" in current drawing
    
    ;; Add the registered application to the registered applications collection
    (setq regApps (vla-get-RegisteredApplications doc))
    (setq regAppObj (vla-Add regApps \"New_RegApp\"))
    (alert (strcat (vla-get-Name regAppObj) \" has been added.\"))
;; ADDSELECTIONSET:
    ;; Create a selectionset named \"New_SelectionSet\" in current drawing
    
    ;; Add the selection set to the selection sets collection
    (setq ssets (vla-get-SelectionSets doc))
    (setq ssetObj (vla-Add ssets \"New_SelectionSet\"))
    (alert (strcat (vla-get-Name ssetObj) \" has been added.\"
                    \"\nThe number of items in the selection set is \" (itoa (vla-get-Count ssetObj))
           )
    )
    
;; ADDTEXTSTYLE:
    ;; Create a textstyle named \"New_Textstyle\" in current drawing
    
    ;; Add the textstyle to the textstyles collection
    (setq textStyles (vla-get-TextStyles doc))
    (setq txtStyleObj (vla-Add textStyles \"New_Textstyle\"))
    (alert (strcat (vla-get-Name txtStyleObj) \" has been added.\"
                    \"\nHeight: \" (rtos (vla-get-Height txtStyleObj) 2 2)
                    \"\nWidth: \" (rtos (vla-get-Width txtStyleObj) 2 2)
           )
    )
    
;; ADDVIEW:
    ;; Create a view named \"New_View\" in current drawing
    
    ;; Add the view to the views collection
    (setq views (vla-get-Views doc))
    (setq viewObj (vla-Add views \"New_View\"))
    (alert (strcat (vla-get-Name viewObj) \" has been added.\"
                    \"\nHeight: \" (rtos (vla-get-Height viewObj) 2 2)
                    \"\nWidth: \" (rtos (vla-get-Width viewObj) 2 2)
           )
    )
    
;; ADDVIEWPORT:
    ;; Create a viewport named \"New_Viewport\" in current drawing
    
    ;; Add the viewport to the viewports collection
    (setq viewports (vla-get-Viewports doc))
    (setq vportObj (vla-Add viewports \"New_Viewport\"))
    (alert (strcat (vla-get-Name vportObj) \" has been added.\"
                    \"\nGridOn Status: \" (if (= (vla-get-GridOn vportObj) :vlax-true) \"1\" \"0\")
                    \"\nOrthoOn Status: \" (if (= (vla-get-OrthoOn vportObj) :vlax-true) \"1\" \"0\")
                    \"\nSnapOn Status: \" (if (= (vla-get-SnapOn vportObj) :vlax-true) \"1\" \"0\")
           )
    )  
    
;; ADDUCS:
    ;; Create a UCS named \"New_UCS\" in current drawing
  
    ;; Define the UCS
    (setq origin (vlax-3d-point 4 5 3)
          xAxisPnt (vlax-3d-point 5 5 3)
          yAxisPnt (vlax-3d-point 4 6 4))
  
    ;; Add the UCS to the UserCoordinatesSystems collection
    (setq UCSs (vla-get-UserCoordinateSystems doc))
    (setq ucsObj (vla-Add UCSs origin xAxisPnt yAxisPnt \"New_UCS\"))
    (alert (strcat (vla-get-Name ucsObj) \" has been added.\"
                    \"\nOrigin: \" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 0) 2 2) \", \"
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 1) 2 2) \", \"
		                 (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 2) 2 2)
           )
    )  
;; ADDMATERIAL:
    ;; Creates a material named \"New_UCS\" in the current drawing  
    (setq oMaterials (vla-get-Materials doc))
    (setq oMaterial (vla-Add oMaterials \"TestMaterial\"))
    (vla-put-Description oMaterial \"This example demonstrates how to add a material to a database.\")
    (vla-put-ActiveMaterial doc oMaterial)
    ;; Display information about the material
    (alert (strcat (vla-get-Name oMaterial) \" has been added.\"
                    \"\nName: \" (vla-get-Name oMaterial)
                    \"\nDescription: \" (vla-get-Description oMaterial)
           )
    )
)
")
("Add3DFace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E125323B-7DC2-4174-AEA9-DAAEA0E683D9"
             "
Add3DFace Method (ActiveX)
Creates a 3DFace object given four vertices.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Add3DFace(Point1, Point2, Point3 [, Point4])
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the 3DFace object.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the 3DFace object.
Point3
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the 3DFace object.
Point4
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the 3DFace object. If omitted, this point will default to the coordinates of Point3 in order to create a three-sided face.
Return Value (RetVal)
Type: 3DFace
The newly created 3DFace object.
Remarks
To create a three-sided face, omit the last point. Use the SetInvisibleEdge method to set the visibility of an edge.
Points must be entered sequentially in either a clockwise or counterclockwise direction to create a 3DFace object. You can create multiple adjacent faces by specifying the first two points of an additional face exactly as the last two points of the previous face.
Examples
VBA:
Sub Example_Add3DFace()
    ' This example creates a 3D face in model space.
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim point3(0 To 2) As Double
    Dim point4(0 To 2) As Double
    
    ' Define the four coordinates of the face
    point1(0) = 0#: point1(1) = 0#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 0#: point2(2) = 1#
    point3(0) = 5#: point3(1) = 5#: point3(2) = 1#
    point4(0) = 1#: point4(1) = 10#: point4(2) = 0#
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Add3DFace()
    ;; This example creates a 3D face in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 5 0 1)
          point3 (vlax-3d-point 5 10 1)
          point4 (vlax-3d-point 0 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
)
")
("Add3DMesh" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3E5F11B9-C9A8-499E-8213-9624991453C6"
             "
Add3DMesh Method (ActiveX)
Creates a free-form 3D mesh, given the number of points in the M and N directions and the coordinates of the points in the M and N directions.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Add3Dmesh(M, N, PointsMatrix)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
M, N
    Access: Input-only
    Type: Integer
    Dimensions of the point array. The size of the mesh in both the M and N directions is limited to between 2 and 256.
PointsMatrix
    Access: Input-only
    Type: Variant (array of doubles)
    M x N matrix of 3D WCS coordinates. Defining vertices begins with vertex (0,0). Supplying the coordinate locations for each vertex in row M must be done before specifying vertices in row M + 1.
Return Value (RetVal)
Type: PolygonMesh
A PolygonMesh as the newly created 3DMesh object.
Remarks
Vertices may be any distance from each other.
A PolygonMesh is always open in both M and N directions. A mesh can be closed after creation by using the MClose and NClose properties on the PolygonMesh object.
A PolygonMesh is always created as a simple mesh. A mesh can be smoothed after creation by using the Type property.
Examples
VBA:
Sub Example_Add3DMesh()
    ' This example creates a 4 X 4 polygonmesh in model space.
    Dim meshObj As AcadPolygonMesh
    Dim mSize, nSize, count As Integer
    Dim points(0 To 47) As Double
    
    ' Create the matrix of points
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 2: points(4) = 0: points(5) = 1
    points(6) = 4: points(7) = 0: points(8) = 0
    points(9) = 6: points(10) = 0: points(11) = 1
    points(12) = 0: points(13) = 2: points(14) = 0
    points(15) = 2: points(16) = 2: points(17) = 1
    points(18) = 4: points(19) = 2: points(20) = 0
    points(21) = 6: points(22) = 2: points(23) = 1
    points(24) = 0: points(25) = 4: points(26) = 0
    points(27) = 2: points(28) = 4: points(29) = 1
    points(30) = 4: points(31) = 4: points(32) = 0
    points(33) = 6: points(34) = 4: points(35) = 0
    points(36) = 0: points(37) = 6: points(38) = 0
    points(39) = 2: points(40) = 6: points(41) = 1
    points(42) = 4: points(43) = 6: points(44) = 0
    points(45) = 6: points(46) = 6: points(47) = 0
    
    mSize = 4: nSize = 4
    
    ' creates a 3Dmesh in model space
    Set meshObj = ThisDrawing.ModelSpace.Add3DMesh(mSize, nSize, points)
    
    ' Change the viewing direction of the viewport to better see the polygonmesh
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Add3DMesh()
    ;; This example creates a 4 X 4 polygonmesh in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the matrix of points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 47)))  
    (vlax-safearray-fill points '(0 0 0
                                  2 0 1
                                  4 0 0
                                  6 0 1
                                  0 2 0
                                  2 2 1
                                  4 2 0
                                  6 2 1
                                  0 4 0
                                  2 4 1
                                  4 4 0
                                  6 4 0
                                  0 6 0
                                  2 6 1
                                  4 6 0
                                  6 6 0
                                 )
    )
    (setq mSize 4
	         nSize 4)
    
    ;; creates a 3Dmesh in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq meshObj (vla-Add3DMesh modelSpace mSize nSize points))
    
    ;; Change the viewing direction of the viewport to better see the polygonmesh
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("Add3DPoly" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-21D7283A-552F-4DD8-BB4D-AEA1632186B9"
             "
Add3DPoly Method (ActiveX)
Creates a 3D polyline from the given array of coordinates.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Add3Dpoly(PointsArray)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
PointsArray
    Access: Input-only
    Type: Variant (array of doubles)
    An array of 3D WCS coordinates. The polyline will be created according to the order of the coordinates in the array. The number of elements in the array must be a multiple of three. (Three elements define a single coordinate.)
Return Value (RetVal)
Type: 3DPolyline
The newly created 3DPolyline object.
Remarks
To close the polyline, use the Closed property on the 3DPolyline object.
Examples
VBA:
Sub Example_Add3DPoly()
    
    Dim polyObj As Acad3DPolyline
    Dim points(0 To 8) As Double
    
    ' Create the array of points
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 10: points(4) = 10: points(5) = 10
    points(6) = 30: points(7) = 20: points(8) = 30
    
    ' Create a 3DPolyline in model space
    Set polyObj = ThisDrawing.ModelSpace.Add3DPoly(points)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Add3DPoly()
    ;; This example creates a 3 segment 3D polyline in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the array of points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 0 0
                                  10 10 10
                                  30 20 30
                                 )
    )  
    
    ;; Create a 3D polyline in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq polyObj (vla-Add3DPoly modelSpace points))
    (vla-ZoomAll acadObj)
)
")
("AddArc" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-864A7E1F-D221-4C83-A4DB-F60C8E56FED6"
          "
AddArc Method (ActiveX)
Creates an arc given the center, radius, start angle, and end angle of the arc.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddArc(Center, Radius, StartAngle, EndAngle)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center point of the arc.
Radius
    Access: Input-only
    Type: Double
    The radius of the arc.
StartAngle, EndAngle
    Access: Input-only
    Type: Double
    The start and end angles, in radians, defining the arc. A start angle greater than an end angle defines a counterclockwise arc.
Return Value (RetVal)
Type: Arc
The newly created Arc object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddArc()
    ' This example creates an arc in model space.
   
    Dim arcObj As AcadArc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngleInDegree As Double
    Dim endAngleInDegree As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    startAngleInDegree = 10#
    endAngleInDegree = 230#
    
    ' Convert the angles in degrees to angles in radians
    Dim startAngleInRadian As Double
    Dim endAngleInRadian As Double
    startAngleInRadian = startAngleInDegree * 3.141592 / 180#
    endAngleInRadian = endAngleInDegree * 3.141592 / 180#
    
    ' Create the arc object in model space
    Set arcObj = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngleInRadian, endAngleInRadian)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddArc()
    ;; This example creates an arc in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5
          startAngleInDegree 10
          endAngleInDegree 230)
    
    ;; Convert the angles in degrees to angles in radians
    (setq startAngleInRadian (/ (* startAngleInDegree 3.141592) 180))
    (setq endAngleInRadian (/ (* endAngleInDegree 3.141592) 180))
    
    ;; Create the arc object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq arcObj (vla-AddArc modelSpace centerPoint radius startAngleInRadian endAngleInRadian))
    (vla-ZoomAll acadObj)
)
")
("AddAttribute" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-53417B1F-C6F1-4818-AD43-8C5F81E36BCA"
                "
AddAttribute Method (ActiveX)
Creates an attribute definition at the given location with the specified properties.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddAttribute(Height, Mode, Prompt, InsertionPoint, Tag, Value)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Height
    Access: Input-only
    Type: Double
    The text height in the current drawing unit.
Mode
    Access: Input-only
    Type: AcAttributeMode enum
    Any combination of constants can be used by adding them together:
        acAttributeModeInvisible: Specifies that attribute values will not appear when you insert the block. The AutoCAD ATTDISP command overrides the Invisible mode.
        acAttributeModeConstant: Gives attributes a fixed value for block insertions.
        acAttributeModeVerify: Prompts to verify the attribute value is correct when the block is inserted.
        acAttributeModeLockPosition: Locks the position of the attributes.
        acAttributeModeMultipleLine: Allows the attributes to carry-over onto multiple lines. Prompts you to verify that the attribute value is correct when you insert the block.
        acAttributeModePreset: Sets the attribute to its default value when you insert a block containing a current attribute. The value cannot be edited in this mode.
Prompt
    Access: Input-only
    Type: String
    This string appears when a block containing this attribute is inserted. The default for this string is the Tag string. Inputting acAttributeModeConstant for the Mode parameter disables the prompt.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the location for the attribute.
Tag
    Access: Input-only
    Type: String
    This non-null string identifies each occurrence of the attribute. Enter any characters except spaces or exclamation points. AutoCAD changes lowercase letters to uppercase.
Value
    Access: Input-only
    Type: String
    This non-null string is the default attribute value.
Return Value (RetVal)
Type: Attribute
The newly created Attribute object.
Remarks
An attribute definition is associated to the block for which it is created. Attribute definitions created in model space or paper space are not considered to be attached to any given block.
The AutoCAD AFLAGS system variable stores the mode setting. You can query this value using the GetVariable method, or set it using the SetVariable method.
Examples
VBA:
Sub Example_AddAttribute()
    ' This example creates an attribute definition in model space.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddAttribute()
    ;; This example creates an attribute definition in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
)
")
("AddBox" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DE469E81-8531-415C-9D22-7041A42838DD"
          "
AddBox Method (ActiveX)
Creates a 3D solid box with edges parallel to the axes of the WCS.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddBox(Origin, Length, Width, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Origin
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the origin of the box. This coordinate represents the center of the bounding box for the object, not a corner.
Length
    Access: Input-only
    Type: Double
    The length of the box. Must be a positive number.
Width
    Access: Input-only
    Type: Double
    The width of the box. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The height of the box. Must be a positive number.
lid
A 3DSolid object as the newly created box.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddBox()
    ' This example creates a box in model space.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddBox()
    ;; This example creates a box in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddCircle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-837C702F-91A7-445B-8713-3099B94664BE"
             "
AddCircle Method (ActiveX)
Creates a circle given a center point and radius.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddCircle(Center, Radius)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the circle's center.
Radius
    Access: Input-only
    Type: Double
    The radius of the circle. Must be a positive number.
Return Value (RetVal)
Type: Circle
The newly created Circle object.
Remarks
This circle is created on the XY plane of the WCS.
Examples
VBA:
Sub Example_AddCircle()
    ' This example creates a circle in model space.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddCircle()
    ;; This example creates a circle in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
)
")
("AddCone" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-95CCDBE3-C787-4FF5-AE5F-A94B0F2DF505"
           "
AddCone Method (ActiveX)
Creates a 3D solid cone with the base on the XY plane of the WCS.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddCone(Center, BaseRadius, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the bounding box.
BaseRadius
    Access: Input-only
    Type: Double
    The radius of the cone base. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The height of the cone. Must be a positive number.
lid
A 3DSolid object as the newly created cone.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddCone()
    ' This example creates a cone in model space.
   
    Dim coneObj As Acad3DSolid
    Dim radius As Double
    Dim center(0 To 2) As Double
    Dim height As Double
    
    ' Define the cone
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    radius = 5#
    height = 20#
    
    ' Create the Cone (3DSolid) object in model space
    Set coneObj = ThisDrawing.ModelSpace.AddCone(center, radius, height)
    
    ' Change the viewing direction of the viewport to better see the cone
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddCone()
    ;; This example creates a cone in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the cone
    (setq center (vlax-3d-point 0 0 0)
          coneRadius 5
	         coneHeight 20)
    
    ;; Create the Cone (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq coneObj (vla-AddCone modelSpace center coneRadius coneHeight))
  
    ;; Change the viewing direction of the viewport to better see the cone
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddCustomInfo" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3A6A7572-5A76-4119-8307-FCDC7376D343"
                 "
AddCustomInfo Method (ActiveX)
Adds a custom property field at the end of the existing list of fields.
Supported platforms: Windows only
Signature
VBA:
object.AddCustomInfo key, Value
object
    Type: SummaryInfo
    The object this method applies to.
key
    Access: Input-only
    Type: String
    The name of the custom property.
Value
    Access: Input-only
    Type: String
    The value of the custom property.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddCustomInfo()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddCustomInfo()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("AddCustomObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F258899B-A0FF-4D92-B8D6-0CEAD1BD93B0"
                   "
AddCustomObject Method (ActiveX)
Creates a custom object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddCustomObject(ClassName)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
ClassName
    Access: Input-only
    Type: String
    The rxClassName must be defined in an ObjectARX® application (ObjectARX DLL) or the method will fail.
Return Value (RetVal)
Type: Custom object
The newly created Custom object.
Remarks
The ObjectARX DLL defining the rxClassName custom class must be loaded. Use the LoadARX method on the Application object to explicitly load the ObjectARX file.
Examples
VBA:
Sub Example_AddCustomObject()
    ' This example adds a custom object to model space.
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX Application.
    ThisDrawing.Application.LoadArx \"MyARXApp.dll\"
    
    ' Once the application has been loaded successfully,
    ' add the custom object to model space.
    Dim customObj As AcadObject
    Set customObj = ThisDrawing.ModelSpace.AddCustomObject(\"MyNewObject\")
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddCustomObject()
    ;; This example adds a custom object to model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX Application.
    (vla-LoadArx acadObj \"MyARXApp.dll\")
    
    ;; Once the application has been loaded successfully,
    ;; add the custom object to model space.
    (setq customObj (vla-AddCustomObject (vla-get-ModelSpace doc) \"MyNewObject\"))
)
")
("AddCylinder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5ED77A58-6AC2-4EF1-8E31-97F4889D3973"
               "
AddCylinder Method (ActiveX)
Creates a 3D solid cylinder whose base is on the XY plane of the WCS.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddCylinder(Center, Radius, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    A 3D WCS coordinates specifying the center of the bounding box.
Radius
    Access: Input-only
    Type: Double
    The cylinder radius. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The cylinder height. Must be a positive number.
lid
A 3DSolid object as the newly created cylinder.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddCylinder()
    ' This example creates a cylinder in model space.
    
    Dim cylinderObj As Acad3DSolid
    Dim radius As Double
    Dim center(0 To 2) As Double
    Dim height As Double
    
    ' Define the cylinder
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    radius = 5#
    height = 20#
    
    ' Create the Cylinder (3DSolid) object in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddCylinder(center, radius, height)
    
    ' Change the viewing direction of the viewport to better see the cylinder
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddCylinder()
    ;; This example creates a cylinder in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the cylinder
    (setq center (vlax-3d-point 0 0 0)
          cylRadius 5
	         cylHeight 20)
    
    ;; Create the Cylinder (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq cylinderObj (vla-AddCylinder modelSpace center cylRadius cylHeight))
    
    ;; Change the viewing direction of the viewport to better see the cylinder
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddDim3PointAngular" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16DBF5D3-5D7B-4302-9363-43827C9ACFDF"
                       "
AddDim3PointAngular Method (ActiveX)
Creates an angular dimension using 3 points.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDim3PointAngular(AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
AngleVertex
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the vertex of the angle to be measured.
FirstEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the first extension line passes.
SecondEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the second extension line passes.
TextPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point at which the dimension text is to be displayed.
Return Value (RetVal)
Type: Dim3PointAngular
The newly created angular dimension.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddDim3PointAngular()
    ' This example creates a Dim3PointAngular object in model space
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 2: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"A Dim3PointAngular object has been created.\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDim3PointAngular()
    ;; This example creates a Dim3PointAngular object in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 2 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    (alert \"A Dim3PointAngular object has been created.\")
)
")
("AddDimAligned" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9F5CE147-3787-4DD9-8028-8E89BF02A357"
                 "
AddDimAligned Method (ActiveX)
Creates an aligned dimension object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimAligned(ExtLine1Point, ExtLine2Point, TextPosition)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
ExtLine1Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first endpoint of the extension line.
ExtLine2Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second endpoint of the extension line.
TextPosition
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the text position.
Return Value (RetVal)
Type: DimAligned
The newly created aligned dimension.
Remarks
In aligned dimensions, the dimension line is parallel to the extension line origins. The extension line origins are specified using the ExtLine1Point and ExtLine2Point properties.
Examples
VBA:
Sub Example_AddDimAligned()
    ' This example creates an aligned dimension in model space.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 5#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 5#: point2(2) = 0#
    location(0) = 5#: location(1) = 7#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimAligned()
    ;; This example creates an aligned dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
)
")
("AddDimAngular" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F02BBAFD-69C8-4CAC-8CCF-73949F04B43B"
                 "
AddDimAngular Method (ActiveX)
Creates an angular dimension for an arc, two lines, or a circle.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimAngular(AngleVertex, FirstEndPoint, SecondEndPoint, TextPoint)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
AngleVertex
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the circle or arc, or the common vertex between the two dimensioned lines.
FirstEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the first extension line passes.
SecondEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the second extension line passes.
TextPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point at which the dimension text is to be displayed.
Return Value (RetVal)
Type: DimAngular
The newly created angular dimension.
Remarks
The AngleVertex is the center of the circle or arc, or the common vertex between the two lines being dimensioned. FirstEndPoint and SecondEndPoint are the points through which the two extension lines pass.
The AngleVertex can be the same as one of the angle endpoints. If you need extension lines, they will be added automatically. The endpoints provided are used as origin points for the extension lines.
Examples
VBA:
Sub Example_AddDimAngular()
    ' This example creates an angular dimension in model space.
    
    Dim dimObj As AcadDimAngular
    Dim angVert(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the dimension
    angVert(0) = 0#: angVert(1) = 5#: angVert(2) = 0#
    FirstPoint(0) = 1#: FirstPoint(1) = 7#: FirstPoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    TextPoint(0) = 3#: TextPoint(1) = 5#: TextPoint(2) = 0#
    
    ' Create the angular dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAngular(angVert, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimAngular()
    ;; This example creates an angular dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq angVert (vlax-3d-point 0 5 0)
          FirstPoint (vlax-3d-point 1 7 0)
          SecondPoint (vlax-3d-point 1 3 0)
          TextPoint (vlax-3d-point 3 5 0))
  
    ;; Create the angular dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAngular modelSpace angVert FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
)
")
("AddDimArc" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DE0565FC-FF23-423A-A8F2-B43E4000D817"
             "
AddDimArc Method (ActiveX)
Creates an arc length dimension for an arc.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimArc(ArcCenter, FirstEndPoint, SecondEndPoint, ArcPoint)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
ArcCenter
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the arc.
FirstEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the first extension line passes.
SecondEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the second extension line passes.
ArcPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the arc.
Return Value (RetVal)
Type: DimArcLength
The newly created arc length dimension.
Remarks
The ArcCenter is the center of the arc being dimensioned. FirstEndPoint and SecondEndPoint are the points through which the two extension lines pass.
Examples
VBA:
Sub Example_AddDimArc()
    Dim PI As Double: PI = 3.141592
    Dim oMS As AcadModelSpace
    Set oMS = ThisDrawing.ModelSpace
    Dim ptCenter(2) As Double
    Dim oA As AcadArc
    Set oA = oMS.AddArc(ptCenter, 10, PI / 3, PI * 3 / 4)
    
    Dim ptArcPoint(2) As Double
    ptArcPoint(0) = 0: ptArcPoint(1) = 15
    
    Dim oAcadDimArcLength As AcadDimArcLength
    Set oAcadDimArcLength = oMS.AddDimArc(oA.Center, oA.startPoint, oA.endPoint, ptArcPoint)
    
    Update
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimArc()
    ;; This example creates an arc and arc length dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Define the arc
    (setq center (vlax-3d-point 0 0 0))
    ;; Create the arc in model space
    (setq arc (vla-AddArc modelSpace center 10 (/ PI 3) (/ (* PI 3) 4)))
    
    ;; Define the arc length dimension
    (setq arcPoint (vlax-3d-point 0 15 0)
          startPoint (vla-get-StartPoint arc)
          endPoint (vla-get-EndPoint arc))
  
    ;; Create the arc length dimension in model space
    (setq dimArcLength (vla-AddDimArc modelSpace center startPoint endPoint arcPoint))
    (vla-ZoomExtents acadObj)
)
")
("AddDimDiametric" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A713EB17-E229-48E7-BFA3-AF7DE13B09BF"
                   "
AddDimDiametric Method (ActiveX)
Creates a diametric dimension for a circle or arc given the two points on the diameter and the length of the leader line.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimDiametric(ChordPoint, FarChordPoint, LeaderLength)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
ChordPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first diameter point on the circle or arc.
FarChordPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second diameter point on the circle or arc.
LeaderLength
    Access: Input-only
    Type: Double
    The positive value representing the length from the ChordPoint to the annotation text or dogleg.
Return Value (RetVal)
Type: DimDiametric
The newly created diameter dimension object.
Remarks
Different types of diameter dimensions are created depending on the size of the circle or arc, the length of the leader line, and the values of the AutoCAD DIMUPT, DIMTOFL, DIMFIT, DIMTIH, DIMTOH, DIMJUST, and DIMTAD system variables.
For horizontal dimension text, if the angle of the dimension line is more than 15 degrees from horizontal, and is outside the circle or arc, AutoCAD draws a hook line, also called a landing or dogleg. The hook line is one arrowhead long, and is placed next to the dimension text, as shown in the first two illustrations.
This function uses the LeaderLength parameter as the distance from the ChordPoint to the point where the dimension will do a horizontal dogleg to the annotation text (or stop if no dogleg is necessary).
The LeaderLength setting will only be used during the creation of the dimension (and even then only if the dimension is set to use the default text position value). After the dimension has been closed for the first time, changing the LeaderLength value will not affect how the dimension displays, but the new setting will be stored and will show up in DXF, LISP, and ARX.
Examples
VBA:
Sub Example_AddDimDiametric()
    ' This example creates a diametric dimension in model space.
    
    Dim dimObj As AcadDimDiametric
    Dim chordPoint(0 To 2) As Double
    Dim farChordPoint(0 To 2) As Double
    Dim leaderLength As Double
    
    ' Define the dimension
    chordPoint(0) = 5#: chordPoint(1) = 3#: chordPoint(2) = 0#
    farChordPoint(0) = 5#: farChordPoint(1) = 5#: farChordPoint(2) = 0#
    leaderLength = 1#
    
    ' Create the diametric dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimDiametric(chordPoint, farChordPoint, leaderLength)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimDiametric()
    ;; This example creates a diametric dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq chordPoint (vlax-3d-point 5 3 0)
          farChordPoint (vlax-3d-point 5 5 0)
          leaderLength 1)
    
    ;; Create the diametric dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimDiametric modelSpace chordPoint farChordPoint leaderLength))
    (vla-ZoomAll acadObj)
)
")
("AddDimOrdinate" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EC499091-4A07-4B31-9B85-6A35A6009E3E"
                  "
AddDimOrdinate Method (ActiveX)
Creates an ordinate dimension given the definition point and the leader endpoint.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimOrdinate(DefinitionPoint, LeaderEndPoint, UseXAxis)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
DefinitionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point to be dimensioned.
LeaderEndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the endpoint of the leader. This will be the location at which the dimension text is displayed.
UseXAxis
    Access: Input-only
    Type: Integer
        True: Creates an ordinate dimension displaying the X axis value.
        False: Creates an ordinate dimension displaying the Y axis value.
Return Value (RetVal)
Type: DimOrdinate
The newly created ordinate dimension object.
Remarks
Ordinate dimensions display the X or Y coordinate of an object along with a simple leader line. The absolute value of the coordinate is used according to the prevailing standards for ordinate dimensions.
An ordinate dimension measuring the absolute X position of a point tangent to a circle
Examples
VBA:
Sub Example_AddDimOrdinate()
    ' This example creates an ordinate dimension in model space.
    
    Dim dimObj As AcadDimOrdinate
    Dim definingPoint(0 To 2) As Double
    Dim leaderEndPoint(0 To 2) As Double
    Dim useXAxis As Long
    
    ' Define the dimension
    definingPoint(0) = 5#: definingPoint(1) = 5#: definingPoint(2) = 0#
    leaderEndPoint(0) = 10#: leaderEndPoint(1) = 5#: leaderEndPoint(2) = 0#
    useXAxis = 5#
    
    ' Create an ordinate dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimOrdinate(definingPoint, leaderEndPoint, useXAxis)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimOrdinate()
    ;; This example creates an ordinate dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq definingPoint (vlax-3d-point 5 5 0)
          leaderEndPoint (vlax-3d-point 10 5 0)
          useXAxis 5)
    
    ;; Create an ordinate dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimOrdinate modelSpace definingPoint leaderEndPoint useXAxis))
    (vla-ZoomAll acadObj)
)
")
("AddDimRadial" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4DAA2BF5-9658-477E-8A1B-1D27831BA2E5"
                "
AddDimRadial Method (ActiveX)
Creates a radial dimension for the selected object at the given location.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimRadial(Center, ChordPoint, LeaderLength)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center point on the circle or arc.
ChordPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point on the circle or arc to attach the leader line.
LeaderLength
    Access: Input-only
    Type: Double
    The positive value representing the length from the ChordPoint to the annotation text or dogleg.
Return Value (RetVal)
Type: DimRadial
The newly created radius dimension object.
Remarks
Different types of radial dimensions are created depending on the size of the circle or arc, the TextPosition property and the values in the AutoCAD DIMUPT, DIMTOFL, DIMFIT, DIMTIH, DIMTOH, DIMJUST, and DIMTAD dimension system variables. (System variables can be queried or set using the GetVariable and SetVariable methods.)
For horizontal dimension text, if the angle of the dimension line is more than 15 degrees from horizontal, and is outside the circle or arc, AutoCAD draws a hook line, also called a landing or dogleg. The hook line is one arrowhead long, and is placed next to the dimension text, as shown in the first two illustrations.
This method uses length as the distance from the ChordPoint out to where the dimension will do a horizontal dogleg to the annotation text (or stop if no dogleg is necessary).
The LeaderLength setting will only be used during the creation of the dimension (and even then only if the dimension is set to use the default text position value). After the dimension has been closed for the first time, changing the LeaderLength value will not affect how the dimension displays, but the new setting will be stored and will show up in DXF, LISP, and ARX.
Examples
VBA:
Sub Example_AddDimRadial()
    ' This example creates a radial dimension in model space.
    
    Dim dimObj As AcadDimRadial
    Dim center(0 To 2) As Double
    Dim chordPoint(0 To 2) As Double
    Dim leaderLen As Integer
    
    ' Define the dimension
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    chordPoint(0) = 5#: chordPoint(1) = 5#: chordPoint(2) = 0#
    leaderLen = 5
    
    ' Create the radial dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimRadial(center, chordPoint, leaderLen)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimRadial()
    ;; This example creates a radial dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq center (vlax-3d-point 0 0 0)
          chordPoint (vlax-3d-point 5 5 0)
          leaderLen 5)
    
    ;; Create the radial dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimRadial modelSpace center chordPoint leaderLen))
    (vla-ZoomAll acadObj)
)
")
("AddDimRadialLarge" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-44C17784-3AA5-4D09-86D4-ED501702052D"
                     "
AddDimRadialLarge Method (ActiveX)
Creates a jogged radial dimension for an arc, circle, or polyline arc segment.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimRadialLarge(Center, ChordPoint, OverrideCenter, JogPoint, JogAngle)
object
    Type: Block, ModelSpace, PaperSpace
    The object this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the arc, circle, or polyline arc segment.
ChordPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the chord point for the arc.
OverrideCenter
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the override center location or pick point.
JogPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the jog location or pick point.
JogAngle
    Access: Input-only
    Type: Double
    The value for the jog angle.
Return Value (RetVal)
Type: DimRadialLarge
The newly created jogged radius dimension.
Remarks
The Center is the center of the arc, circle, or polyline arc segment being dimensioned. The OverrideCenter is the origin point of the dimension.
Examples
VBA:
Sub Example_AddDimRadialLarge()
    Dim PI As Double: PI = 3.141592
    Dim oMS As AcadModelSpace
    Set oMS = ThisDrawing.ModelSpace
    
    Dim ptCenter(2) As Double
    Dim oA As AcadArc
    Set oA = oMS.AddArc(ptCenter, 10, PI / 3, PI * 3 / 4)
    Dim ptChordPoint(2) As Double
    ptChordPoint(0) = 0: ptChordPoint(1) = 10: ptChordPoint(2) = 0
    Dim ptOverrideCenter(2) As Double
    ptOverrideCenter(0) = -3: ptOverrideCenter(1) = -6: ptOverrideCenter(2) = 0
    
    Dim ptJogPoint(2) As Double
    ptJogPoint(0) = 0: ptJogPoint(1) = 5: ptJogPoint(2) = 0
    Dim oDimRadialLarge As AcadDimRadialLarge
    Set oDimRadialLarge = oMS.AddDimRadialLarge(oA.Center, ptChordPoint, ptOverrideCenter, ptJogPoint, PI / 4)
    Dim ptTextPosition(2) As Double
    ptTextPosition(0) = 0: ptTextPosition(1) = 6: ptTextPosition(2) = 0
    oDimRadialLarge.TextPosition = ptTextPosition
    
    Update
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimRadialLarge()
    ;; This example creates an arc and a jogged arc dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    
    ;; Define the arc
    (setq center (vlax-3d-point 0 0 0))
    ;; Create the arc in model space
    (setq arc (vla-AddArc modelSpace center 10 (/ PI 3) (/ (* PI 3) 4)))
    ;; Define the jogged arc dimension
    (setq ptChordPoint (vlax-3d-point 0 10 0)
          ptOverrideCenter (vlax-3d-point -3 -6 0)
          ptJogPoint (vlax-3d-point 0 5 0))
    ;; Create the jogged arc dimension in model space
    (setq oDimRadialLarge (vla-AddDimRadialLarge modelSpace center ptChordPoint ptOverrideCenter ptJogPoint (/ PI 4)))
    ;; Set the position of the text for the dimension
    (setq ptTextPosition (vlax-3d-point 0 6 0))
    (vla-put-TextPosition oDimRadialLarge ptTextPosition)
    
    (vla-ZoomExtents acadObj)
)
")
("AddDimRotated" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FE41C4DC-4717-41AC-9C07-6531CB9332E2"
                 "
AddDimRotated Method (ActiveX)
Creates a rotated linear dimension.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddDimRotated(XLine1Point, XLine2Point, DimLineLocation, RotationAngle)
object
    Type: Block, ModelSpace, PaperSpace
    The object this method applies to.
XLine1Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first end of the linear dimension to be measured. This is where the first extension line will be attached.
XLine2Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second end of the linear dimension to be measured. This is where the second extension line will be attached.
DimLineLocation
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point on the dimension line. This will define the placement of the dimension line and the dimension text.
RotationAngle
    Access: Input-only
    Type: Double
    The angle, in radians, of rotation displaying the linear dimension.
Return Value (RetVal)
Type: DimRotated
The newly created rotated linear dimension object.
Remarks
A linear dimension created at 45 degrees
Examples
VBA:
Sub Example_AddDimRotated()
    ' This example creates a rotated dimension in model space.
        
    Dim dimObj As AcadDimRotated
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim rotAngle As Double
    
    ' Define the dimension
    point1(0) = 0#: point1(1) = 5#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 5#: point2(2) = 0#
    location(0) = 0#: location(1) = 0#: location(2) = 0#
    rotAngle = 120
    rotAngle = rotAngle * 3.141592 / 180#       ' covert to Radians
    
    ' Create the rotated dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimRotated(point1, point2, location, rotAngle)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddDimRotated()
    ;; This example creates a rotated dimension in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 0 0 0)
          rotAngle (/ (* 120 3.141592) 180))
    
    ;; Create the rotated dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimRotated modelSpace point1 point2 location rotAngle))
    (vla-ZoomAll acadObj)
)
")
("AddEllipse" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2A02344B-FDE0-4ECF-99BA-2595CA8F1E0D"
              "
AddEllipse Method (ActiveX)
Creates an ellipse in the XY plane of the WCS given the center point, a point on the major axis, and the radius ratio.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddEllipse(Center, MajorAxis, RadiusRatio)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the ellipse.
MajorAxis
    Access: Input-only
    Type: Variant (double)
    A positive value defining the length of the major axis of the ellipse.
RadiusRatio
    Access: Input-only
    Type: Double
    A positive value defining the major to minor axis ratio of an ellipse. A radius ratio of 1.0 defines a circle.
    Radius ratio = 0.25
    Radius ratio = 0.75
Return Value (RetVal)
Type: Ellipse
The newly created Ellipse object.
Remarks
The ellipse may be closed, or open (elliptical arc), and is created on the XY plane of the current WCS.
This object represents a true ellipse, not a polyline approximation.
Examples
VBA:
Sub Example_AddEllipse()
    ' This example creates an ellipse in model space.
    
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddEllipse()
    ;; This example creates an ellipse in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    ;; Create the ellipse in mode space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
)
")
("AddEllipticalCone" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B43AD9D6-2D31-4212-B174-439038148963"
                     "
AddEllipticalCone Method (ActiveX)
Creates a 3D solid elliptical cone on the XY plane of the WCS given the Center, MajorRadius, MinorRadius, and Height.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddEllipticalCone(Center, MajorRadius, MinorRadius, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the bounding box.
MajorRadius
    Access: Input-only
    Type: Double
    The length of the major radius for the ellipse base. Must be a positive number.
MinorRadius
    Access: Input-only
    Type: Double
    The length of the minor radius for the ellipse base. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The height of the cone. Must be a positive number.
lid
A 3DSolid object as the newly created elliptical cone.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddEllipticalCone()
    ' This example creates an elliptical cone in model space.
    
    Dim coneObj As Acad3DSolid
    Dim center(0 To 2) As Double
    Dim majorRadius As Double
    Dim minorRadius As Double
    Dim height As Double
    
    ' Define the elliptical cone
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    majorRadius = 10#
    minorRadius = 5#
    height = 20#
    
    ' Create the elliptical cone in model space
    Set coneObj = ThisDrawing.ModelSpace.AddEllipticalCone(center, majorRadius, minorRadius, height)
    
    ' Change the viewing direction of the viewport to better see the cone
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddEllipticalCone()
    ;; This example creates an elliptical cone in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Define the elliptical cone
    (setq center (vlax-3d-point 0 0 0)
          majorRadius 10
	         minorRadius 5
	         height 20)
    
    ;; Create the elliptical cone in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq coneObj (vla-AddEllipticalCone modelSpace center majorRadius minorRadius height))
    ;; Change the viewing direction of the viewport to better see the cone
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddEllipticalCylinder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A1519C47-3C14-43BD-98FA-520E4142967B"
                         "
AddEllipticalCylinder Method (ActiveX)
Creates a 3D solid elliptical cylinder whose base is on the XY plane of the WCS, given the Center, MajorRadius, MinorRadius, and Height.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddEllipticalCylinder(Center, MajorRadius, MinorRadius, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the bounding box.
MajorRadius
    Access: Input-only
    Type: Double
    The length of the major radius for the ellipse base. Must be a positive number.
MinorRadius
    Access: Input-only
    Type: Double
    The length of the minor radius for the ellipse base. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The height of the cylinder. Must be a positive number.
lid
A 3DSolid object as the newly created elliptical cylinder.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddEllipticalCylinder()
    ' This example creates an elliptical cylinder in model space.
   
    Dim cylinderObj As Acad3DSolid
    Dim center(0 To 2) As Double
    Dim majorRadius As Double
    Dim minorRadius As Double
    Dim height As Double
    
    ' Define the elliptical cylinder
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    majorRadius = 5#
    minorRadius = 2.5
    height = 10#
    
    ' Create the elliptical cylinder in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddEllipticalCylinder(center, majorRadius, minorRadius, height)
    
    ' Change the viewing direction of the viewport to better see the cylinder
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddEllipticalCylinder()
    ;; This example creates an elliptical cylinder in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Define the elliptical cylinder
    (setq center (vlax-3d-point 0 0 0)
          majorRadius 5
          minorRadius 2.5
          height 10)
    
    ;; Create the elliptical cylinder in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq cylinderObj (vla-AddEllipticalCylinder modelSpace center majorRadius minorRadius height))
  
    ;; Change the viewing direction of the viewport to better see the cylinder
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddExtrudedSolid" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B9DEA4C5-EDAA-4CC6-93B0-394D5991A0E6"
                    "
AddExtrudedSolid Method (ActiveX)
Creates an extruded solid given the profile, height, and taper angle.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddExtrudedSolid(Profile, Height, TaperAngle)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Profile
    Access: Input-only
    Type: Region
    A profile can only be a Region object.
Height
    Access: Input-only
    Type: Double
    The height of the extrusion along the Z axis of the object's coordinate system. If you enter a positive number, AutoCAD extrudes the object along the positive Z axis. If you enter a negative number, AutoCAD extrudes the object along the negative Z axis.
TaperAngle
    Access: Input-only
    Type: Double
    The taper angle of the extrusion must be provided in radians. The range of the taper angle is from -90 to +90 degrees.
    Positive angles taper in from the base, negative angles taper out. The default angle, 0, extrudes a 2D object perpendicular to its plane.
lid
A 3DSolid object as the newly created extruded solid.
Remarks
You can extrude only 2D planar regions.
Tapered extrusions are possible only with loops that are continuous at the vertices. A large taper angle or long extrusion height can cause the object, or portions of the object, to intersect with itself before reaching the extrusion height. AutoCAD does not allow an extrusion when the resulting solid intersects with itself.
Examples
VBA:
Sub Example_AddExtrudedSolid()
    ' This example extrudes a solid from a region.
    ' The region is created from an arc and a line.
    
    Dim curves(0 To 1) As AcadEntity
    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    
    ' Define the extrusion
    Dim height As Double
    Dim taperAngle As Double
    height = 3
    taperAngle = 0
    
    ' Create the solid
    Dim solidObj As Acad3DSolid
    Set solidObj = ThisDrawing.ModelSpace.AddExtrudedSolid(regionObj(0), height, taperAngle)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddExtrudedSolid()
    ;; This example extrudes a solid from a region.
    ;; The region is created from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
        
    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    
    ;; Define the extrusion
    (setq height 3
          taperAngle 0)
    
    ;; Create the solid
    (setq solidObj (vla-AddExtrudedSolid modelSpace (vlax-safearray-get-element (vlax-variant-value regionObj) 0) height taperAngle))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddExtrudedSolidALongPath" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2EDFD984-A178-4F1D-8F97-351E141D3DA4"
                             "
AddExtrudedSolidAlongPath Method (ActiveX)
Creates an extruded solid given the profile and an extrusion path.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddExtrudedSolidAlongPath(Profile, Path)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Profile
    Access: Input-only
    Type: Region
    A profile can only be a Region object.
Path
    Access: Input-only
    Type: Arc, Circle, Ellipse, Polyline, Spline
    The path can only be a Polyline, Circle, Ellipse, Spline, or Arc object.
lid
The extruded 3DSolid object.
Remarks
You can extrude only 2D planar regions.
The path should not lie on the same plane as the profile, nor should it have areas of high curvature.
Examples
VBA:
Sub Example_AddExtrudedSolidAlongPath()
    ' This example extrudes a solid from a region
    ' along a path defined by a spline.
    ' The region is created from an arc and a line.
    
    Dim curves(0 To 1) As AcadEntity
    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    
    ' Define the extrusion path (spline object)
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    ' Define the Spline Object
    startTan(0) = 10: startTan(1) = 10: startTan(2) = 10
    endTan(0) = 10: endTan(1) = 10: endTan(2) = 10
    fitPoints(0) = 0: fitPoints(1) = 10: fitPoints(2) = 10
    fitPoints(0) = 10: fitPoints(1) = 10: fitPoints(2) = 10
    fitPoints(0) = 15: fitPoints(1) = 10: fitPoints(2) = 10
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ' Create the solid
    Dim solidObj As Acad3DSolid
    Set solidObj = ThisDrawing.ModelSpace.AddExtrudedSolidAlongPath(regionObj(0), splineObj)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddExtrudedSolidAlongPath()
    ;; This example extrudes a solid from a region
    ;; along a path defined by a spline.
    ;; The region is created from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
        
    ;; Create the region
    ;(setq regionObj (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq regionObj (vla-AddRegion modelSpace curves))
    
    ;; Define the extrusion path (spline object)
    (setq startTan (vlax-3d-point 10 10 10)
          endTan (vlax-3d-point 10 10 10))
    (setq fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 10 10
				                                 10 10 10
				                                 15 10 10
				                                )
    )
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    
    ;; Create the solid
    (setq solidObj (vla-AddExtrudedSolidAlongPath modelSpace (vlax-safearray-get-element (vlax-variant-value regionObj) 0) splineObj))
 
    (vla-ZoomAll acadObj)
)
")
("AddFitPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-850ABE0B-B361-4573-A6D2-4FBA5B2FD044"
               "
AddFitPoint Method (ActiveX)
Adds the fit point to the spline at a given index.
Supported platforms: Windows only
Signature
VBA:
object.AddFitPoint Index, FitPoint
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Integer
    Position in the fit point list to add the fit point. If the index is a negative number, then the point is added to the beginning of the spline. If the index exceeds the number of fit points in the spline, then the point is added to the end of the spline.
FitPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the fit point to be added.
Return Value (RetVal)
No return value.
Remarks
AutoCAD adds the point and refits the spline through the new set of points. To view the changes, use the Update or Regen method.
Examples
VBA:
Sub Example_AddFitPoint()
    ' This example creates a spline object in model space.
    ' It then adds a fit point to the spline.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create the spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    MsgBox \"The Spline has \" & splineObj.NumberOfFitPoints & \" fit points.\", , \"AddFitPoint Example\"
    
    ' Define the new fit point
    Dim newFitPoint(0 To 2) As Double
    newFitPoint(0) = 8: newFitPoint(1) = 5: newFitPoint(2) = 0
    
    ' Add the new fit point at the first index in the spline's array of points
    splineObj.AddFitPoint 1, newFitPoint
    ThisDrawing.Regen True
    MsgBox \"A fit point has been added at Index:1  WCS: 8, 5, 0\" & vbCrLf & \"The Spline has \" & splineObj.NumberOfFitPoints & \" fit points.\", , \"AddFitPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddFitPoint()
    ;; This example creates a spline object in model space.
    ;; It then adds a fit point to the spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 10)
          endTan (vlax-3d-point 0.5 0.5 10))
    (setq fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 10
                                     5 5 10
                                     10 0 10
                                    )
    )
    
    ;; Create the spline object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The Spline has \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" fit points.\"))
    
    ;; Define the new fit point
    (setq newFitPoint (vlax-3d-point 8 5 0))
    
    ;; Add the new fit point at the first index in the spline's array of points
    (vla-AddFitPoint splineObj 1 newFitPoint)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"A fit point has been added at Index:1  WCS: 8, 5, 0\"
		                 \"\nThe Spline has \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" fit points.\"
           )
    )
)
")
("AddHatch" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BAF2BEDD-489A-42D1-92B1-698DC9DAE675"
            "
AddHatch Method (ActiveX)
Creates a Hatch object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddHatch(PatternType, PatternName, Associativity [, HatchObjectType])
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
PatternType
    Access: Input-only
    Type: AcPatternType or AcGradientPatternType enum
    If the HatchObjectType parameter value is acHatchObject, then use the AcPatternType enum; if the HatchObjectType parameter value is AcGradientObject, then use the AcGradientPatternType enum.
        AcPatternType enum
        acHatchPatternTypePredefined: Selects the pattern name from those defined in the acad.pat file.
        acHatchPatternTypeUserDefined: Defines a pattern of lines using the current linetype.
        acHatchPatternTypeCustomDefined: Selects the pattern name from a PAT file other than the acad.pat file.
        AcGradientPatternType enum
        acPreDefinedGradient: Selects the fill name from one of the standard values.
        acUserDefinedGradient: Defines a pattern based on property values.
PatternName
    Access: Input-only
    Type: String
    If the HatchObjectType parameter value is acHatchObject, then PatternName should contain the hatch pattern name. If the HatchObjectType parameter value is acGradientObject, then PatternName should contain one of the gradient pattern names listed in GradientName.
Associativity
    Access: Input-only
    Type: Boolean
        True: The hatch will be associative.
        False: The hatch will not be associative.
HatchObjectType
    Access: Input-only
    Type: AcHatchObjectType enum
    The default value is the AcHatchObjectType enum value of AcHatchObject. If the AcHatchObjectType enum value is AcGradientObject, then PatternType should be of type AcGradientPatternType, and PatternName should contain the gradient pattern name.
Return Value (RetVal)
Type: Hatch
The newly created Hatch object.
Remarks
After the Hatch object is created, you must add the outer loop using the AppendOuterLoop method. The outer loop must be closed and must be created before any inner loops can be created. Inner loops are created one at a time, using the AppendInnerLoop method.
Note: Once the Hatch object has been created, you must append the outer loop to the Hatch object for it to become a valid AutoCAD object. If you attempt any operation other than calling the AppendOuterLoop method, AutoCAD will enter an unpredictable state.
Examples
VBA:
Sub Example_AddHatch()
    ' This example creates an associative gradient hatch in model space.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"CYLINDER\"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call col1.SetRGB(255, 0, 0)
    Call col2.SetRGB(0, 255, 0)
    hatchObj.GradientColor1 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop outerLoop
    hatchObj.Evaluate
    ThisDrawing.Regen True
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddHatch()
    ;; This example creates an associative gradient hatch in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName \"CYLINDER\")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0))
  
    (setq radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (vlax-release-object col1)
    (vlax-release-object col2)
)
")
("AddItems" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AA0F3857-E4AD-44A7-823E-9D204E9DB6C2"
            "
AddItems Method (ActiveX)
Adds one or more objects to the specified selection set.
Supported platforms: Windows only
Signature
VBA:
object.AddItems Items
object
    Type: SelectionSet
    The object this method applies to.
Items
    Access: Input-only
    Type: Variant
    An array of objects to add to the selection set.
Return Value (RetVal)
No return value.
Remarks
Objects currently in the specified selection set remain in the selection set. To replace the objects in the selection set, clear the selection set using the Clear method, then add the objects.
To remove individual objects from a selection set, use the RemoveItems method.
Examples
VBA:
Sub Example_AddItems()
    ' This example creates a selection set and several objects.
    ' It then adds the objects to the selection set.
    
    ' Create the new selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SELECTIONSET\")
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the selection set.
    ReDim ssobjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set ssobjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the selection set
    ssetObj.AddItems ssobjs
    
    ThisDrawing.Regen acActiveViewport
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddItems()
    ;; This example creates a selection set and several objects.
    ;; It then adds the objects to the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))  
  
    ;; Create the new selection set
    (setq ssets (vla-get-SelectionSets doc))
    (setq ssetObj (vla-Add ssets \"TEST_SELECTIONSET\"))
    
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the selection set.
    (setq ssobjs (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count modelSpace) 1))))
    (setq cnt 0)
    (vlax-for each-item modelSpace
        (vlax-safearray-put-element ssobjs cnt each-item)
        (setq cnt (1+ cnt))
    )
    
    ;; Add the array of objects to the selection set
    (vla-AddItems ssetObj ssobjs)
    
    (vla-Regen doc acActiveViewport)
)
")
("AddLeader" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A8D8174C-FA79-4010-8A4D-636385BEA34B"
             "
AddLeader Method (ActiveX)
Creates a leader line based on the provided coordinates or adds a new leader cluster to the MLeader object.
Supported platforms: Windows only
Signature - Block, ModelSpace, PaperSpace
VBA:
RetVal = object.AddLeader(PointsArray, Annotation, Type)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
PointsArray
    Access: Input-only
    Type: Variant (array of doubles)
    The array of 3D WCS coordinates specifying the leader. You must provide at least two points to define the leader. The third point is optional.
Annotation
    Access: Input-only
    Type: BlockReference, MText, Tolerance
    The object that should be attached to the leader. The value can also be NULL to not attach an object.
Type
    Access: Input-only
    Type: AcLeaderType enum
        acLineNoArrow
        acLineWithArrow
        acSplineNoArrow
        acSplineWithArrow
Signature - MLeader
VBA:
RetVal = object.AddLeader
object
    Type: MLeader
    The object this method applies to.
Return Value (RetVal) - Block, ModelSpace, PaperSpace
Type: Leader
The newly created Leader object.
Return Value (RetVal) - MLeader
Type: Long
The index of the added leader cluster
Remarks
Block, ModelSpace, PaperSpace: The leader is a line that connects some annotation to a feature in a drawing. Leaders and their annotation are associative, which means if you modify the annotation, the leader updates accordingly. The annotation can be a Tolerance, MText, or BlockReference object.
You can also create leaders that are not associated to a particular object. To do this, simply input a NULL object as the annotation.
Examples
VBA:
Sub Example_AddLeader()
    ' This example creates a leader in model space.
    ' The leader is not attached to any annotation object
    ' in this example.
   
    Dim leaderObj As AcadLeader
    Dim points(0 To 8) As Double
    Dim leaderType As Integer
    Dim annotationObject As AcadObject
    
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    points(6) = 4: points(7) = 5: points(8) = 0
    leaderType = acLineWithArrow
    Set annotationObject = Nothing
        
    ' Create the leader object in model space
    Set leaderObj = ThisDrawing.ModelSpace.AddLeader(points, annotationObject, leaderType)
    ZoomAll
    
End Sub
Sub Example_MLeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddLeader()
    ;; This example creates a leader in model space.
    ;; The leader is not attached to any annotation object
    ;; in this example.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 0 0
                                  4 4 0
                                  4 5 0
                                 )
    )
    (setq leaderType acLineWithArrow)
  
    ;; Create a temporary annotaion object
    (setq point (vlax-3d-point 4 5 0))
    (setq annotationObject (vla-AddMText modelSpace point 1 \"\"))  
    ;; Create the leader object in model space
    (setq leaderObj (vla-AddLeader modelSpace points annotationObject leaderType))
    ;; Remove the temporary annotaion object and adjust the last coordinate of the leader
    (vla-Erase annotationObject)
    (vla-put-Coordinate leaderObj 2 (vlax-3D-point 4 5 0))
    (vla-ZoomAll acadObj)
)
(defun c:Example_MLeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
                                 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("AddLeaderLine" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A4B9704B-A70C-41D5-9C0F-BB732FDF544C"
                 "
AddLeaderLine Method (ActiveX)
Adds a leader line to the leader cluster with specified index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddLeaderLine(leaderIndex, pointArray)
object
    Type: MLeader
    The object this method applies to.
leaderIndex
    Access: Input-only
    Type: Long
    The index of the leader cluster where the new leader line is to be added. Index must be a positive integer.
pointArray
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D OCS coordinates at which to create the new leader line.
Return Value (RetVal)
Type: Long
The index of the added leader line.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MLeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MLeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				                             )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("AddLeaderLineEx" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F7D86DD0-D325-4632-8E71-8219D5A0AF1E"
                   "
AddLeaderLineEx Method (ActiveX)
Adds a leader line to the leader cluster.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddLeaderLineEx(pointArray)
object
    Type: MLeader
    The object this method applies to.
pointArray
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The position of the first (head) vertex of the new leader line.
Return Value (RetVal)
Type: Long
The index of the added leader line.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AddLightWeightPolyline" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2003E0A1-5FB5-48A7-8CDA-2804F7C61C1C"
                          "
AddLightWeightPolyline Method (ActiveX)
Creates a lightweight polyline from a list of vertices.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddLightWeightPolyline(VerticesList)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
VerticesList
    Access: Input-only
    Type: Variant (array of doubles)
    The array of 2D OCS coordinates specifying the vertices of the polyline. At least two points (four elements) are required for constructing a lightweight polyline. The array size must be a multiple of 2.
Return Value (RetVal)
Type: LightweightPolyline
The newly created LightweightPolyline object.
Remarks
The vertices specify the endpoints for the line segments that make up the polyline. To add an arc segment, first create the polyline with all line segments, and then add a bulge to the individual segments you want to be arcs. To add a bulge value to a segment, use the SetBulge method.
The elevation for the polyline will be set at the current elevation for the layout. Use the ElevationModelspace or ElevationPaperspace property to determine the elevation for the polyline.
Coordinates can be converted to and from the OCS using the TranslateCoordinates method.
Examples
VBA:
Sub Example_AddLightWeightPolyline()
    ' This example creates a lightweight polyline in model space.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 9) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddLightWeightPolyline()
    ;; This example creates a lightweight polyline in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 9)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                 )
    ) 
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
)
")
("AddLine" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-26C95029-14BB-40B9-9987-49EFC980CB9D"
           "
AddLine Method (ActiveX)
Creates a line passing through two points.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddLine(StartPoint, EndPoint)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
StartPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the line start point.
EndPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the line endpoint.
Return Value (RetVal)
Type: Line
The newly created Line object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddLine()
    ' This example adds a line in model space
    
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    
    ' Define the start and end points for the line
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
    
    ' Create the line in model space
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddLine()
    ;; This example adds a line in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the start and end points for the line
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    
    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
)
")
("AddMInsertBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AAEFDED2-34A3-4466-A7AA-71CAD8DCB35C"
                   "
AddMInsertBlock Method (ActiveX)
Inserts an array of blocks.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddMInsertBlock(InsertionPoint, Name, XScale, YScale, ZScale, Rotation, NumRows, NumColumns, RowSpacing, ColumnSpacing [, Password])
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates at which to insert the array of blocks.
Name
    Access: Input-only
    Type: String
    The name of the MInsertBlock.
    Note: You cannot precede the name of an MInsertBlock with an asterisk to separate the block's objects during insertion, as you can with a standard Block.
XScale
    Access: Input-only
    Type: Double
    The X scale factor.
YScale
    Access: Input-only
    Type: Double
    The Y scale factor.
ZScale
    Access: Input-only
    Type: Double
    The Z scale factor.
Rotation
    Access: Input-only
    Type: Double
    The rotation angle in radians.
NumRows
    Access: Input-only
    Type: Long
    A positive integer representing the number of rows for the array.
NumColumns
    Access: Input-only
    Type: Long
    A positive integer representing the number of columns for the array.
RowSpacing
    Access: Input-only
    Type: Double
    The distance between the array rows.
ColumnSpacing
    Access: Input-only
    Type: Double
    The distance between the array columns.
Password
    Access: Input-only
    Type: Variant
    The password that is required to open and insert the drawing.
Return Value (RetVal)
Type: MInsertBlock
The newly created array of blocks.
Remarks
The following illustration shows an array of inserted blocks.
Original block
Array of inserted blocks
Examples
VBA:
Sub Example_AddMInsertBlock()
    ' This example creates a new Block in the current drawing, adds a
    ' Circle object to the new block, and uses the newly created block
    ' to create a rectangular array of block references using AddMInsertBlock
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newMBlock As AcadMInsertBlock
    Dim newBlock As AcadBlock
    
    ' Define the Circle object that will be inserted into the block
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle object
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block object
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Create a rectangular array of Circles using the new block containing the Circle
    ' and the AddMInsertBlock method
    Set newMBlock = ThisDrawing.ModelSpace.AddMInsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 1, 2, 2, 1, 1)
        
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"A rectangular array has been created from the original block.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddMInsertBlock()
    ;; This example creates a new Block in the current drawing, adds a
    ;; Circle object to the new block, and uses the newly created block
    ;; to create a rectangular array of block references using AddMInsertBlock
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Circle object that will be inserted into the block
    (setq centerPoint (vlax-3d-point 0 0 0)
          InsertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle object
    (setq blocks (vla-get-Blocks doc))
    (setq newBlock (vla-Add blocks centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block object
    (setq circleObj (vla-AddCircle newBlock centerPoint radius))
    
    ;; Create a rectangular array of Circles using the new block containing the Circle
    ;; and the AddMInsertBlock method
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq newMBlock (vla-AddMInsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 1 2 2 1 1))
        
    (vla-ZoomAll acadObj)
    
    (alert \"A rectangular array has been created from the original block.\")
)
")
("AddMLeader" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-991E00FE-2128-4162-9C4A-80934C4897B2"
              "
AddMLeader Method (ActiveX)
Creates an mleader line, given coordinates.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddMLeader(pointsArray, leaderLineIndex)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
pointsArray
    Access: Input-only
    Type: Variant (three-element array of Doubles)
    The array of 3D WCS coordinates specifying the leader. You must provide at least two point to define the leader. The third point is optional.
leaderLineIndex
    Access: Input-only
    Type: Long
    Input index of the mleader cluster.
Return Value (RetVal)
Type: MLeader
The newly created MLeader object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddMLeader()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddMLeader()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
  
    ;; Add the mleader object to model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq mLeader (vla-AddMLeader modelSpace points i))
)
")
("AddMLine" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-04DA7279-286F-4D37-832F-18CB177608AC"
            "
AddMLine Method (ActiveX)
Creates multiple lines passing through an array of points.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddMLine(VertexList)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
VertexList
    Access: Input-only
    Type: Variant (array of doubles)
    An array of the 3D WCS coordinates specifying the vertices for the multiline.
Return Value (RetVal)
Type: MLine
The newly created MLine object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddMLine()
   ' This example adds an Mline in model space
    Dim mLineObj As AcadMLine
    Dim vertexList(0 To 17) As Double
   
    ' Define data for new object
    vertexList(0) = 4: vertexList(1) = 7: vertexList(2) = 0
    vertexList(3) = 5: vertexList(4) = 7: vertexList(5) = 0
    vertexList(6) = 6: vertexList(7) = 7: vertexList(8) = 0
    vertexList(9) = 4: vertexList(10) = 6: vertexList(11) = 0
    vertexList(12) = 5: vertexList(13) = 6: vertexList(14) = 0
    vertexList(15) = 6: vertexList(16) = 6: vertexList(17) = 6
    ' Create the line in model space
    Set mLineObj = ThisDrawing.ModelSpace.AddMLine(vertexList)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"A new MLine has been added to the drawing.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddMLine()
    ;; This example adds an Mline in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define data for new object
    (setq vertexList (vlax-make-safearray vlax-vbDouble '(0 . 17)))
    (vlax-safearray-fill vertexList '(4 7 0
                                      5 7 0
                                      6 7 0
                                      4 6 0
                                      5 6 0
                                      6 6 0
                                     )
    )
    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq mLineObj (vla-AddMLine modelSpace vertexList))
    (vla-ZoomAll acadObj)
    
    (alert \"A new MLine has been added to the drawing.\")
)
")
("AddMText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0A441CDB-21D3-4AA3-A616-7FF4DA8925D2"
            "
AddMText Method (ActiveX)
Creates an MText entity in a rectangle defined by the insertion point and width of the bounding box.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddMText(InsertionPoint, Width, Text)
object
    Type: Block, ModelSpace, PaperSpace
    The object this method applies to.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The insertion point of the MText bounding box.
Width
    Access: Input-only
    Type: Double
    The width of the MText bounding box.
Text
    Access: Input-only
    Type: String
    The actual text string for the MText object.
Return Value (RetVal)
Type: MText
The newly created MText object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddMtext()
    ' This example creates an MText object in model space.
    
    Dim MTextObj As AcadMText
    Dim corner(0 To 2) As Double
    Dim width As Double
    Dim text As String
    corner(0) = 0#: corner(1) = 10#: corner(2) = 0#
    width = 10
    text = \"This is the text String for the mtext Object\"
    ' Creates the mtext Object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddMtext()
    ;; This example creates an MText object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the multiline text object
    (setq corner (vlax-3d-point 0 10 0)
          width 10
          text \"This is the text String for the mtext Object\")
    ;; Creates the mtext Object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
)
")
("AddObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B0163235-7D1D-4F48-A98F-598A286CB29F"
             "
AddObject Method (ActiveX)
Adds an object to a named dictionary.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddObject(Keyword, ObjectName)
object
    Type: Dictionary
    The object this method applies to.
Keyword
    Access: Input-only
    Type: String
    The keyword to be listed in the dictionary for this object.
ObjectName
    Access: Input-only
    Type: String
    The rxClassName of the object to be created in the dictionary.
Return Value (RetVal)
Type: Object
The newly created object.
Remarks
This method adds a new entry specified by ObjectName to the dictionary. If the entry already exists, it is replaced by the new object. The name of the object is specified by Keyword.
For example, an object with the Keyword \"ThirdKeyword\" and an object type \"Object3\" can be added to MyDictionary to create the following:
MyDictionary
Keyword Object
FirstKeyword Object1
SecondKeyword Object2
ThirdKeyword Object3
Note: The ObjectARX application that defines the object must be loaded for this method to function correctly. See the LoadARX method for information on loading ObjectARX applications.
Examples
VBA:
Sub Example_AddObject()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add(\"TEST_DICTIONARY\")
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX application.
    ThisDrawing.Application.LoadArx \"MyARXApp.dll\"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = \"OBJ1\"
    className = \"CAsdkDictObject\"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddObject()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries \"TEST_DICTIONARY\"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj \"MyARXApp.dll\")
    
    ;; Create the custom object in the dictionary
    (setq keyName \"OBJ1\")
    (setq className \"CAsdkDictObject\")
    (setq customObj (vla-AddObject dictObj keyName className))
)
")
("AddPViewport" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-175761C6-B99A-431E-B76E-770DF0D7C39A"
                "
AddPViewport Method (ActiveX)
Adds a paper space viewport, given the center, height, and width.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddPViewport(Center, Width, Height)
object
    Type: PaperSpace
    The object this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The center coordinates of the viewport.
Width
    Access: Input-only
    Type: Double
    The width of the viewport. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The height of the viewport. Must be a positive number.
Return Value (RetVal)
Type: PViewport
The newly created PViewport object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddPViewport()
    ' This example creates a new paper space viewport
    
    Dim pviewportObj As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the paper space viewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40
    height = 40
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    
    ' Create the paper space viewport
    Set pviewportObj = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    
    ThisDrawing.Regen acAllViewports
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddPViewport()
    ;; This example creates a new paper space viewport
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
          height 40)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    
    ;; Create the paper space viewport
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj (vla-AddPViewport paperSpace center width height))
    ;; Turn the viewport on, by default it is off
    (vla-Display pviewportObj :vlax-true)
    
    (vla-Regen doc acAllViewports)
)
")
("AddPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-265E706F-78E4-48C6-B1AB-66FD794BF230"
            "
AddPoint Method (ActiveX)
Creates a Point object at a given location.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddPoint(Point)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The coordinates of the point to be created.
Return Value (RetVal)
Type: Point
The newly created Point object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddPoint()
    ' This example creates a point in model space.
    Dim pointObj As AcadPoint
    Dim location(0 To 2) As Double
    
    ' Define the location of the point
    location(0) = 5#: location(1) = 5#: location(2) = 0#
    
    ' Create the point
    Set pointObj = ThisDrawing.ModelSpace.AddPoint(location)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddPoint()
    ;; This example creates a point in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the location of the point
    (setq location (vlax-3d-point 5 5 0))
    
    ;; Create the point
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq pointObj (vla-AddPoint modelSpace location))
    (vla-ZoomAll acadObj)
)
")
("AddPolyfaceMesh" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-038F2B2B-5FD8-43DA-A2EA-B05C13D9A3B2"
                   "
AddPolyfaceMesh Method (ActiveX)
Creates a polyface mesh from a list of vertices.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddPolyfaceMesh(VerticesList, FaceList)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
VerticesList
    Access: Input-only
    Type: Variant (array of doubles)
    An array of 3D WCS coordinates used to create the polyface mesh vertices. At least four points (twelve elements) are required for constructing a polyface mesh object. The array size must be a multiple of three.
FaceList
    Access: Input-only
    Type: Variant (array of integers)
    An array of integers representing the vertex numbers for each face. Faces are defined in groups of four vertex index values, so the size of this array must be a multiple of four.
Return Value (RetVal)
Type: PolyfaceMesh
The newly created PolyfaceMesh object.
Remarks
Creating a polyface mesh is similar to creating a rectangular mesh. To create a polyface mesh, you specify the coordinates for its vertices and the vertex numbers for all the vertices of that face.
In the following illustration, face 1 is defined by vertices 1, 5, 6, and 2. Face 2 is defined by vertices 1, 4, 3, and 2. Face 3 is defined by vertices 1, 4, 7, and 5, and face 4 is defined by vertices 3, 4, 7, and 8.
To make an edge invisible, enter the vertex number for the edge as a negative value. For instance, to make the edge between vertices 5 and 7 invisible in the following illustration, you would set the following:
Face 3, vertex 3: -7
Examples
VBA:
Sub Example_AddPolyfaceMesh()
    
    Dim vertexList(0 To 17) As Double
    'Data
    vertexList(0) = 4: vertexList(1) = 7: vertexList(2) = 0
    vertexList(3) = 5: vertexList(4) = 7: vertexList(5) = 0
    vertexList(6) = 6: vertexList(7) = 7: vertexList(8) = 0
    vertexList(9) = 4: vertexList(10) = 6: vertexList(11) = 0
    vertexList(12) = 5: vertexList(13) = 6: vertexList(14) = 0
    vertexList(15) = 6: vertexList(16) = 6: vertexList(17) = 1
    
    Dim FaceList(0 To 7) As Integer
    FaceList(0) = 1
    FaceList(1) = 2
    FaceList(2) = 5
    FaceList(3) = 4
    FaceList(4) = 2
    FaceList(5) = 3
    FaceList(6) = 6
    FaceList(7) = 5
    Dim obj As AcadPolyfaceMesh
    Set obj = ModelSpace.AddPolyfaceMesh(vertexList, FaceList)
    obj.Update
    ' Change the viewing direction of the viewport to
    ' better see the polyface mesh
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddPolyfaceMesh()
    ;; This example creates a polyface mesh in model space   
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the vertices for the polyface mesh
    (setq vertexList (vlax-make-safearray vlax-vbDouble '(0 . 17)))
    (vlax-safearray-fill vertexList '(4 7 0
                                      5 7 0
                                      6 7 0
                                      4 6 0
                                      5 6 0
                                      6 6 1
                                     )
    )  
    ;; Define the face order for the polyface mesh
    (setq FaceList (vlax-make-safearray vlax-vbInteger '(0 . 7)))
    (vlax-safearray-fill FaceList '(1
                                    2
                                    5
                                    4
                                    2
                                    3
                                    6
                                    5
                                   )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq obj (vla-AddPolyfaceMesh modelSpace vertexList FaceList))
    ;; Change the viewing direction of the viewport to
    ;; better see the polyface mesh
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddPolyline" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ED02917C-D1D6-46B8-95C6-736163C31362"
               "
AddPolyline Method (ActiveX)
Creates a polyline from a list of vertices.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddPolyline(VerticesList)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
VerticesList
    Access: Input-only
    Type: Variant (array of doubles)
    An array of OCS coordinates used to create the polyline vertices. Each vertex is represented with three elements, with the first two being the X and Y coordinates in OCS; the third element is ignored. At least two points (six elements) are required for constructing a polyline object. The array size must be a multiple of three.
Return Value (RetVal)
Type: Polyline
The newly created Polyline object.
Remarks
To create a polyline containing arcs, first create the straight polyline, and then set the bulge at specific vertices using the SetBulge method.
This method exists for backward compatibility only. Use the AddLightweightPolyline method to create polylines with an optimized format that saves memory and disk space.
Coordinates can be converted to and from the OCS using the TranslateCoordinates method.
Examples
VBA:
Sub Example_AddPolyline()
    ' This example creates a polyline in model space.
    
    Dim plineObj As AcadPolyline
    Dim points(0 To 14) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddPolyline()
    ;; This example creates a polyline in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
)
")
("AddRaster" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-28D17E41-371A-4D95-AED0-8E87ABC8CAEC"
             "
AddRaster Method (ActiveX)
Creates a new raster image based on an existing image file.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddRaster(ImageFileName, InsertionPoint, ScaleFactor, RotationAngle)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
ImageFileName
    Access: Input-only
    Type: String
    The full path and file name of the image.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates in the drawing where the raster image will be created.
ScaleFactor
    Access: Input-only
    Type: Double
    The raster image scale factor. The default image scale factor is 1. The scale factor must be a positive number. You can set the scale of the image to the scale of the geometry created in the AutoCAD drawing.
RotationAngle
    Access: Input-only
    Type: Double
    The rotation angle in radians for the raster image.
Return Value (RetVal)
Type: RasterImage
The newly created RasterImage object.
Remarks
Images placed through the AddRaster method are not actually part of the drawing file. The raster image is linked to the drawing file through a path name or document ID. Linked image paths can be changed or removed at any time by using the SupportPath property. By attaching images using linked image paths, you place images in your drawing without increasing the file size of the drawing.
You can add the same raster image file to your drawing file multiple times. Each instance has its own clip boundary and its own settings for brightness, contrast, fade, and transparency. A single image can be cut into multiple pieces that can be rearranged independently in your drawing.
Examples
VBA:
Sub Example_AddRaster()
    ' This example adds a raster image in model space.
    
    ' This example uses a file named \"2d Projected Polylines.jpg.\"
    ' You should change this example to use
    ' a raster file on your computer.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    imageName = \"C:\AutoCAD\2d Projected Polylines.jpg\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotationAngle = 0
    
    On Error Resume Next
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    If Err.Description = \"File error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddRaster()
    ;; This example adds a raster image in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; This example uses a file named \"2d Projected Polylines.jpg.\" 
    ;; You should change this example to use 
    ;; a raster file on your computer.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotationAngle 0)
    
    ;; Creates a raster image in model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotationAngle))
    
            (vla-ZoomExtents acadObj)
        )
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("AddRay" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0B34B2D9-AC2E-4DAE-9599-DB2BD495760F"
          "
AddRay Method (ActiveX)
Creates a ray passing through two unique points.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddRay(Point1, Point2)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the finite start point of the ray.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point through which the ray will pass. The ray extends from Point1, through Point2 to infinity.
Return Value (RetVal)
Type: Ray
The newly created Ray object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddRay()
    ' This example creates a ray in model space.
    
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    
    ' Define the ray
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 4#: SecondPoint(1) = 4#: SecondPoint(2) = 0#
    
    ' Creates a Ray object in model space
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddRay()
    ;; This example creates a ray in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the ray
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 4 4 0))
    
    ;; Creates a Ray object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    (vla-ZoomAll acadObj)
)
")
("AddRegion" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-74C8765E-EB4A-4773-ADD4-6C0F318FE6BE"
             "
AddRegion Method (ActiveX)
Creates a region from a set of entities. The given entities must form a closed coplanar region.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddRegion(ObjectList)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
ObjectList
    Access: Input-only
    Type: Variant (array of Arc, Circle, Ellipse, Line, LWPolyline, Spline objects)
    The array of objects forming the closed coplanar face to be made into a region.
Return Value (RetVal)
Type: Variant (array of Region objects)
This method outputs an array of the newly created Region objects.
Remarks
This method will create a region out of every closed loop formed by the input array of curves. AutoCAD converts closed 2D and planar 3D polylines to separate regions, and then converts polylines, lines, and curves that form closed planar loops. If more than two curves share an endpoint, the resultant region might be arbitrary.
You can explode a region into the individual loops by using the Explode method. The Boolean method allows you to create composite 3D solids or regions from the intersection, union, or subtraction of a solid or region from another solid or region.
The total number of Region objects created is Ubound(objRegions) - Lbound(objRegions) + 1.
Examples
VBA:
Sub Example_AddRegion()
    ' This example creates a region from an arc and a line.
    
    Dim curves(0 To 1) As AcadEntity
    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddRegion()
    ;; This example creates a region from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    
    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
  
    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    (vla-ZoomAll acadObj)
)
")
("AddRevolvedSolid" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C23158D9-F68B-44C6-B323-8196D8D5224D"
                    "
AddRevolvedSolid Method (ActiveX)
Creates a revolved solid, given the region around an axis.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddRevolvedSolid(Profile, AxisPoint, AxisDir, Angle)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Profile
    Access: Input-only
    Type: Region
    A profile can only a Region object.
AxisPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the start point of the axis of revolution.
AxisDir
    Access: Input-only
    Type: Variant (three-element array of doubles)
    A 3D vector specifying the direction of the axis of revolution.
Angle
    Access: Input-only
    Type: Double
    The angle of revolution in radians. Enter 6.28 for a full circle revolution.
lid
A 3DSolid object as the newly created revolved solid.
Remarks
The region to revolve must be closed. You cannot revolve objects contained within a block. You can revolve only one object at a time.
The right-hand rule determines the positive direction of rotation.
Examples
VBA:
Sub Example_AddRevolvedSolid()
    ' This example creates a solid from a region
    ' rotated around an axis.
    ' The region is created from an arc and a line.
    Dim curves(0 To 1) As AcadEntity
    ' Define the arc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set curves(0) = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    
    ' Define the line
    Set curves(1) = ThisDrawing.ModelSpace.AddLine(curves(0).startPoint, curves(0).endPoint)
        
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    ZoomAll
    MsgBox \"Revolve the region to create the solid.\", , \"AddRevolvedSolid Example\"
    
    ' Define the rotation axis
    Dim axisPt(0 To 2) As Double
    Dim axisDir(0 To 2) As Double
    Dim angle As Double
    axisPt(0) = 7: axisPt(1) = 2.5: axisPt(2) = 0
    axisDir(0) = 11: axisDir(1) = 1: axisDir(2) = 3
    angle = 6.28
        
    ' Create the solid
    Dim solidObj As Acad3DSolid
    Set solidObj = ThisDrawing.ModelSpace.AddRevolvedSolid(regionObj(0), axisPt, axisDir, angle)
    ZoomAll
    
     ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    MsgBox \"Solid created.\", , \"AddRevolvedSolid Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddRevolvedSolid()
    ;; This example creates a solid from a region
    ;; rotated around an axis.
    ;; The region is created from an arc and a line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    
    ;; Define the line
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
        
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arc)
    (vlax-safearray-put-element curves 1 line)
    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    (vla-ZoomAll acadObj)
    (alert \"Revolve the region to create the solid.\")
    
    ;; Define the rotation axis
    (setq rotAxisPt (vlax-3d-point 7 2.5 0)
          rotAxisDir (vlax-3d-point 11 1 3)
          rotAngle 6.28)
        
    ;; Create the solid
    (setq solidObj (vla-AddRevolvedSolid modelSpace (vlax-safearray-get-element (vlax-variant-value regionObj) 0) rotAxisPt rotAxisDir rotAngle))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    (alert \"Solid created.\")
)
")
("AddSection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7349D699-A696-48DF-83D1-315FF944649E"
              "
AddSection Method (ActiveX)
Creates a section plane.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddSection(FromPoint, ToPoint, planeVector)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
FromPoint
    Access: Input-only
    Type: Variant
    The 3D WCS coordinates specifying the finite start point of the section.
ToPoint
    Access: Input-only
    Type: Variant
    The 3D WCS coordinates specifying a point through which the section will pass. The section extends from FromPoint, through ToPoint to infinity.
planeVector
    Access: Input-only
    Type: Variant
    A 3D directional vector specifying the direction of the section plane.
Return Value (RetVal)
Type: Section
The newly created Section object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AddShape" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8C8184AD-1BEB-421D-9CD3-EFF3ACAB4396"
            "
AddShape Method (ActiveX)
Creates a Shape object based on a template identified by name, at the given insertion point, scale factor, and rotation.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddShape(Name, InsertionPoint, ScaleFactor, Rotation)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the shape to insert.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates at which to insert the shape.
ScaleFactor
    Access: Input-only
    Type: Double
    The scale factor to be applied to the shape. Use 1.0 to specify no scale. Must be a positive number.
Rotation
    Access: Input-only
    Type: Double
    The angle of rotation in radians to be applied to the shape.
Return Value (RetVal)
Type: Shape
The newly created Shape object.
Remarks
Before adding a Shape object, you must load the file containing the desired shape using the LoadShapeFile method.
Examples
VBA:
Sub Example_AddShape()
    ' This example creates a BAT shape from the ltypeshp.shx file.
    
    ' Load the shape file containing the shape you wish to create.
    ' Note: Replace the ltypeshp.shx file name
    ' with a valid shape file for your system.
    On Error GoTo ERRORHANDLER
    ThisDrawing.LoadShapeFile (\"C:/Program Files/AutoCAD/Support/ltypeshp.shx\")
    
    Dim shapeObj As AcadShape
    Dim shapeName As String
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotation As Double
    
    ' \"diode\" is defined in es.shx file
    shapeName = \"BAT\"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotation = 0#       ' Radians
    
    ' Create the diode shape object in model space
    Set shapeObj = ThisDrawing.ModelSpace.AddShape(shapeName, insertionPoint, scalefactor, rotation)
    Exit Sub
    
ERRORHANDLER:
    MsgBox \"Cannot find the shape file.\", , \"AddShape Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddShape()
    ;; This example creates a BAT shape from the ltypeshp.shx file.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Load the shape file containing the shape you wish to create.
    ;; Note: Replace the ltypeshp.shx file name
    ;; with a valid shape file for your system.
    (setq shapeFile \".\\ltypeshp.shx\")
    (if (/= (findfile shapeFile) nil)
        (progn
	           (vla-LoadShapeFile doc (findfile shapeFile))
            ;; \"diode\" is defined in es.shx file
            (setq insertionPoint (vlax-3d-point 2 2 0)
                  shapeName \"BAT\"
                  scalefactor 1
                  rotation 0)      ;; Radians
    
            ;; Create the diode shape object in model space
	           (setq modelSpace (vla-get-ModelSpace doc))
	           (setq shapeObj (vla-AddShape modelSpace shapeName insertionPoint scalefactor rotation))
        )
        (alert \"Cannot find the shape file.\")
    )
)
")
("AddSolid" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-89646E6C-DCD5-441B-AEF0-E4721089E607"
            "
AddSolid Method (ActiveX)
Creates a 2D solid polygon.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddSolid(Point1, Point2, Point3, Point4)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point.
Point3
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the third point.
Point4
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the fourth point.
Return Value (RetVal)
Type: Solid
The newly created polygon.
Remarks
The first two points define one edge of the polygon. The third point is defined diagonally opposite from the second. If the fourth point is set equal to the third point, then a filled triangle is created.
Solids are filled only when the AutoCAD FILLMODE system variable is set to On. To set or query a system variable, use the SetVariable and GetVariable methods, respectively.
Examples
VBA:
Sub Example_AddSolid()
    ' This example creates a solid in model space.
    
    Dim solidObj As AcadSolid
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim point3(0 To 2) As Double
    Dim point4(0 To 2) As Double
    
    ' Define the solid
    point1(0) = 0#: point1(1) = 1#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 1#: point2(2) = 0#
    point3(0) = 4#: point3(1) = 6#: point3(2) = 0#
    point4(0) = 8#: point4(1) = 8#: point4(2) = 0#
    ' Create the solid object in model space
    Set solidObj = ThisDrawing.ModelSpace.AddSolid(point1, point2, point3, point4)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddSolid()
    ;; This example creates a solid in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the solid
    (setq point1 (vlax-3d-point 0 1 0)
          point2 (vlax-3d-point 5 1 0)
          point3 (vlax-3d-point 4 6 0)
          point4 (vlax-3d-point 8 8 0))
    ;; Create the solid object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq solidObj (vla-AddSolid modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
)
")
("AddSphere" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A80673FC-C26A-4CC8-9893-219154FFE59F"
             "
AddSphere Method (ActiveX)
Creates a sphere given the center and radius.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddSphere(Center, Radius)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the sphere center point.
Radius
    Access: Input-only
    Type: Double
    The radius of the sphere. Must be a positive number.
lid
A 3DSolid object as the newly created sphere.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddSphere()
    ' This example creates a sphere in model space.
    
    Dim sphereObj As Acad3DSolid
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    centerPoint(0) = 5#: centerPoint(1) = 5#: centerPoint(2) = 0#
    radius = 5#
    Set sphereObj = ThisDrawing.ModelSpace.AddSphere(centerPoint, radius)
        
     ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddSphere()
    ;; This example creates a sphere in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the solid sphere
    (setq centerPoint (vlax-3d-point 5 5 0)
          radius 5)
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq sphereObj (vla-AddSphere modelSpace centerPoint radius))
        
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddSpline" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EC965FD6-4807-4BE8-8CD6-D1213BFB8D64"
             "
AddSpline Method (ActiveX)
Creates a quadratic or cubic NURBS (nonuniform rational B-spline) curve.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddSpline(PointsArray, StartTangent, EndTangent)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
PointsArray
    Access: Input-only
    Type: Variant (three-element array of doubles)
    An array of 3D WCS coordinates defining the spline curve. At least two points (six elements) are required for constructing a Spline object. The array size must be in multiples of three.
StartTangent
    Access: Input-only
    Type: Variant (three-element array of doubles)
    A 3D vector specifying the tangency of the spline curve at the first point.
EndTangent
    Access: Input-only
    Type: Variant (three-element array of doubles)
    A 3D vector specifying the tangency of the spline curve at the last point.
Return Value (RetVal)
Type: Spline
The newly created Spline object.
Remarks
The StartTangent and EndTangent parameters specify the tangents at the two ends of the spline. By default, a spline is created open. The read-only Closed property indicates whether the spline is open or closed.
Examples
VBA:
Sub Example_AddSpline()
    ' This example creates a spline object in model space.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddSpline()
    ;; This example creates a spline object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0))
    (setq fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
  
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
)
")
("AddTable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A5A767A8-98D0-40B4-89D1-1F0E5AC52EB7"
            "
AddTable Method (ActiveX)
Adds a table to a drawing.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddTable(InsertionPoint, NumRows, NumColumns, RowHeight, ColWidth)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates in the drawing where the table is inserted.
NumRows
    Access: Input-only
    Type: Long
    The number of rows in the table.
NumColumns
    Access: Input-only
    Type: Long
    The number of columns in the table.
RowHeight
    Access: Input-only
    Type: Double
    The height of the rows in the table.
ColWidth
    Access: Input-only
    Type: Double
    The width of the columns in the table.
Return Value (RetVal)
Type: Table
The newly created table object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddTable()
    ' This example adds a table in model space
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.ModelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddTable()
    ;; This example adds a table in model space
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-ZoomExtents acadObj)
)
")
("AddText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D3A7DE5-4219-42D8-A2A2-20C723F01ABC"
           "
AddText Method (ActiveX)
Creates a single line of text.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddText(TextString, InsertionPoint, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
TextString
    Access: Input-only
    Type: String
    The actual text to be displayed.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates on the drawing where the text is placed.
Height
    Access: Input-only
    Type: Double
    The height of the text. Must be a positive number.
Return Value (RetVal)
Type: Text
The newly created Text object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddText()
    ' This example creates a text object in model space.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 2: insertionPoint(1) = 2: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddText()
    ;; This example creates a text object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 2 2 0)  
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))  
    (vla-ZoomAll acadObj)
)
")
("AddTolerance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9957DA00-ED1B-47EF-B133-B6BE25FB442E"
                "
AddTolerance Method (ActiveX)
Creates a tolerance entity.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddTolerance(Text, InsertionPoint, Direction)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Text
    Access: Input-only
    Type: String
    The text string for the tolerance.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates in the drawing specifying the placement of the tolerance symbol.
Direction
    Access: Input-only
    Type: Variant (three-element array of doubles)
    A 3D directional vector specifying the direction of the tolerance symbol.
Return Value (RetVal)
Type: Tolerance
The newly created Tolerance object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddTolerance()
    ' This example creates a tolerance object in model space.
    
    Dim toleranceObj As AcadTolerance
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim direction(0 To 2) As Double
	    
    ' Define the tolerance object
    textString = \"{\Fgdt;r}%%vasdf{\Fgdt;l}%%vdf%%vxc%%v12{\Fgdt;m}%%vsd\" & vbCrLf & _
                 \"{\Fgdt;t}%%vdfd%%v3dd{\Fgdt;l}%%vv%%v%%vxc{\Fgdt;m}\" & vbCrLf & _
                 \"123\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    direction(0) = 1#: direction(1) = 1#: direction(2) = 0#
	
    ' Create the tolerance object in model space
    Set toleranceObj = ThisDrawing.ModelSpace.AddTolerance(textString, insertionPoint, direction)
    ZoomAll
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddTolerance()
    ;; This example creates a tolerance object in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the tolerance object
    (setq insertionPoint (vlax-3d-point 5 5 0)
          direction (vlax-3d-point 1 0 0))
  
    (setq textString (strcat \"{\\Fgdt;r}%%vasdf{\\Fgdt;l}%%vdf%%vxc%%v12{\\Fgdt;m}%%vsd\n\"
                             \"{\\Fgdt;t}%%vdfd%%v3dd{\\Fgdt;l}%%vv%%v%%vxc{\\Fgdt;m}\n\"
                             \"123\"
                     )
    )
	
    ;; Create the tolerance object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq toleranceObj (vla-AddTolerance modelSpace textString insertionPoint direction))  
    (vla-ZoomAll acadObj)
)
")
("AddTorus" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B805DC80-DEA9-4BE5-98E5-CB6DBA669068"
"
AddTorus Method (ActiveX)
Creates a torus at the given location.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddTorus(Center, TorusRadius, TubeRadius)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates in the drawing around which the torus is centered.
TorusRadius
    Access: Input-only
    Type: Double
    The distance from the center of the torus to the center of the tube. Must be a positive number.
TubeRadius
    Access: Input-only
    Type: Double
    The radius of the tube. Must be a positive number.
lid
A 3DSolid object as the newly created torus.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddTorus()
    ' This example creates a torus in model space.
    
    Dim torusObj As Acad3DSolid
    Dim centerPoint(0 To 2) As Double
    Dim torusRadius As Double
    Dim tubeRadius As Double
    
    ' Define the torus
    centerPoint(0) = 5: centerPoint(1) = 5: centerPoint(2) = 0
    torusRadius = 15
    tubeRadius = 5
    
    ' Create the torus
    Set torusObj = ThisDrawing.ModelSpace.AddTorus(centerPoint, torusRadius, tubeRadius)
            
     ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddTorus()
    ;; This example creates a torus in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the torus
    (setq centerPoint (vlax-3d-point 5 5 0)
          torusRadius 15
          tubeRadius 5)
    
    ;; Create the torus
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq torusObj (vla-AddTorus modelSpace centerPoint torusRadius tubeRadius))
            
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddTrace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DA77477E-E3F7-4479-8C9E-597DAEAC5580"
            "
AddTrace Method (ActiveX)
Creates a Trace object from an array of points.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddTrace(PointsArray)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
PointsArray
    Access: Input-only
    Type: Variant (array of doubles)
    An array of 3D WCS coordinates specifying the trace endpoints.
Return Value (RetVal)
Type: Trace
The newly created Trace object.
Remarks
The endpoints of a trace are always on the centerline and are always cut square. AutoCAD automatically calculates the correct bevels for connection to adjacent trace segments.
Traces are solid filled when the Fill mode is on. When Fill mode is off, only the outline of a trace appears.
To set the Fill mode, use the AutoCAD FILLMODE system variable. The AutoCAD TRACEWID system variable stores the current width used for Trace objects.
Examples
VBA:
Sub Example_AddTrace()
    ' This example creates a trace in model space.
    
    Dim traceObj As AcadTrace
    Dim tracePts(0 To 11) As Double       ' 4 (3D) points
    
    ' Define the points of the trace
    tracePts(0) = 1: tracePts(1) = 1: tracePts(2) = 0
    tracePts(3) = 3: tracePts(4) = 3: tracePts(5) = 0
    tracePts(6) = 5: tracePts(7) = 3: tracePts(8) = 0
    tracePts(9) = 5: tracePts(10) = 1: tracePts(11) = 0
    
    ' Turn on the system variable (FILLMODE)
    ' to fill the outline of the trace
    ThisDrawing.SetVariable \"FILLMODE\", 1
        
    ' Create the trace object in model space
    Set traceObj = ThisDrawing.ModelSpace.AddTrace(tracePts)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddTrace()
    ;; This example creates a trace in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the points of the trace
    (setq tracePts (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill tracePts '(1 1 0
                                    3 3 0
                                    5 3 0
                                    5 1 0
                                   )
    )
    
    ;; Turn on the system variable (FILLMODE)
    ;; to fill the outline of the trace
    (vla-SetVariable doc \"FILLMODE\" 1)
        
    ;; Create the trace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq traceObj (vla-AddTrace modelSpace tracePts))
    (vla-ZoomAll acadObj)
)
")
("AddVertex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F6468084-9D2B-436C-8E61-5B806883A316"
"
AddVertex Method (ActiveX)
Adds a vertex to a lightweight polyline or a section.
Supported platforms: Windows only
Signature
VBA:
object.AddVertex Index, Point
object
    Type: LWPolyline, Section
    The objects this method applies to.
Index
    Access: Input-only
    Type: Long
    The index in the array of vertices where the vertex is to be added. Index must be a positive integer. The first element of the array is index 0.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D OCS coordinates at which to create the new vertex.
Return Value (RetVal)
No return value.
Remarks
LWPolyline: The vertex specifies the endpoint for a new line segment. To add an arc segment to a lightweight polyline, first create the line segment, and then add a \"bulge\" to the individual segment that is to become an arc. To add a bulge value to a segment, use the SetBulge method.
Section: The vertex specifies a point on the section line.
Coordinates can be converted to and from the OCS using the TranslateCoordinates method.
Examples
VBA:
Sub Example_AddVertex()
    ' This example creates a lightweight polyline in model space.
    ' It then adds a vertex to the polyline.
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 9) As Double
    
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ZoomAll
    MsgBox \"Add a vertex to the end of the polyline.\", , \"AddVertex Example\"
    
    ' Define the new vertex
    Dim newVertex(0 To 1) As Double
    newVertex(0) = 4: newVertex(1) = 1
    
    ' Add the vertex to the polyline
    plineObj.AddVertex 5, newVertex
    plineObj.Update
    MsgBox \"Vertex added.\", , \"AddVertex Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddVertex()
    ;; This example creates a lightweight polyline in model space.
    ;; It then adds a vertex to the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 9)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    (alert \"Add a vertex to the end of the polyline.\")
    
    ;; Define the new vertex
    (setq newVertex (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-fill newVertex '(4 1))
    
    ;; Add the vertex to the polyline
    (vla-AddVertex plineObj 5 newVertex)
    (vla-Update plineObj)
    (alert \"Vertex added.\")
)
")
("AddWedge" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9C1BFD64-9BA2-41FD-BF33-A4AD90A5A031"
"
AddWedge Method (ActiveX)
Creates a wedge with edges parallel to the axes given the length, width, and height.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddWedge(Center, Length, Width, Height)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the wedge face.
Length
    Access: Input-only
    Type: Double
    The length of the wedge corresponding to the X axis. Must be a positive number.
Width
    Access: Input-only
    Type: Double
    The width of the wedge corresponding to the Y axis. Must be a positive number.
Height
    Access: Input-only
    Type: Double
    The height of the wedge corresponding to the Z axis. Must be a positive number.
lid
A 3DSolid object as the newly created wedge.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddWedge()
    ' This example creates a wedge in model space.
    
    Dim wedgeObj As Acad3DSolid
    Dim center(0 To 2) As Double
    Dim length As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the wedge
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 10#: width = 15#: height = 20#
    
    ' Create the wedge in model space
    Set wedgeObj = ThisDrawing.ModelSpace.AddWedge(center, length, width, height)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddWedge()
    ;; This example creates a wedge in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the wedge
    (setq wedgeCenter (vlax-3d-point 5 5 0)
          wedgeLength 10
          wedgeWidth 15
          wedgeHeight 20)
    
    ;; Create the wedge in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq wedgeObj (vla-AddWedge modelSpace wedgeCenter wedgeLength wedgeWidth wedgeHeight))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("AddXLine" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-53485293-880E-49B7-93C9-8C93E6F56625"
"
AddXLine Method (ActiveX)
Creates an xline (an infinite line) passing through two specified points.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddXline(Point1, Point2)
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
Point1
    Access: Input-only
    Type:Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the infinite start point of the xline.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying a point through which the xline will pass. The xline extends through Point1 and Point2 in both directions to infinity.
Return Value (RetVal)
Type: XLine
The newly created XLine object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddXLine()
    ' This example creates an XLine in model space.
    
    Dim xlineObj As AcadXline
    Dim basePoint(0 To 2) As Double
    Dim directionVec(0 To 2) As Double
    
    ' Define the xline
    basePoint(0) = 2#: basePoint(1) = 2#: basePoint(2) = 0#
    directionVec(0) = 1#: directionVec(1) = 1#: directionVec(2) = 0#
    
    ' Create the xline in model space
    Set xlineObj = ThisDrawing.ModelSpace.AddXline(basePoint, directionVec)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddXLine()
    ;; This example creates an XLine in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the xline
    (setq basePoint (vlax-3d-point 2 2 0)
          directionVec (vlax-3d-point 1 1 0))
    
    ;; Create the xline in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq xlineObj (vla-AddXline modelSpace basePoint directionVec))
    (vla-ZoomAll acadObj)
)
")
("AddXRecord" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C7326186-12DD-44B4-A45B-29311DEFC570"
"
AddXRecord Method (ActiveX)
Creates an XRecord object in any dictionary.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AddXRecord(Keyword)
object
    Type: Dictionary
    The object this method applies to.
Keyword
    Access: Input-only
    Type: String
    The name of the XRecord within the dictionary.
Return Value (RetVal)
Type: XRecord
The newly created XRecord object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddXRecord()
    ' This example creates a new XRecord if one does not exist,
    ' appends data to the XRecord, and then reads it back.  To see data being added,
    ' run the example more than once.
    
    Dim TrackingDictionary As AcadDictionary, TrackingXRecord As AcadXRecord
    Dim XRecordDataType As Variant, XRecordData As Variant
    Dim ArraySize As Long, iCount As Long
    Dim DataType As Integer, Data As String, msg As String
    
    ' Unique identifiers to distinguish this XRecordData from other XRecordData
    Const TYPE_STRING = 1
    Const TAG_DICTIONARY_NAME = \"ObjectTrackerDictionary\"
    Const TAG_XRECORD_NAME = \"ObjectTrackerXRecord\"
    ' Connect to the dictionary in which to store the XRecord
    On Error GoTo CREATE
    Set TrackingDictionary = ThisDrawing.Dictionaries(TAG_DICTIONARY_NAME)
    Set TrackingXRecord = TrackingDictionary.GetObject(TAG_XRECORD_NAME)
    On Error GoTo 0
    
    ' Get current XRecordData
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    
    ' If there is no array yet then create one
    If VarType(XRecordDataType) And vbArray = vbArray Then
        ArraySize = UBound(XRecordDataType) + 1       ' Get the size of the data elements returned
        ArraySize = ArraySize + 1                        ' Increase to hold new data
    
        ReDim Preserve XRecordDataType(0 To ArraySize)
        ReDim Preserve XRecordData(0 To ArraySize)
    Else
        ArraySize = 0
        ReDim XRecordDataType(0 To ArraySize) As Integer
        ReDim XRecordData(0 To ArraySize) As Variant
    End If
    
    ' Append new XRecord Data
    '
    ' For this sample we only append the current time to the XRecord
    XRecordDataType(ArraySize) = TYPE_STRING: XRecordData(ArraySize) = CStr(Now)
    TrackingXRecord.SetXRecordData XRecordDataType, XRecordData
    
    ' Read back all XRecordData entries
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    ArraySize = UBound(XRecordDataType)
    
    ' Retrieve and display stored XRecordData
    For iCount = 0 To ArraySize
        ' Get information for this element
        DataType = XRecordDataType(iCount)
        Data = XRecordData(iCount)
        
        If DataType = TYPE_STRING Then
            msg = msg & Data & vbCrLf
        End If
    Next
    
    MsgBox \"The data in the XRecord is: \" & vbCrLf & vbCrLf & msg, vbInformation
    
    Exit Sub
CREATE:
    ' Create the objects that hold this XRecordData
    If TrackingDictionary Is Nothing Then  ' Make sure to have tracking object
        Set TrackingDictionary = ThisDrawing.Dictionaries.Add(TAG_DICTIONARY_NAME)
        Set TrackingXRecord = TrackingDictionary.AddXRecord(TAG_XRECORD_NAME)
    End If
    
    Resume
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddXRecord()
    ;; This example creates a new XRecord if one does not exist,
    ;; appends data to the XRecord, and then reads it back.  To see data being added,
    ;; run the example more than once.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Unique identifiers to distinguish this XRecordData from other XRecordData
    (setq TYPE_STRING 1
          TAG_DICTIONARY_NAME \"ObjectTrackerDictionary\"
          TAG_XRECORD_NAME \"ObjectTrackerXRecord\")
    ;; Connect to the dictionary in which to store the XRecord
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq TrackingDictionary (vl-catch-all-apply 'vla-Item (list dictionaries TAG_DICTIONARY_NAME)))
    ;; (= (vl-catch-all-error-message TrackingDictionary) \"Automation Error. Key not found\")
  
    (if (= (type TrackingDictionary) 'VLA-OBJECT)
        (setq TrackingXRecord (vla-GetObject TrackingDictionary TAG_XRECORD_NAME))
        (progn
            ;; Create the objects that hold this XRecordData
            (setq TrackingDictionary (vla-Add dictionaries TAG_DICTIONARY_NAME))
            (setq TrackingXRecord  (vla-AddXRecord TrackingDictionary TAG_XRECORD_NAME))
	       )
    )
    ;; Get current XRecordData
    (vla-GetXRecordData TrackingXRecord 'temp-XRecordDataType 'temp-XRecordData)
    
    ;; If there is no array yet then create one
    (setq ArraySize 0)
    (if (/= temp-XRecordDataType nil)
        (progn
	           (setq ArraySize (vlax-safearray-get-u-bound temp-XRecordDataType 1))
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger (cons 0 (1+ ArraySize))))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant (cons 0 (1+ ArraySize))))
            (setq iCount 0)
            (while (>= ArraySize iCount)
                ;; Get information for this element
                (setq DataType (vlax-safearray-get-element temp-XRecordDataType iCount))
                (setq Data (vlax-variant-value (vlax-safearray-get-element temp-XRecordData iCount)))
                (vlax-safearray-put-element XRecordDataType iCount DataType)
                (vlax-safearray-put-element XRecordData iCount Data)
	      
                (setq iCount (1+ iCount))
            )
	       )
        (progn
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger '(0 . 0)))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant '(0 . 0)))
	       )
    )
    
    ;; Append new XRecord Data
    ;;
    ;; For this sample we only append the current time to the XRecord
    (vlax-safearray-put-element XRecordDataType ArraySize TYPE_STRING)
    (setq cdate (rtos (vlax-variant-value (vla-GetVariable doc \"CDATE\")) 2 6))
    (vlax-safearray-put-element XRecordData ArraySize (strcat (substr cdate 5 2) \"/\"
                                                              (substr cdate 7 2) \"/\"
                                                              (substr cdate 1 4) \"-\"
                                                              (substr cdate 10 2) \":\"
                                                              (substr cdate 12 2) \":\"
                                                              (substr cdate 14)))
    (vla-SetXRecordData TrackingXRecord XRecordDataType XRecordData)
    
    ;; Read back all XRecordData entries
    (vla-GetXRecordData TrackingXRecord XRecordDataType XRecordData)
    (setq ArraySize (vlax-safearray-get-u-bound XRecordDataType 1))
    
    ;; Retrieve and display stored XRecordData
    (setq iCount 0
	         msg \"\")
    (while (>= ArraySize iCount)
        ;; Get information for this element
        (setq DataType (vlax-safearray-get-element XRecordDataType iCount))
        (setq Data (vlax-variant-value (vlax-safearray-get-element XRecordData iCount)))
        (if (= DataType TYPE_STRING)
            (setq msg (strcat msg Data \"\n\"))
        )
      
        (setq iCount (1+ iCount))
    )
    
    (alert (strcat \"The data in the XRecord is: \n\n\" msg))
)
")
("AngleFromXAxis" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4BC1FEFF-6A01-4272-AA8E-F4F465ABC36E"
"
AngleFromXAxis Method (ActiveX)
Gets the angle of a line from the X axis.
Supported platforms: Windows only
Signature
VBA:
RetVal = AngleFromXAxis(Point1, Point2)
object
    Type: Utility
    The object this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The start point of the line.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The endpoint of the line.
Return Value (RetVal)
Type: Double
The angle of the line in radians.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AngleFromXAxis()
    ' This example finds the angle, in radians, between the X axis
    ' and a line defined by two points.
    
    Dim pt1(0 To 2) As Double
    Dim pt2(0 To 2) As Double
    Dim retAngle As Double
    
    pt1(0) = 2: pt1(1) = 5: pt1(2) = 0
    pt2(0) = 5: pt2(1) = 2: pt2(2) = 0
    
    ' Return the angle
    retAngle = ThisDrawing.Utility.AngleFromXAxis(pt1, pt2)
    
    ' Create the line for a visual reference
    Dim lineObj As AcadLine
    Set lineObj = ThisDrawing.ModelSpace.AddLine(pt1, pt2)
    ZoomAll
    
    ' Display the angle found
    MsgBox \"The angle in radians between the X axis and the line is \" & retAngle, , \"AngleFromXAxis Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AngleFromXAxis()
    ;; This example finds the angle, in radians, between the X axis
    ;; and a line defined by two points.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Return the angle
    (setq pt1 (vlax-3d-point 2 5 0)
          pt2 (vlax-3d-point 5 2 0))
    (setq retAngle (vla-AngleFromXAxis (vla-get-Utility doc) pt1 pt2))
    
    ;; Create the line for a visual reference
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace pt1 pt2))
    (vla-ZoomAll acadObj)
    
    ;; Display the angle found
    (alert (strcat \"The angle in radians between the X axis and the line is \" (rtos retAngle 2)))
)
")
("AngleToReal" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EEE621A5-7248-4C24-8533-06F8B71CCF32"
"
AngleToReal Method (ActiveX)
Converts an angle as a string to a real (double) value.
Supported platforms: Windows only
Signature
VBA:
RetVal = AngleToReal(Angle, Unit)
object
    Type: Utility
    The object this method applies to.
Angle
    Access: Input-only
    Type: String
    The angle as a string value.
Unit
    Access: Input-only
    Type: AcAngleUnits enum
    The unit to which the string will be converted.
        acDegrees
        acDegreeMinuteSeconds
        acGrads
        acRadians
Return Value (RetVal)
Type: Double
The angle as a real number.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AngleToReal()
    ' This example passes several different strings representing
    ' an angle in different units to be converted to radians.
    
    Dim angAsStr As String
    Dim unit As Integer
    Dim angAsReal As Double
    
    ' Convert the angle given in degrees unit to a real
    angAsStr = \"45\"
    unit = acDegrees
    angAsReal = ThisDrawing.Utility.AngleToReal(angAsStr, unit)
    MsgBox \"45 degrees converts to \" & angAsReal & \" radians.\", , \"AngleAsReal Example\"
    
    ' Convert the angle given in degrees/minutes/seconds unit to Radians
    angAsStr = \"45d0' 0\"\"\"
    unit = acDegreeMinuteSeconds
    angAsReal = ThisDrawing.Utility.AngleToReal(angAsStr, unit)
    MsgBox \"45 degrees, 0 minutes, 0 seconds converts to \" & angAsReal & \" radians.\", , \"AngleAsReal Example\"
    
    ' Convert the angle given in grads unit to Radians
    angAsStr = \"50\"
    unit = acGrads
    angAsReal = ThisDrawing.Utility.AngleToReal(angAsStr, unit)
    MsgBox \"50 grads converts to \" & angAsReal & \" radians.\", , \"AngleAsReal Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AngleToReal()
    ;; This example passes several different strings representing
    ;; an angle in different units to be converted to radians.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Convert the angle given in degrees unit to a real
    (setq angAsStr \"45\"
          unit acDegrees
          angAsReal (vla-AngleToReal (vla-get-Utility doc) angAsStr unit))
    (alert (strcat \"45 degrees converts to \" (rtos angAsReal 2) \" radians.\"))
    
    ;; Convert the angle given in degrees/minutes/seconds unit to Radians
    (setq angAsStr \"45d0' 0\"\"
          unit acDegreeMinuteSeconds
          angAsReal (vla-AngleToReal (vla-get-Utility doc) angAsStr unit))
    (alert (strcat \"45 degrees, 0 minutes, 0 seconds converts to \" (rtos angAsReal 2) \" radians.\"))
    
    ;; Convert the angle given in grads unit to Radians
    (setq angAsStr \"50\"
          unit acGrads
          angAsReal (vla-AngleToReal (vla-get-Utility doc) angAsStr unit))
    (alert (strcat \"50 grads converts to \" (rtos angAsReal 2) \" radians.\"))
)
")
("AngleToString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4FF6FABE-384B-4C4B-A3E5-3E7FD2069977"
"
AngleToString Method (ActiveX)
Converts an angle from a real (double) value to a string.
Supported platforms: Windows only
Signature
VBA:
RetVal = AngleToString(Angle, Unit, Precision)
object
    Type: Utility
    The object this method applies to.
Angle
    Access: Input-only
    Type: Double
    The angle as a double value.
Unit
    Access: Input-only
    Type: AcAngleUnits enum
    The unit to which the string will be converted.
        acDegrees
        acDegreeMinuteSeconds
        acGrads
        acRadians
Precision
    Access: Input-only
    Type: Long
    The precision of the angle. An integer between 0 and 8.
Return Value (RetVal)
Type: String
The angle as a string.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AngleToString()
    ' This example converts a radian value to several different
    ' strings representing the value in different units.
    
    Dim angAsRad As Double
    Dim unit As Integer
    Dim precision As Long
    Dim angAsString As String
    angAsRad = 0.785398163397448
    unit = acDegrees
    precision = 6
    
    ' Convert the radian value to degrees with a precision of 6
    angAsString = ThisDrawing.Utility.AngleToString(angAsRad, unit, precision)
    MsgBox \"0.785398163397448 radians =  \" & angAsString & \" degrees\", , \"AngleAsString Example\"
    
    ' Convert the radian value to degrees/Minutes/Seconds with a precision of 6
    unit = acDegreeMinuteSeconds
    angAsString = ThisDrawing.Utility.AngleToString(angAsRad, unit, precision)
    MsgBox \"0.785398163397448 radians =  \" & angAsString, , \"AngleAsString Example\"
    
    ' Convert the radian value to grads with a precision of 6
    unit = acGrads
    angAsString = ThisDrawing.Utility.AngleToString(angAsRad, unit, precision)
    MsgBox \"0.785398163397448 radians =  \" & angAsString, , \"AngleAsString Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AngleToString()
    ;; This example converts a radian value to several different
    ;; strings representing the value in different units.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq angAsRad 0.785398163397448
          unit acDegrees
          precision 6)
    
    ;; Convert the radian value to degrees with a precision of 6
    (setq angAsString (vla-AngleToString (vla-get-Utility doc) angAsRad unit precision))
    (alert (strcat \"0.785398163397448 radians =  \" angAsString))
    
    ;; Convert the radian value to degrees/Minutes/Seconds with a precision of 6
    (setq unit acDegreeMinuteSeconds)
    (setq angAsString (vla-AngleToString (vla-get-Utility doc) angAsRad unit precision))
    (alert (strcat \"0.785398163397448 radians =  \" angAsString))
    
    ;; Convert the radian value to grads with a precision of 6
    (setq unit acGrads)
    (setq angAsString (vla-AngleToString (vla-get-Utility doc) angAsRad unit precision))
    (alert (strcat \"0.785398163397448 radians =  \" angAsString))
)
")
("AppendInnerLoop" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C746F485-3882-4E89-B6CE-B4553E0DB458"
"
AppendInnerLoop Method (ActiveX)
Appends an inner loop to the hatch.
Supported platforms: Windows only
Signature
VBA:
object.AppendInnerLoop Loop
object
    Type: Hatch
    The object this method applies to.
Loop
    Access: Input-only
    Type: Variant (array of Arc, Circle, Ellipse, Line, Polyline, Region, Spline objects)
    An array of objects forming a closed boundary. The array can consist of one or more objects. If more than one object is used, their endpoints must coincide for the loop to be created properly.
Return Value (RetVal)
No return value.
Remarks
After the Hatch object has been created using the AddHatch method, add the outer loop using AppendOuterLoop. The outer loop must be closed and must be created before any inner loops can be added.
Examples
VBA:
Sub Example_AppendInnerLoop()
    ' This example creates an associative hatch in model space, and then appends an outer loop to the hatch.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append a circle as the inner loop for the hatch.
    Dim innerLoop(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AppendInnerLoop()
    ;; This example creates an associative hatch in model space, and then appends an outer loop to the hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append a circle as the inner loop for the hatch.
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq innerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop 0 circle)
    (vla-AppendInnerLoop hatchObj innerLoop)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
)
")
("AppendItems" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-01216A16-2242-4E2A-B98E-C12002594D4E"
"
AppendItems Method (ActiveX)
Appends one or more entities to the specified group.
Supported platforms: Windows only
Signature
VBA:
object.AppendItems Objects
object
    Type: Group
    The object this method applies to.
Objects
    Access: Input-only
    Type: Variant (array of any drawing objects)
    An array of objects to append. The array can consist of any drawing objects.
Return Value (RetVal)
No return value.
Remarks
To query items in a group, use the Item method.
To remove individual items from a group, use the RemoveItems method.
Examples
VBA:
Sub Example_AppendItems()
    ' This example creates a group and several objects.
    ' It then appends the objects to the group.
    
    ' Create the new group
    Dim groupObj As AcadGroup
    Set groupObj = ThisDrawing.Groups.Add(\"TEST_GROUP\")
            
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the group.
    ReDim appendObjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set appendObjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the group
    groupObj.AppendItems appendObjs
    
    ThisDrawing.Regen acActiveViewport
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AppendItems()
    ;; This example creates a group and several objects.
    ;; It then appends the objects to the group.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the new group
    (setq groupObj (vla-Add (vla-get-Groups doc) \"TEST_GROUP\"))
            
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the group.
    (setq I 0
	         totalObjs (vla-get-Count modelSpace))
    (setq appendObjs (vlax-make-safearray vlax-vbObject (cons 0 (- totalObjs 1))))
    (while (>= (- totalObjs 1) I)
        (vlax-safearray-put-element appendObjs I (vla-Item modelSpace I))
        (setq I (1+ I))
    )
    
    ;; Add the array of objects to the group
    (vla-AppendItems groupObj appendObjs)
    
    (vla-Regen doc acActiveViewport)
)
")
("AppendOuterLoop" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4CA06494-CDFF-46FA-9E1D-A0E8220F69F4"
"
AppendOuterLoop Method (ActiveX)
Appends an outer loop to the hatch.
Supported platforms: Windows only
Signature
VBA:
object.AppendOuterLoop loop
object
    Type: Hatch
    The object this method applies to.
Loop
    Access: Input-only
    Type: Variant (array of Arc, Circle, Ellipse, Line, Polyline, Region, Spline objects)
    An array of objects forming a closed boundary. The array can consist of one or more objects. If more than one object is used, their endpoints must coincide for the loop to be created properly.
Return Value (RetVal)
No return value.
Remarks
After the Hatch object has been created using the AddHatch method, add the outer loop. The outer loop must be closed and must be created before any inner loops can be added. After a valid outer loop has been created, add any inner loops, one at a time, using the AppendInnerLoop method.
Once you have finished defining the boundaries for the hatch, use the Evaluate method to calculate the hatch lines or fill for the boundaries, then use the Regen method to update the display of the hatch.
Examples
VBA:
Sub Example_AppendOuterLoop()
    ' This example creates an associative hatch in model space, and then creates an outer loop for the hatch.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 1
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AppendOuterLoop()
    ;; This example creates an associative hatch in model space, and
    ;; then creates an outer loop for the hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-ZoomAll acadObj)
)
")
("AppendVertex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1015EC9B-0DC8-4B00-8875-F12BF8160554"
"
AppendVertex Method (ActiveX)
Appends a vertex to the end of a 3DPolyline, Polyline, or PolygonMesh object.
Supported platforms: Windows only
Signature
VBA:
object.AppendVertex Point
object
    Type: 3DPolyline, PolygonMesh, Polyline
    The objects this method applies to.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The coordinates specifying the vertex to be appended.
    PolygonMesh: An array of 3D WCS coordinates specifying the appended row of vertices.
    3DPolyline: An array of 3D WCS coordinates specifying the vertex to append.
    Polyline: An array of 3D coordinates. The X and Y coordinates are given in OCS, the Z coordinate is ignored.
Return Value (RetVal)
No return value.
Remarks
PolygonMesh: When you append a vertex to the end of a PolygonMesh object, you are appending a row of vertices. For example, for a 4 x 3 PolygonMesh you define 12 vertices. Appending a vertex would make the matrix 5 x 3, thereby requiring three additional coordinates. If the 4 x 3 matrix had the following as its last vertex:
    vertex(3,0): 6,6,6
    vertex(3,1): 7,7,7
    vertex(3,2): 8,8,8
You would append:
    vertex(4,0): 10,10,10
    vertex(4,1): 10,5,0
    vertex(4,2): 10,20,30
The OCS coordinates for the Polyline object can be converted to and from other coordinate systems using the TranslateCoordinates method.
Examples
VBA:
Sub Example_AppendVertex()
    ' This example creates a polyline in model space.
    ' It then appends a vertex to the polyline.
    
    Dim plineObj As AcadPolyline
    Dim points(0 To 14) As Double
    
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ZoomAll
    MsgBox \"Append the vertex 4, 1, 0.\", , \"AppendVertex Example\"
    
    Dim newVertex(0 To 2) As Double
    newVertex(0) = 4: newVertex(1) = 1: newVertex(2) = 0
    plineObj.AppendVertex newVertex
    ZoomAll
    MsgBox \"The vertex 4, 1, 0 as been appended.\", , \"AppendVertex Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AppendVertex()
    ;; This example creates a polyline in model space.
    ;; It then appends a vertex to the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the 2D polyline points
    (setq center (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill center '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    (alert \"Append the vertex 4, 1, 0.\")
    
    (setq newVertex (vlax-3d-point 4 1 0))
    (vla-AppendVertex plineObj newVertex)
    (vla-ZoomAll acadObj)
    (alert \"The vertex 4, 1, 0 as been appended.\")
)
")
("ArrayPolar" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-34726D12-C973-47E4-86A1-DBD410FE1477"
"
ArrayPolar Method (ActiveX)
Creates a polar array of objects given a NumberOfObjects, AngleToFill, and CenterPoint.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.ArrayPolar(NumberOfObjects, AngleToFill, CenterPoint)
object
    Type: All drawing objects
    The objects this method applies to.
NumberOfObjects
    Access: Input-only
    Type: Long
    The number of objects to be created in the polar array. This must be a positive integer greater than 1.
AngleToFill
    Access: Input-only
    Type: Double
    The angle to fill in radians. A positive value specifies counterclockwise rotation. A negative value specifies clockwise rotation. An error is returned for an angle that equals 0.
CenterPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center point for the polar array.
Return Value (RetVal)
Type: Variant (array of objects)
The array of new objects.
Remarks
AutoCAD determines the distance from the array's center point to a reference point on the last object selected. The reference point used depends on the type of object previously selected. AutoCAD uses the center point of a circle or arc, the insertion point of a block or shape, the start point of text, and one endpoint of a line or trace.
Note that this method does not support the Rotate While Copying option of the AutoCAD ARRAY command.
Polar array with NumberOfObjects = 5, AngleToFill = 180, CenterPoint = 0,0,0.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Examples
VBA:
Sub Example_ArrayPolar()
    ' This example creates a circle and then performs a polar array
    ' on that circle.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 1
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    MsgBox \"Perform the polar array on the circle.\", , \"ArrayPolar Example\"
    
    ' Define the polar array
    Dim noOfObjects As Integer
    Dim angleToFill As Double
    Dim basePnt(0 To 2) As Double
    noOfObjects = 4
    angleToFill = 3.14          ' 180 degrees
    basePnt(0) = 4#: basePnt(1) = 4#: basePnt(2) = 0#
    
    ' The following example will create 4 copies of an object
    ' by rotating and copying it about the point (3,3,0).
    Dim retObj As Variant
    retObj = circleObj.ArrayPolar(noOfObjects, angleToFill, basePnt)
    
    ZoomAll
    MsgBox \"Polar array completed.\", , \"ArrayPolar Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrayPolar()
    ;; This example creates a circle and then performs a polar array
    ;; on that circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)  
          radius 1)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
  
    (alert \"Perform the polar array on the circle.\")
    
    ;; Define the polar array
    (setq basePnt (vlax-3d-point 3 3 0) 
          noOfObjects 4
          angleToFill 3.14)          ;; 180 degrees
    
    ;; The following example will create 4 copies of an object
    ;; by rotating and copying it about the point (3,3,0).
    (setq retObj (vla-ArrayPolar circleObj noOfObjects angleToFill basePnt))
    
    (vla-ZoomAll acadObj)
    (alert \"Polar array completed.\")
)
")
("ArrayRectangular" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D8F15232-7297-4C90-86A4-0A0887D4938B"
"
ArrayRectangular Method (ActiveX)
Creates a 2D or 3D rectangular array of objects.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.ArrayRectangular(NumberOfRows, NumberOfColumns, NumberOfLevels, DistBetweenRows, DistBetweenColumns, DistBetweenLevels)
object
    Type: All drawing objects
    The objects this method applies to.
NumberOfRows
    Access: Input-only
    Type: Long
    The number of rows in the rectangular array. This must be a positive number. If this number is 1, then NumberOfColumns must be greater than 1.
NumberOfColumns
    Access: Input-only
    Type: Long
    The number of columns in the rectangular array. This must be a positive number. If this number is 1, then NumberOfRows must be greater than 1.
NumberOfLevels
    Access: Input-only
    Type: Long
    The number of levels in a 3D array.
DistBetweenRows
    Access: Input-only
    Type: Double
    The distance between the rows. If the distance between rows is a positive number, rows are added upward from the base entity. If the distance is a negative number, rows are added downward.
DistBetweenColumns
    Access: Input-only
    Type: Double
    The distance between the columns. If the distance between columns is a positive number, columns are added to the right of the base entity. If the distance is a negative number, columns are added to the left.
DistBetweenLevels
    Access: Input-only
    Type: Double
    The distance between the array levels. If the distance between levels is a positive number, levels are added in the positive direction from the base entity. If the distance is a negative number, levels are added in the negative direction.
Return Value (RetVal)
Type: Variant (array of objects)
The array of newly created objects.
Remarks
For a 2D array, specify the NumberOfRows, NumberOfColumns, DistBetweenRow, and DistBetweenColumns. For creating a 3D array, specify the NumberOfLevels and DistBetweenLevels as well.
A rectangular array is constructed by replicating the object in the selection set the appropriate number of times. If you define one row, you must specify more than one column and vice versa.
The object in the selection set is assumed to be in the lower left-hand corner, and the array is generated up and to the right. If the distance between rows is a negative number, rows are added downward. If the distance between columns is a negative number, the columns are added to the left.
AutoCAD builds the rectangular array along a baseline defined by the current snap rotation angle. This angle is zero by default, so the rows and columns of a rectangular array are orthogonal with respect to the X and Y drawing axes. You can change this angle and create a rotated array by setting the snap rotation angle to a nonzero value. To do this, use the SnapRotationAngle property.
Rectangular array with NumberOfRows = 4, NumberOfColumns = 3, DistBetweenRows = a, DistBetweenColumns = b. The base entity is represented in blue.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Examples
VBA:
Sub Example_ArrayRectangular()
    ' This example creates a circle and then performs
    ' a rectangular array on that circle.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 0.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ThisDrawing.Application.ZoomAll
    MsgBox \"Perform the rectangular array on the circle.\", , \"ArrayRectangular Example\"
    
    ' Define the rectangular array
    Dim numberOfRows As Long
    Dim numberOfColumns As Long
    Dim numberOfLevels As Long
    Dim distanceBwtnRows As Double
    Dim distanceBwtnColumns As Double
    Dim distanceBwtnLevels As Double
    numberOfRows = 5
    numberOfColumns = 5
    numberOfLevels = 2
    distanceBwtnRows = 1
    distanceBwtnColumns = 1
    distanceBwtnLevels = 1
    
    ' Create the array of objects
    Dim retObj As Variant
    retObj = circleObj.ArrayRectangular(numberOfRows, numberOfColumns, numberOfLevels, distanceBwtnRows, distanceBwtnColumns, distanceBwtnLevels)
    
    ZoomAll
    MsgBox \"Rectangular array completed.\", , \"ArrayRectangular Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrayRectangular()
    ;; This example creates a circle and then performs
    ;; a rectangular array on that circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)  
          radius 0.5)
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    (alert \"Perform the rectangular array on the circle.\")
    ;; Define the rectangular array
    (setq numberOfRows 5
          numberOfColumns 5
          numberOfLevels 2
          distanceBwtnRows 1.0
          distanceBwtnColumns 1.0
          distanceBwtnLevels 1.0)
    ;; Create the array of objects
    (setq retObj (vla-ArrayRectangular circleObj numberOfRows numberOfColumns numberOfLevels
		                                 distanceBwtnRows distanceBwtnColumns distanceBwtnLevels))
    (vla-ZoomAll acadObj)
    (alert \"Rectangular array completed.\")
)
")
("AttachExternalReference" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-28CB9C44-08E6-47EF-A982-8F505D8C68F6"
"
AttachExternalReference Method (ActiveX)
Attaches an external reference (xref) to the drawing.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.AttachExternalReference(PathName, Name, InsertionPoint, XScale, YScale, ZScale, Rotation, Overlay [, Password])
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
PathName
    Access: Input-only
    Type: String
    The full path and file name of the drawing to be referenced.
Name
    Access: Input-only
    Type: String
    The name for the xref to be created.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of Doubles)
    The 3D WCS coordinates specifying the point at which an ExternalReference instance is inserted into the drawing. The insertion point in the current drawing is aligned with the point defined by the AutoCAD BASE system variable in the referenced file.
XScale
    Access: Input-only
    Type: Double
    The X scaling factor for the xref instance.
YScale
    Access: Input-only
    Type: Double
    The Y scaling factor for the xref instance.
ZScale
    Access: Input-only
    Type: Double
    The Z scaling factor for the xref instance.
Rotation
    Access: Input-only
    Type: Double
    The rotation angle for the xref instance. This angle is specified in radians.
Overlay
    Access: Input-only
    Type: Boolean
        True: The xref instance is an overlay.
        False: The xref instance is an attachment.
Password
    Access: Input-only; optional
    Type: Variant
    ; optional
Return Value (RetVal)
Type: ExternalReference
The newly created ExternalReference object.
Remarks
Like Block objects, attached ExternalReference objects can be nested. If another person is editing the drawing to be referenced, the drawing attached is based on the most recently saved version.
If the referenced file is missing or corrupt, its data is not displayed in the current drawing.
Examples
VBA:
Sub Example_AttachExternalReference()
    ' This example displays all the blocks in the current drawing
    ' before and after adding an external reference.
    '
    ' This example uses the \"city map.dwg\" found in the Sample
    ' directory. If you do not have this drawing, or if it is 
    ' in a different directory, insert a valid path and file name
    ' for the PathName variable below.
    
    Dim InsertPoint(0 To 2) As Double
    Dim insertedBlock As AcadExternalReference
    Dim tempBlock As AcadBlock
    Dim msg As String, PathName As String
    
    ' Define external reference to be inserted
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    PathName = \"c:\program files\autocad\sample\city map.dwg\"
    
    ' Display current Block information for this drawing
    GoSub ListBlocks
    
    ' Add the external reference to the drawing
    Set insertedBlock = ThisDrawing.ModelSpace.AttachExternalReference(PathName, \"XREF_IMAGE\", InsertPoint, 1, 1, 1, 0, False)
        
    ThisDrawing.Application.ZoomAll
    
    ' Display new Block information for this drawing
    GoSub ListBlocks
    
    Exit Sub
ListBlocks:
    msg = vbCrLf    ' Reset message
    
    For Each tempBlock In ThisDrawing.Blocks
        msg = msg & tempBlock.name & vbCrLf     ' Add Block to list
    Next
    
    MsgBox \"The current blocks in this drawing are: \" & msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AttachExternalReference()
    ;; This example displays all the blocks in the current drawing
    ;; before and after adding an external reference.
    ;;
    ;; This example uses the \"STAIR1.dwg\" found in the Sample
    ;; directory. If you do not have this drawing, or if it is 
    ;; in a different directory, insert a valid path and file name
    ;; for the PathName variable below.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define external reference to be inserted
    (setq InsertPoint (vlax-3d-point 1 1 0))
    (setq pathName (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg\"))
    
    ;; Display current Block information for this drawing
    (setq msg \"\")
    (vlax-for tempBlock (vla-get-Blocks doc)
        (setq msg (strcat msg (vla-get-Name tempBlock) \"\n\"))     ;; Add Block to list
    )
    
    (alert (strcat \"The current blocks in this drawing are: \" msg))
    
    ;; Add the external reference to the drawing
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq insertedBlock (vla-AttachExternalReference modelSpace pathName \"XREF_IMAGE\" InsertPoint 1 1 1 0 :vlax-false))
        
    (vla-ZoomAll acadObj)
    
    ;; Display new Block information for this drawing
    (setq msg \"\")
    (vlax-for tempBlock (vla-get-Blocks doc)
        (setq msg (strcat msg (vla-get-Name tempBlock) \"\n\"))     ;; Add Block to list
    )
    
    (alert (strcat \"The current blocks in this drawing are: \" msg))
)
")
("AuditInfo" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2B56C33A-0B8B-4A2A-A6C4-CDB951140171"
"
AuditInfo Method (ActiveX)
Evaluates the integrity of the drawing.
Supported platforms: Windows only
Signature
VBA:
object.AuditInfo FixError
object
    Type: Document
    The object this method applies to.
FixError
    Access: Input-only
    Type: Boolean
        True: AutoCAD should attempt to fix any problems it encounters.
        False: AutoCAD should not attempt to fix any problems it encounters.
Return Value (RetVal)
No return value.
Remarks
For every error detected, AutoCAD provides a description of the error and recommends corrective action.
If you specify FixError = True, AutoCAD will attempt to fix any errors it encounters.
Examples
VBA:
Sub Example_AuditInfo()
    ' This example has AutoCAD audit
    ' and fix any problems found
    
    ThisDrawing.AuditInfo True
    
    MsgBox \"Auditing has been requested.\" & vbCrLf & _
           \"The fix error flag is set to True\", , \"AuditInfo Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AuditInfo()
    ;; This example has AutoCAD audit
    ;; and fix any problems found
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-AuditInfo doc :vlax-true)
    
    (alert (strcat \"Auditing has been requested.\"
                   \"\nThe fix error flag is set to True.\"))
)
")
("Bind" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ABBD4055-F29F-479A-81F1-DB12188F7D74"
"
Bind Method (ActiveX)
Binds an external reference (xref) to a drawing.
Supported platforms: Windows only
Signature
VBA:
object.Bind bPrefixName
object
    Type: Block
    The object this method applies to.
bPrefixName
    Access: Input-only
    Type: Boolean
        True: Symbol names are not prefixed.
        False: Symbol names are prefixed with <blockname>$x$.
Return Value (RetVal)
No return value.
Remarks
Binding an xref to a drawing makes the xref a permanent part of the drawing and no longer an externally referenced file. The externally referenced information becomes a block. When the externally referenced drawing is updated, the bound xref is not updated. This method binds the entire drawing's database, including all of its dependent symbols. Dependent symbols are named objects such as blocks, dimension styles, layers, linetypes, and text styles. Binding the xref allows named objects from the xref to be used in the current drawing.
If the bPrefixName parameter is set to False, the symbol names of the xref drawing are prefixed in the current drawing with <blockname>$x$, where x is an integer that is automatically incremented to avoid overriding existing block definitions. If the bPrefixName parameter is set to True, the symbol names of the xref drawing are merged into the current drawing without the prefix. If duplicate names exist, AutoCAD uses the symbols already defined in the local drawing. If you are unsure whether your drawing contains duplicate symbol names, it is recommended that you set bPrefixName to False.
Examples
VBA:
Sub Example_Bind()
    On Error GoTo ERRORHANDLER
                          
    ' Define external reference to be inserted
    Dim xrefHome As AcadBlock
    Dim xrefInserted As AcadExternalReference
    Dim insertionPnt(0 To 2) As Double
    Dim PathName As String
    insertionPnt(0) = 1
    insertionPnt(1) = 1
    insertionPnt(2) = 0
    PathName = \"c:/AutoCAD/sample/City map.dwg\"
    
    ' Add the external reference
    Set xrefInserted = ThisDrawing.ModelSpace. _
            AttachExternalReference(PathName, \"XREF_IMAGE\", _
            insertionPnt, 1, 1, 1, 0, False)
    ZoomAll
    MsgBox \"The external reference is attached.\"
    
    ' Bind the external reference definition
    ThisDrawing.Blocks.Item(xrefInserted.name).Bind False
    MsgBox \"The external reference is bound.\"
    Exit Sub
ERRORHANDLER:
    MsgBox Err.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Bind()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
                          
    ;; Define external reference to be inserted
    (setq insertionPnt (vlax-3d-point 1 1 0)
          pathName (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg\"))
    ;; Add the external reference
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq xrefInserted (vla-AttachExternalReference modelSpace pathName \"XREF_IMAGE\" insertionPnt 1 1 1 0 :vlax-false))
    (vla-ZoomAll acadObj)
    (alert \"The external reference is attached.\")
    
    ;; Bind the external reference definition
    (vla-Bind (vla-Item (vla-get-Blocks doc) (vla-get-Name xrefInserted)) :vlax-false)
    (alert \"The external reference is bound.\")
)
")
("Block" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B007B7FF-1A51-475D-9E7D-3A51C169420A"
"
Block Method (ActiveX)
Returns the block of a SortentsTable object.
Signature
VBA:
RetVal = object.Block
object
    Type: SortentsTable
    The object this method applies to.
Return Value (RetVal)
Type: Block
The Block of the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
				  6 20 0
				 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("Boolean" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5D961150-1635-45ED-99CC-3C0222FDB2C3"
"
Boolean Method (ActiveX)
Performs a Boolean operation (union, intersect, or subtract) between the object and another 3DSolid or Region object.
Supported platforms: Windows only
Signature
VBA:
object.Boolean(Operation, Object)
object
    Type: 3DSolid, Region
    The objects this method applies to.
Operation
    Access: Input-only
    Type: AcBooleanType enum
        acUnion: Performs a union operation.
        acIntersection: Performs an intersection operation.
        acSubtraction: Performs a subtraction operation.
Object
    Access: input-only
    Type: 3DSolid, Region
    The object the operation is performed against.
Return Value (RetVal)
No return value.
Remarks
The first object is modified as a result of the operation.
Solids before Boolean intersection
Resulting solid from Boolean intersection
Note: If there is no result from the operation, the first object is not changed. For example, when finding the intersection between two non-intersecting objects, there is no change to the first object.
Examples
VBA:
Sub Example_Boolean()
    ' This example creates a box and a cylinder in model space.
    ' It then performs a Boolean operation on the two solids.
    
    Dim boxObj As Acad3DSolid
    Dim boxLength As Double, boxWidth As Double, boxHeight As Double
    Dim boxCenter(0 To 2) As Double
    boxCenter(0) = 5#: boxCenter(1) = 5#: boxCenter(2) = 0
    boxLength = 10#: boxWidth = 7: boxHeight = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(boxCenter, boxLength, boxWidth, boxHeight)
    
    ' Define the cylinder
    Dim cylinderObj As Acad3DSolid
    Dim cylinderCenter(0 To 2) As Double
    Dim cylinderRadius As Double
    Dim cylinderHeight As Double
    cylinderCenter(0) = 0#: cylinderCenter(1) = 0#: cylinderCenter(2) = 0#
    cylinderRadius = 5#
    cylinderHeight = 20#
    
    ' Create the Cylinder (3DSolid) object in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddCylinder(cylinderCenter, cylinderRadius, cylinderHeight)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Perform an intersection on the two solids
    MsgBox \"Perform an intersection on the two solids.\", vbOKOnly, \"Boolean Example\"
    boxObj.Boolean acIntersection, cylinderObj
    ThisDrawing.Regen True
    
    MsgBox \"Intersection complete.\", , \"Boolean Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Boolean()
    ;; This example creates a box and a cylinder in model space.
    ;; It then performs a Boolean operation on the two solids.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq boxCenter (vlax-3d-point 5 5 0)
          boxLength 10
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq boxObj (vla-AddBox modelSpace boxCenter boxLength boxWidth boxHeight))
    
    ;; Define the cylinder
    (setq cylinderCenter (vlax-3d-point 0 0 0)
          cylinderRadius 5
          cylinderHeight 20)
    
    ;; Create the Cylinder (3DSolid) object in model space
    (setq cylinderObj (vla-AddCylinder modelSpace cylinderCenter cylinderRadius cylinderHeight))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Perform an intersection on the two solids
    (alert \"Perform an intersection on the two solids.\")
    (vla-Boolean boxObj acIntersection cylinderObj)
    (vla-Regen doc :vlax-true)
    
    (alert \"Intersection complete.\")
)
")
("CheckInterference" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D22E6F22-B774-48B1-8A85-01F81F1C80E4"
"
CheckInterference Method (ActiveX)
Checks for interference between two solids and, if specified, creates a solid from the interference.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.CheckInterference(Object, CreateInterferenceSolid, SolidsInterfere)
object
    Type: 3DSolid
    The object this method applies to.
Object
    Access: input-only
    Type: 3DSolid
    The object to check against.
CreateInterferenceSolid
    Access: input-only
    Type: Boolean
        True: Creates the interference solid.
        False: Does not create the interference solid.
SolidsInterfere
    Access: output-only
    Type: Boolean
        True: The solids do interfere.
        False: The solids do not interfere.
lid
The resulting object if CreateInterferenceSolid is set to True.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CheckInterference()
    ' This example creates a box and a cylinder in model space.
    ' It then finds the interference between the two solids and
    ' creates a new solid from that interference.
    
    ' For ease of viewing, different colors are used for the box, the
    ' cylinder, and the interference solid.
    
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Dim boxObj As Acad3DSolid
    Dim boxLength As Double, boxWidth As Double, boxHeight As Double
    Dim boxCenter(0 To 2) As Double
    boxCenter(0) = 5#: boxCenter(1) = 5#: boxCenter(2) = 0
    boxLength = 10#: boxWidth = 7: boxHeight = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(boxCenter, boxLength, boxWidth, boxHeight)
    Call color.SetRGB(80, 100, 244)
	   boxObj.TrueColor = color
    
    ' Define the cylinder
    Dim cylinderObj As Acad3DSolid
    Dim cylinderCenter(0 To 2) As Double
    Dim cylinderRadius As Double
    Dim cylinderHeight As Double
    cylinderCenter(0) = 0#: cylinderCenter(1) = 0#: cylinderCenter(2) = 0#
    cylinderRadius = 5#
    cylinderHeight = 20#
    
    ' Create the Cylinder (3DSolid) object in model space
    Set cylinderObj = ThisDrawing.ModelSpace.AddCylinder(cylinderCenter, cylinderRadius, cylinderHeight)
    Call color.SetRGB(244, 150, 50)
	   cylinderObj.TrueColor = color
    
    ' Find the interference between the two solids and create a new solid from it
    Dim solidObj As Acad3DSolid
    Dim bSolidsInterfere As Boolean
    Set solidObj = boxObj.CheckInterference(cylinderObj, True, bSolidsInterfere)
    Call color.SetRGB(200, 150, 244)
	   solidObj.TrueColor = color
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' You can now delete the box and cylinder in AutoCAD to
    ' see the interference solid more clearly.
               
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CheckInterference()
    ;; This example creates a box and a cylinder in model space.
    ;; It then finds the interference between the two solids and
    ;; creates a new solid from that interference.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))   
    
    ;; For ease of viewing, different colors are used for the box, the
    ;; cylinder, and the interference solid.
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq boxCenter (vlax-3d-point 5 5 0)
          boxLength 10
	         boxWidth 7
	         boxHeight 10)
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace boxCenter boxLength boxWidth boxHeight))
    (vla-SetRGB color 80 100 244)
    (vla-put-TrueColor boxObj color)
    
    ;; Define the cylinder
    (setq cylinderCenter (vlax-3d-point 0 0 0)
          cylinderRadius 5
	         cylinderHeight 20)
    
    ;; Create the Cylinder (3DSolid) object in model space
    (setq cylinderObj (vla-AddCylinder modelSpace cylinderCenter cylinderRadius cylinderHeight))
    (vla-SetRGB color 244 150 50)
    (vla-put-TrueColor cylinderObj color)
    
    ;; Find the interference between the two solids and create a new solid from it
    (setq solidObj (vla-CheckInterference boxObj cylinderObj :vlax-true :vlax-true))
    (vla-SetRGB color 200 150 244)
    (vla-put-TrueColor solidObj color)
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; You can now delete the box and cylinder in AutoCAD to
    ;; see the interference solid more clearly.
    (vlax-release-object color)
)
")
("Clear" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C9A0A555-B8B8-4CB3-86D4-EE8B7D5ED532"
"
Clear Method (ActiveX)
Clears the specified selection set of all items.
Supported platforms: Windows only
Signature
VBA:
object.Clear
object
    Type: SelectionSet
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
Items cleared from a selection set remain in the drawing; they are simply no longer associated to the selection set.
To clear a subset of the items in a selection set, use the RemoveItems method.
This method differs from the Delete method in that it does not remove objects from the drawing.
Examples
VBA:
Sub Example_Clear()
    ' This example creates a selection set and several objects.
    ' It then adds the objects to the selection set. It then
    ' clears the objects from the selection set.
    
    ' Create the new selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SELECTIONSET\")
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the selection set.
    ReDim ssobjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set ssobjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the selection set
    ssetObj.AddItems ssobjs
    GoSub LISTOBJS
    
    ' Clear the selection set
    ssetObj.Clear
    
    ThisDrawing.Regen acActiveViewport
    GoSub LISTOBJS
Exit Sub
LISTOBJS:
    
        ' List all the objects in the selection set
        If ssetObj.count = 0 Then
            MsgBox \"The selection set is empty\"
        Else
            For I = 0 To ssetObj.count - 1
                MsgBox \"The selection set contains: \" & ssetObj.Item(I).ObjectName
            Next
        End If
        Return
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Clear()
    ;; This example creates a selection set and several objects.
    ;; It then adds the objects to the selection set. It then
    ;; clears the objects from the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    ;; Create the new selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_SELECTIONSET\"))
    
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
				                              9 2
				                              3 5
				                             )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the selection set.
    (setq ssobjs (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count modelSpace) 1))))
    (setq I 0)
    (while (>= (- (vla-get-Count modelSpace) 1) I)
        (vlax-safearray-put-element ssobjs I (vla-Item modelSpace I))
        (setq I (1+ I))
    )
    
    ;; Add the array of objects to the selection set
    (vla-AddItems ssetObj ssobjs)
    ;; List all the objects in the selection set
    (if (> (vla-get-Count ssetObj) 0)
        (progn
	    (setq msg (strcat \"The selection set contains \" (itoa (vla-get-Count ssetObj)) \" objects of types: \"))
            (vlax-for obj ssetObj
                (setq msg (strcat msg \"\n\" (vla-get-ObjectName obj)))
            )
            (alert msg)	  
        )
    )
  
    ;; Clear the selection set
    (vla-Clear ssetObj)
    
    (vla-Regen doc acActiveViewport)
    ;; List all the objects in the selection set
    (if (= (vla-get-Count ssetObj) 0)
        (alert \"The selection set is empty.\")
    )
)
")
("ClearSubSelection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-863DF0B2-FDDA-48A9-9AAA-F5D7308C0B76"
"
ClearSubSelection Method (ActiveX)
Removes a subselection set of cells from a table.
Supported platforms: Windows only
Signature
VBA:
object.ClearSubSelection
object
    Type: Table
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ClearTableStyleOverrides" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-45E29270-0EA4-49C4-B718-D9A4A62AA9A7"
"
ClearTableStyleOverrides Method (ActiveX)
Clears table style overrides.
Supported platforms: Windows only
Signature
VBA:
object.ClearTableStyleOverrides flag
object
    Type: Table
    The object this method applies to.
flag
    Access: Input-only
    Type: Long; one of three integer values
        0: Deletes all table and cell overrides.
        1: Deletes all table overrides, but retains cell overrides.
        2: Deletes all cell overrides, but retains table overrides.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ClipBoundary" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D9612F57-7F1F-4CFD-B804-838B826C59FC"
"
ClipBoundary Method (ActiveX)
Specifies the clipping boundary for a raster image or an underlay.
Supported platforms: Windows only
Signature
VBA:
object.ClipBoundary PointsArray
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay, RasterImage, Wipeout
    The objects this method applies to.
PointsArray
    Access: Input-only
    Type: Variant (array of two-element array of doubles)
    An array of 2D WCS coordinates specifying the clipping boundary of a raster image or underlay.
Return Value (RetVal)
No return value.
Remarks
You can define a region of an image or underlay object for display and plotting by clipping the object. Multiple instances of the same object can have different boundaries.
The clipping boundary must be a closed 2D polygon or rectangle with vertices constrained to lie within the boundaries of the image or underlay.
To clip an image or underlay, the object's boundary must be visible. Use the ClippingEnabled property to turn the clipping boundary on or off.
Examples
VBA:
Sub Example_ClipBoundary()
    ' This example adds a raster image in model space.
    ' It then clips the image based on a clip boundary.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have the image, or if it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 2#
    rotationAngle = 0
    
    On Error Resume Next
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    If Err.Description = \"Filer error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    
    ZoomAll
    MsgBox \"Clip the image?\", , \"ClipBoundary Example\"
    
    ' Establish the clip boundary with an array of points
    Dim clipPoints(0 To 9) As Double
    clipPoints(0) = 6: clipPoints(1) = 6.75
    clipPoints(2) = 7: clipPoints(3) = 6
    clipPoints(4) = 6: clipPoints(5) = 5
    clipPoints(6) = 5: clipPoints(7) = 6
    clipPoints(8) = 6: clipPoints(9) = 6.75
    
    ' Clip the image
    rasterObj.clipBoundary clipPoints
    
    ' Enable the display of the clip
    rasterObj.ClippingEnabled = True
    ThisDrawing.Regen acActiveViewport
    MsgBox \"The image has been clipped.\", , \"ClipBoundary Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ClipBoundary()
    ;; This example adds a raster image in model space.
    ;; It then clips the image based on a clip boundary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 2
          rotationAngle 0)
    (if (/= (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") nil)
        (progn  
	    ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") insertionPoint scalefactor rotationAngle))
    
	    (vla-ZoomAll acadObj)
	    (alert \"Clip the image?\")
	    
	    ;; Establish the clip boundary with an array of points
	    (setq clipPoints (vlax-make-safearray vlax-vbDouble '(0 . 9)))
	    (vlax-safearray-fill clipPoints '(6 6.75
					                                  7 6
					                                  6 5
					                                  5 6
					                                  6 6.75
					                                 )
	    )
	    
	    ;; Clip the image
	    (vla-ClipBoundary rasterObj clipPoints)
	    
	    ;; Enable the display of the clip
	    (vla-put-ClippingEnabled rasterObj :vlax-true)
	    (vla-Regen doc acActiveViewport)
	    (alert \"The image has been clipped.\")
        )
        (alert (strcat imageName \" could not be found.\"))
    )    
)
")
("Close" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F0135870-7411-42CB-82E6-87509ADF3DFF"
"
Close Method (ActiveX)
Closes the specified drawing, or all open drawings.
Supported platforms: Windows only
Signature
VBA:
object.Close [SaveChanges] [, FileName]
object
    Type: Document, Documents
    The objects this method applies to.
SaveChanges
    Access: Input-only; optional
    Type: Variant
    Specifies if the drawing is to be saved or not. (Not applicable when called from Documents collection.)
        True: Save the drawing.
        False: Do not save the drawing.
FileName
    Access: Input-only; optional
    Type: String
    The name to assign to the drawing. If no name is provided when saving a drawing for the first time, the drawing will be saved using the VBA project information: ThisDrawing.Path\ThisDrawing.Name. (Not applicable when called from Documents collection.)
Return Value (RetVal)
No return value.
Remarks
If there are no changes to the drawing, SaveChanges and FileName are ignored. If there are changes to the drawing, SaveChanges specifies whether changes should be saved. The default value for the SaveChanges parameter is True.
    If SaveChanges is True and there is not yet a file name associated with a drawing, then the FileName argument is used. If FileName is omitted, or if calling this method from the Documents collection, an error will be issued.
    If SaveChanges is False, then the drawing is closed and the changes are not saved.
Calling this method from the Documents collection in MDI mode will close all open drawings. To close a single drawing, call this method from the drawing to be closed.
You cannot close a drawing from inside an event handler for that drawing.
Note: Closing a drawing destroys the Document object. Never try to reference an object once it has been destroyed, or in this case, closed. In-process clients (VBA macros) may notice that objects are not destroyed until the subroutine is exited. However, references to destroyed objects are not recommended at all, even in the in-process code.
Examples
VBA:
Sub Example_Close()
    ' This example cycles through the documents collection
    ' and closes all open drawings using the Close method.
    Dim DOC As AcadDocument
    
    ' If there are no open documents, then exit
    If Documents.count = 0 Then
        MsgBox \"There are no open documents!\"
        Exit Sub
    End If
    
    ' Close all open documents
    For Each DOC In Documents
        If MsgBox(\"Do you wish to close the document: \" & DOC.WindowTitle, vbYesNo & vbQuestion) = vbYes Then
            If DOC.FullName <> \"\" Then
                DOC.Close
            Else
                MsgBox DOC.name & \" has not been saved yet, so it will not be closed.\"
            End If
        End If
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Close()
    ;; This example cycles through the documents collection
    ;; and closes all open drawings using the Close method
    ;; except the current drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq curDoc (vla-get-ActiveDocument acadObj))
    (setq docs (vla-get-Documents acadObj))
    ;; Close all open documents and discard changes, except for the current drawing
    (vlax-for doc docs
        (if (/= (vla-get-Name doc) (vla-get-Name curDoc))
	    (progn
	        (alert (strcat \"Closing \" (vla-get-Name doc) \" file.\"))
                (vla-Close doc :vlax-false)
	    )
        )
    )
)
")
("ConvertToAnonymousBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-449F4F02-F990-42D1-9A0C-91ED46E24609"
"
ConvertToAnonymousBlock Method (ActiveX)
Converts a dynamic block to a regular anonymous block.
Supported platforms: Windows only
Signature
VBA:
object.ConvertToAnonymousBlock
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this method applies to.
Return Value (RetVal)
No return value.
Remarks
The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ConvertToStaticBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-44279924-EDF6-41AB-B987-A6F6EDA7A883"
"
ConvertToStaticBlock Method (ActiveX)
Converts a dynamic block to a regular named block.
Supported platforms: Windows only
Signature
VBA:
object.ConvertToStaticBlock newBlockName
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this method applies to.
newBlockName
    Access: Input-only
    Type: String
    The name for the block.
Return Value (RetVal)
No return value.
Remarks
The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Copy" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B036C50B-F504-486F-8179-85655206916E"
"
Copy Method (ActiveX)
Duplicates the given object to the same location.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Copy
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
Return Value (RetVal)
Type: All drawing objects, AttributeReference, Dimension
The newly created duplicate object.
Remarks
AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
Examples
VBA:
Sub Example_Copy()
    ' This example creates a circle and then copies
    ' that circle. The new circle is then moved.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 0.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    MsgBox \"Copy the circle.\", , \"Copy Example\"
    
    ' Copy the circle
    Dim copyCircleObj As AcadCircle
    Set copyCircleObj = circleObj.Copy()
    
    ' Define the points that make up the move vector
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 2: point2(1) = 0: point2(2) = 0
        
    MsgBox \"Move the copied circle 2 units in the X direction.\", , \"Copy Example\"
    
    ' Move the circle and color it
    copyCircleObj.Move point1, point2
    
    ZoomAll
    MsgBox \"Move completed.\", , \"Copy Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Copy()
    ;; This example creates a circle and then copies
    ;; that circle. The new circle is then moved.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)
          radius 0.5)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    (alert \"Copy the circle.\")
    
    ;; Copy the circle
    (setq copyCircleObj (vla-Copy circleObj))
    
    ;; Define the points that make up the move vector
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 2 0 0))
        
    (alert \"Move the copied circle 2 units in the X direction.\")
    
    ;; Move the circle and color it
    (vla-Move copyCircleObj point1 point2)
    
    (vla-ZoomAll acadObj)
    (alert \"Move completed.\")
)
")
("CopyFrom" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1C8C71DB-C258-403B-8A41-07CE45AEC087"
"
CopyFrom Method (ActiveX)
Copies the settings for a dimension style, layout, or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.CopyFrom SourceObject
object
    Type: DimStyle, Layout, PlotConfiguration
    The objects this method applies to.
SourceObject
    Access: Input-only
    Type: DimStyle, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Document, Layout, Leader, PlotConfiguration
    The source object to be copied.
    Layout and PlotConfiguration: The source object must be a PlotConfiguration object.
    DimStyle: The source object must be either a DimStyle, Document, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, or Leader.
Return Value (RetVal)
No return value.
Remarks
DimStyle: This method allows users to copy dimension style data into an existing dimension style from three different types of sources.
    If SourceObject is a dimension (this includes all dimension objects), Tolerance, or Leader object, this method copies the style for that object plus any object overrides.
    If SourceObject is a DimStyle object, this method copies the style data from that dimension style.
    If SourceObject is a Document object, this method copies the active dimension style settings for the drawing plus any drawing overrides.
Examples
VBA:
Sub Example_CopyFrom()
    ' This example will create two new plot configurations, NewPC1 and NewPC2, and will use
    ' the CopyFrom method to duplicate the settings in the first plot configuration
    ' to the second plot configuration.
    Dim PlotConfigurations As AcadPlotConfigurations
    Dim PlotConfiguration As AcadPlotConfiguration
    Dim NewPC1 As AcadPlotConfiguration, NewPC2 As AcadPlotConfiguration
    
    ' Get PlotConfigurations collection from document object
    Set PlotConfigurations = ThisDrawing.PlotConfigurations
    
    ' Add NewPC1 and customize some of the properties
    Set NewPC1 = PlotConfigurations.Add(\"NEW_CONFIGURATION1\")
    NewPC1.PlotRotation = ac270degrees
    NewPC1.PlotHidden = True
    NewPC1.PaperUnits = acMillimeters
    
    ' Add NewPC2 and leave default values intact
    Set NewPC2 = PlotConfigurations.Add(\"NEW_CONFIGURATION2\")
    
    ' Show NewPC2 settings before we copy information from NewPC1
    GoSub VIEWPC2SETTINGS
    
    ' Copy setting information from NewPC1 to NewPC2
    NewPC2.CopyFrom NewPC1
    NewPC2.name = \"NEW_CONFIGURATION2\"
    
    ' Show NewPC2 settings after we copy information from NewPC1
    GoSub VIEWPC2SETTINGS
    
    Exit Sub
    
VIEWPC2SETTINGS:
    MsgBox \"The settings for NEW_CONFIGURATION2 are: \" & vbCrLf & _
           \"Plot Rotation: \" & NewPC2.PlotRotation & vbCrLf & _
           \"Plot Hidden: \" & NewPC2.PlotHidden & vbCrLf & _
           \"Paper Units: \" & NewPC2.PaperUnits
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CopyFrom()
    ;; This example will create two new plot configurations, NewPC1 and NewPC2, and will use
    ;; the CopyFrom method to duplicate the settings in the first plot configuration
    ;; to the second plot configuration.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Get PlotConfigurations collection from document object
    (setq PlotConfigurations (vla-get-PlotConfigurations doc))
    
    ;; Add NewPC1 and customize some of the properties
    (setq NewPC1 (vla-Add PlotConfigurations \"NEW_CONFIGURATION1\"))
    (vla-put-PlotRotation NewPC1 ac270degrees)
    (vla-put-PlotHidden NewPC1 :vlax-true)
    (vla-put-PaperUnits NewPC1 acMillimeters)
    
    ;; Add NewPC2 and leave default values intact
    (setq NewPC2 (vla-Add PlotConfigurations \"NEW_CONFIGURATION2\"))
    
    ;; Show NewPC2 settings before we copy information from NewPC1
    (alert (strcat \"The settings for NEW_CONFIGURATION2 are: \"
                   \"\nPlot Rotation: \" (itoa (vla-get-PlotRotation NewPC2))
                   \"\nPlot Hidden: \" (if (= (vla-get-PlotHidden NewPC2) :vlax-true) \"True\" \"False\")
                   \"\nPaper Units: \" (itoa (vla-get-PaperUnits NewPC2))
	          )
    )
    
    ;; Copy setting information from NewPC1 to NewPC2
    (vla-CopyFrom NewPC2 NewPC1)
    (vla-put-Name NewPC2 \"NEW_CONFIGURATION2\")
    ;; Show NewPC2 settings after we copy information from NewPC1
    (alert (strcat \"The settings for NEW_CONFIGURATION2 are: \"
                   \"\nPlot Rotation: \" (itoa (vla-get-PlotRotation NewPC2))
                   \"\nPlot Hidden: \" (if (= (vla-get-PlotHidden NewPC2) :vlax-true) \"True\" \"False\")
                   \"\nPaper Units: \" (itoa (vla-get-PaperUnits NewPC2))
	          )
    )
)
")
("CopyObjects" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D9E0A89C-2D81-4141-8B88-B9AC6EAABD62"
"
CopyObjects Method (ActiveX)
Duplicates multiple objects (deep cloning).
Supported platforms: Windows only
Signature
VBA:
RetVal = object.CopyObjects(Objects [, Owner] [, IDPairs])
object
    Type: Database, Document
    The objects this method applies to.
Objects
    Access: Input-only
    Type: Variant (array of Objects)
    The array of primary objects to be copied. All the objects must have the same owner, and the owner must belong to the database or document that is calling this method.
Owner
    Access: Input-only; optional
    Type: Variant (a single object)
    The new owner for the copied objects. If no owner is specified, the objects will be created with the same owner as the objects in the Objects array.
IDPairs
    Access: Input-output; optional
    Type: Variant (array of IDPair objects)
    Information on what happened during the copy and translation process.
        Input: an empty variant.
        Output: an array of IDPair objects.
Return Value (RetVal)
Type: Variant (array of objects)
An array of newly created duplicate objects. Only primary objects are returned in this array. For more information on what occurred during the CopyObjects operation, or a list of objects owned by primary objects that were also copied, consult the IDPairs parameter.
Remarks
To copy objects to another open drawing, set the Owner parameter to the other drawing's model space.
During the CopyObjects operation, objects that are owned or referenced by the primary objects in the Objects parameter will also be copied.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
Examples
VBA:
Sub Example_CopyObjects()
    ' This example creates a Circle object and uses the CopyObjects
    ' method to make a copy of the new Circle.
    Dim DOC1 As AcadDocument
    Dim circleObj1 As AcadCircle, circleObj2 As AcadCircle
    Dim circleObj1Copy As AcadCircle, circleObj2Copy As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius1 As Double, radius2 As Double
    Dim radius1Copy As Double, radius2Copy As Double
    Dim objCollection(0 To 1) As Object
    Dim retObjects As Variant
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius1 = 5#: radius2 = 7#
    radius1Copy = 1#: radius2Copy = 2#
    
    ' Create a new drawing
    Set DOC1 = Documents.Add
    
    ' Add two circles to the drawing
    Set circleObj1 = DOC1.ModelSpace.AddCircle(centerPoint, radius1)
    Set circleObj2 = DOC1.ModelSpace.AddCircle(centerPoint, radius2)
    ThisDrawing.Application.ZoomAll
    
    ' Copy objects
    '
    ' First put the objects to be copied into a form compatible with CopyObjects
    Set objCollection(0) = circleObj1
    Set objCollection(1) = circleObj2
    
    ' Copy object and get back a collection of the new objects (copies)
    retObjects = DOC1.CopyObjects(objCollection)
    
    ' Get newly created object and apply new properties to the copies
    Set circleObj1Copy = retObjects(0)
    Set circleObj2Copy = retObjects(1)
    
    circleObj1Copy.radius = radius1Copy
    circleObj2Copy.radius = radius2Copy
        
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"Circles copied.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CopyObjects()
    ;; This example creates a Circle object and uses the CopyObjects
    ;; method to make a copy of the new Circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Load the ObjectDBX library
    (if (= acLibImport nil)
	       (progn
	           (vlax-import-type-library :tlb-filename \"C:\\Program Files\\Common Files\\Autodesk Shared\\axdb24enu.tlb\"
	                                     :methods-prefix \"acdbm-\"
	                                     :properties-prefix \"acdbp-\"
	                                     :constants-prefix \"acdbc-\"
	           )
            (setq acLibImport T)
        )
    )
    ;; Create a reference to the ObjectDBX object
    (setq acdbObj (vlax-create-object \"ObjectDBX.AxDbDocument.24\"))
    ;; Open an external drawing file
    (acdbm-open acdbObj (findfile \".\\Sample\\VBA\\Tower.dwg\"))
    ;; Add two circles to the drawing
    (setq objCollection (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count (vla-get-ModelSpace acdbObj)) 1)))
	  count 0)
    ;; Copy objects
    (vlax-for eachObj (vla-get-ModelSpace acdbObj)
        (vlax-safearray-put-element objCollection count eachObj)
        (setq count (1+ count))
    )
     
    ;; Copy object and get back a collection of the new objects (copies)
    (setq retObjects (vla-CopyObjects acdbObj objCollection (vla-get-ModelSpace (vla-get-Database doc))))
    
    (vla-ZoomAll acadObj)
    
    (alert \"Model space objects copied.\")
    ;; Close the in memory drawing
    (vlax-release-object acdbObj)
)
")
("CopyProfile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0EE58213-4914-44C0-AE57-41291584B951"
"
CopyProfile Method (ActiveX)
Copies the specified profile.
Supported platforms: Windows only
Signature
VBA:
object.CopyProfile oldProfileName, newProfileName
object
    Type: PreferencesProfiles
    The object this method applies to.
oldProfileName
    Access: Input-only
    Type: String
    The name of the profile to copy.
newProfileName
    Access: Input-only
    Type: String
    The name of the new profile to be created.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CopyProfile()
    ' This example copies an existing profile.
    ' You can see the new profile under Options/Profiles
    '
    ' *Note: This example relies on the default profile \"<<Unnamed Profile>>\".
    ' If this profile has already been renamed or removed, be sure to change the
    ' name of the SourceProfile to one that currently exists.
    
    Dim ACADPref As AcadPreferencesProfiles
    Dim SourceProfile As String, DestinationProfile As String
    
    ' Use the PreferencesProfiles object
    Set ACADPref = ThisDrawing.Application.Preferences.Profiles
    
    ' Copy the default profile
    On Error GoTo ERRORTRAP
    
    SourceProfile = \"<<Unnamed Profile>>\"
    DestinationProfile = \"NEW_PROFILE\"
    
    ACADPref.CopyProfile SourceProfile, DestinationProfile
    
    MsgBox \"We have just copied the existing profile \" & SourceProfile & \" to \" & DestinationProfile
    
    Exit Sub
    
ERRORTRAP:
    If Err.Description <> \"\" Then
        MsgBox \"The default profile '\" & SourceProfile & \"' cannot be found, please use a different source profile.\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CopyProfile()
    ;; This example copies an existing profile.
    ;; You can see the new profile under Options/Profiles
    ;;
    ;; *Note: This example relies on the default profile \"<<Unnamed Profile>>\".
    ;; If this profile has already been renamed or removed, be sure to change the
    ;; name of the SourceProfile to one that currently exists.
    (setq acadObj (vlax-get-acad-object))
    (setq preferences (vla-get-Preferences acadObj))
  
    ;; Use the PreferencesProfiles object
    (setq ACADPref (vla-get-Profiles preferences))
    
    (setq SourceProfile \"<<Unnamed Profile>>\"
          DestinationProfile \"NEW_PROFILE\")
    
    (vla-CopyProfile ACADPref SourceProfile DestinationProfile)
    
    (alert (strcat \"We have just copied the existing profile \" SourceProfile \" to \" DestinationProfile))
)
")
("CreateCellStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BF7A9530-CFDC-4AA4-8D0D-95BD64BFF1D1"
"
CreateCellStyle Method (ActiveX)
Creates a cell style with the given name.
Supported platforms: Windows only
Signature
VBA:
object.CreateCellStyle StringCellStyle
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    New cell style name.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("CreateCellStyleFromStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F268E12D-54F4-4F47-B64E-4EE7AAA818BA"
"
CreateCellStyleFromStyle Method (ActiveX)
Creates a cell style from a given name.
Supported platforms: Windows only
Signature
VBA:
object.CreateCellStyleFromStyle StringCellStyle, StringSourceCellStyle
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    New cell style name.
StringSourceCellStyle
    Access: Input-only
    Type: String
    Source cell style name.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("CreateContent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-25A0DF32-DDD4-4A95-AD6D-E7A0C1AF66E0"
"
CreateContent Method (ActiveX)
Creates new content in a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.CreateContent(nRow, nCol, nIndex)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to check.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to check.
nIndex
    Access: Input-only
    Type: Long
    Index at which to create the new context.
Return Value (RetVal)
Type: Long
An ID for the created content.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ContentChange()
    ' This example adds a table in model space
    ' and manipulates its contents
    
    ' Note: One content is created for each cell by default;
    ' this function need to be called only to create additional contents.
    
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As IAcadTable
    Dim sID As Long
    Dim newSID As Long
    Dim row As Long
    Dim col As Long
    
    ' Creates arbitrary cell points to check
    row = 2
    col = 2
    
    ' Creates the table with an arbitrary number of cells
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox \"There is no content in the cell, but it is editable\"
        End If
    End If
    ' Create some content in an arbitrary cell
    sID = MyTable.CreateContent(row, col, 8)
    MsgBox \"The content ID is \" & sID
 
    ' Move the content to another index
    MyTable.MoveContent row, col, sID, 4
    
    ' Check that the content has been deleted
    MyTable.DeleteContent row, col
    
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox \"There is no content in the cell, but it is editable\"
        End If
    End If
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ContentChange()
    ;; This example adds a table in model space
    ;; and manipulates its contents
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Note: One content is created for each cell by default;
    ;; this function need to be called only to create additional contents.
    
    (setq pt (vlax-3d-point 0 0 0))
    
    ;; Creates arbitrary cell points to check
    (setq row 2
          col 2)
    
    ;; Creates the table with an arbitrary number of cells
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    (vla-SetTextHeight MyTable (+ acDataRow acHeaderRow acTitleRow) 1)
  
    (vla-Regen doc :vlax-true)
    (vla-ZoomExtents acadObj)
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert \"There is no content in the cell, but it is editable\")
        )
    )
    ;; Create some content in an arbitrary cell
    (setq sID1 (vla-CreateContent MyTable row col 0))
    (setq sID2 (vla-CreateContent MyTable row col 1))
    (vla-SetTextString MyTable row col sID1 \"Value1\")
    (vla-SetTextString MyTable row col sID2 \"Value2\")
    (vla-Regen doc :vlax-true)
  
    (alert (strcat \"The content IDs are \"
		   \"\nValue1: \" (itoa sID1)
		   \"\nValue2: \" (itoa sID2)))
 
    ;; Move the content to another index
    (vla-MoveContent MyTable row col sID2 sID1)
    (vla-Regen doc :vlax-true)
    (alert \"Content order changed\")
  
    ;  Check that the content has been deleted
    (vla-DeleteContent MyTable row col)
    (vla-Regen doc :vlax-true)
    
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert \"There is no content in the cell, but it is editable\")
        )
    )
)
")
("CreateEntry" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B523B6C0-D9F3-4645-BF7C-2EF2C50D28A8"
"
CreateEntry Method (ActiveX)
Creates a new entry in the File Dependency List. (Obsolete)
Supported platforms: Windows only
Signature
VBA:
object.CreateEntry Feature, FullFileName, AffectsGraphics, noIncrement
object
    Type: FileDependencies
    The object this method applies to.
Feature
    Access: Input-only
    Type: String
    Description of the application or feature creating the entry.
FullFileName
    Access: Input-only
    Type: String
    Name of the file to be stored in the File Dependency List (must be an existing file).
AffectsGraphics
    Access: Input-only
    Type: Boolean
    True means that the entry affects the on-screen view of the drawing file, specifically the graphics cache; false means it does not affect the on-screen view.
noIncrement
    Access:Input-only
    Type: Boolean
    True does not increment the reference count on existing entries; false increments the reference count when an existing entry is added.
Return Value (RetVal)
No return value.
Remarks
This method takes a string indicating a feature description. The string is stored with the File Dependency List (FDL) entry and identifies the application or feature that created this entry, such as Acad::xref. No unique-application-name checking is done on the feature string. This method also takes a parameter to indicate the name of the file stored in the FDL, and the stored path, if any, can be included.
If no path is included, AutoCAD searches for the file in the current directory and the AutoCAD support file search path, and the found is stored with the entry. If the file cannot be found or if it cannot be opened, no entry is created and 0 is returned. If the file is found, its time/date and file size are stored with the entry, and a unique index is assigned to the entry and is returned.
You can use this method to recreate a set of entries by setting noIncrement to True. This prevents the increment of the reference count when an entry already is in the FDL. If noIncrement is set to False, then the same entry can be added multiple times. In this case, the reference count is incremented for the entry to record the number of times the entry is referenced in the FDL. Duplicate records are never created.
Release Information
Releases: AutoCAD 2000 through AutoCAD 2017
    This method is no longer supported for use with the FileDependencies object.
Examples
VBA:
Sub Example_CreateEntry()
    ' This example adds an entry to the File Dependency List, returns its Index, updates
    ' the entry, and then removes the entry.
    Dim objFDLCol As AutoCAD.AcadFileDependencies
    Dim objFDL As AutoCAD.AcadFileDependency
    
    Set objFDLCol = ThisDrawing.FileDependencies
    MsgBox \"The number of entries in the File Dependency List is \" & objFDLCol.Count & \".\"
    
    Dim FDLIndex As Long
    FDLIndex = objFDLCol.CreateEntry(\"acad:xref\", \"c:\referenced.dwg\", True, True)
    MsgBox \"The number of entries in the File Dependency List is \" & objFDLCol.Count & \".\"
    
    Dim IndexNumber As Long
    IndexNumber = objFDLCol.IndexOf(\"acad:xref\", \"c:\referenced.dwg\")
    Dim IndexString As String
    IndexString = CStr(IndexNumber)
    MsgBox \"The index of the new entry is \" & IndexString & \".\"
    
    objFDLCol.UpdateEntry FDLIndex
    
    objFDLCol.RemoveEntry FDLIndex, True
    MsgBox \"The number of entries in the File Dependency List is \" & objFDLCol.Count & \".\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CreateEntry()
    ;; This example adds an entry to the File Dependency List, returns its Index, updates
    ;; the entry, and then removes the entry.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq objFDLCol (vla-get-FileDependencies doc))
    (alert (strcat \"The number of entries in the File Dependency List is \" (itoa (vla-get-Count objFDLCol)) \".\"))
    
    (setq FDLIndex (vla-CreateEntry objFDLCol \"acad:xref\" (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\Wall Base.dwg\") :vlax-true :vlax-true))
    (alert (strcat \"The number of entries in the File Dependency List is \" (itoa (vla-get-Count objFDLCol)) \".\"))
    
    (setq IndexNumber (vla-IndexOf objFDLCol \"acad:xref\" (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\Wall Base.dwg\")))
    (setq IndexString (itoa IndexNumber))
    (alert (strcat \"The index of the new entry is \" IndexString \".\"))
    
    (vla-UpdateEntry objFDLCol FDLIndex)
    
    (vla-RemoveEntry objFDLCol FDLIndex :vlax-true)
    (alert (strcat \"The number of entries in the File Dependency List is \" (itoa (vla-get-Count objFDLCol)) \".\"))
)
")
("CreateJog" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D1CB7AEF-4199-4889-AB76-423A689FC072"
"
CreateJog Method (ActiveX)
Creates a jog on the section plane.
Supported platforms: Windows only
Signature
VBA:
object.CreateJog varPt
object
    Type: Section
    The object this method applies to.
varPt
    Access: Input-only
    Type: Variant
    Point at which to create the jog.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("CreateTypedArray" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A40B9E8B-47D0-4D7A-BDAF-8B28B26B3328"
"
CreateTypedArray Method (ActiveX)
Creates a variant that contains an array of typed arguments.
Supported platforms: Windows only
Signature
VBA:
object.CreateTypedArray VarArr, Type, Value1, [value2, value3, ...valueN]
object
    Type: Utility
    The object this method applies to.
VarArr
    Access: Output-only
    Type: Variant
    The array of values as a variant.
Type
    Access: Input-only
    Type: VbVarType enum
    The type of values you are supplying.
    vbBoolean, vbInteger, vbLong, vbSingle, or vbDouble.
Value1 [Value2, ...ValueN]
    Access: Input-only
    Type: Of the type specified in the Type parameter above.
    The value(s) to be included in the variant.
Return Value (RetVal)
No return value.
Remarks
The resulting variant can be passed into any AutoCAD method or property that accepts an array of numbers as a variant.
This method can only be accessed using late-binding programming techniques. To use this method, define the Utility object as Object (Dim myObj As Object), not as AcadUtility.
Examples
VBA:
Sub Example_CreateTypedArray()
    ' This example creates a spline from variant arrays created
    ' from doubles using the CreateTypedArray method.
    ' Note that this method must be late bound. This is done
    ' by declaring the utility object (utilObj) as Object,
    ' not as AcadUtility.
        
    Dim splineObj As AcadSpline
    
    ' Even though these are arrays, they are declared as variants
    Dim startTan As Variant
    Dim endTan As Variant
    Dim fitPoints As Variant
    
    Dim utilObj As Object   ' Late bound object
    Set utilObj = ThisDrawing.Utility
    
    ' Define the spline.
    utilObj.CreateTypedArray startTan, vbDouble, 0.5, 0.5, 0
    utilObj.CreateTypedArray endTan, vbDouble, 0.5, 0.5, 0
    utilObj.CreateTypedArray fitPoints, vbDouble, 0, 0, 0, 5, 5, 0, 10, 0, 0
    
    ' Create the spline
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CreateTypedArray()
    ;; This example creates a spline from variant arrays created
    ;; from doubles using the CreateTypedArray method.
    ;; Note that this method must be late bound. This is done
    ;; by declaring the utility object (utilObj) as Object,
    ;; not as AcadUtility.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    (setq utilObj (vla-get-Utility doc))
    
    ;; Define the spline.
    (vla-CreateTypedArray utilObj 'startTan vlax-vbDouble 0.5 0.5 0)
    (vla-CreateTypedArray utilObj 'endTan vlax-vbDouble 0.5 0.5 0)
    (vla-CreateTypedArray utilObj 'fitPoints vlax-vbDouble 0 0 0 5 5 0 10 0 0)
    
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
)
")
("Delete" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-167FBA5F-C3F3-4195-A170-02E5E46EC797"
"
Delete Method (ActiveX)
Deletes a specified object or a set of saved layer settings.
Supported platforms: Windows only
Signature
VBA:
object.Delete
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, DimStyle, Group, Hyperlink, Layer, LayerStateManager, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, PopupMenuItem, RegisteredApplication, SelectionSet, TableStyle, TextStyle, Toolbar, ToolbarItem, UCS, View, Viewport, XRecord
    The objects this method applies to.
Return Value (RetVal)
No return value.
Remarks
When you delete an object in a collection, all remaining items in the collection are reassigned a new index based on the current count. You should therefore avoid loops that delete an object while iterating through the collection. For example, the following VBA code will result in a runtime error:
For i = 0 To ThisDrawing.Groups.Count - 1
    ThisDrawing.Groups.Item(i).Delete
Next I
Instead, use the following VBA code to delete all members in a collection:
For Each obj In ThisDrawing.Groups
    obj.Delete
Next obj
You can also use the following VBA code to delete a single member of a collection:
ThisDrawing.Groups.Item(\"group1\").Delete
An error will result if you attempt to delete a collection object.
ToolbarItem: You can only add or remove toolbar items when the toolbar is visible.
LayerStateManager: This object takes an argument, Name, which is a string representing the layer state to be deleted.
Examples
VBA:
Sub Example_Delete()
    ' This example creates a Layer named \"TEST\".
    ' It then iterates the Layers collection and displays
    ' the names of the available layers.
    ' It then deletes the layer \"TEST\", and again iterates
    ' the layers collection and displays the names of
    ' available layers.
    
    Dim layerObj As AcadLayer
    
    ' Create the new layer
    Set layerObj = ThisDrawing.Layers.Add(\"TEST\")
    
    ' Display the names of the layers in the drawing
    GoSub DISPLAYLAYERS
    
    ' Delete the layer \"TEST\"
    layerObj.Delete
    
    ' Display the names of the layers remaining in the drawing
    GoSub DISPLAYLAYERS
    
    Exit Sub
    
DISPLAYLAYERS:
    Dim entry As AcadLayer
    Dim layerNames As String
    layerNames = \"\"
    For Each entry In ThisDrawing.Layers
       layerNames = layerNames & entry.name & \", \"
    Next
    MsgBox \"The drawing consists of the following layers:\" & vbCr & layerNames, , \"Delete Example\"
    Return
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Delete()
    ;; This example creates a Layer named \"TEST\".
    ;; It then iterates the Layers collection and displays
    ;; the names of the available layers.
    ;; It then deletes the layer \"TEST\", and again iterates
    ;; the layers collection and displays the names of
    ;; available layers.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the new layer
    (setq layerObj (vla-Add (vla-get-Layers doc) \"TEST\"))
    
    ;; Display the names of the layers in the drawing
    (setq layerNames \"\")
    (vlax-for entry (vla-get-Layers doc)
       (setq layerNames (strcat layerNames (vla-get-Name entry) \", \"))
    )
    (alert (strcat \"The drawing consists of the following layers: \n\" layerNames))
    
    ;; Delete the layer \"TEST\"
    (vla-Delete layerObj)
    
    ;; Display the names of the layers remaining in the drawing   
    (setq layerNames \"\")
    (vlax-for entry (vla-get-Layers doc)
       (setq layerNames (strcat layerNames (vla-get-Name entry) \", \"))
    )
    (alert (strcat \"The drawing consists of the following layers: \n\" layerNames))
)
")
("DeleteCellContent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9E2F0407-FA3F-49A2-8266-78543A2FD85B"
"
DeleteCellContent Method (ActiveX)
Deletes the cell content in the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.DeleteCellContent(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DeleteCellStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8193D4BC-2848-4E47-9F8D-D93A451AAAC1"
"
DeleteCellStyle Method (ActiveX)
Deletes a cell style.
Supported platforms: Windows only
Signature
VBA:
object.DeleteCellStyle StringCellStyle
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    Cell style name.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("DeleteColumns" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9402CDCF-84F6-445C-B7A0-C80D3F368361"
"
DeleteColumns Method (ActiveX)
Deletes columns from a table.
Supported platforms: Windows only
Signature
VBA:
object.DeleteColumns col, cols
object
    Type: Table
    The object this method applies to.
col
    Access: Input-only
    Type: Long
    The column index.
cols
    Access: Input-only
    Type: Long
    The number of columns to delete from the table.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DeleteConfiguration" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1CE02888-B4E7-44D2-9960-FF5CFB8C5B78"
"
DeleteConfiguration Method (ActiveX)
Deletes a viewport configuration.
Supported platforms: Windows only
Signature
VBA:
object.DeleteConfiguration Name
object
    Type: Viewports
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the viewport configuration to delete.
Return Value (RetVal)
No return value.
Remarks
A viewport configuration consists of a single viewport that has been split using the Split method. Once a viewport has been split, the resulting viewports are considered a viewport configuration. All the viewports in the configuration have the same name as the original viewport before the split.
Examples
VBA:
Sub Example_DeleteConfiguration()
    ' This example creates a new viewport and splits
    ' the viewport into 4 windows.
    ' It then deletes the viewport configuration
    Dim oldViewport As AcadViewport
    Set oldViewport = ThisDrawing.ActiveViewport
       
    ' Create a new viewport and make it active
    Dim newViewport As AcadViewport
    Set newViewport = ThisDrawing.Viewports.Add(\"TESTVIEWPORT\")
    ThisDrawing.ActiveViewport = newViewport
    
    ' Split the viewport in 4 windows
    newViewport.Split acViewport4
    
    ' Make the newly split viewport active
    ThisDrawing.ActiveViewport = newViewport
    MsgBox \"The viewport configuration split into 4 windows.\"
    ' Delete the viewport configuration
    ThisDrawing.ActiveViewport = oldViewport
    ThisDrawing.Viewports.DeleteConfiguration (\"TESTVIEWPORT\")
    ThisDrawing.Regen acAllViewports
    MsgBox \"The viewport configuration has been deleted.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DeleteConfiguration()
    ;; This example creates a new viewport and splits
    ;; the viewport into 4 windows.
    ;; It then deletes the viewport configuration
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq oldViewport (vla-Add (vla-get-Viewports doc) \"CurrentViewport\"))
       
    ;; Create a new viewport and make it active
    (setq newViewport (vla-Add (vla-get-Viewports doc) \"NewViewport\"))
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Split the viewport in 4 windows
    (vla-Split newViewport acViewport4)
    
    ;; Make the newly split viewport active
    (vla-put-ActiveViewport doc newViewport)
    (alert \"The viewport configuration split into 4 windows.\")
    ;; Delete the viewport configuration
    (vla-put-ActiveViewport doc oldViewport)
    (vla-DeleteConfiguration (vla-get-Viewports doc) \"NewViewport\")
    (vla-DeleteConfiguration (vla-get-Viewports doc) \"CurrentViewport\")
    (vla-Regen doc acAllViewports)
    (alert \"The viewport configurations have been deleted and original viewport restored.\")
)
")
("DeleteContent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6993A7FF-8296-4CDF-9EC2-378DEE7C8C54"
"
DeleteContent Method (ActiveX)
Deletes content of a cell.
Supported platforms: Windows only
Signature
VBA:
object.DeleteContent nRow, nCol
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to delete.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to delete.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ContentChange()
    ' This example adds a table in model space
    ' and manipulates its contents
    
    ' Note: One content is created for each cell by default;
    ' this function need to be called only to create additional contents.
    
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As IAcadTable
    Dim sID As Long
    Dim newSID As Long
    Dim row As Long
    Dim col As Long
    
    ' Creates arbitrary cell points to check
    row = 2
    col = 2
    
    ' Creates the table with an arbitrary number of cells
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox \"There is no content in the cell, but it is editable\"
        End If
    End If
    ' Create some content in an arbitrary cell
    sID = MyTable.CreateContent(row, col, 8)
    MsgBox \"The content ID is \" & sID
 
    ' Move the content to another index
    MyTable.MoveContent row, col, sID, 4
    
    ' Check that the content has been deleted
    MyTable.DeleteContent row, col
    
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox \"There is no content in the cell, but it is editable\"
        End If
    End If
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ContentChange()
    ;; This example adds a table in model space
    ;; and manipulates its contents
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Note: One content is created for each cell by default;
    ;; this function need to be called only to create additional contents.
    
    (setq pt (vlax-3d-point 0 0 0))
    
    ;; Creates arbitrary cell points to check
    (setq row 2
          col 2)
    
    ;; Creates the table with an arbitrary number of cells
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    (vla-SetTextHeight MyTable (+ acDataRow acHeaderRow acTitleRow) 1)
  
    (vla-Regen doc :vlax-true)
    (vla-ZoomExtents acadObj)
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert \"There is no content in the cell, but it is editable\")
        )
    )
    ;; Create some content in an arbitrary cell
    (setq sID1 (vla-CreateContent MyTable row col 0))
    (setq sID2 (vla-CreateContent MyTable row col 1))
    (vla-SetTextString MyTable row col sID1 \"Value1\")
    (vla-SetTextString MyTable row col sID2 \"Value2\")
    (vla-Regen doc :vlax-true)
  
    (alert (strcat \"The content IDs are \"
		   \"\nValue1: \" (itoa sID1)
		   \"\nValue2: \" (itoa sID2)))
 
    ;; Move the content to another index
    (vla-MoveContent MyTable row col sID2 sID1)
    (vla-Regen doc :vlax-true)
    (alert \"Content order changed\")
  
    ;  Check that the content has been deleted
    (vla-DeleteContent MyTable row col)
    (vla-Regen doc :vlax-true)
    
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert \"There is no content in the cell, but it is editable\")
        )
    )
)
")
("DeleteFitPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8C677C52-A2E6-41B0-A013-47FC992B19AE"
"
DeleteFitPoint Method (ActiveX)
Deletes the fit point of a spline at a given index.
Supported platforms: Windows only
Signature
VBA:
object.DeleteFitPoint Index
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Integer
    An index position in the fit point list. Positive integers between 0 and N-1, where N is the total number of fit points for the spline.
Return Value (RetVal)
No return value.
Remarks
AutoCAD removes the fit point and refits the spline through the remaining points. There must be at least three fit points in the spline for this method to succeed. To view the changes, use the Update or Regen method.
Examples
VBA:
Sub Example_DeleteFitPoint()
    ' This example creates a spline object in model space.
    ' It then deletes a fit point from the spline.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    MsgBox \"Delete the first fit point\", , \"DeleteFitPoint Example\"
    
    ' Delete the first fit point in the spline
    splineObj.DeleteFitPoint 0
    ThisDrawing.Regen True
    MsgBox \"A fit point has been deleted at Index: 0\", , \"DeleteFitPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DeleteFitPoint()
    ;; This example creates a spline object in model space.
    ;; It then deletes a fit point from the spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
				                                 5 5 0
				                                 10 0 0
				                                )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    (alert \"Delete the first fit point.\")
    
    ;; Delete the first fit point in the spline
    (vla-DeleteFitPoint splineObj 0)
    (vla-Regen doc :vlax-true)
    (alert \"A fit point has been deleted at Index: 0\")
)
")
("DeleteRows" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-56B99B2E-C583-4E4B-BBC7-2FC7000B6D91"
"
DeleteRows Method (ActiveX)
Deletes rows from a table.
Supported platforms: Windows only
Signature
VBA:
object.DeleteRows row, Rows
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row index.
Rows
    Access: Input-only
    Type: Long
    The number of rows to delete from the table.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DeleteProfile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C86703BF-B99B-41C2-93C8-A53D952A4C80"
"
DeleteProfile Method (ActiveX)
Deletes the specified profile.
Supported platforms: Windows only
Signature
VBA:
object.DeleteProfile ProfileName
object
    Type: PreferencesProfiles
    The object this method applies to.
ProfileName
    Access: Input-only
    Type: String
    The name of the profile to delete.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DeleteProfile()
    ' This example deletes a profile.
    
    Dim preferences As AcadPreferences
    Dim strProfileToDelete As String
    
    Set preferences = ThisDrawing.Application.preferences
    
    ' Specify the profile to delete.
    strProfileToDelete = \"TestProfile\"
    
    ' Delete the profile
    ' The call will fail if \"TestProfile\" does not exist or
    ' if \"TestProfile\" is the current profile.
    On Error GoTo Error
    preferences.Profiles.DeleteProfile strProfileToDelete
    Exit Sub
Error:
    MsgBox \"DeleteProfile of \" & strProfileToDelete & \" failed. \" & Err.Description, , \"DeleteProfile Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DeleteProfile()
    ;; This example deletes a profile.
    (setq acadObj (vlax-get-acad-object))
    (setq preferences (vla-get-Preferences acadObj))
    
    ;; Specify the profile to delete.
    (setq strProfileToDelete \"TestProfile\")
    (vla-CopyProfile (vla-get-Profiles preferences) \"<<Unnamed Profile>>\" strProfileToDelete)
    (alert (strcat \"Profile \" strProfileToDelete \" created from <<Unnamed Profile>>.\"))
    
    ;; Delete the profile
    ;; The call will fail if \"TestProfile\" does not exist or
    ;; if \"TestProfile\" is the current profile.
    (vla-DeleteProfile (vla-get-Profiles preferences) strProfileToDelete)
    (alert (strcat \"Profile \" strProfileToDelete \" deleted.\"))
)
")
("Detach" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-624A3B55-BB0A-46CC-993E-C15ECFB569C0"
"
Detach Method (ActiveX)
Detaches an external reference (xref) from a drawing.
Supported platforms: Windows only
Signature
VBA:
object.Detach
object
    Type: Block
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
Detaching an xref removes the xref from the current drawing. All copies of the xref are erased, and the xref definition is deleted. All xref-dependent symbol table information (such as layers and linetypes) is deleted from the current drawing.
You cannot detach an xref that contains other xrefs.
Examples
VBA:
Sub Example_Detach()
    On Error GoTo ERRORHANDLER
                          
    ' Define external reference to be inserted
    Dim xrefHome As AcadBlock
    Dim xrefInserted As AcadExternalReference
    Dim insertionPnt(0 To 2) As Double
    Dim PathName As String
    insertionPnt(0) = 1
    insertionPnt(1) = 1
    insertionPnt(2) = 0
    PathName = \"c:/AutoCAD/sample/City map.dwg\"
    
    ' Add the external reference
    Set xrefInserted = ThisDrawing.ModelSpace. _
            AttachExternalReference(PathName, \"XREF_IMAGE\", _
            insertionPnt, 1, 1, 1, 0, False)
    ZoomAll
    MsgBox \"The external reference is attached.\"
    
    ' Detach the external reference definition
    Dim name As String
    name = xrefInserted.name
    ThisDrawing.Blocks.Item(name).Detach
    MsgBox \"The external reference is detached.\"
    Exit Sub
ERRORHANDLER:
    MsgBox Err.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Detach()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define external reference to be inserted
    (setq insertionPnt (vlax-3d-point 1 1 0)
          pathName (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg\"))
    
    ;; Add the external reference
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq xrefInserted (vla-AttachExternalReference modelSpace pathName \"XREF_IMAGE\" insertionPnt 1 1 1 0 :vlax-false))
    (vla-ZoomAll acadObj)
  
    (alert \"The external reference is attached.\")
    
    ;; Detach the external reference definition
    (setq name (vla-get-Name xrefInserted))
    (vla-Detach (vla-Item (vla-get-Blocks doc) name))
    (alert \"The external reference is detached.\")
)
")
("Display" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-11B24C9C-BEB8-425A-B833-29A1F0C5CC00"
"
Display Method (ActiveX)
Toggles the display control of the PViewport object on or off.
Supported platforms: Windows only
Signature
VBA:
object.Display Status
object
    Type: PViewport
    The object this method applies to.
Status
    Access: Input-only
    Type: Boolean
        True: Viewport display is on.
        False: Viewport display is off.
Return Value (RetVal)
No return value.
Remarks
The display control must be on before the MSpace property can be used to activate the model space editing capabilities.
Use the ViewportOn property to determine if a paper space viewport display has already been turned on with this method.
Examples
VBA:
Sub Example_DisplayMethod()
    ' This example creates a paper space viewport and makes it active.
    
    Dim newPViewport As AcadPViewport
    Dim centerPoint(0 To 2) As Double
    Dim height As Double
    Dim width As Double
    height = 30#
    width = 40#
    centerPoint(0) = 30#: centerPoint(1) = 30#: centerPoint(2) = 0#
    
    ' Create a paper space Viewport object
    ThisDrawing.ActiveSpace = acPaperSpace
    Set newPViewport = ThisDrawing.PaperSpace.AddPViewport(centerPoint, width, height)
    ZoomAll
    newPViewport.Display True
    
    ' Before making a pViewport active,
    ' the mspace property needs to be True
    ThisDrawing.mspace = True
    ThisDrawing.ActivePViewport = newPViewport
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DisplayMethod()
    ;; This example creates a paper space viewport and makes it active.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq centerPoint (vlax-3d-point 30 30 0)
          height 30
          width 40)
    
    ;; Create a paper space Viewport object
    (vla-put-ActiveSpace doc acPaperSpace)
    (setq newPViewport (vla-AddPViewport (vla-get-PaperSpace doc) centerPoint width height))
    (vla-ZoomAll acadObj)
    (vla-Display newPViewport :vlax-true)
    
    ;; Before making a pViewport active,
    ;; the mspace property needs to be True
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc newPViewport)
)
")
("DisplayPlotPreview" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6126F7B4-B02D-4EDA-B297-BCCAF6D92ADF"
"
DisplayPlotPreview Method (ActiveX)
Displays the Plot Preview dialog box with the full view preview.
Supported platforms: Windows only
Signature
VBA:
object.DisplayPlotPreview Preview
object
    Type: Plot
    The object this method applies to.
Preview
    Access: Input-only
    Type: AcPreviewMode enum
        acFullPreview
        acPartialPreview
Return Value (RetVal)
No return value.
Remarks
The preview is invoked on the active layout.
Full preview displays the drawing on the screen as it will appear when plotted on paper. This requires a regeneration of the drawing. It is faster than the normal plot regeneration because AutoCAD performs no vector sorting or optimization.
The NumberOfCopies property and SetLayoutsToPlot method settings are ignored during the call to this method.
This method is not available while in batch mode and will return E_FAIL if called in batch mode.
The associated drawing is made active when this method is called. This drawing will remain active after completion of the DisplayPlotPreview method.
This method puts the associated drawing into a special display mode that can only be exited by user interaction. Thus, upon successful return from the DisplayPlotPreview method, the associated drawing will be active, and will be left in plot preview display mode.
Examples
VBA:
Sub Example_DisplayPlotPreview()
    ' This example creates a circle and then performs
    ' a plot preview.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2: center(1) = 2: center(2) = 0
    radius = 1
    Set circleObj = ThisDrawing.modelSpace.AddCircle(center, radius)
    ZoomAll
    
    ' Preview the plot of the circle
    ThisDrawing.ActiveLayout.ConfigName = \"DWG to PDF.pc3\"
    ThisDrawing.Plot.DisplayPlotPreview acFullPreview
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DisplayPlotPreview()
    ;; This example creates a circle and then performs
    ;; a plot preview.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)  
          radius 1)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    
    ;; Preview the plot of the circle
    (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWG to PDF.pc3\")
    (vla-DisplayPlotPreview (vla-get-Plot doc) acFullPreview)
)
")
("DistanceToReal" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1DCB43B6-A696-4B9D-AD27-E553A5CA69D6"
"
DistanceToReal Method (ActiveX)
Converts a distance from a string to a real (double) value.
Supported platforms: Windows only
Signature
VBA:
RetVal = DistanceToReal(Distance, Unit)
object
    Type: Utility
    The object this method applies to.
Distance
    Access: Input-only
    Type: String
    The distance as a string value.
Unit
    Access: Input-only
    Type: AcUnits enum
    The unit to which the string is to be converted.
        acDefaultUnits
        acScientific
        acDecimal
        acEngineering
        acArchitectural
        acFractional
Return Value (RetVal)
Type: Double
The distance as a real number.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DistanceToReal()
    ' This example passes several different distances in
    ' different units to be converted to real values.
    
    Dim distAsString As String
    Dim unit As Long
    Dim distAsReal As Double
    
    ' Convert the distance to a real in scientific units
    unit = acScientific
    distAsString = \"1.75E+01\"
    distAsReal = ThisDrawing.Utility.DistanceToReal(distAsString, unit)
    MsgBox \"1.75E+01 converts to \" & distAsReal & \" in scientific units.\", , \"DistanceToReal Example\"
    
    ' Convert the distance to a real in decimal units
    unit = acDecimal
    distAsString = \"17.5\"
    distAsReal = ThisDrawing.Utility.DistanceToReal(distAsString, unit)
    MsgBox \"1.75 converts to \" & distAsReal & \" in decimal units.\", , \"DistanceToReal Example\"
    
    ' Convert the distance to a real in engineering units
    unit = acEngineering
    distAsString = \"1'-5.50\"\"\"
    distAsReal = ThisDrawing.Utility.DistanceToReal(distAsString, unit)
    MsgBox \"1'-5.50\"\" converts to \" & distAsReal & \" in engineering units.\", , \"DistanceToReal Example\"
    
    ' Convert the distance to a real in architectural units
    unit = acArchitectural
    distAsString = \"1'-5 1/2\"\"\"
    distAsReal = ThisDrawing.Utility.DistanceToReal(distAsString, unit)
    MsgBox \"1'-5 1/2\"\" converts to \" & distAsReal & \" in architectural units.\", , \"DistanceToReal Example\"
    
    ' Convert the distance to a real in fractional units
    unit = acFractional
    distAsString = \"17 1/2\"
    distAsReal = ThisDrawing.Utility.DistanceToReal(distAsString, unit)
    MsgBox \"1'-5 1/2\"\" converts to \" & distAsReal & \" in fractional units.\", , \"DistanceToReal Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DistanceToReal()
    ;; This example passes several different distances in
    ;; different units to be converted to real values.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Convert the distance to a real in scientific units
    (setq unit acScientific
          distAsString \"1.75E+01\"
          distAsReal (vla-DistanceToReal (vla-get-Utility doc) distAsString unit))
    (alert (strcat \"1.75E+01 converts to \" (rtos distAsReal 2) \" in scientific units.\"))
    
    ;; Convert the distance to a real in decimal units
    (setq unit acDecimal
          distAsString \"17.5\"
	         distAsReal (vla-DistanceToReal (vla-get-Utility doc) distAsString unit))
    (alert (strcat \"17.5 converts to \" (rtos distAsReal 2) \" in decimal units.\"))
    
    ;; Convert the distance to a real in engineering units
    (setq unit acEngineering
          distAsString \"1'-5.50\"\"
	         distAsReal (vla-DistanceToReal (vla-get-Utility doc) distAsString unit))
    (alert (strcat \"1'-5.50\" converts to \" (rtos distAsReal 2) \" in engineering units.\"))
    
    ;; Convert the distance to a real in architectural units
    (setq unit acArchitectural
          distAsString \"1'-5 1/2\"\"
	         distAsReal (vla-DistanceToReal (vla-get-Utility doc) distAsString unit))
    (alert (strcat \"1'-5 1/2\" converts to \" (rtos distAsReal 2) \" in architectural units.\"))
    
    ;; Convert the distance to a real in fractional units
    (setq unit acFractional
          distAsString \"17 1/2\"
	         distAsReal (vla-DistanceToReal (vla-get-Utility doc) distAsString unit))
    (alert (strcat \"17 1/2 converts to \" (rtos distAsReal 2) \" in fractional units.\"))
)
")
("ElevateOrder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-63842B41-FA17-4300-B6A3-529221283470"
"
ElevateOrder Method (ActiveX)
Elevates the order of the spline to the given order.
Supported platforms: Windows only
Signature
VBA:
object.ElevateOrder Order
object
    Type: Spline
    The object this method applies to.
Order
    Access: Input-only
    Type: Integer
    A positive value greater than the current order. The maximum order is 26.
Return Value (RetVal)
No return value.
Remarks
The order of a spline is equal to the degree of the spline plus one (+1). You can query the degree of the spline by using the Degree property.
Entering a value greater than the current value increases the number of control points uniformly across the spline for more localized control. Once a spline order has been elevated, it cannot be reduced.
When a spline is elevated, it is converted from an interpolated (fit) spline to a control point spline. This means that after elevation, the spline no longer has fit tangents and the StartTangent and EndTangent properties for the spline are no longer accessible. The only way to edit a control point spline is through the ControlPoints property, or the SetControlPoint or GetControlPoint methods.
Examples
VBA:
Sub Example_ElevateOrder()
    ' This example creates a spline object in model space.
    ' It then elevates the order of the spline.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    MsgBox \"The current order of the spline is \" & splineObj.Degree + 1, , \"ElevateOrder Example\"
    
    ' Elevate the order of the spline
    splineObj.ElevateOrder (splineObj.Degree + 10)
    ThisDrawing.Regen True
    MsgBox \"The order of the spline has been raised to \" & splineObj.Degree + 1, , \"ElevateOrder Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ElevateOrder()
    ;; This example creates a spline object in model space.
    ;; It then elevates the order of the spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )  
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
  
    (alert (strcat \"The current order of the spline is \" (itoa (1+ (vla-get-Degree splineObj)))))
    
    ;; Elevate the order of the spline
    (vla-ElevateOrder splineObj (+ (vla-get-Degree splineObj) 10))
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The order of the spline has been raised to \" (itoa (1+ (vla-get-Degree splineObj)))))
)
")
("EnableMergeAll" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16E02CB4-8CAA-4CA3-AF8F-D24FF5A1D831"
"
EnableMergeAll Method (ActiveX)
Controls cell merging.
Supported platforms: Windows only
Signature
VBA:
object.EnableMergeAll nRow, nCol, bEnable
object
    Type: Table, TableStyle
    The objects this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The value of the row.
nCol
    Access: Input-only
    Type: Integer
    The value of the column.
bEnable
    Access: Input-only
    Type: Boolean
    The flag for cell merging.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_EnableMergeAll()
    ' This example creates a TableStyle object and sets values for
    ' the style cell merging.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle \"NewTestStyle2\"
    customObj.EnableMergeAll \"NewTestStyle2\", False
      
    If customObj.GetIsMergeAllEnabled(\"NewTestStyle2\") = False Then
        MsgBox \"Merge all is not enabled!\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EnableMergeAll()
    ;; This example creates a TableStyle object and sets values for
    ;; the style cell merging.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle2\")
    (vla-EnableMergeAll customObj \"NewTestStyle2\" :vlax-false)
      
    (if (= (vla-GetIsMergeAllEnabled customObj \"NewTestStyle2\") :vlax-false)
        (alert \"Merge all is not enabled!\")
    )
)
")
("EndUndoMark" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EAC301EA-ABF7-42DE-AC8B-CD77BC77873F"
"
EndUndoMark Method (ActiveX)
Marks the end of a block of operations.
Supported platforms: Windows only
Signature
VBA:
object.EndUndoMark
object
    Type: Document
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method allows AutoCAD to close the environment so operations from StartUndoMark to EndUndoMark can be treated as a group of operations.
Examples
VBA:
Sub Example_EndUndoMark()
    ' This example creates a series of lines, each one with an undo marker
    ' defined for it. After lines are created you can switch to AutoCAD and type
    ' the Undo command, and only one line at a time will be undone. If StartUndoMark
    ' call is not made, an undo in AutoCAD will undo all the lines at once.
    
    Dim line As AcadLine
    Dim stPnt(0 To 2) As Double
    Dim endPnt(0 To 2) As Double
    stPnt(0) = 1: stPnt(1) = 2: stPnt(2) = 0
    endPnt(0) = 2: stPnt(1) = 1: stPnt(2) = 0
    
    ' Create the lines
    Dim j As Integer
    For j = 0 To 3
        ThisDrawing.StartUndoMark
        Set line = ThisDrawing.ModelSpace.AddLine(stPnt, endPnt)
        stPnt(0) = stPnt(0) + 3
        endPnt(0) = endPnt(0) + 3
        ThisDrawing.EndUndoMark
    Next
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EndUndoMark()
    ;; This example creates a series of lines, each one with an undo marker
    ;; defined for it. After lines are created you can switch to AutoCAD and type
    ;; the Undo command, and only one line at a time will be undone. If StartUndoMark
    ;; call is not made, an undo in AutoCAD will undo all the lines at once.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq stPnt (vlax-3d-point 1 2 0)
          endPnt (vlax-3d-point 2 1 0))  
    ;; Create the lines
    (setq j 0)
    (while (>= 3 j)
        (vla-StartUndoMark doc)
        (setq line (vla-AddLine modelSpace stPnt endPnt))
        (vlax-safearray-put-element (vlax-variant-value stPnt) 0 (+ (vlax-safearray-get-element (vlax-variant-value stPnt) 0) 3))
        (vlax-safearray-put-element (vlax-variant-value endPnt) 0 (+ (vlax-safearray-get-element (vlax-variant-value endPnt) 0) 3))
        (setq j (1+ j))
        (vla-EndUndoMark doc)
    )
    (vla-ZoomAll acadObj)
)
")
("Erase" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-54A5C5A5-5156-4470-A057-12C222CE3DAE"
"
Erase Method (ActiveX)
Erases all the objects in a selection set.
Supported platforms: Windows only
Signature
VBA:
object.Erase
object
    Type: SelectionSet
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Erase()
    ' This example creates a selection set and several objects.
    ' It then adds the objects to the selection set, and then
    ' erases the objects from the selection set.
    
    ' Create the new selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SELECTIONSET\")
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the selection set.
    ReDim ssobjs(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set ssobjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the selection set
    ssetObj.AddItems ssobjs
    
    GoSub LISTOBJS
    
    ' Erase the objects in the selection set
    ssetObj.Erase
    
    GoSub LISTOBJS
    
    ' exit the subroutine
    Exit Sub
    
LISTOBJS:
    
    ' List all the objects in the selection set
    If ssetObj.count = 0 Then
        MsgBox \"The selection set is empty\"
    Else
        For I = 0 To ssetObj.count - 1
            MsgBox \"The selection set contains: \" & ssetObj.Item(I).ObjectName
        Next
    End If
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Erase()
    ;; This example creates a selection set and several objects.
    ;; It then adds the objects to the selection set, and then
    ;; erases the objects from the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the new selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_SELECTIONSET\"))
    
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)  
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq majAxis (vlax-3d-point 5 5 0)
          center (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the selection set.
    (setq ssobjs (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count modelSpace) 1))))
    (setq I 0)
    (while (>= (- (vla-get-Count modelSpace) 1) I)
        (vlax-safearray-put-element ssobjs I (vla-Item modelSpace I))
        (setq I (1+ I))
    )
    
    ;; Add the array of objects to the selection set
    (vla-AddItems ssetObj ssobjs)
    
    ;; List all the objects in the selection set
    (if (= (vla-get-Count ssetObj) 0)
        (alert \"The selection set is empty\")
        (progn
	           (setq I 0)
	           (while (>= (- (vla-get-Count ssetObj) 1) I)
                (alert (strcat \"The selection set contains: \" (vla-get-ObjectName (vla-Item ssetObj I))))
                (setq I (1+ I))	      
            )
	       )
    )
    
    ;; Erase the objects in the selection set
    (vla-Erase ssetObj)
    
    ;; List all the objects in the selection set
    (if (= (vla-get-Count ssetObj) 0)
        (alert \"The selection set is empty\")
        (progn
	           (setq I 0)
	           (while (>= (- (vla-get-Count ssetObj) 1) I)
                (alert (strcat \"The selection set contains: \" (vla-get-ObjectName (vla-Item ssetObj I))))
            )
	       )
    )
)
")
("Eval" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0D0B2C44-8F2F-4DA3-8E22-0273391ABA60"
"
Eval Method (ActiveX)
Evaluates an expression in VBA.
Supported platforms: Windows only
Signature
VBA:
object.Eval Expression
object
    Type: Application
    The object this method applies to.
Expression
    Access: Input-only
    Type: String
    The expression to be evaluated.
Return Value (RetVal)
No return value.
Remarks
This method allows Automation clients to execute a line of VBA code in the context of the current project without creating modules and functions.
Examples
VBA:
Sub Example_Eval()
    ' This example shows how to can use Eval to run a VBA code fragment
    ' without having to create a Module or procedure.
    Dim VBACode As String
    
    ' Create VBA code fragment
    VBACode = \"MsgBox \"\"Simple code fragment\"\"\"
    
    ' Use Eval method to evaluate the small VBA script
    Eval VBACode
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Eval()
    ;; This example shows how to can use Eval to run a VBA code fragment
    ;; without having to create a Module or procedure.
    (setq acadObj (vlax-get-acad-object))
    
    ;; Create VBA code fragment
    (setq VBACode \"MsgBox \"Simple code fragment\"\")
    
    ;; Use Eval method to evaluate the small VBA script
    (vla-Eval acadObj VBACode)
)
")
("Evaluate" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-04E0FB2D-919A-46A0-A715-541A4AA8CB1A"
"
Evaluate Method (ActiveX)
Evaluates the given hatch or leader.
Supported platforms: Windows only
Signature
VBA:
object.Evaluate
object
    Type: Hatch, Leader
    The objects this method applies to.
Return Value (RetVal)
No return value.
Remarks
Leader: Evaluates the relation of the leader to its associated annotation, and updates the leader geometry if necessary.
Hatch: Evaluates the hatch lines or solid fill for the Hatch object using the specified hatch pattern. For regular hatch patterns, this method performs intersection calculations between pattern definition lines and hatch boundary curves to form hatch lines. For solid fill hatch patterns, this method performs triangulation of the hatch area and fills in the triangular meshes with the given color.
Examples
VBA:
Sub Example_Evaluate()
    ' This example creates an associative hatch in model space.
    ' It uses the Evaluate method to calculate the hatch
    ' lines for the given boundary.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer boundary for the hatch. (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Evaluate()
    ;; This example creates an associative hatch in model space.
    ;; It uses the Evaluate method to calculate the hatch
    ;; lines for the given boundary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType acHatchPatternTypePreDefined
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer boundary for the hatch. (a circle)
    (setq center (vlax-3d-point 3 3 0)  
          radius 1)
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 (vla-AddCircle modelSpace center radius))
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
)
")
("Explode" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6D96780F-3EC6-447C-B341-0FE815BE9979"
"
Explode Method (ActiveX)
Explodes the compound object into subentities.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Explode
object
    Type: 3DPolyline , BlockReference, ComparedReference, ExternalReference, LWPolyline, MInsertBlock, PolygonMesh, Polyline, Region
    The object this method applies to.
Return Value (RetVal)
Type: Variant (array of objects)
The array of exploded objects.
Remarks
Depending on the type of compound object you are exploding, different results occur. Refer to the EXPLODE command topic in the AutoCAD Command Reference for a detailed list of explodable objects and their results.
You do not have to explode a block in order to manipulate its constituent entities. All block definitions have an Item method that allow you to manipulate the entities within the block without exploding the block definition itself.
Note: The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples
VBA:
Sub Example_Explode()
    ' This example creates a lightweight polyline in model space.
    ' It then explodes the polyline.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 1
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    
    ' Set the bulge on one segment to vary the
    ' type of objects in the polyline
    plineObj.SetBulge 3, -0.5
    ZoomAll
    
    ' Explode the polyline
    MsgBox \"Explode the polyline?\", , \"Explode Example\"
    Dim explodedObjects As Variant
    explodedObjects = plineObj.Explode
    
    ' Loop through the exploded objects
    Dim I As Integer
    For I = 0 To UBound(explodedObjects)
        explodedObjects(I).Update
        MsgBox \"Exploded Object \" & I & \": \" & explodedObjects(I).ObjectName, , \"Explode Example\"
        explodedObjects(I).Color = acByLayer
        explodedObjects(I).Update
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Explode()
    ;; This example creates a lightweight polyline in model space.
    ;; It then explodes the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 1
				                              1 2
				                              2 2
				                              3 2
				                              4 4
				                              4 1
				                             )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Color plineObj acRed)
  
    ;; Set the bulge on one segment to vary the
    ;; type of objects in the polyline
    (vla-SetBulge plineObj 3 -0.5)
    (vla-ZoomAll acadObj)
    
    ;; Explode the polyline
    (alert \"Explode the polyline?\")
    (setq explodedObjects (vlax-variant-value (vla-Explode plineObj)))
    
    ;; Loop through the exploded objects
    (setq I 0)
    (while (>= (vlax-safearray-get-u-bound explodedObjects 1) I)
        (vla-Update (vlax-safearray-get-element explodedObjects I))
        (alert (strcat \"Exploded Object \" (itoa I) \": \" (vla-get-ObjectName (vlax-safearray-get-element explodedObjects I))))
        (vla-put-Color (vlax-safearray-get-element explodedObjects I) acByLayer)
        (vla-Update (vlax-safearray-get-element explodedObjects I))    
        (setq I (1+ I))
    )
)
")
("Export" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-893F1711-3591-4DDC-8D27-DF91052F5E5A"
"
Export Method (ActiveX)
Exports an AutoCAD drawing or a group of saved layer settings to a file.
Supported platforms: Windows only
Signature - Document
VBA:
object.Export FileName, Extension, SelectionSet
object
    Type: Document
    The object this method applies to.
FileName
    Access: Input-only
    Type: String
    The name for the newly exported file.
Extension
    Access: Input-only
    Type: String
    This string should contain three characters specifying the type of file to export the drawing into. Case is not important. Use one of the following extensions: .wmf, .sat, .eps, .dxf, or .bmp.
SelectionSet
    Access: Input-only
    Type: SelectionSet
    For WMF, SAT, and BMP formats, the selection set specifies the objects to be exported. For EPS and DXF formats, the selection set is ignored and the entire drawing is exported.
Signature - LayerStateManager
VBA:
object.Export Name, FileName
object
    Type: LayerStateManager
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the saved layer settings you are exporting.
FileName
    Access: Input-only
    Type: String
    The name of the file you are exporting layer settings to.
Return Value (RetVal)
No return value.
Remarks
When exporting to WMF or BMP formats, the selection set specifies the objects from the drawing to export. If an empty selection set is provided, the user is prompted to select objects. If Nothing is provided, not an empty selection set, the entire drawing is exported.
When exporting to SAT format, the selection set specified must contain one or more objects. This selection set specifies the objects from the drawing to export. Only Region objects, 3DSolid objects, non-manifold solids, and other ShapeManager entities that do not fit the characteristics of the 3DSolid or Region objects will be exported; all other objects in the selection set will be ignored. If an empty selection set is provided, the method is executed without an error and no objects are exported.
When exporting to EPS or DXF formats, the selection set is ignored and the entire drawing is exported.
When exporting saved layer settings, you must name your output file with a .las extension in order for AutoCAD to automatically identify it as a saved layer settings export file.
Examples
VBA:
Sub Example_Export()
    ' This example exports the current drawing to DXF format.
    ' Note that a valid selection set must be provided, even
    ' though the contents of the selection set are ignored.
    
    ' Define the name for the exported file
    Dim exportFile As String
    exportFile = \"C:\AutoCAD\DXFExport\"     ' Adjust path to match your system
    
    ' Create an empty selection set
    Dim sset As AcadSelectionSet
    Set sset = ThisDrawing.SelectionSets.Add(\"TEST\")
    
    ' Export the current drawing to the file specified above.
    ThisDrawing.Export exportFile, \"DXF\", sset
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Export()
    ;; This example exports the current drawing to DXF format.
    ;; Note that a valid selection set must be provided, even
    ;; though the contents of the selection set are ignored.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))     
    
    ;; Define the name for the exported file
    (setq exportFile \"C:\\AutoCAD\\DXFExport\")     ;; Adjust path to match your system
    
    ;; Create an empty selection set
    (setq sset (vla-Add (vla-get-SelectionSets doc) \"TEST\"))
    (vla-Select sset acSelectionSetAll)
    
    ;; Export the current drawing to the file specified above.
    (vla-Export doc exportFile \"DXF\" sset)
    (vla-Delete sset)
)
")
("ExportProfile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C68101BC-DB55-41CF-9B05-BB618DAF7AC3"
"
ExportProfile Method (ActiveX)
Exports the active profile so it can be shared with other users.
Supported platforms: Windows only
Signature
VBA:
object.ExportProfile Profile, RegFile
object
    Type: PreferencesProfiles
    The object this method applies to.
Profile
    Access: Input-only
    Type: String
    The name of the profile to be exported.
RegFile
    Access: Input-only
    Type: String
    The name of the file the profile will be exported to. The extension of the file should be .arg.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ExportProfile()
    ' This example exports the active profile to a new name.
    
    Dim preferences As AcadPreferences
    Dim currActiveProfile As String
    
    Set preferences = ThisDrawing.Application.preferences
    
    ' Retrieve the current ActiveProfile value
    currActiveProfile = preferences.Profiles.ActiveProfile
    MsgBox \"The current ActiveProfile is: \" & preferences.Profiles.ActiveProfile, , \"ExportProfile Example\"
    
    ' Export the active profile
    preferences.Profiles.ExportProfile currActiveProfile, \"TestProfile.arg\"
    MsgBox \"The ActiveProfile has been exported to: TestProfile.arg\", , \"ExportProfile Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExportProfile()
    ;; This example exports the active profile to a new name.
    (setq acadObj (vlax-get-acad-object))
    (setq preferences (vla-get-Preferences acadObj))
  
    ;; Retrieve the current ActiveProfile value
    (setq currActiveProfile (vla-get-ActiveProfile (vla-get-Profiles preferences)))
    (alert (strcat \"The current ActiveProfile is: \" currActiveProfile))
    
    ;; Export the active profile
    (vla-ExportProfile (vla-get-Profiles preferences) currActiveProfile \"c:\\Temp\\TestProfile.arg\")
    (alert \"The ActiveProfile has been exported to: TestProfile.arg\")
)
")
("FieldCode" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FE0C5004-B723-4AE8-888A-7DF11C765C89"
"
FieldCode Method (ActiveX)
Returns a text string containing field codes.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.FieldCode
object
    Type: MText, Text
    The objects this method applies to.
Return Value (RetVal)
Type: String
The field codes of the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_FieldCode()
    ' This example creates a text object in model space.
    ' It then returns the field code string for the object.
    Dim textObj As AcadText
    Dim text As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    ' Define the text object
    text = \"%<\AcVar Date \f \"\"M/d/yyyy\"\"%>%\"
    insertionPoint(0) = 2: insertionPoint(1) = 2: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(text, insertionPoint, height)
    ZoomAll
    
    ' Return the current text string for the object
    text = textObj.FieldCode
    MsgBox \"The FieldCode for the text object equals: \" & text, vbInformation, \"FieldCode Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FieldCode()
    ;; This example creates a text object in model space.
    ;; It then returns the field code string for the object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 2 2 0)
          text \"%<\\AcVar Date \\f \"M/d/yyyy\"%>%\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace text insertionPoint height))  
    (vla-ZoomAll acadObj)
    
    ;; Return the current text string for the object
    (setq text (vla-FieldCode textObj))
    (alert (strcat \"The FieldCode for the text object equals: \" text))
)
")
("Float" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-18043501-AA42-44E1-B58C-35EB78FD25AE"
"
Float Method (ActiveX)
Floats the toolbar.
Supported platforms: Windows only
Signature
VBA:
object.Float Top, Left, NumberFloatRows
object
    Type: Toolbar
    The object this method applies to.
Top
    Access: Input-only
    Type: Long
    The pixel location for the top edge of the toolbar.
Left
    Access: Input-only
    Type: Long
    The pixel location for the left edge of the toolbar.
NumberFloatRows
    Access: Input-only
    Type: Long
    The number of rows to create in the horizontal toolbar. The buttons on the toolbar will be distributed automatically across the number of rows designated.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Float()
    ' This example creates a new toolbar called \"TestToolbar\" and inserts three
    ' buttons into it. The toolbar is then displayed as a floating toolbar,
    ' and then as a docked toolbar.
    ' To remove the toolbar after execution of this macro, use the Customize Menu
    ' option from the Tools menu.
    
    Dim currMenuGroup As acadMenuGroup
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(0)
    
    ' Create the new toolbar
    Dim newToolBar As AcadToolbar
    Set newToolBar = currMenuGroup.Toolbars.Add(\"TestToolbar\")
    
    ' Add three buttons to the new toolbar.
    ' All three buttons will have the same macro attached.
    Dim newButton1 As AcadToolbarItem
    Dim newButton2 As AcadToolbarItem
    Dim newButton3 As AcadToolbarItem
    Dim openMacro As String
    
    ' Assign the macro string the VB equivalent of \"ESC ESC _open \"
    openMacro = Chr(3) & Chr(3) & Chr(95) & \"open\" & Chr(32)
    
    Set newButton1 = newToolBar.AddToolbarButton(\"\", \"NewButton1\", \"Open a file.\", openMacro)
    Set newButton2 = newToolBar.AddToolbarButton(\"\", \"NewButton2\", \"Open a file.\", openMacro)
    Set newButton3 = newToolBar.AddToolbarButton(\"\", \"NewButton3\", \"Open a file.\", openMacro)
    
    ' Display the toolbar
    newToolBar.Visible = True
    
    ' Dock the toolbar to the left of the screen.
    newToolBar.Dock acToolbarDockLeft
    GoSub QUERYSTATUS
    
    ' Float the toolbar
    newToolBar.Float 200, 200, 1
    GoSub QUERYSTATUS
    
    Exit Sub
    
QUERYSTATUS:
    ' Query the toolbar to see if it is docked.
    If newToolBar.DockStatus = acToolbarFloating Then
        MsgBox \"The toolbar is floating.\"
    Else
        MsgBox \"The toolbar is docked.\"
    End If
    Return
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Float()
    ;; This example creates a new toolbar called \"TestToolbar\" and inserts three
    ;; buttons into it. The toolbar is then displayed as a floating toolbar,
    ;; and then as a docked toolbar.
    ;; To remove the toolbar after execution of this macro, use the Customize Menu
    ;; option from the Tools menu.
    (setq acadObj (vlax-get-acad-object))
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) 0))
  
    ;; Create the new toolbar
    (setq newToolBar (vla-Add (vla-get-Toolbars currMenuGroup) \"TestToolbar\"))
    
    ;; Add three buttons to the new toolbar.
    ;; All three buttons will have the same macro attached.
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) \"open\" (Chr 32)))
    
    (setq newButton1 (vla-AddToolbarButton newToolBar \"\" \"NewButton1\" \"Open a file.\" openMacro))
    (setq newButton2 (vla-AddToolbarButton newToolBar \"\" \"NewButton2\" \"Open a file.\" openMacro))
    (setq newButton3 (vla-AddToolbarButton newToolBar \"\" \"NewButton3\" \"Open a file.\" openMacro))    
    
    ;; Display the toolbar
    (vla-put-Visible newToolBar :vlax-true)
    
    ;; Dock the toolbar to the left of the screen.
    (vla-Dock newToolBar acToolbarDockLeft)
    ;; Query the toolbar to see if it is docked.
    (if (= (vla-get-DockStatus newToolBar) acToolbarFloating)
        (alert \"The toolbar is floating.\")
        (alert \"The toolbar is docked.\")
    )
    
    ;; Float the toolbar
    (vla-Float newToolBar 200 200 1)
  
    (if (= (vla-get-DockStatus newToolBar) acToolbarFloating)
        (alert \"The toolbar is floating.\")
        (alert \"The toolbar is docked.\")
    )
)
")
("FormatValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-26F6E964-7292-4AD1-97D2-B72B712ABDAF"
"
FormatValue Method (ActiveX)
Gets the formatted text string for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.FormatValue(row, col, nOption, pVal)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Integer
    The row number of the cell.
col
    Access: Input-only
    Type: Integer
    The column number of the cell.
nOption
    Access: Input-only
    Type: AcFormatOption enum
    The formatting option flag.
        acForEditing
        acForExpression
        acIgnoreMtextFormat
        acUseMaximumPrecision
        kFormatOptionNone
Return Value (RetVal)
Type: String
The formatted text in the table.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GenerateLayout" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-39CE6DCE-D9CD-456D-9D71-14EB370F0D51"
"
GenerateLayout Method (ActiveX)
Generates the layout of a table.
Supported platforms: Windows only
Signature
VBA:
object.GenerateLayout
object
    Type: Table
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method updates the Table object according to the current table style. This method computes the table geometry, including gridlines, text content, block content, and background fills.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GenerateSectionGeometry" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9288F227-0752-4A04-8B47-DB6ECCDFE934"
"
GenerateSectionGeometry Method (ActiveX)
Generates 2D or 3D section geometry.
Supported platforms: Windows only
Signature
VBA:
object.GenerateSectionGeometry pEntity, pIntersectionBoundaryObjs, pIntersectionFillObjs, pBackgroudnObjs, pForegroudObjs, pCurveTangencyObjs
object
    Type: Section
    The object this method applies to.
pEntity
    Access: Input-only
    Type: IAcadEntity
    The sectionable entity.
pIntersectionBoundaryObjs
    Access: Output-only
    Type: Variant
    The intersection boundary objects.
pIntersectionFillObjs
    Access: Output-only
    Type: Variant
    The objects representing intersection fill annotation geometry.
pBackgroundObjs
    Access: Output-only
    Type: Variant
    The background geometry objects.
pForegroundObjs
    Access: Output-only
    Type: Variant
    The foreground geometry objects.
pCurveTangencyObjs
    Access: Output-only
    Type: Variant
    The curve tangency geometry objects.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GenerateUsageData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-20DA963E-06EE-422E-A687-C90311796892"
"
GenerateUsageData Method (ActiveX)
Generates data specifying whether a layer is in use.
Supported platforms: Windows only
Signature
VBA:
object.GenerateUsageData
object
    Type: Layers
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GenerateUsageData()
    ' This example provides usage information for the layers
    ' in a drawing
    Dim MyLayers As AcadLayers
    Set MyLayers = ThisDrawing.Layers
    
    MyLayers.GenerateUsageData
    
    Dim MyLayerObj As AcadLayer
    For Each MyLayerObj In ThisDrawing.Layers
        MyLayerObj.Description = \"Test\"
        MsgBox (MyLayerObj.Used)
    Next MyLayerObj
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GenerateUsageData()
    ;; This example provides usage information for the layers
    ;; in a drawing
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq MyLayers (vla-get-Layers doc))
    (vla-GenerateUsageData MyLayers)
  
    (vlax-for MyLayerObj MyLayers
        (vla-put-Description MyLayerObj \"Test\")
        (alert (strcat \"Layer \" (vla-get-Name MyLayerObj) (if (= (vla-get-Used MyLayerObj) :vlax-true) \" is used.\" \" is not used.\")))
    )
)
")
("GetAcadState" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-820F93B4-7B83-4708-8E21-0D43D7D1C828"
"
GetAcadState Method (ActiveX)
Gets an AcadState object to monitor the state of AutoCAD from out-of-process applications.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAcadState()
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
Type: AcadState
An object containing an IsQuiescent property used to monitor the state of AutoCAD.
Remarks
It is recommended that you call this method immediately after acquiring the AutoCAD application object. This is the best opportunity to identify AutoCAD in a quiescent state.
Examples
VBA:
Sub Example_GetAcadState()
    ' This example gets the acadState object and checks to see if
    ' AutoCAD is in a quiescent state.
    Dim State As AcadState
    Set State = GetAcadState
    If State.IsQuiescent Then
        MsgBox \"AutoCAD is quiescent.\"
    Else
        MsgBox \"AutoCAD is not quiescent.\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetAcadState()
    ;; This example gets the acadState object and checks to see if
    ;; AutoCAD is in a quiescent state.
    (setq acadObj (vlax-get-acad-object))
  
    (setq State (vla-GetAcadState acadObj))
    (if (= (vla-get-IsQuiescent State) :vlax-true)
        (alert \"AutoCAD is quiescent.\")
        (alert \"AutoCAD is not quiescent.\")
    )
)
")
("GetAlignment" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ED26F9AB-CE3C-4832-9A94-EC73A0588698"
"
GetAlignment Method (ActiveX)
Returns the cell alignment for a row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAlignment(rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type to get the alignment for.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: AcCellAlignment enum
The alignment used for the row type.
    acBottomCenter: Centers text at a point based on the bottom of the text.
    acBottomLeft: Left-justifies text at a point based on the bottom of the text.
    acBottomRight: Right-justifies text at a point based on the bottom of the text.
    acMiddleCenter: Centers text at a point based on the middle of the text.
    acMiddleLeft: Left-justifies text at a point based on the middle of the text.
    acMiddleRight: Right-justifies text at a point based on the middle of the text.
    acTopCenter: Centers text at a point based on the top of the text.
    acTopLeft: Left-justifies text at a point based on the top of the text.
    acTopRight: Right-justifies text at a point based on the top of the text.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetAlignment()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetAlignment()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("GetAlignment2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-892800F1-3070-4EC1-B500-902932C98D22"
"
GetAlignment2 Method (ActiveX)
Gets the cell alignment.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAlignment2(bstrCellStyle)
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The cell style to check.
Return Value (RetVal)
Type: AcCellAlignment enum
The alignment used for the cell style.
    acBottomCenter: Centers text at a point based on the bottom of the text.
    acBottomLeft: Left-justifies text at a point based on the bottom of the text.
    acBottomRight: Right-justifies text at a point based on the bottom of the text.
    acMiddleCenter: Centers text at a point based on the middle of the text.
    acMiddleLeft: Left-justifies text at a point based on the middle of the text.
    acMiddleRight: Right-justifies text at a point based on the middle of the text.
    acTopCenter: Centers text at a point based on the top of the text.
    acTopLeft: Left-justifies text at a point based on the top of the text.
    acTopRight: Right-justifies text at a point based on the top of the text.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetAlignment2()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.CreateCellStyle \"NewCellStyle\"
    customObj.SetAlignment2 \"NewCellStyle\", acBottomRight
    
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment2(\"NewCellStyle\") & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetAlignment2()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-CreateCellStyle customObj \"NewCellStyle\")
    (vla-SetAlignment2 customObj \"NewCellStyle\" acBottomRight)
  
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nCell Style Alignment = \" (itoa (vla-GetAlignment2 customObj \"NewCellStyle\"))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("GetAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-595BBC6E-5E87-46FA-8721-E90E54CB5CD5"
"
GetAngle Method (ActiveX)
Gets the angle specified. Considers the setting of the ANGBASE system variable.
Supported platforms: Windows only
Signature
VBA:
RetVal = GetAngle([Point] [, Prompt])
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: Double
The angle specified.
Remarks
AutoCAD pauses for user input of an angle and sets the return value to the value of the selected angle. The Point parameter specifies an angle base point in the two-dimensional WCS. The Prompt parameter specifies a string that AutoCAD displays before it pauses. Both Point and Prompt are optional.
The AutoCAD user can specify the angle by entering a number in the current angular units format. The user can set the angle also by specifying two 2D locations on the graphics screen. AutoCAD draws a rubber-band line from the first point to the current crosshair position to help the user visualize the angle. If the Point parameter is provided, AutoCAD uses this value as the first of the two points. The angle is measured in the XY plane of the WCS (GetAngle ignores the Z field of Point).
Regardless of the method used to specify the angle, GetAngle always sets the return value to a value expressed in radians. The direction of angular increase is always counterclockwise.
This function is almost identical to GetOrientation, but it takes into account the current value of the ANGBASE system variable. For GetOrientation, the zero angle is always to the right: \"east\" or \"three o'clock.\" For GetAngle, the zero angle is the value of ANGBASE, which can be set to any of the four 90-degree quadrants. Both GetAngle and GetOrientation return a (real) angle value in radians measured counterclockwise from a base (zero) angle. For GetAngle, the base equals ANGBASE; for GetOrientation, the base is at the right. Both functions honor the current value of ANGDIR, which affects the value the user enters but not the value that these functions return.
User input (degrees) 	GetAngle returns 	GetOrientation returns
0 	0.0 	1.5708
-90 	1.5708 	3.14159
180 	3.14159 	4.71239
90 	4.71239 	0.0
You can use GetAngle to obtain a rotation amount for a block insertion, because an input of 0 degrees always returns 0 radians. You can use GetOrientation to obtain the baseline angle for a text entity to be aligned with other objects.
If a keyword is returned instead of an angle, AutoCAD will generate the error message \"User input keyword.\" Use the GetInput method to obtain the keyword from the return value.
Examples
VBA:
Sub Example_GetAngle()
    ' This example demonstrates 4 different ways to retrieve
    ' an angle from the user using the GetAngle method.
    
    AppActivate ThisDrawing.Application.Caption
    Dim retAngle As Double
    
    ' Return the angle in radians with a prompt
    retAngle = ThisDrawing.Utility.GetAngle(, \"Enter an angle: \")
    MsgBox \"The angle entered was \" & retAngle, , \"GetAngle Example\"
    
    ' Return the angle in radians without any prompt
    retAngle = ThisDrawing.Utility.GetAngle()
    MsgBox \"The angle entered was \" & retAngle, , \"GetAngle Example\"
    
    ' Return the angle in radians with a prompt and an angle base point
    Dim basePnt(0 To 2) As Double
    basePnt(0) = 2#: basePnt(1) = 2#: basePnt(2) = 0#
    retAngle = ThisDrawing.Utility.GetAngle(basePnt, \"Enter an angle: \")
    MsgBox \"The angle entered was \" & retAngle, , \"GetAngle Example\"
    
    ' Return the angle in radians with an angle base point but no prompt
    retAngle = ThisDrawing.Utility.GetAngle(basePnt)
    MsgBox \"The angle entered was \" & retAngle, , \"GetAngle Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetAngle()
    ;; This example demonstrates 4 different ways to retrieve
    ;; an angle from the user using the GetAngle method.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
      
    ;; Return the angle in radians with a prompt
    (setq retAngle (vla-GetAngle (vla-get-Utility doc) nil \"\nEnter an angle: \"))
    (alert (strcat \"The angle entered was \" (rtos retAngle 2)))
    
    ;; Return the angle in radians without any prompt
    (setq retAngle (vla-GetAngle (vla-get-Utility doc)))
    (alert (strcat \"The angle entered was \" (rtos retAngle 2)))
    
    ;; Return the angle in radians with a prompt and an angle base point
    (setq basePnt (vlax-3d-point 2 2 0))
    (setq retAngle (vla-GetAngle (vla-get-Utility doc) basePnt \"\nEnter an angle: \"))
    (alert (strcat \"The angle entered was \" (rtos retAngle 2)))
    
    ;; Return the angle in radians with an angle base point but no prompt
    (setq retAngle (vla-GetAngle (vla-get-Utility doc) basePnt))
    (alert (strcat \"The angle entered was \" (rtos retAngle 2)))
)
")
("GetAttachmentPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AFFD6C90-2BFA-4814-AF76-AB9807BC3442"
"
GetAttachmentPoint Method (ActiveX)
Returns the attachment point for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAttachmentPoint(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row of the table.
col
    Access: Input-only
    Type: Long
    The column of the table.
Return Value (RetVal)
Type: AcAttachmentPoint enum
    acAttachmentPointBottomCenter
    acAttachmentPointBottomLeft
    acAttachmentPointBottomRight
    acAttachmentPointMiddleCenter
    acAttachmentPointMiddleLeft
    acAttachmentPointMiddleRight
    acAttachmentPointTopCenter
    acAttachmentPointTopLeft
    acAttachmentPointTopRight
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetAttributes" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3E8E1756-F45D-4CCE-838B-00FBC0374278"
"
GetAttributes Method (ActiveX)
Gets the attributes in the block reference.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAttributes
object
    Type: BlockReference, ComparedReference,ExternalReference, MInsertBlock
    The object this method applies to.
Return Value (RetVal)
Type: Variant (array of AttributeReference objects)
The array of AttributeReference objects.
Remarks
This method returns an array of editable attribute references attached to the block reference.
You can only return the constant attributes for an external reference. To find the constant attributes of an external reference or block reference, use the GetConstantAttributes method.
Examples
VBA:
Sub Example_GetAttributes()
    ' This example creates a block. It then adds attributes to that
    ' block. The block is then inserted into the drawing to create
    ' a block reference.
    
    ' Create the block
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"TESTBLOCK\")
    
    ' Define the attribute definition
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"Attribute Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"Attribute_Tag\"
    value = \"Attribute Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = blockObj.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    
    ' Insert the block
    Dim blockRefObj As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"TESTBLOCK\", 1#, 1#, 1#, 0)
    ZoomAll
    
    ' Get the attributes for the block reference
    Dim varAttributes As Variant
    varAttributes = blockRefObj.GetAttributes
    
    ' Move the attribute tags and values into a string to be displayed in a Msgbox
    Dim strAttributes As String
    Dim I As Integer
    For I = LBound(varAttributes) To UBound(varAttributes)
        strAttributes = strAttributes & vbLf & \"  Tag: \" & varAttributes(I).TagString & _
                        vbLf & \"  Value: \" & varAttributes(I).TextString & vbLf & \"    \"
    Next
    MsgBox \"The attributes for blockReference \" & blockRefObj.Name & \" are: \" & strAttributes, , \"GetAttributes Example\"
    
    ' Change the value of the attribute
    ' Note: There is no SetAttributes. Once you have the variant array, you have the objects.
    ' Changing them changes the objects in the drawing.
    varAttributes(0).TextString = \"NEW VALUE!\"
    
    ' Get the attributes
    Dim newvarAttributes As Variant
    newvarAttributes = blockRefObj.GetAttributes
    
    ' Again, display the tags and values
    strAttributes = \"\"
    For I = LBound(varAttributes) To UBound(varAttributes)
        strAttributes = strAttributes & vbLf & \"  Tag: \" & varAttributes(I).TagString & _
                        vbLf & \"  Value: \" & varAttributes(I).TextString & vbLf & \"    \"
    Next
    MsgBox \"The attributes for blockReference \" & blockRefObj.Name & \" are: \" & strAttributes, , \"GetAttributes Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetAttributes()
    ;; This example creates a block. It then adds attributes to that
    ;; block. The block is then inserted into the drawing to create
    ;; a block reference.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the block
    (setq insertionPnt (vlax-3d-point 0 0 0))
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"TESTBLOCK\"))
    
    ;; Define the attribute definition
    (setq attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"Attribute Prompt\"
          attTag \"Attribute_Tag\"
          attValue \"Attribute Value\"
          insertionPoint (vlax-3d-point 5 5 0))
    
    ;; Create the attribute definition object in model space
    (setq attributeObj (vla-AddAttribute blockObj attHeight attMode attPrompt insertionPoint attTag attValue))
    
    ;; Insert the block
    (setq insertionPnt (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj (vla-InsertBlock modelSpace insertionPnt \"TESTBLOCK\" 1 1 1 0))
    (vla-ZoomAll acadObj)
    
    ;; Get the attributes for the block reference
    (setq varAttributes (vlax-variant-value (vla-GetAttributes blockRefObj)))
    
    ;; Move the attribute tags and values into a string to be displayed in a Msgbox
    (setq strAttributes \"\"
          I 0)
    (while (>= (vlax-safearray-get-u-bound varAttributes 1) I)
        (setq strAttributes (strcat strAttributes \"\n  Tag: \" (vla-get-TagString (vlax-safearray-get-element varAttributes I))
                                                  \"\n  Value: \" (vla-get-TextString (vlax-safearray-get-element varAttributes I)) \"\n\"))
        (setq I (1+ I))
    )
    (alert (strcat \"The attributes for blockReference \" (vla-get-Name blockRefObj) \" are: \" strAttributes))
    
    ;; Change the value of the attribute
    ;; Note: There is no SetAttributes. Once you have the variant array, you have the objects.
    ;; Changing them changes the objects in the drawing.
    (vla-put-TextString (vlax-safearray-get-element varAttributes 0) \"NEW VALUE!\")
    
    ;; Get the attributes
    (setq newvarAttributes (vlax-variant-value (vla-GetAttributes blockRefObj)))
    
    ;; Again, display the tags and values
    (setq strAttributes \"\"
          I 0)
    (while (>= (vlax-safearray-get-u-bound varAttributes 1) I)
        (setq strAttributes (strcat strAttributes \"\n  Tag: \" (vla-get-TagString (vlax-safearray-get-element varAttributes I))
                                                  \"\n  Value: \" (vla-get-TextString (vlax-safearray-get-element varAttributes I)) \"\n\"))
        (setq I (1+ I))
    )
    (alert (strcat \"The attributes for blockReference \" (vla-get-Name blockRefObj) \" are: \" strAttributes))
)
")
("GetAutoScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-24B7F8D9-BFE3-4EF8-A506-7CF00139E169"
"
GetAutoScale Method (ActiveX)
Returns the value specifying whether auto scale is used in the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAutoScale(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
Return Value (RetVal)
Type: Boolean
    True: AutoScale is used in the cell location.
    False: AutoScale is not used in the cell location.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetAutoScale2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-24E9048E-CF74-4441-8C7F-7E9402BD1BB1"
"
GetAutoScale2 Method (ActiveX)
Gets the auto scale flag value for a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetAutoScale2(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
Return Value (RetVal)
Type: Boolean
    True: AutoScale is used for the content with the index at the cell location.
    False: AutoScale is not used for the content with the index at the cell location.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetBackgroundColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D6A279BA-8792-4DB6-AA66-7E25E16BCC86"
"
GetBackgroundColor Method (ActiveX)
Returns the background color value for the specified row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBackgroundColor(rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the background color of the row type.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetBackgroundColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
    
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetBackgroundColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colCurrent (vla-GetBackgroundColor tableStyle (+ acDataRow acTitleRow)))
    (setq colRowCurrent (vla-GetColor tableStyle acDataRow))
    (setq colNoneCurrent (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colCurrent)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowCurrent)) \"\n\"
		                 \"Background None = \" (if (= colNoneCurrent :vlax-true) \"True\" \"False\")))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetBackgroundColor tableStyle acTitleRow col)
    (vla-SetRGB col 255 0 0)
    (vla-SetColor tableStyle acDataRow col)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow (if (= colNoneCurrent :vlax-true) :vlax-false :vlax-true))
  
    (setq colNew (vla-GetBackgroundColor tableStyle acTitleRow))
    (setq colRowNew (vla-GetColor tableStyle acDataRow))
    (setq colNoneNew (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colNew)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowNew)) \"\n\"
		                 \"Background None = \" (if (= colNoneNew :vlax-true) \"True\" \"False\")))
    (vla-SetBackgroundColor tableStyle acTitleRow colCurrent)
    (vla-SetColor tableStyle acDataRow colRowCurrent)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow colNoneCurrent)
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetBackgroundColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CCFBEC3F-F228-4429-924F-38ABE9E89352"
"
GetBackgroundColor2 Method (ActiveX)
Returns the background color value for the specified cell style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBackgroundColor2(bstrCellStyle)
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The cell style name.
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the background color of the cell style.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetBackgroundColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
    
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetBackgroundColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colCurrent (vla-GetBackgroundColor tableStyle (+ acDataRow acTitleRow)))
    (setq colRowCurrent (vla-GetColor tableStyle acDataRow))
    (setq colNoneCurrent (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colCurrent)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowCurrent)) \"\n\"
		                 \"Background None = \" (if (= colNoneCurrent :vlax-true) \"True\" \"False\")))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetBackgroundColor tableStyle acTitleRow col)
    (vla-SetRGB col 255 0 0)
    (vla-SetColor tableStyle acDataRow col)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow (if (= colNoneCurrent :vlax-true) :vlax-false :vlax-true))
  
    (setq colNew (vla-GetBackgroundColor tableStyle acTitleRow))
    (setq colRowNew (vla-GetColor tableStyle acDataRow))
    (setq colNoneNew (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colNew)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowNew)) \"\n\"
		                 \"Background None = \" (if (= colNoneNew :vlax-true) \"True\" \"False\")))
    (vla-SetBackgroundColor tableStyle acTitleRow colCurrent)
    (vla-SetColor tableStyle acDataRow colRowCurrent)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow colNoneCurrent)
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetBackgroundColorNone" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0B39A4D5-BA9C-45AA-8CCC-C11F42DF8A2A"
"
GetBackgroundColorNone Method (ActiveX)
Returns the value specifying that there is no background color for the specified row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBackgroundColorNone(rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: Boolean
    True: Background color is applied to the row type.
    False: Background color is not applied to the row type.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetBackgroundColorNone()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetBackgroundColorNone()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colCurrent (vla-GetBackgroundColor tableStyle (+ acDataRow acTitleRow)))
    (setq colRowCurrent (vla-GetColor tableStyle acDataRow))
    (setq colNoneCurrent (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colCurrent)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowCurrent)) \"\n\"
		                 \"Background None = \" (if (= colNoneCurrent :vlax-true) \"True\" \"False\")))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetBackgroundColor tableStyle acTitleRow col)
    (vla-SetRGB col 255 0 0)
    (vla-SetColor tableStyle acDataRow col)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow (if (= colNoneCurrent :vlax-true) :vlax-false :vlax-true))
  
    (setq colNew (vla-GetBackgroundColor tableStyle acTitleRow))
    (setq colRowNew (vla-GetColor tableStyle acDataRow))
    (setq colNoneNew (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colNew)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowNew)) \"\n\"
		                 \"Background None = \" (if (= colNoneNew :vlax-true) \"True\" \"False\")))
    (vla-SetBackgroundColor tableStyle acTitleRow colCurrent)
    (vla-SetColor tableStyle acDataRow colRowCurrent)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow colNoneCurrent)
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetBlockAttributeValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9422DC8E-FB16-46C7-B9E9-ECE703C814D2"
"
GetBlockAttributeValue Method (ActiveX)
Gets the attribute value in the block content with an attribute definition id.
Supported platforms: Windows only
Signature - MLeader
VBA:
RetVal = object.GetBlockAttributeValue(attdefId)
object
    Type: MLeader
    The object this method applies to.
attdefID
    Access: Input-only
    Type: Long_PTR
    The attribute definition ID.
Signature - Table
VBA:
RetVal = object.GetBlockAttributeValue(row, col, attdefId)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
attdefId
    Access: Input-only
    Type: Long_PTR
    The attribute definition ID.
Return Value (RetVal)
Type: String
The attribute value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Blockttribute()
    ' This example creates an MLeader object and gets and sets values for
    ' the block attribute type.
    Dim points(0 To 5) As Double
    points(0) = 0: points(1) = 4: points(2) = 0
    points(3) = 1.5: points(4) = 5: points(5) = 0
    Dim i As Long
    Dim oML As AcadMLeader
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.ContentType = acBlockContent
    oML.ContentBlockType = acBlockBox
    Dim sBlock As String
    sBlock = oML.ContentBlockName
    Dim o As AcadEntity
    For Each o In ThisDrawing.Blocks(sBlock)
        If o.ObjectName = \"AcDbAttributeDefinition\" Then
            oML.SetBlockAttributeValue o.ObjectID, \"123\"
            MsgBox oML.GetBlockAttributeValue(o.ObjectID)
        End If
    Next o
    
    Update
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BlockAttribute()
    ;; This example creates an MLeader object and gets and sets values for
    ;; the block attribute type.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(0 4 0
                                  1.5 5 0
                                 )
    )
    (setq i 0)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-ContentType oML acBlockContent)
    (vla-put-ContentBlockType oML acBlockBox)
    (setq sBlock (vla-get-ContentBlockName oML))
    (vlax-for o (vla-Item (vla-get-Blocks doc) sBlock)
        (if (= (vla-get-ObjectName o) \"AcDbAttributeDefinition\")
	           (progn
                (vla-SetBlockAttributeValue oML (vla-get-ObjectID o) \"123\")
                (alert (vla-GetBlockAttributeValue oML (vla-get-ObjectID o)))
	           )
        )
    )
  
    (vla-Update acadObj)
    (vla-ZoomExtents acadObj)
)
")
("GetBlockAttributeValue2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7F2C0954-E1CF-4E08-B9AD-585957BD96E4"
"
GetBlockAttributeValue2 Method (ActiveX)
Gets the attribute value associated to a specified block cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBlockAttributeValue2(nRow, nCol, nContent, blkId)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
blkId
    Access: Input-only
    Type: Long_PTR
    The block table record object id to check.
Return Value (RetVal)
Type: String
The returned block attribute value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetBlockRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DD96909E-C5C9-41BC-BAA2-1EB19F0BADFB"
"
GetBlockRotation Method (ActiveX)
Returns the block rotation angle for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBlockRotation(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: Double
The rotation angle of the block.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetBlockScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6BECF6F6-93F5-47C1-9570-F31EF25243C9"
"
GetBlockScale Method (ActiveX)
Returns the block scale value for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBlockScale(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
Return Value (RetVal)
Type: Double
The scale of the block.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetBlockTableRecordId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9E3340A8-F672-4845-A55A-ABAD3372D79E"
"
GetBlockTableRecordId Method (ActiveX)
Returns the block table record ID of the cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBlockTableRecordId(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Integer
    The row in the table.
col
    Access: Input-only
    Type: Integer
    The column in the table.
Return Value (RetVal)
Type: Long_PTR
The pointer to hold the block table record object id.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetBlockTableRecordId2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DF3B3FCA-787B-45C3-9881-631F12DA05B6"
"
GetBlockTableRecordId2 Method (ActiveX)
Gets the block table record object id associated to a specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBlockTableRecordId2(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
Return Value (RetVal)
Type: Long_PTR
The pointer to hold the block table record object id.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetBoundingBox" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A20C361C-BBF0-4EAB-8BE7-709154CEEE09"
"
GetBoundingBox Method (ActiveX)
Gets two points of a box enclosing the specified object.
Supported platforms: Windows only
Signature
VBA:
object.GetBoundingBox MinPoint, MaxPoint
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
MinPoint
    Access: Output-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the minimum point of the object's bounding box.
MaxPoint
    Access: Output-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the maximum point of the object's bounding box.
Return Value (RetVal)
No return value.
Remarks
The corners are returned in WCS coordinates with the box edges parallel to the WCS X, Y, and Z axes.
Examples
VBA:
Sub Example_GetBoundingBox()
    ' This example creates a line in model space. It then finds the
    ' bounding box for the line and displays the corners of the box.
    
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    Dim lineObj As AcadLine
    ' Create the Line object in model space
    startPoint(0) = 2#: startPoint(1) = 2#: startPoint(2) = 0#
    endPoint(0) = 4#: endPoint(1) = 4#: endPoint(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    Dim minExt As Variant
    Dim maxExt As Variant
    
    ' Return the bounding box for the line and return the minimum
    ' and maximum extents of the box in the minExt and maxExt variables.
    lineObj.GetBoundingBox minExt, maxExt
    
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the line are:\" & vbCrLf _
         & \"Min Extent: \" & minExt(0) & \",\" & minExt(1) & \",\" & minExt(2) _
         & vbCrLf & \"Max Extent: \" & maxExt(0) & \",\" & maxExt(1) & \",\" & maxExt(2), vbInformation, \"GetBoundingBox Example\"
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetBoundingBox()
    ;; This example creates a line in model space. It then finds the
    ;; bounding box for the line and displays the corners of the box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the Line object in model space
    (setq startPoint (vlax-3D-point 2 2 0))
    (setq endPoint (vlax-3D-point 4 4 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    ;; Return the bounding box for the line and return the minimum
    ;; and maximum extents of the box in the minExt and maxExt variables.
    (vla-GetBoundingBox lineObj 'minExt 'maxExt)
    (setq minExt (vlax-safearray->list minExt)
	         maxExt (vlax-safearray->list maxExt))
  
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the line are:\"
                   \"\nMin Extent: \" (rtos (nth 0 minExt) 2) \",\" (rtos (nth 1 minExt) 2) \",\" (rtos (nth 2 minExt) 2)
                   \"\nMax Extent: \" (rtos (nth 0 maxExt) 2) \",\" (rtos (nth 1 maxExt) 2) \",\" (rtos (nth 2 maxExt) 2)))
)
")
("GetBreakHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AFC1C151-4A92-4393-A586-B417F1862D3E"
"
GetBreakHeight Method (ActiveX)
Get the break height of the table.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBreakHeight(nIndex)
object
    Type: Table
    The object this method applies to.
nIndex
    Access: Input-only
    Type: Long
    The index of the table.
Return Value (RetVal)
Type: Double
The height value of the break.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BreakHeight()
    ' This example creates a table object and then breaks it into
    ' two tables.
    
    ' Create a new table object in model space
    Dim pt(2) As Double
    
    Dim modelSpace As AcadModelSpace
    Set modelSpace = ThisDrawing.modelSpace
    
    Dim table As AcadTable
    Set table = modelSpace.AddTable(pt, 5, 5, 10, 30)
    
    table.EnableBreak = True
    table.BreakSpacing = 3.5
    table.TableBreakHeight = 35#
    table.AllowManualHeights = True
    table.SetBreakHeight 0, 20#
    table.SetBreakHeight 1, 35#
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BreakHeight()
    ;; This example creates a table object and then breaks it into
    ;; two tables.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new table object in model space
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq table (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-put-EnableBreak table :vlax-true)
    (vla-put-BreakSpacing table 3.5)
    (vla-put-TableBreakHeight table 35.0)
    (vla-put-AllowManualHeights table :vlax-true)
    (vla-SetBreakHeight table 0 20.0)
    (vla-SetBreakHeight table 1 35.0)
    (vla-ZoomExtents acadObj)
)
")
("GetBulge" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6AC9CF99-7230-4333-859A-1CBACB57B5BA"
"
GetBulge Method (ActiveX)
Gets the bulge value at a given index of the polyline.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetBulge(Index)
object
    Type: LWPolyline, Polyline
    The objects this method applies to.
Index
    Access: Input-only
    Type: Integer
    The index location of the vertex you wish to query. The index must be a positive integer beginning with zero.
Return Value (RetVal)
Type: Double
The bulge value for the vertex at the given index.
Remarks
Polyline: this method will fail if the polyline Type property is not acSimplePoly.
The bulge is the tangent of 1/4 of the included angle for the arc between the selected vertex and the next vertex in the polyline's vertex list. A negative bulge value indicates that the arc goes clockwise from the selected vertex to the next vertex. A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
Examples
VBA:
Sub Example_GetBulge()
    ' This example creates a lightweight polyline in model space.
    ' It then finds and changes the bulge for a given segment.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 1
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ZoomAll
    
    ' Find the bulge of the third segment
    Dim currentBulge As Double
    currentBulge = plineObj.GetBulge(3)
    MsgBox \"The bulge for the third segment is \" & plineObj.GetBulge(3), , \"GetBulge Example\"
    
    ' Change the bulge of the third segment
    plineObj.SetBulge 3, -0.5
    plineObj.Update
    MsgBox \"The bulge for the third segment is now \" & plineObj.GetBulge(3), , \"GetBulge Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetBulge()
    ;; This example creates a lightweight polyline in model space.
    ;; It then finds and changes the bulge for a given segment.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                  4 1
                                 )
    )   
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    
    ;; Find the bulge of the third segment
    (setq currentBulge (vla-GetBulge plineObj 3))
    (alert (strcat \"The bulge for the third segment is \" (rtos (vla-GetBulge plineObj 3) 2)))
    
    ;; Change the bulge of the third segment
    (vla-SetBulge plineObj 3 -0.5)
    (vla-Update plineObj)
    (alert (strcat \"The bulge for the third segment is now \" (rtos (vla-GetBulge plineObj 3) 2)))
)
")
("GetCanonicalMediaNames" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BDFDA2F3-63E6-47CD-8185-1793BEEDBCB1"
"
GetCanonicalMediaNames Method (ActiveX)
Gets all available canonical media names for the specified plot device.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCanonicalMediaNames
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Return Value (RetVal)
Type: Variant (array of strings)
The array of available media names for the specified plot device.
Remarks
You should call RefreshPlotDeviceInfo before the first time you use this method. Once you have called RefreshPlotDeviceInfo, you do not need to call it again unless your plot device information changes during the session.
Examples
VBA:
Sub Example_GetCanonicalMediaNames()
    ' This example gets the current plot device information
    ' and then displays the list of plot device names,
    ' media names, localized media names, and plot style
    ' table entries.
    Dim Layout As ACADLayout
    Set Layout = ThisDrawing.ModelSpace.Layout
    
    ' Refresh the current plot information for
    ' this session.
    Layout.RefreshPlotDeviceInfo
    
    ' List all the valid device names for the system
    Dim plotDevices As Variant
    plotDevices = Layout.GetPlotDeviceNames()
    
    Dim x As Integer
    For x = LBound(plotDevices) To UBound(plotDevices)
        MsgBox plotDevices(x)
    Next
    
    ' List all the media names, and their localized version
    Dim mediaNames As Variant
    mediaNames = Layout.GetCanonicalMediaNames()
    
    For x = LBound(mediaNames) To UBound(mediaNames)
        MsgBox mediaNames(x)
        MsgBox Layout.GetLocaleMediaName(mediaNames(x))
    Next
    
    ' List all the entries in the plot style table
    Dim styleNames As Variant
    styleNames = Layout.GetPlotStyleTableNames()
    
    For x = LBound(styleNames) To UBound(styleNames)
        MsgBox styleNames(x)
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetCanonicalMediaNames()
    ;; This example gets the current plot device information
    ;; and then displays the list of plot device names,
    ;; media names, localized media names, and plot style
    ;; table entries.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq Layout (vla-get-Layout (vla-get-ModelSpace doc)))
    
    ;; Refresh the current plot information for
    ;; this session.
    (vla-RefreshPlotDeviceInfo Layout)
    
    ;; List all the valid device names for the system
    (setq plotDevices (vlax-variant-value (vla-GetPlotDeviceNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound plotDevices 1) x)
        (alert (vlax-safearray-get-element plotDevices x))
        (setq x (1+ x))
    )
    
    ;; List all the media names, and their localized version
    (setq mediaNames (vlax-variant-value (vla-GetCanonicalMediaNames Layout)))
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound mediaNames 1) x)
        (alert (vlax-safearray-get-element mediaNames x))
        (alert (vla-GetLocaleMediaName Layout (vlax-safearray-get-element mediaNames x)))
        (setq x (1+ x))
    )
    
    ;; List all the entries in the plot style table
    (setq styleNames (vlax-variant-value (vla-GetPlotStyleTableNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound styleNames 1) x)
        (alert (vlax-safearray-get-element styleNames x))
        (setq x (1+ x))
    )
)
")
("GetCellAlignment" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8C162420-98EC-4A0C-AED5-429685ABEB7E"
"
GetCellAlignment Method (ActiveX)
Returns the alignment for the cell in the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellAlignment(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: AcCellAlignment enum
    acBottomCenter
    acBottomLeft
    acBottomRight
    acMiddleCenter
    acMiddleLeft
    acMiddleRight
    acTopCenter
    acTopLeft
    acTopRight
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellBackgroundColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EE598987-E261-41D8-9E4F-D2DE8D22A635"
"
GetCellBackgroundColor Method (ActiveX)
Returns the background true color value of a cell in the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellBackgroundColor(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the cell's background color.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellBackgroundColorNone" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6D19CF36-F34D-4F45-8E10-7C536E765706"
"
GetCellBackgroundColorNone Method (ActiveX)
Returns the value specifying that there is no background color for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellBackgroundColorNone(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: Boolean
    True: Background color is applied to the cell.
    False: Background color is not applied to the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellClass" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-896D8EDA-B95A-42F4-A6B2-9FD5C6436D9E"
"
GetCellClass Method (ActiveX)
Gets the class of a cell style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellClass(StringCellStyle)
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    The table cell style name.
Return Value (RetVal)
Type: Integer
The cell style class.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellClass()
    ' This example creates a TableStyle object and sets values for
    ' the style classes and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetCellClass \"NewTestStyle\", 4
      
    customObj.SetRotation \"NewTestStyle\", 8.4
      
    MsgBox \"The cell class is \" & customObj.GetCellClass(\"NewTestStyle\") & _
           \" the cell rotation is \" & customObj.GetRotation(\"NewTestStyle\")
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellClass()
    ;; This example creates a TableStyle object and sets values for
    ;; the style classes and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (vla-SetCellClass customObj \"NewTestStyle\" 4)
    (vla-SetRotation customObj \"NewTestStyle\" 8.4)
      
    (alert (strcat \"The cell class is \" (itoa (vla-GetCellClass customObj \"NewTestStyle\"))
                   \" and the cell rotation is \" (rtos (vla-GetRotation customObj \"NewTestStyle\") 2) \".\"
           )
    )
)
")
("GetCellContentColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-67E82FEC-63C6-4883-9A83-24C5E6CF75C7"
"
GetCellContentColor Method (ActiveX)
Returns the true color value for the content of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellContentColor(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object applied to the content.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellDataType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-33231CA9-CC92-4BB7-9260-58E3E15C9794"
"
GetCellDataType Method (ActiveX)
Gets the cell data and unit type for the given row and column.
Supported platforms: Windows only
Signature
VBA:
object.GetCellDataType row, col, pDataType, pUnitType
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
pDataType
    Access: Output-only
    Type: AcValueDataType enum
    The cell data type.
        acBuffer
        acDate
        acDouble
        acGeneral
        acLong
        acObjectId
        acPoint2d
        acPoint3d
        acResbuf
        acString
        acUnknownDataType
pUnitType
    Access: Output-only
    Type: AcValueUnitType enum
    The cell unit type.
        acUnitAngle
        acUnitArea
        acUnitDistance
        acUnitless
        acUnitVolume
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("GetCellExtents" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F8975E64-00E2-4B8A-A45C-8EA76E2A147B"
"
GetCellExtents Method (ActiveX)
Returns the cell extents for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.GetCellExtents row, col, bOuterCell
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
bOuterCell
    Access: Input-only
    Type: Boolean
        True: The specified cell is an outer cell.
        False: The specified cell is an inner cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6D03F57F-E216-4BAD-A73B-C2CB85A579C7"
"
GetCellFormat Method (ActiveX)
Gets the cell format for the given row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellFormat(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
col
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
Return Value (RetVal)
Type: String
The cell format.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("GetCellGridColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D7B5A899-8C18-489F-8D9D-B7E434ADF487"
"
GetCellGridColor Method (ActiveX)
Returns the grid color value for an edge of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellGridColor(row, col, edge)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
edge
    Access: Input-only
    Type: AcCellEdgeMask enum
        acBottomMask: Bottom edge index of the cell.
        acLeftMask: Left edge index of the cell.
        acRightMask: Right edge index of the cell.
        acTopMask: Top edge index of the cell.
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object applied to the grid.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellGridLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3A4505C8-A91E-47D5-8C37-FA2B1E2A3C80"
"
GetCellGridLineWeight Method (ActiveX)
Returns the grid lineweight value for an edge of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellGridLineWeight(row, col, edge)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
edge
    Access: Input-only
    Type: AcCellEdgeMask enum
        acBottomMask: Bottom edge index of the cell.
        acLeftMask: Left edge index of the cell.
        acRightMask: Right edge index of the cell.
        acTopMask: Top edge index of the cell.
Return Value (RetVal)
Type: ACAD_LWEIGHT enum
    acLnWt000
    acLnWt005
    acLnWt009
    acLnWt013
    acLnWt015
    acLnWt018
    acLnWt020
    acLnWt025
    acLnWt030
    acLnWt035
    acLnWt040
    acLnWt050
    acLnWt053
    acLnWt060
    acLnWt070
    acLnWt080
    acLnWt090
    acLnWt100
    acLnWt106
    acLnWt120
    acLnWt140
    acLnWt158
    acLnWt200
    acLnWt211
    acLnWtByLayer
    acLnWtByBlock
    acLnWtByLwDefault
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellGridVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E56EA30B-D75C-4B9B-B2F0-41E6C5997C7C"
"
GetCellGridVisibility Method (ActiveX)
Returns the grid visibility value for an edge of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellGridVisibility(row, col, edge)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
edge
    Access: Input-only
    Type: AcCellEdgeMask enum
        acBottomMask: Bottom edge index of the cell.
        acLeftMask: Left edge index of the cell.
        acRightMask: Right edge index of the cell.
        acTopMask: Top edge index of the cell.
Return Value (RetVal)
Type: Boolean
    True: Grid line is visible.
    False: Grid line is not visible.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellState" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2DB653E7-4AB3-4BB7-9E62-FC5768C410A4"
"
GetCellState Method (ActiveX)
Get a cell's state.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellState(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
Return Value (RetVal)
Type: AcCellState enum
The cell state.
    acCellStateContentLocked
    acCellStateContentModified
    acCellStateContentReadOnly
    acCellStateFormatLocked
    acCellStateFormatModified
    acCellStateFormatReadOnly
    acCellStateLinked
    acCellStateNone
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("GetCellStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F938D284-3448-4B2C-B1FC-08D6F528B697"
"
GetCellStyle Method (ActiveX)
Gets the cell style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellStyle(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
Return Value (RetVal)
Type: String
The cell style.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("GetCellStyleOverrides" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B8B9713F-2B6A-4256-B378-C351A6081699"
"
GetCellStyleOverrides Method (ActiveX)
Returns the cell style overrides.
Supported platforms: Windows only
Signature
VBA:
object.GetCellStyleOverrides row, col
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellStyles" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D7F00C0D-66A8-49F7-A8E0-20A8AD581519"
"
GetCellStyles Method (ActiveX)
Gets an array of all the named cell styles associated with the table style.
Supported platforms: Windows only
Signature
VBA:
object.GetCellStyles cellStylesArray
object
    Type: TableStyle
    The object this method applies to.
cellStylesArray
    Access: Output-only
    Type: Variant
    Array of named cell styles.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellTextHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-355A7128-5E10-4547-AB88-4CD495011488"
"
GetCellTextHeight Method (ActiveX)
Returns the text height for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellTextHeight(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: Double
The text height of the table cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellTextStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F71423EB-37A0-491A-B297-DDCF605352F2"
"
GetCellTextStyle Method (ActiveX)
Returns the text style name for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellTextStyle(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: String
The text style assigned to the table cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-230EB944-EFE6-4EA9-B1BD-148E526FEB9E"
"
GetCellType Method (ActiveX)
Returns the cell type for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellType(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: AcCellType enum
    acBlockCell
    acTextCell
    acUnknownCell
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCellValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AD64910D-2FFF-419E-9C96-9FF9BE48CFBC"
"
GetCellValue Method (ActiveX)
Gets the cell value for the given row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCellValue(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
Return Value (RetVal)
Type: Variant
The cell value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("GetColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9DCB6044-5CE7-4E93-90E9-42F0121AF5C9"
"
GetColor Method (ActiveX)
Returns the true color value for the specified row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetColor(rowType)
object
    Type: TableStyle
    The object this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the row type.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colCurrent (vla-GetBackgroundColor tableStyle (+ acDataRow acTitleRow)))
    (setq colRowCurrent (vla-GetColor tableStyle acDataRow))
    (setq colNoneCurrent (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colCurrent)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowCurrent)) \"\n\"
		                 \"Background None = \" (if (= colNoneCurrent :vlax-true) \"True\" \"False\")))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetBackgroundColor tableStyle acTitleRow col)
    (vla-SetRGB col 255 0 0)
    (vla-SetColor tableStyle acDataRow col)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow (if (= colNoneCurrent :vlax-true) :vlax-false :vlax-true))
  
    (setq colNew (vla-GetBackgroundColor tableStyle acTitleRow))
    (setq colRowNew (vla-GetColor tableStyle acDataRow))
    (setq colNoneNew (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colNew)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowNew)) \"\n\"
		                 \"Background None = \" (if (= colNoneNew :vlax-true) \"True\" \"False\")))
    (vla-SetBackgroundColor tableStyle acTitleRow colCurrent)
    (vla-SetColor tableStyle acDataRow colRowCurrent)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow colNoneCurrent)
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-44881C28-FAE3-48F5-B045-15F9989D6EE3"
"
GetColor2 Method (ActiveX)
Returns the color value for the specified named cell style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetColor2(bstrCellStyle)
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The named cell style.
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the cell style.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colCurrent (vla-GetBackgroundColor tableStyle (+ acDataRow acTitleRow)))
    (setq colRowCurrent (vla-GetColor tableStyle acDataRow))
    (setq colNoneCurrent (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colCurrent)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowCurrent)) \"\n\"
		                 \"Background None = \" (if (= colNoneCurrent :vlax-true) \"True\" \"False\")))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetBackgroundColor tableStyle acTitleRow col)
    (vla-SetRGB col 255 0 0)
    (vla-SetColor tableStyle acDataRow col)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow (if (= colNoneCurrent :vlax-true) :vlax-false :vlax-true))
  
    (setq colNew (vla-GetBackgroundColor tableStyle acTitleRow))
    (setq colRowNew (vla-GetColor tableStyle acDataRow))
    (setq colNoneNew (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colNew)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowNew)) \"\n\"
		                 \"Background None = \" (if (= colNoneNew :vlax-true) \"True\" \"False\")))
    (vla-SetBackgroundColor tableStyle acTitleRow colCurrent)
    (vla-SetColor tableStyle acDataRow colRowCurrent)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow colNoneCurrent)
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetColumnName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A0DE6936-46FD-4CE5-8F4C-E3E32F0B0DD5"
"
GetColumnName Method (ActiveX)
Gets a column's name.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetColumnName(nIndex)
object
    Type: Table
    The object this method applies to.
nIndex
    Access: Input-only
    Type: Long
    The index of the column.
Return Value (RetVal)
Type: String
The name of the column.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ColumnName()
     ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.ModelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetColumnName(2, \"Test Name\")
    MsgBox \"The column name is: \" & vbCrLf & _
           MyTable.GetColumnName(2)
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ColumnName()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetColumnName MyTable 2 \"Test Name\")
    (alert (strcat \"The column name is: \n\"
                   (vla-GetColumnName MyTable 2)))
    (vla-ZoomExtents acadObj)
)
")
("GetColumnWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-75753472-516B-46B4-B8BB-C8E7FDA58F42"
"
GetColumnWidth Method (ActiveX)
Returns the column width for the column at the specified column index in the table.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetColumnWidth(col)
object
    Type: Table
    The object this method applies to.
col
    Access: Input-only
    Type: Long
    The column in the table.
Return Value (RetVal)
Type: Double
The width of the column.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetConstantAttributes" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2655DC82-1DD4-42EC-888C-5F6E32A7342B"
"
GetConstantAttributes Method (ActiveX)
Gets the constant attributes in the block or external reference.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetConstantAttributes
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this method applies to.
Return Value (RetVal)
Type: Variant (array of Attribute objects)
The array of Attribute objects that are constant for the block reference.
Remarks
This method returns an array of constant attributes attached to the block or external reference. The attributes returned are the constant attribute definitions, not attribute references.
Examples
VBA:
Sub Example_GetConstantAttributes()
    ' This example creates a constant attribute definition on a block.
    ' It then queries the block to return the attribute.
    
    ' Create the block to hold the attribute
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"New_Block\")
    
    ' Define the attribute definition
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim tag As String
    Dim value As String
    height = 1#
    mode = acAttributeModeConstant
    prompt = \"Constant Prompt\"
    insertionPnt(0) = 5#: insertionPnt(1) = 5#: insertionPnt(2) = 0#
    tag = \"Constant_Tag\"
    value = \"Constant Value\"
    
    ' Create the attribute definition object on the block
    Set attributeObj = blockObj.AddAttribute(height, mode, prompt, insertionPnt, tag, value)
    ZoomAll
    
    ' Insert the block into the drawing
    Dim blockRefObj As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"New_Block\", 1#, 1#, 1#, 0)
    
    ' Get the constant attribute definition from the block
    Dim queryAttribute As Variant
    queryAttribute = blockRefObj.GetConstantAttributes
    
    Dim count As Integer
    count = UBound(queryAttribute) - LBound(queryAttribute)
    MsgBox \"The block reference has \" & count & \" constant attributes.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetConstantAttributes()
    ;; This example creates a constant attribute definition on a block.
    ;; It then queries the block to return the attribute.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the block to hold the attribute
    (setq insertionPnt (vlax-3d-point 0 0 0))
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"New_Block\"))
    
    ;; Define the attribute definition
    (setq insertionPnt (vlax-3d-point 5 5 0)
          attHeight 1
          attMode acAttributeModeConstant
          attPrompt \"Constant Prompt\"
          attTag \"Constant_Tag\"
          attValue \"Constant Value\")
    
    ;; Create the attribute definition object on the block
    (setq attributeObj (vla-AddAttribute blockObj attHeight attMode attPrompt insertionPnt attTag attValue))
    
    ;; Insert the block into the drawing
    (setq insertionPnt (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj (vla-InsertBlock modelSpace insertionPnt \"New_Block\" 1 1 1 0))
    (vla-ZoomAll acadObj)
    ;; Get the constant attribute definition from the block
    (setq queryAttribute (vlax-variant-value (vla-GetConstantAttributes blockRefObj)))
    
    (setq count (1+ (vlax-safearray-get-u-bound queryAttribute 1)))
    (alert (strcat \"The block reference has \" (itoa count) \" constant attributes.\"))
)
")
("GetContentColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4726EE3F-51EC-4334-B33D-D5BC52A31600"
"
GetContentColor Method (ActiveX)
Returns the true color value for the specified row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetContentColor(rowType)
object
    Type: Table
    The object this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the content of the row type.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetContentColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ECE7A46C-B69F-4A7C-B4F8-B6585869B9F7"
"
GetContentColor2 Method (ActiveX)
Returns the color value for the specified content located at the provided row, column, and content index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetContentColor2(row, column, content)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number in the table.
nColumn
    Access: Input-only
    Type: Long
    The column number in the table.
nContent
    Access: Input-only
    Type: Long
    The content index in the table cell.
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the content at the specified index in the table cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetContentLayout" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CD9AFE81-5B0D-4B42-8A45-FB05CCD673AF"
"
GetContentLayout Method (ActiveX)
Get a cell's content layout.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetContentLayout(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
Return Value (RetVal)
Type: AcCellContentLayout enum
The layout value.
    acCellContentLayoutFlow
    acCellContentLayoutStackedHorizontal
    acCellContentLayoutStackedVertical
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetContentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C04AB60A-502D-4E07-B498-1E0070F105CB"
"
GetContentType Method (ActiveX)
Get a cell's content type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetContentType(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
Return Value (RetVal)
Type: AcCellContentType enum
The content type.
    acCellContentTypeBlock
    acCellContentTypeField
    acCellContentTypeUnknown
    acCellContentTypeValue
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetControlPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A3039B0D-A486-45B4-9FE1-8264AB9E1DF6"
"
GetControlPoint Method (ActiveX)
Gets the coordinates of the control point at a given index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetControlPoint(Index)
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Integer
    The index location of the control point you wish to query. The index must be a positive integer beginning with zero.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The 3D WCS coordinates of the control point at the given index location.
Remarks
Control points fine-tune a spline definition by adding weight to a portion of the spline curve.
You can query the total number of control points in a spline using the NumberOfControlPoints property. You can set a new coordinate location for a control point by using the SetControlPoint method. You can set a new weight for a control point by using the SetWeight method.
Examples
VBA:
Sub Example_GetControlPoint()
    ' This example creates a spline object in model space.
    ' It then finds the coordinates of the first control point
    ' and changes that value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display the coordinates of the first control point
    Dim controlPoint As Variant
    controlPoint = splineObj.GetControlPoint(0)
    MsgBox \"Control point 1 is at \" & controlPoint(0) & \", \" & controlPoint(1) & \", \" & controlPoint(2), , \"GetControlPoint Example\"
    
    ' Change the coordinate of the first fit point
    controlPoint(0) = 0: controlPoint(1) = 3: controlPoint(2) = 0
    splineObj.SetControlPoint 0, controlPoint
    splineObj.Update
    MsgBox \"Control point 1 is now at \" & controlPoint(0) & \", \" & controlPoint(1) & \", \" & controlPoint(2), , \"GetControlPoint Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetControlPoint()
    ;; This example creates a spline object in model space.
    ;; It then finds the coordinates of the first control point
    ;; and changes that value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display the coordinates of the first control point
    (setq controlPoint (vlax-safearray->list (vlax-variant-value (vla-GetControlPoint splineObj 0))))
    (alert (strcat \"Control point 1 is at \" (rtos (nth 0 controlPoint) 2) \", \" (rtos (nth 1 controlPoint) 2) \", \" (rtos (nth 2 controlPoint) 2)))
    
    ;; Change the coordinate of the first fit point
    (setq controlPoint (vlax-3d-point 0 3 0))
    (vla-SetControlPoint splineObj 0 controlPoint)
    (vla-Update splineObj)
    (setq controlPoint (vlax-safearray->list (vlax-variant-value (vla-GetControlPoint splineObj 0))))
    (alert (strcat \"Control point 1 is now at \" (rtos (nth 0 controlPoint) 2) \", \" (rtos (nth 1 controlPoint) 2) \", \" (rtos (nth 2 controlPoint) 2)))
)
")
("GetCorner" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DEBFE610-787C-478C-B311-F1DEE2B03C1E"
"
GetCorner Method (ActiveX)
Gets a corner of a rectangle.
Supported platforms: Windows only
Signature
VBA:
RetVal = GetCorner(Point [, Prompt])
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the base point of the rectangle.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The 3D WCS coordinates representing the corner of the rectangle.
Remarks
AutoCAD pauses for user input of the corner of a rectangle, and sets the return value to the value of the selected point. The Point parameter specifies the base point of the rectangle in the 3D WCS coordinates; this parameter is required. The Prompt parameter specifies a string that AutoCAD displays before it pauses. The prompt is optional.
The AutoCAD user can specify the corner by entering a point in the WCS coordinate format; GetCorner treats Point as a three-dimensional point. The user can specify the corner also by specifying a location on the graphics screen. AutoCAD draws a dynamically sized rectangle from Point to the current crosshair position to help the user visualize the location of the second corner. The rectangle is drawn in the XY plane of the WCS. When the pointing device is used, GetCorner ignores the Z field of Point and sets the Z field of result to the current elevation.
Examples
VBA:
Sub Example_GetCorner()
    ' This example provides a base point and prompts the user to
    ' input the second point to make a rectangle.
    
    AppActivate ThisDrawing.Application.Caption
    Dim returnPnt As Variant
    Dim basePnt(0 To 2) As Double
    basePnt(0) = 2#: basePnt(1) = 2#: basePnt(2) = 0#
    
    ' Prompt the user to pick second point and returns the point
    returnPnt = ThisDrawing.Utility.GetCorner(basePnt, \"Enter Other corner: \")
    
    ' Display the point picked
    MsgBox \"The point picked was \" & returnPnt(0) & \", \" & returnPnt(1) & \", \" & returnPnt(2), , \"GetCorner Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetCorner()
    ;; This example provides a base point and prompts the user to
    ;; input the second point to make a rectangle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Prompt the user to pick second point and returns the point
    (setq basePnt (vlax-3d-point 2 2 0))
    (setq returnPnt (vla-GetCorner (vla-get-Utility doc) basePnt \"Enter Other corner: \"))
    
    ;; Display the point picked
    (setq returnPnt (vlax-safearray->list (vlax-variant-value returnPnt)))
    (alert (strcat \"The point picked was \" (rtos (nth 0 returnPnt) 2) \", \" (rtos (nth 1 returnPnt) 2) \", \" (rtos (nth 2 returnPnt) 2)))
)
")
("GetCustomByIndex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-40B8C6D4-7B70-48AE-A7BF-5C2B7728AB6F"
"
GetCustomByIndex Method (ActiveX)
Returns the custom property name (key) and value that correspond to an index value.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCustomByIndex(Index, pKey, pValue)
object
    Type: SummaryInfo
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index value of the property. The index range is from zero to one less than the number of custom properties.
pKey
    Access: Output-only
    Type: String
    The custom property name that corresponds to the index value.
pValue
    Access: Output-only
    Type: String
    The custom property value that corresponds to the index value.
Return Value (RetVal)
Type: String
The custom property name (key) and value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetCustomByIndex()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetCustomByIndex()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("GetCustomByKey" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AE25EAE8-012B-4E16-BE71-13BC07313E07"
"
GetCustomByKey Method (ActiveX)
Returns the custom property value that corresponds to a name (key) value.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetCustomByKey(key, pValue)
object
    Type: SummaryInfo
    The object this method applies to.
key
    Access: Input-only
    Type: String
    The name of the custom property.
pValue
    Access: Output-only
    Type: String
    The custom property value that corresponds to the custom property name.
Return Value (RetVal)
Type: String
The custom property value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetCustomByKey()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetCustomByKey()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("GetCustomData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BCA24A43-3E9D-4107-B455-E253823C507C"
"
GetCustomData Method (ActiveX)
Gets the custom data associated to a cell.
Supported platforms: Windows only
Signature
VBA:
object.GetCustomData nRow, nCol, szKey, pData
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
szKey
    Access: Input-only
    Type: String
    The input key of the AcDbEvalContextPair.
pData
    Access: Output-only
    Type: Variant
    The custom data.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetCustomScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B9B18B0C-5DC1-458A-8AD9-32FE0CA58635"
"
GetCustomScale Method (ActiveX)
Gets the custom scale for a layout or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.GetCustomScale Numerator, Denominator
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Numerator
    Access: Output-only
    Type: Double
    The numerator in the scale ratio. This value represents the number of inches or mm for the scale.
Denominator
    Access: Output-only
    Type: Double
    The denominator in the scale ratio. This value represents the number of drawing units for the scale.
Return Value (RetVal)
No return value.
Remarks
The Numerator parameter depends upon the setting of the PaperUnits property.
Examples
VBA:
Sub Example_GetCustomScale()
    ' This example will access the Layouts collection for the current drawing
    ' and list basic information about the custom scale for each Layout.
    ' It will then change the custom scale information for model space and re-display
    ' the scale information.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim Numerator As Double, Denominator As Double
    Dim Measurement As String
    
    ' Display current scale information
    GoSub DISPLAY_SCALE_INFO
    
    ' Modify scale
    Numerator = 1
    Denominator = 1
    
    ThisDrawing.Layouts(\"Model\").SetCustomScale Numerator, Denominator
    ThisDrawing.Regen acAllViewports
            
    ' Display new scale information
    GoSub DISPLAY_SCALE_INFO
        
    Exit Sub
    
DISPLAY_SCALE_INFO:
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    msg = vbCrLf & vbCrLf   ' Start with a space
    
    ' Get the scale information of every layout in this drawing
    For Each Layout In Layouts
        msg = msg & Layout.name & vbCrLf
        
        ' Get scale information
        Layout.GetCustomScale Numerator, Denominator
        
        ' Are we using inches or millimeters
        Measurement = IIf(Layout.PaperUnits = acInches, \" inch(es)\", \" millimeter(s)\")
        
        ' Format for display
        msg = msg & vbTab & \"Contains \" & Numerator & Measurement & vbCrLf
        msg = msg & vbTab & \"Contains \" & Denominator & \" drawing units\" & vbCrLf
        msg = msg & \"_____________________\" & vbCrLf
        
    Next
    
    ' Display custom scale information
    MsgBox \"Custom scale information for the current drawing is: \" & msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetCustomScale()
    ;; This example will access the Layouts collection for the current drawing
    ;; and list basic information about the custom scale for each Layout.
    ;; It will then change the custom scale information for model space and re-display
    ;; the scale information.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Display current scale information
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\")
    
    ;; Get the scale information of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg (vla-get-Name Layout) \"\n\"))
        
        ;; Get scale information
        (vla-GetCustomScale Layout 'Numerator 'Denominator)
        
        ;; Are we using inches or millimeters
        (setq Measurement (if (= (vla-get-PaperUnits Layout) acInches) \" inch(es)\n\" \" millimeter(s)\n\"))
        
        ;; Format for display
        (setq msg (strcat msg \"  Contains \" (rtos Numerator 2) Measurement
                              \"  Contains \" (rtos Denominator 2) \" drawing units\n\"
                              \"_____________________\n\"))   
    )
    
    ;; Display custom scale information
    (alert (strcat \"Custom scale information for the current drawing is: \" msg))
  
    ;; Modify scale
    (setq Numerator 1
          Denominator 1)
    
    (vla-SetCustomScale (vla-Item (vla-get-Layouts doc) \"Model\") Numerator Denominator)
    (vla-Regen doc acAllViewports)
            
    ;; Display new scale information
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\")
    
    ;; Get the scale information of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg (vla-get-Name Layout) \"\n\"))
        
        ;; Get scale information
        (vla-GetCustomScale Layout 'Numerator 'Denominator)
        
        ;; Are we using inches or millimeters
        (setq Measurement (if (= (vla-get-PaperUnits Layout) acInches) \" inch(es)\n\" \" millimeter(s)\n\"))
        
        ;; Format for display
        (setq msg (strcat msg \"  Contains \" (rtos Numerator 2) Measurement
                              \"  Contains \" (rtos Denominator 2) \" drawing units\n\"
                              \"_____________________\n\"))   
    )
    ;; Display custom scale information
    (alert (strcat \"Custom scale information for the current drawing is: \" msg))
)
")
("GetDataFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4FC088E4-CBD0-4E03-98BB-41152E5B02F2"
"
GetDataFormat Method (ActiveX)
Gets a cell's format.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetDataFormat(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
Return Value (RetVal)
Type: String
The format of the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetDataType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5D3C02C0-26E2-478D-881C-0E129C364C46"
"
GetDataType Method (ActiveX)
Returns the data type and unit type for the specified row type.
Supported platforms: Windows only
Signature
VBA:
object.GetDataType rowType, pDataType, pUnitType
object
    Type: Table, TableStyle
    The objects this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acTitleRow
        acHeaderRow
        acUnknownRow
pDataType
    Access: Output-only
    Type: AcValueDataType enum
    The data type of the row type.
        acBuffer
        acDate
        acDouble
        acGeneral
        acLong
        acObjectId
        acPoint2d
        acPoint3d
        acResbuf
        acString
        acUnknownDataType
pUnitType
    Access: Output-only
    Type: AcValueUnitType enum
    The unit type of the row type.
        acUnitAngle
        acUnitArea
        acUnitDistance
        acUnitless
        acUnitVolume
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetDataType2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3542955C-2F9C-4EFA-B0D1-CEE519A052A1"
"
GetDataType2 Method (ActiveX)
Gets the row data type and unit type for cell content.
Supported platforms: Windows only
Signature
VBA:
object.GetDataType2 nRow, nCol, nContent, pDataType, pUnitType
object
    Type: Table, TableStyle
    The objects this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
pDataType
    Access: Output-only
    Type: AcValueDataType enum
    The data type of the content
        acBuffer
        acDate
        acDouble
        acGeneral
        acLong
        acObjectId
        acPoint2d
        acPoint3d
        acResbuf
        acString
        acUnknownDataType
pUnitType
    Access: Output-only
    Type: AcValueUnitType enum
    The unit type of the content.
        acUnitAngle
        acUnitArea
        acUnitDistance
        acUnitless
        acUnitVolume
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetDistance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8E5E263B-F827-42EA-8376-49DC97778366"
"
GetDistance Method (ActiveX)
Gets the distance from the prompt line or a selected set of points on the screen.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetDistance([Point [, Prompt]])
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the base point. If this point is not provided, the user must input two points.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text to display to prompt the user for input.
Return Value (RetVal)
Type: Variant (double or array of doubles)
The distance from the prompt line or a selected set of points on the screen.
Remarks
AutoCAD pauses for user input of a linear distance and sets the return value to the value of the selected distance. The Point parameter specifies a base point in WCS coordinates. The Prompt parameter specifies a string that AutoCAD displays before it pauses. Both Point and Prompt are optional.
The AutoCAD user can specify the distance by entering a number in the current units format. The user can also set the distance by specifying two locations on the graphics screen. AutoCAD draws a rubber-band line from the first point to the current crosshair position to help the user visualize the distance. If the Point parameter is provided, AutoCAD uses this value as the first of the two points.
By default, GetDistance treats Point and the return value as three-dimensional points. A prior call to the InitializeUserInput method can force Point to be two-dimensional, ensuring that this method returns a planar distance.
Regardless of the method used to specify the distance or the current linear units (for example, feet and inches), this method always sets the return value to a double-precision floating-point value.
Examples
VBA:
Sub Example_GetDistance()
    ' This example returns the distance entered by the user.
     
    AppActivate ThisDrawing.Application.Caption
       
    Dim returnDist As Double
    Dim basePnt(0 To 2) As Double
    basePnt(0) = 0#: basePnt(1) = 0#: basePnt(2) = 0#
    
    ' Return the value entered by user. A prompt is provided.
    returnDist = ThisDrawing.Utility.GetDistance(, \"Enter distance: \")
    MsgBox \"The distance entered was \" & returnDist & vbCrLf & _
            \"(Enter the next value without prompting.)\", , \"GetDistance Example\"
    
    ' Return the value entered by user. No prompt is provided.
    returnDist = ThisDrawing.Utility.GetDistance()
    MsgBox \"The distance entered was \" & returnDist, , \"GetDistance Example\"
    
    ' Return the value entered by user. A base point and prompt are provided.
    returnDist = ThisDrawing.Utility.GetDistance(basePnt, \"Enter a distance: \")
    MsgBox \"The distance entered was \" & returnDist, , \"GetDistance Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetDistance()
    ;; This example returns the distance entered by the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Return the value entered by user. A prompt is provided.
    (setq returnDist (vla-GetDistance (vla-get-Utility doc) nil \"Enter distance: \"))
    (alert (strcat \"The distance entered was \" (rtos returnDist 2) \"\n\"
            \"(Enter the next value without prompting.)\"))
    
    ;; Return the value entered by user. No prompt is provided.
    (setq returnDist (vla-GetDistance (vla-get-Utility doc)))
    (alert (strcat \"The distance entered was \" (rtos returnDist 2)))
    
    ;; Return the value entered by user. A base point and prompt are provided.
    (setq basePnt (vlax-3d-point 0 0 0))
    (setq returnDist (vla-GetDistance (vla-get-Utility doc) basePnt \"Enter a distance: \"))
    (alert (strcat \"The distance entered was \" (rtos returnDist 2)))
)
")
("GetDoglegDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-18B437E1-F900-4A99-870F-70A61C21791F"
"
GetDoglegDirection Method (ActiveX)
Gets the dog leg direction of the specific leader.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetDoglegDirection(leaderIndex)
object
    Type: MLeader
    The object this method applies to.
leaderIndex
    Access: Input-only
    Type: Long
    The index of the leader cluster where the new leader line is to be added.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The coordinate directions of the input leader vector.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetDynamicBlockProperties" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16C8768B-2533-45FF-9CFF-FF864AC78202"
"
GetDynamicBlockProperties Method (ActiveX)
Gets the properties of the dynamic block.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetDynamicBlockProperties
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this method applies to.
Return Value (RetVal)
Type: Variant (array of DynamicBlockReferenceProperty objects)
Array of dynamic properties assigned to the block.
Remarks
A collection of DynamicBlockReferenceProperty objects is returned only if the block reference is a dynamic block containing custom properties.
Note: The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetEntity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-69164FAA-F3C7-47A4-962C-5F4B2D5BC583"
"
GetEntity Method (ActiveX)
Gets an object interactively.
Supported platforms: Windows only
Signature
VBA:
object.GetEntity Object, PickedPoint [, Prompt]
object
    Type: Utility
    The object this method applies to.
Object
    Access: Output-only
    Type: Object
    The picked object. Can be one of any of the drawing objects.
PickedPoint
    Access: Output-only
    Type: Variant (three-element array of doubles)
    A 3D WCS coordinate specifying the point that was selected.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text to display that prompts the user for input.
Return Value (RetVal)
No return value.
Remarks
This method requires the AutoCAD user to select an object by picking a point on the graphics screen. If an object is picked, it is returned in the first parameter and the second parameter will contain the point picked in WCS coordinates. If the pick point is not on an object the call will fail.
The pick point returned by GetEntity does not necessarily lie on the selected object. The returned point represents the location of the crosshairs at the time of selection. The relationship between this point and the object varies depending on the size of the pickbox and the current zoom scale.
This method can retrieve an object even if it is not visible on the screen or if it is on a frozen layer.
Examples
VBA:
Sub Example_GetEntity()
    ' This example creates several objects in model space. It then
    ' prompts the user to select an object. The example continues to
    ' have the user select objects until the user selects in empty space.
    
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Begin the selection
    Dim returnObj As AcadObject
    Dim basePnt As Variant
    
    On Error Resume Next
    
    ' The following example waits for a selection from the user
RETRY:
    ThisDrawing.Utility.GetEntity returnObj, basePnt, \"Select an object\"
    
    If Err <> 0 Then
        Err.Clear
        MsgBox \"Program ended.\", , \"GetEntity Example\"
        Exit Sub
    Else
        returnObj.Update
        MsgBox \"The object type is: \" & returnObj.EntityName, , \"GetEntity Example\"
        returnObj.Update
    End If
    
    GoTo RETRY
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetEntity()
    ;; This example creates several objects in model space. It then
    ;; prompts the user to select an object. The example continues to
    ;; have the user select objects until the user selects in empty space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Begin the selection
    ;; The following example waits for a selection from the user
    (while (= (setq err (vl-catch-all-apply 'vla-GetEntity (list (vla-get-Utility doc) 'returnObj 'basePnt \"Select an object\"))) nil)
        (vla-Update returnObj)
	       (alert (strcat \"The object type is: \" (vla-get-ObjectName returnObj)))
        (vla-Update returnObj)
    )
    (alert \"Program ended.\")
)
")
("GetExtensionDictionary" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-87411ABA-ABCF-45AF-A8C5-0ED036A34D5F"
"
GetExtensionDictionary Method (ActiveX)
Gets the extension dictionary associated with an object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetExtensionDictionary
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, Dimension, DimStyle, Group, Layer, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, RegisteredApplication, TableStyle, TextStyle, UCS, View, Viewport, XRecord
    The objects this method applies to.
Return Value (RetVal)
Type: Dictionary
The extension dictionary for the object.
Remarks
If an object does not have an extension dictionary, this method will create a new extension dictionary for that object and return it in the return value.
You can query an object to see if it has an extension dictionary by using the HasExtensionDictionary property.
Examples
VBA:
Sub Example_GetExtensionDictionary()
    ' This example creates a Circle object in model space and
    ' adds a new Extension Dictionary to the Circle object
    
    Dim EDictionary As AcadDictionary
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"Circle object Extension Dictionary state before: \" & circleObj.HasExtensionDictionary
    
    ' Create an Extension Dictionary for the new Circle
    Set EDictionary = circleObj.GetExtensionDictionary
    
    MsgBox \"Circle object Extension Dictionary state after: \" & circleObj.HasExtensionDictionary
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetExtensionDictionary()
    ;; This example creates a Circle object in model space and
    ;; adds a new Extension Dictionary to the Circle object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"Circle object Extension Dictionary state before: \" (if (= (vla-get-HasExtensionDictionary circleObj) :vlax-true) \"True\" \"False\")))
    
    ;; Create an Extension Dictionary for the new Circle
    (setq EDictionary (vla-GetExtensionDictionary circleObj))
    (alert (strcat \"Circle object Extension Dictionary state after: \" (if (= (vla-get-HasExtensionDictionary circleObj) :vlax-true) \"True\" \"False\")))
)
")
("GetFieldId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5AA26AA4-3288-4F2C-A537-3EC995CA5FD0"
"
GetFieldId Method (ActiveX)
Returns the field ObjectID of the specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetFieldId(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: Long_PTR
The field object id.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetFieldId2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DCF426E6-029A-42AB-9BCB-620A3569222E"
"
GetFieldId2 Method (ActiveX)
Gets the field object id associated to the specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetFieldId2(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
Return Value (RetVal)
Type: Long_PTR
The field object id.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetFitPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5384E917-3052-409C-89C7-B780B766941D"
"
GetFitPoint Method (ActiveX)
Gets the fit point of a spline at a given index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetFitPoint(Index)
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The position in the fit point list at which to query the fit point. The index must be a positive integer beginning with 0.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The 3D WCS coordinates of the fit point at the given index location.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetFitPoint()
    ' This example creates a spline object in model space.
    ' It then finds the coordinates of the fit points.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display the coordinates of the fit points
    Dim fitPoint As Variant
    Dim index As Integer
    For index = 0 To splineObj.NumberOfFitPoints - 1
        fitPoint = splineObj.GetFitPoint(index)
        MsgBox \"Fit point \" & index + 1 & \" is at \" & fitPoint(0) & \", \" & fitPoint(1) & \", \" & fitPoint(2), , \"GetFitPoint Example\"
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetFitPoint()
    ;; This example creates a spline object in model space.
    ;; It then finds the coordinates of the fit points.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display the coordinates of the fit points
    (setq index 0)
    (while (>= (1- (vla-get-NumberOfFitPoints splineObj)) 0)
        (setq fitPoint (vlax-safearray->list (vlax-variant-value (vla-GetFitPoint splineObj index))))
        (alert (strcat \"Fit point \" (itoa (1+ index)) \" is at \" (rtos (nth 0 fitPoint) 2) \", \" (rtos (nth 1 fitPoint) 2) \", \" (rtos (nth 2 fitPoint) 2)))
        (setq index (1+ index))
    )
)
")
("GetFont" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7070FBED-AD5F-47EB-BB9A-5CD25B76DCC8"
"
GetFont Method (ActiveX)
Gets the definition data of the font for the TextStyle.
Supported platforms: Windows only
Signature
VBA:
object.GetFont Typeface, Bold, Italic, CharSet, PitchAndFamily
object
    Type: TextStyle
    The object this method applies to.
Typeface
    Access: Output-only
    Type: String
    The typeface (font name) of the TextStyle you queried.
Bold
    Access: Output-only
    Type: Boolean
    Specifies if the TextStyle is bold.
        True: The TextStyle is bold.
        False: The TextStyle is not bold.
Italic
    Access: Output-only
    Type: Boolean
    Specifies if the TextStyle is italic.
        True: The TextStyle is italic.
        False: The TextStyle is not italic.
CharSet
    Access: Output-only
    Type: Long
    The character set for the font. (See the available values in the Remarks section.)
PitchAndFamily
    Access: Output-only
    Type: Long
    The pitch and family definitions for the font. (See the available values in the Remarks section.)
Return Value (RetVal)
No return value.
Remarks
This section provides definitions for constants to use with this method. To use these constants, copy the definitions you need and paste them into the Declarations section of your application. A complete list of the constants that are available from Microsoft can be found in the file win32api.txt, which is provided with the Visual Basic Development Environment.
The CharSet parameter specifies the character set for the font. To use the following constants in your VB or VBA application, copy the definitions into the Declaration section of your code.
Public Const ANSI_CHARSET = 0
Public Const DEFAULT_CHARSET = 1
Public Const SYMBOL_CHARSET = 2
Public Const SHIFTJIS_CHARSET = 128
Public Const OEM_CHARSET = 255
The PitchAndFamily parameter specifies the pitch and family values for the font. The value is determined by a combination of three different settings. By choosing a setting from each of the three categories and using the Boolean operator OR to combine them, you achieve the PitchAndFamily value. A setting is required from the first two categories: the pitch and the family. The third category, the TrueType Flag, is used only when you are specifying a TrueType font.
' Pitch Values
Public Const DEFAULT_PITCH = 0
Public Const FIXED_PITCH = 1
Public Const VARIABLE_PITCH = 2
' Family Values
Public Const FF_DONTCARE = 0    '  Don't care or don't know.
Public Const FF_ROMAN = 16      '  Variable stroke width, serifed.
Public Const FF_SWISS = 32      '  Variable stroke width, sans-serifed.
Public Const FF_MODERN = 48     '  Constant stroke width, serifed or sans-serifed.
Public Const FF_SCRIPT = 64     '  Cursive, etc.
Public Const FF_DECORATIVE = 80 '  Old English, etc.
' TrueType Flag
Public Const TMPF_TRUETYPE = &H4
Examples
VBA:
Sub Example_GetFont()
    ' This example find the font information for the active text style.
    
    Dim typeFace As String
    Dim Bold As Boolean
    Dim Italic As Boolean
    Dim charSet As Long
    Dim PitchandFamily As Long
    
    ThisDrawing.ActiveTextStyle.GetFont typeFace, Bold, Italic, charSet, PitchandFamily
    
    MsgBox \"The current text style has the following font properties:\" & vbCrLf _
            & \"Typeface: \" & typeFace & vbCrLf _
            & \"Bold: \" & Bold & vbCrLf _
            & \"Italic: \" & Italic & vbCrLf _
            & \"Character set: \" & charSet & vbCrLf _
            & \"Pitch and Family: \" & PitchandFamily
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetFont()
    ;; This example finds the font information for the active text style.
    ;; It then changes the font to bold.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-GetFont (vla-get-ActiveTextStyle doc) 'typeFace 'Bold 'Italic 'charSet 'PitchandFamily)
    
    (alert (strcat \"The current text style has the following font properties:\"
                   \"\nTypeface: \" typeFace
                   \"\nBold: \" (if (= Bold :vlax-true) \"True\" \"False\")
                   \"\nItalic: \" (if (= Italic :vlax-true) \"True\" \"False\")
                   \"\nCharacter set: \" (itoa charSet)
                   \"\nPitch and Family: \" (itoa PitchandFamily)))
            
    ;; Change the bold property
    (setq Bold (if (= Bold :vlax-true) :vlax-false :vlax-true))
    (vla-SetFont (vla-get-ActiveTextStyle doc) typeFace Bold Italic charSet PitchandFamily)
  
    (alert (strcat \"The current text style has the following font properties:\"
                   \"\nTypeface: \" typeFace
                   \"\nBold: \" (if (= Bold :vlax-true) \"True\" \"False\")
                   \"\nItalic: \" (if (= Italic :vlax-true) \"True\" \"False\")
                   \"\nCharacter set: \" (itoa charSet)
                   \"\nPitch and Family: \" (itoa PitchandFamily)))
            
    ;; Reset the font
    (setq Bold (if (= Bold :vlax-true) :vlax-false :vlax-true))
    (vla-SetFont (vla-get-ActiveTextStyle doc) typeFace Bold Italic charSet PitchandFamily)
)
")
("GetFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-40415A47-3ED1-456D-A032-E6509479E530"
"
GetFormat Method (ActiveX)
Returns the format for the specified row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetFormat(rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: String
The format of the row type.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetFormat2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-35B51F2F-969A-4E43-A66C-9F1FD68713F3"
"
GetFormat2 Method (ActiveX)
Gets the format of a cell style.
Supported platforms: Windows only
Signature
VBA:
object.GetFormat2 StringCellStyle, pbstrFormat
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    The cell style name.
pbstrFormat
    Access: Output-only
    Type: String
    The cell style format.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)X
")
("GetFormula" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2EA17F65-107A-4EC8-AE83-FC93F2576CD9"
"
GetFormula Method (ActiveX)
Get a cell's formula.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetFormula(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nContent
    Access: Input-only
    Type: Long
    The value of the content.
Return Value (RetVal)
Type: String
The formula within the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetFullDrawOrder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A35E667D-BD0E-4D5A-B4FD-69B4D21DB5A7"
"
GetFullDrawOrder Method (ActiveX)
Returns all of the objects in a block, sorted by draw order with the bottom object first.
Supported platforms: Windows only
Signature
VBA:
object.GetFullDrawOrder Objects, honorSortentsSysvar
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Output-only
    Type: Variant (array of Objects)
    The objects in the block.
honorSortentsSysvar
    Access: Input-only
    Type: Boolean
        True: Uses the setting of the DRAWORDERCTL system variable.
        False: Setting is ignored.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
                                  6 20 0
                                 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("GetGridColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-647E5C07-D599-4DE2-BB0D-118A17CE2B5E"
"
GetGridColor Method (ActiveX)
Returns the grid color value for a grid linetype and row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridColor(gridLineType, rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
gridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The type of the grid line.
        acHorzBottom: Top or bottom horizontal grid line, based on the flow direction.
        acHorzInside: All horizontal grid lines, excluding the top and bottom lines.
        acHorzTop: Top or bottom horizontal grid line, based on the flow direction.
        acInvalidGridLine: An invalid grid line.
        acVertInside: All the vertical grid lines, excluding the farthest left and farthest right grid lines.
        acVertLeft: Farthest left grid line.
        acVertRight: Farthest right grid line.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: AcCmColor
The AutoCAD true color object assigned to the grid color.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetGridColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colGridCurrent As AcadAcCmColor, lwGridCurrent As ACAD_LWEIGHT, visGridCurrent As Boolean
    Set colGridCurrent = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridCurrent = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridCurrent = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridCurrent.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridCurrent & vbLf & _
           \"Visibility (Top) =  \" & visGridCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetGridColor acHorzBottom, acTitleRow, col
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, acLnWt025
    If visGridCurrent = False Then
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, True
    Else
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, False
    End If
      
    Dim colGridNew As AcadAcCmColor, lwGridNew As ACAD_LWEIGHT, visGridNew As Boolean
    Set colGridNew = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridNew = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridNew = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridNew.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridNew & vbLf & _
           \"Visibility (Top) =  \" & visGridNew
             
    tableStyle.SetGridColor acHorzBottom, acTitleRow, colGridCurrent
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, lwGridCurrent
    tableStyle.SetGridVisibility acHorzTop, acTitleRow, visGridCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetGridColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colGridCurrent (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridCurrent (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridCurrent (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridCurrent))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridCurrent)
		                 \"\nVisibility (Top) = \" (if (= visGridCurrent :vlax-true) \"True\" \"False\")))
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow col)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow acLnWt025)
    (vla-SetGridVisibility tableStyle acHorzTop acTitleRow (if (= visGridCurrent :vlax-true) :vlax-false :vlax-true))
    (setq colGridNew (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridNew (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridNew (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridNew))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridNew)
		                 \"\nVisibility (Top) = \" (if (= visGridNew :vlax-true) \"True\" \"False\")))
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow colGridCurrent)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow lwGridCurrent)
    (vla-SetGridVisibility tableStyle acHorzTop acTitleRow visGridCurrent)
  
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetGridColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A0B945BD-3E78-4310-8FED-79EB526018C8"
"
GetGridColor2 Method (ActiveX)
Gets the grid color for the specified cell.
Supported platforms: Windows only
Signature - Table
VBA:
RetVal = object.GetGridColor2(nRow, nCol, nGridLineType)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Signature - TableStyle
VBA:
RetVal = object.GetGridColor2(bstrCellStyle, gridLineType)
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    A named cell style in the table style.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Return Value (RetVal)
Type: AcCmColor
The pointer which stores a reference to the color.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetGridDoubleLineSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A5F13B85-BE8E-4448-BC44-8E3D3C05B38F"
"
GetGridDoubleLineSpacing Method (ActiveX)
Gets the line spacing value for the specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridDoubleLineSpacing(nRow, nCol, nGridLineType)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Return Value (RetVal)
Type: Double
The line spacing value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetGridLineStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C2211F61-1F53-463E-8F71-5975B14DA183"
"
GetGridLineStyle Method (ActiveX)
Get a cell's grid line style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridLineStyle(nRow, nCol, nGridLineType)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Return Value (RetVal)
Type: AcGridLineStyle enum
    acGridLineStyleDouble
    acGridLineStyleSingle
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetGridLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B9ED2575-1472-4F99-BD07-718D4981A693"
"
GetGridLineWeight Method (ActiveX)
Returns a grid lineweight value for a grid linetype and row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridLineWeight(gridLineType, rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
gridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom: Top or bottom horizontal grid line, based on the flow direction.
        acHorzInside: All horizontal grid lines, excluding the top and bottom lines.
        acHorzTop: Top or bottom horizontal grid line, based on the flow direction.
        acInvalidGridLine: An invalid grid line.
        acVertInside: All the vertical grid lines, excluding the farthest left and farthest right grid lines.
        acVertLeft: Farthest left grid line.
        acVertRight: Farthest right grid line.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: ACAD_LWEIGHT enum
    acLnWt000
    acLnWt005
    acLnWt009
    acLnWt013
    acLnWt015
    acLnWt018
    acLnWt020
    acLnWt025
    acLnWt030
    acLnWt035
    acLnWt040
    acLnWt050
    acLnWt053
    acLnWt060
    acLnWt070
    acLnWt080
    acLnWt090
    acLnWt100
    acLnWt106
    acLnWt120
    acLnWt140
    acLnWt158
    acLnWt200
    acLnWt211
    acLnWtByLayer
    acLnWtByBlock
    acLnWtByLwDefault
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetGridColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colGridCurrent As AcadAcCmColor, lwGridCurrent As ACAD_LWEIGHT, visGridCurrent As Boolean
    Set colGridCurrent = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridCurrent = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridCurrent = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridCurrent.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridCurrent & vbLf & _
           \"Visibility (Top) =  \" & visGridCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetGridColor acHorzBottom, acTitleRow, col
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, acLnWt025
    If visGridCurrent = False Then
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, True
    Else
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, False
    End If
      
    Dim colGridNew As AcadAcCmColor, lwGridNew As ACAD_LWEIGHT, visGridNew As Boolean
    Set colGridNew = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridNew = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridNew = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridNew.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridNew & vbLf & _
           \"Visibility (Top) =  \" & visGridNew
             
    tableStyle.SetGridColor acHorzBottom, acTitleRow, colGridCurrent
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, lwGridCurrent
    tableStyle.SetGridVisibility acHorzTop, acTitleRow, visGridCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetGridLineWeight()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colGridCurrent (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridCurrent (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridCurrent (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridCurrent))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridCurrent)
		                 \"\nVisibility (Top)= \" (if (= visGridCurrent :vlax-true) \"True\" \"False\")))
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow col)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow acLnWt025)
    (vla-SetGridVisibility tableStyle acHorzTop acTitleRow (if (= visGridCurrent :vlax-true) :vlax-false :vlax-true))
    (setq colGridNew (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridNew (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridNew (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridNew))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridNew)
		                 \"\nVisibility (Top)= \" (if (= visGridNew :vlax-true) \"True\" \"False\")))
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow colGridCurrent)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow lwGridCurrent)
    (vla-SetGridVisibility tableStyle acHorzBottom acTitleRow visGridCurrent)
  
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetGridLineWeight2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-907B04E5-A958-407C-946D-0D1F15DD8565"
"
GetGridLineWeight2 Method (ActiveX)
Gets the grid lineweight value for the specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridLineWeight2(nRow, nCol, nGridLineType)
object
    Type: Table, TableStyle
    The objects this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Return Value (RetVal)
Type: ACAD_LWEIGHT enum
    acLnWt000
    acLnWt005
    acLnWt009
    acLnWt013
    acLnWt015
    acLnWt018
    acLnWt020
    acLnWt025
    acLnWt030
    acLnWt035
    acLnWt040
    acLnWt050
    acLnWt053
    acLnWt060
    acLnWt070
    acLnWt080
    acLnWt090
    acLnWt100
    acLnWt106
    acLnWt120
    acLnWt140
    acLnWt158
    acLnWt200
    acLnWt211
    acLnWtByLayer
    acLnWtByBlock
    acLnWtByLwDefault
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetGridLinetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1CE50AA0-8CF2-4C05-88D8-4163DC4CD7EF"
"
GetGridLinetype Method (ActiveX)
Gets the ObjectId of the linetype with the grid linetype value for the specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridLinetype(nRow, nCol, nGridLineType)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Return Value (RetVal)
Type: Long_PTR
The object id of the Linetype from the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetGridSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-36227756-F343-4C88-B5A0-9830B53D69A7"
"
GetGridSpacing Method (ActiveX)
Gets the grid spacing for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.GetGridSpacing XSpacing, YSpacing
object
    Type: PViewport, Viewport
    The objects this method applies to.
XSpacing
    Access: Output-only
    Type: Double
    The X spacing of the grid in the viewport.
YSpacing
    Access: Output-only
    Type: Double
    The Y spacing of the grid in the viewport.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetGridSpacing()
    ' This example turns on the grid for the current viewport.
    ' It then finds the current grid spacing, and changes that spacing.
    
    ' Find the current active viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Turn on the grid and reset the viewport to see it come on.
    viewportObj.GridOn = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Find the current grid spacing
    Dim XSpacing As Double
    Dim YSpacing As Double
    
    viewportObj.GetGridSpacing XSpacing, YSpacing
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, , \"GetGridSpacing Example\"
    
    ' Change the grid spacing
    XSpacing = XSpacing * 0.5
    YSpacing = YSpacing * 0.5
    viewportObj.SetGridSpacing XSpacing, YSpacing
    ThisDrawing.ActiveViewport = viewportObj
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, , \"GetGridSpacing Example\"
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetGridSpacing()
    ;; This example turns on the grid for the current viewport.
    ;; It then finds the current grid spacing, and changes that spacing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Find the current active viewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Turn on the grid and reset the viewport to see it come on.
    (vla-put-GridOn viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Find the current grid spacing
    (vla-GetGridSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
    
    ;; Change the grid spacing
    (vla-SetGridSpacing viewportObj (* XSpacing 0.5) (* YSpacing 0.5))
    (vla-put-ActiveViewport doc viewportObj)
    (vla-GetGridSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
)
")
("GetGridVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B86CAB76-E95E-44D1-9594-977764D6CCD8"
"
GetGridVisibility Method (ActiveX)
Returns a grid visibility value for the specified grid linetype and row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridVisibility(gridLineType, rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
gridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom: Top or bottom horizontal grid line, based on the flow direction.
        acHorzInside: All horizontal grid lines, excluding the top and bottom lines.
        acHorzTop: Top or bottom horizontal grid line, based on the flow direction.
        acInvalidGridLine: An invalid grid line.
        acVertInside: All the vertical grid lines, excluding the farthest left and farthest right grid lines.
        acVertLeft: Farthest left grid line.
        acVertRight: Farthest right grid line.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: Boolean
    True: Grid linetype is visible for the row type.
    False: Grid linetype is not visible for the row type.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetGridVisibility()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colGridCurrent As AcadAcCmColor, lwGridCurrent As ACAD_LWEIGHT, visGridCurrent As Boolean
    Set colGridCurrent = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridCurrent = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridCurrent = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridCurrent.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridCurrent & vbLf & _
           \"Visibility (Top) =  \" & visGridCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetGridColor acHorzBottom, acTitleRow, col
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, acLnWt025
    If visGridCurrent = False Then
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, True
    Else
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, False
    End If
      
    Dim colGridNew As AcadAcCmColor, lwGridNew As ACAD_LWEIGHT, visGridNew As Boolean
    Set colGridNew = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridNew = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridNew = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridNew.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridNew & vbLf & _
           \"Visibility (Top) =  \" & visGridNew
             
    tableStyle.SetGridColor acHorzBottom, acTitleRow, colGridCurrent
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, lwGridCurrent
    tableStyle.SetGridVisibility acHorzTop, acTitleRow, visGridCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetGridVisibility()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colGridCurrent (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridCurrent (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridCurrent (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridCurrent))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridCurrent)
		                 \"\nVisibility (Top)= \" (if (= visGridCurrent :vlax-true) \"True\" \"False\")))
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow col)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow acLnWt025)
    (vla-SetGridVisibility tableStyle acHorzTop acTitleRow (if (= visGridCurrent :vlax-true) :vlax-false :vlax-true))
    (setq colGridNew (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridNew (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridNew (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridNew))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridNew)
		                 \"\nVisibility (Top)= \" (if (= visGridNew :vlax-true) \"True\" \"False\")))
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow colGridCurrent)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow lwGridCurrent)
    (vla-SetGridVisibility tableStyle acHorzBottom acTitleRow visGridCurrent)
  
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("GetGridVisibility2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EE14EB7C-B697-4F73-91CB-732E0D294DBC"
"
GetGridVisibility2 Method (ActiveX)
Returns the grid visibility value for the specified cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetGridVisibility2(nRow, nCol, nGridLineType)
object
    Type: Table, TableStyle
    The objects this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid line type to check.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Return Value (RetVal)
Type: Boolean
    True: Grid linetype is visible for the row type.
    False: Grid linetype is not visible for the row type.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetHasFormula" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-27E01EF6-3422-49D1-9C4F-AF1370CD21C2"
"
GetHasFormula Method (ActiveX)
Check if a cell has a formula.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetHasFormula(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nContent
    Access: Input-only
    Type: Long
    The value of the content.
Return Value (RetVal)
Type: Boolean
    True: The table cell contains a formula.
    False: The table cell does not contain a formula.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetInput" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-75A18A2B-37B4-44B4-973B-B9E04CDB8203"
"
GetInput Method (ActiveX)
Converts a user's input string into a keyword index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetInput()
object
    Type: Utility
    The object this method applies to.
Return Value (RetVal)
Type: String
The index specifying which keyword was entered.
Remarks
This method retrieves a keyword entered by the AutoCAD user during a call to one of the user-input functions (Get* methods).
The maximum length of the keyword is 511 characters (with the 512th character reserved for the NULL character).
A call to GetInput is meaningless and will fail unless it immediately follows a call to one of the user-input functions. Even then, the call will be successful only if the user-input function has returned the error description \"User input is a keyword.\"
It is not necessary to call GetInput after a call to the GetKeyword method.
The keywords recognized by the application are specified by a prior call to the InitializeUserInput method. The interpretation of the keywords is entirely up to the application. Keywords should not duplicate the names of AutoCAD commands.
The user can abbreviate a keyword, but GetInput always returns the full keyword as it was defined in the InitializeUserInput call with the original capitalization, so the application needs to do only one string comparison for each keyword it defines.
Examples
VBA:
Sub Example_GetInput()
    ' This example prompts for user input of a point. By using the
    ' InitializeUserInput method to define a keyword list, the example can also
    ' return keywords entered by the user.
    
    AppActivate ThisDrawing.Application.Caption
    
    On Error Resume Next
    
    ' Define the valid keywords
    Dim keywordList As String
    keywordList = \"Line Circle\"
    
    ' Call InitializeUserInput to set up the keywords
    ThisDrawing.Utility.InitializeUserInput 128, keywordList
    
    ' Get the user input
    Dim returnPnt As Variant
    returnPnt = ThisDrawing.Utility.GetPoint(, vbLf & \"Enter a point [Line/Circle]: \")
    If Err Then
         If StrComp(Err.Description, \"User input is a keyword\", 1) = 0 Then
         ' One of the keywords was entered
             Dim inputString As String
             Err.Clear
             inputString = ThisDrawing.Utility.GetInput
             MsgBox \"You entered the keyword: \" & inputString
         Else
             MsgBox \"Error selecting the point: \" & Err.Description
             Err.Clear
         End If
    Else
        ' Display point coordinates
        MsgBox \"The WCS of the point is: \" & returnPnt(0) & \", \" & returnPnt(1) & \", \" & returnPnt(2), , \"GetInput Example\"
    End If
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetInput()
    ;; This example prompts for user input of a point. By using the
    ;; InitializeUserInput method to define a keyword list, the example can also
    ;; return keywords entered by the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the valid keywords
    (setq keywordList \"Line Circle\")
    
    ;; Call InitializeUserInput to set up the keywords
    (vla-InitializeUserInput (vla-get-Utility doc) 128 keywordList)
    
    ;; Get the user input
    (setq returnPntOrErr (vl-catch-all-apply 'vla-GetPoint (list (vla-get-Utility doc) nil \"Enter a point [Line/Circle]: \")))
    (if (= (type returnPntOrErr)'VL-CATCH-ALL-APPLY-ERROR)
        (progn
            (if (= (vl-catch-all-error-message returnPntOrErr) \"Automation Error. User input is a keyword\")
	               (progn
                    (setq inputString (vla-GetInput (vla-get-Utility doc)))
                    (alert (strcat \"You entered the keyword: \" inputString))
		              )
                (alert \"User pressed ESC or unknown input was provided.\")
	           )
        )
        ;; Display point coordinates
        (progn
	           (setq returnPnt (vlax-safearray->list (vlax-variant-value returnPntOrErr)))
            (alert (strcat \"The WCS of the point is: \" (rtos (nth 0 returnPnt) 2) \", \" (rtos (nth 1 returnPnt) 2) \", \" (rtos (nth 2 returnPnt) 2)))
	       )
    )
)
")
("GetInteger" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7C44DEFF-8153-460D-98CB-4221972A2928"
"
GetInteger Method (ActiveX)
Gets an integer value from the user.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetInteger([Prompt])
object
    Type: Utility
    The object this method applies to.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: Long
The integer value returned by the user.
Remarks
AutoCAD pauses for user input of an integer and sets the return value to the selected value. The Prompt parameter specifies a string that AutoCAD displays before it pauses. The Prompt is optional.
The AutoCAD user can enter any valid (short) integer in the range of -32,768 to +32,767.
If a keyword is returned instead of an integer, or if the user presses Enter without entering a value, AutoCAD generates error number -2145320928 (and the error message, \"User input is a keyword\"). Use the GetInput method to obtain the keyword from the return value.
Examples
VBA:
Sub Example_GetInteger()
    ' This example returns the integer entered by the user.
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim returnInt As Integer
    
    ' Return the value entered by user. A prompt is provided.
    returnInt = ThisDrawing.Utility.GetInteger(\"Enter an integer: \")
    MsgBox \"The integer entered was \" & returnInt & vbCrLf & _
           \"(Enter the next value without prompting.)\", , \"GetInteger Example\"
    
    ' Return the value entered by user. No prompt is provided.
    returnInt = ThisDrawing.Utility.GetInteger()
    MsgBox \"The integer entered was \" & returnInt, , \"GetInteger Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetInteger()
    ;; This example returns the integer entered by the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Return the value entered by user. A prompt is provided.
    (setq returnInt (vla-GetInteger (vla-get-Utility doc) \"Enter an integer: \"))
    (alert (strcat \"The integer entered was \" (itoa returnInt)
                   \"\n(Enter the next value without prompting.)\"))
    
    ;; Return the value entered by user. No prompt is provided.
    (setq returnInt (vla-GetInteger (vla-get-Utility doc)))
    (alert (strcat \"The integer entered was \" (itoa returnInt)))
)
")
("GetInterfaceObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0977714A-B209-445C-AF17-B5D173E41C38"
"
GetInterfaceObject Method (ActiveX)
Accepts a program ID and attempts to load it into AutoCAD as an in-process server.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetInterfaceObject(ProgID)
object
    Type: Application
    The object this method applies to.
ProgID
    Access: Input-only
    Type: String
    The program ID of the interface object to return.
Return Value (RetVal)
Type: Object
The interface object matching the program ID.
Remarks
Although the object will be loaded into AutoCAD, it will not show up in its type library. The object will have its own type library. This method lets you connect to an ActiveX Automation server.
If possible, use version-dependent ProgIDs. If a GetInterfaceObject method uses a version-independent ProgID, change the method to use a version-dependent ProgID. For example, you would change AcadLayerStateManager to AcadLayerStateManager.22.
Examples
VBA:
Sub Example_GetInterfaceObject()
    ' This example returns top level object of another application.
    On Error GoTo ERRORHANDLER
    
    Dim poly As Object
    Set poly = ThisDrawing.Application.GetInterfaceObject(\"Polycad.Application\")
ERRORHANDLER:
    MsgBox Err.Description, , \"GetInterfaceObject Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetInterfaceObject()
    ;; This example returns top level object of another application.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq poly (vl-catch-all-apply 'vla-GetInterfaceObject (list acadObj \"Polycad.Application\")))
    (if (= (type poly)'VL-CATCH-ALL-APPLY-ERROR)
        (alert (strcat \"Error occured: \n\" (vl-catch-all-error-message poly)))
    )
)
")
("GetInvisibleEdge" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BD89B610-90E9-4144-A075-3D08516D82D3"
"
GetInvisibleEdge Method (ActiveX)
Gets the visibility setting for an edge of a 3DFace object at a given index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetInvisibleEdge(Index)
object
    Type: 3DFace
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index of the edge to query. The index must be between 0 and 3 inclusive.
Return Value (RetVal)
Type: Boolean
    True: The edge is invisible.
    False: The edge is visible.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetInvisibleEdge()
    ' This example creates a 3D face in model space.
    ' It then toggles the visibility of the  first edge.
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim point3(0 To 2) As Double
    Dim point4(0 To 2) As Double
    
    ' Define the four coordinates of the face
    point1(0) = 1#: point1(1) = 1#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 1#: point2(2) = 1#
    point3(0) = 5#: point3(1) = 5#: point3(2) = 1#
    point4(0) = 1#: point4(1) = 10#: point4(2) = 0#
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ZoomAll
    
    ' Find the current visibility status of the first edge of the face
    Dim visStatus As Boolean
    visStatus = faceObj.GetInvisibleEdge(0)
    MsgBox \"The first face is currently \" & IIf(faceObj.GetInvisibleEdge(0), \"visible.\", \"invisible.\"), , \"GetInvisibleEdge Example\"
    
    ' Toggle the visibility of the first edge of the face
    faceObj.SetInvisibleEdge 0, Not (visStatus)
    ThisDrawing.Regen False
    MsgBox \"The first face is now \" & IIf(faceObj.GetInvisibleEdge(0), \"visible.\", \"invisible.\"), , \"GetInvisibleEdge Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetInvisibleEdge()
    ;; This example creates a 3D face in model space.
    ;; It then toggles the visibility of the  first edge.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 1 1 0)
          point2 (vlax-3d-point 5 1 1)
          point3 (vlax-3d-point 5 5 1)
          point4 (vlax-3d-point 1 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
    
    ;; Find the current visibility status of the first edge of the face
    (setq visStatus (vla-GetInvisibleEdge faceObj 0))
    (alert (strcat \"The first face is currently \" (if (= visStatus :vlax-true) \"visible.\" \"invisible.\")))
    
    ;; Toggle the visibility of the first edge of the face
    (vla-SetInvisibleEdge faceObj 0 (if (= visStatus :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc :vlax-false)
    (alert (strcat \"The first face is now \" (if (= (vla-GetInvisibleEdge faceObj 0) :vlax-true) \"visible.\" \"invisible.\")))
)
")
("GetIsCellStyleInUse" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2950D1C1-40DA-4F89-8294-A77B829A50FD"
"
GetIsCellStyleInUse Method (ActiveX)
Gets the usage status of a cell style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetIsCellStyleInUse(pszCellStyle)
object
    Type: TableStyle
    The object this method applies to.
pszCellStyle
    Access: Input-only
    Type: String
    The cell style name.
Return Value (RetVal)
Type: Boolean
Cell style status.
    True: The cell is in use.
    False: The cell is not being used.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("GetIsMergeAllEnabled" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B6C11083-12A7-451C-9BFD-E9A463969024"
"
GetIsMergeAllEnabled Method (ActiveX)
Gets value of the \"merge all\" property.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetIsMergeAllEnabled(StringCellStyle)
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    The cell style name.
Return Value (RetVal)
Type: Boolean
    True: Cell style \"merge all\" property is enabled.
    False: Cell style \"merge all\" property is not enabled.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_EnableMergeAll()
    ' This example creates a TableStyle object and sets values for
    ' the style cell merging.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle \"NewTestStyle2\"
    customObj.EnableMergeAll \"NewTestStyle2\", False
      
    If customObj.GetIsMergeAllEnabled(\"NewTestStyle2\") = False Then
        MsgBox \"Merge all is not enabled!\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EnableMergeAll()
    ;; This example creates a TableStyle object and sets values for
    ;; the style cell merging.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle2\")
    (vla-EnableMergeAll customObj \"NewTestStyle2\" :vlax-false)
      
    (if (= (vla-GetIsMergeAllEnabled customObj \"NewTestStyle2\") :vlax-false)
        (alert \"Merge all is not enabled!\")
    )
)
")
("GetKeyword" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A47393D4-9F92-4815-B1E1-1D36FB3BEEA2"
"
GetKeyword Method (ActiveX)
Gets a keyword string from the user.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetKeyword([Prompt])
object
    Type: Utility
    The object this method applies to.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: String
The keyword returned from the user.
Remarks
AutoCAD pauses for user input of a keyword and sets the return value to the keyword that was entered. The Prompt parameter specifies a string that AutoCAD displays before it pauses. The Prompt is optional. The maximum length of the return value is 511 characters.
The AutoCAD user can enter the keyword from the keyboard. The list of keywords that this method will accept is set by a prior call to the InitializeUserInput method. If the user enters a string not specified in the call to InitializeUserInput, AutoCAD displays an error message and tries again (and redisplays the prompt, if one was specified). If the user doesn't enter anything but presses the Enter key, GetKeyword returns an empty string (\"\") unless the call to InitializeUserInput also disallowed NULL input.
Examples
VBA:
Sub Example_GetKeyword()
    ' This example uses Getkeyword to return a keyword entered by the user.
    ' InitializeUserInput establishes the valid keywords.
    
    AppActivate ThisDrawing.Application.Caption
    
    ' Define the list of valid keywords
    Dim kwordList As String
    kwordList = \"Width Height Depth\"
    ThisDrawing.Utility.InitializeUserInput 1, kwordList
            
    ' Prompt the user to input any of the keywords. Return \"Width\", \"Height\" or \"Depth\" in
    ' the returnString variable depending on whether the user input \"W\", \"H\" or \"D\".
    Dim returnString As String
    returnString = ThisDrawing.Utility.GetKeyword(vbLf & \"Enter a keyword [Height/Width/Depth]: \")
    MsgBox \"You entered \" & returnString, , \"GetKeyword Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetKeyword()
    ;; This example uses Getkeyword to return a keyword entered by the user.
    ;; InitializeUserInput establishes the valid keywords.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the list of valid keywords
    (setq kwordList \"Width Height Depth\")
    (vla-InitializeUserInput (vla-get-Utility doc) 1 kwordList)
            
    ;; Prompt the user to input any of the keywords. Return \"Width\", \"Height\" or \"Depth\" in
    ;; the returnString variable depending on whether the user input \"W\", \"H\" or \"D\".
    (setq returnString (vla-GetKeyword (vla-get-Utility doc) \"\nEnter a keyword [Height/Width/Depth]: \"))
    (alert (strcat \"You entered \" returnString))
)
")
("GetLeaderIndex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-64610DA7-21B1-46E6-A5F4-EECD3B172A81"
"
GetLeaderIndex Method (ActiveX)
Gets the index of leader cluster which the specified leader line is in.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetLeaderIndex(leaderLineIndex)
object
    Type: MLeader
    The object this method applies to.
leaderLineIndex
    Access: Input-only
    Type: Long
    The leader line index.
Return Value (RetVal)
Type: Long
The leader cluster index.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetLeaderLineIndexes" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-588DD7FC-F822-4ABC-8935-48C0C27A4CF1"
"
GetLeaderLineIndexes Method (ActiveX)
Gets the indexes of leader lines of the specific leader.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetLeaderLineIndexes(leaderIndex)
object
    Type: MLeader
    The object this method applies to.
leaderIndex
    Access: Input-only
    Type: Long
    The leader line index.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The indexes of leaderlines owned by the input leader.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetLeaderLineVertices" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6531A230-9CD7-49A6-BCA0-E3C9655210E7"
"
GetLeaderLineVertices Method (ActiveX)
Gets the vertices of leaderLine with specified index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetLeaderLineVertices(leaderLineIndex)
object
    Type: MLeader
    The object this method applies to.
leaderLineIndex
    Access: Input-only
    Type: Long
    The leader line index.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The vertices of leaderlines owned by the input leader.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetLiveSection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5BB64D6B-CE4C-48EC-9802-B1112C54F024"
"
GetLiveSection Method (ActiveX)
Gets the live section plane that is currently enabled in the database.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetLiveSection
object
    Type: SectionManager
    The object this method applies to.
Return Value (RetVal)
Type: Section
The current \"live\" Section object.
Remarks
Live sectioning is either enabled or disabled individually per section object. Live sectioning can be active for no more than one section object at a time.
Note: The SectionManager object is not created until a section plane is created.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetLocaleMediaName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-12FAD463-6156-4EF9-A206-5AA71C7E445A"
"
GetLocaleMediaName Method (ActiveX)
Gets the localized version of the canonical media name.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetLocaleMediaName(Name)
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Name
    Access: Input-only
    Type: String
    The canonical media name to find the localized version of.
Return Value (RetVal)
Type: String
The localized version of the specified canonical media name.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetLocaleMediaName()
    ' This example gets the current plot device information
    ' and then displays the list of plot device names,
    ' media names, localized media names, and plot style
    ' table entries.
    Dim Layout As ACADLayout
    Set Layout = ThisDrawing.ModelSpace.Layout
    
    ' Refresh the current plot information for
    ' this session.
    Layout.RefreshPlotDeviceInfo
    
    ' List all the valid device names for the system
    Dim plotDevices As Variant
    plotDevices = Layout.GetPlotDeviceNames()
    
    Dim x As Integer
    For x = LBound(plotDevices) To UBound(plotDevices)
        MsgBox plotDevices(x)
    Next
    
    ' List all the media names, and their localized version
    Dim mediaNames As Variant
    mediaNames = Layout.GetCanonicalMediaNames()
    
    For x = LBound(mediaNames) To UBound(mediaNames)
        MsgBox mediaNames(x)
        MsgBox Layout.GetLocaleMediaName(mediaNames(x))
    Next
    
    ' List all the entries in the plot style table
    Dim styleNames As Variant
    styleNames = Layout.GetPlotStyleTableNames()
    
    For x = LBound(styleNames) To UBound(styleNames)
        MsgBox styleNames(x)
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetLocaleMediaName()
    ;; This example gets the current plot device information
    ;; and then displays the list of plot device names,
    ;; media names, localized media names, and plot style
    ;; table entries.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq Layout (vla-get-Layout (vla-get-ModelSpace doc)))
    
    ;; Refresh the current plot information for
    ;; this session.
    (vla-RefreshPlotDeviceInfo Layout)
    
    ;; List all the valid device names for the system
    (setq plotDevices (vlax-variant-value (vla-GetPlotDeviceNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound plotDevices 1) x)
        (alert (vlax-safearray-get-element plotDevices x))
        (setq x (1+ x))
    )
    
    ;; List all the media names, and their localized version
    (setq mediaNames (vlax-variant-value (vla-GetCanonicalMediaNames Layout)))
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound mediaNames 1) x)
        (alert (vlax-safearray-get-element mediaNames x))
        (alert (vla-GetLocaleMediaName Layout (vlax-safearray-get-element mediaNames x)))
        (setq x (1+ x))
    )
    
    ;; List all the entries in the plot style table
    (setq styleNames (vlax-variant-value (vla-GetPlotStyleTableNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound styleNames 1) x)
        (alert (vlax-safearray-get-element styleNames x))
        (setq x (1+ x))
    )
)
")
("GetLoopAt" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-93E21F08-C55A-4D56-9A3B-DEADB29838C0"
"
GetLoopAt Method (ActiveX)
Gets the hatch loop at a given index.
Supported platforms: Windows only
Signature
VBA:
object.GetLoopAt Index, Loop
object
    Type: Hatch
    The object this method applies to.
Index
    Access: Input-only
    Type: Integer
    A positive integer beginning with 0.
Loop
    Access: Output-only
    Type: Variant (object or array of objects)
    An object or array of objects that makes up the loop.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetLoopAt()
    ' This example creates an associative hatch in model space.
    ' It then finds the objects that make up the first loop of the hatch.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the objects that make up the first loop
    Dim loopObjs As Variant
    hatchObj.GetLoopAt 0, loopObjs
    
    ' Find the types of the objects in the loop
    Dim I As Integer
    Dim objName As String
    objName = \"\"
    For I = LBound(loopObjs) To UBound(loopObjs)
        objName = objName & loopObjs(I).EntityName & \", \"
    Next
    
    MsgBox \"The objects in the first loop of the hatch are: \" & objName, , \"GetLoopAt Example\"
       
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetLoopAt()
    ;; This example creates an associative hatch in model space.
    ;; It then finds the objects that make up the first loop of the hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType acHatchPatternTypePreDefined
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
  
    (setq arcObj (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq lineObj (vla-AddLine modelSpace (vla-get-StartPoint arcObj) (vla-get-EndPoint arcObj)))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arcObj)
    (vlax-safearray-put-element outerLoop 1 lineObj)
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 (vla-AddCircle modelSpace center radius))
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop2 0 (vla-AddCircle modelSpace center radius))
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the objects that make up the first loop
    (vla-GetLoopAt hatchObj 0 'loopObjs) 
    
    ;; Find the types of the objects in the loop
    (setq I 0
          objName \"\")
    (while (>= (vlax-safearray-get-u-bound loopObjs 1) I)
        (setq objName (strcat objName (vla-get-ObjectName (vlax-safearray-get-element loopObjs I)) \", \"))
        (setq I (1+ I))
    )
    
    (alert (strcat \"The objects in the first loop of the hatch are: \" objName))
)
")
("GetMargin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-825A9601-4166-4055-8147-0F4D51DDCB48"
"
GetMargin Method (ActiveX)
Get a cell's margin value.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetMargin(nRow, nCol, nMargin)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nMargins
    Access: Input-only
    Type: AcCellMargin enum
    The value of the margins.
        acCellMarginBottom
        acCellMarginHorzSpacing
        acCellMarginLeft
        acCellMarginRight
        acCellMarginTop
        acCellMarginVertSpacing
Return Value (RetVal)
Type: Double
The cell's margin value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetMinimumColumnWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CD47C5DD-9C0F-4569-BB32-1B2D0837F8EB"
"
GetMinimumColumnWidth Method (ActiveX)
Gets the minimum column width for the column at the specified column index in the table.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetMinimumColumnWidth(col)
object
    Type: Table
    The object this method applies to.
col
    Access: Input-only
    Type: Long
    The column in the table.
Return Value (RetVal)
Type: Double
The minimum column width.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetMinimumRowHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-730D9D42-A1A7-479A-A56E-2ECABF4EFB0D"
"
GetMinimumRowHeight Method (ActiveX)
Returns the minimum row height for the specified row.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetMinimumRowHeight(row)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
Return Value (RetVal)
Type: Double
The minimum row height.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-42828CC6-35D0-4129-B967-D50F36509ED6"
"
GetName Method (ActiveX)
Gets the name (keyword) of an object in a dictionary.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetName(Object)
object
    Type: Dictionary
    The object this method applies to.
Object
    Access: Input-only
    Type: Object
    The object to query.
Return Value (RetVal)
Type: String
The name (keyword) of the object.
Remarks
For example, querying the object \"Object2\" in the following dictionary would return the name \"SecondKeyword\":
MyDictionary
Keyword - Object
FirstKeyword - Object1
SecondKeyword - Object2
Examples
VBA:
Sub Example_GetName()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary. It then
    ' finds the name of the object in the dictionary.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add(\"TEST_DICTIONARY\")
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX application.
    ThisDrawing.Application.LoadArx \"MyARXApp.dll\"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = \"OBJ1\"
    className = \"CAsdkDictObject\"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
    ' Find the keyword name of an object in the dictionary
    keyName = dictObj.GetName(customObj)
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetName()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries \"TEST_DICTIONARY\"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj \"MyARXApp.dll\")
    
    ;; Create the custom object in the dictionary
    (setq keyName \"OBJ1\")
    (setq className \"CAsdkDictObject\")
    (setq customObj (vla-AddObject dictObj keyName className))
    ;; Find the keyword name of an object in the dictionary
    (setq keyName (vla-GetName dictObj customObj))
)
")
("GetObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D62C3A92-19AB-4E1A-9E20-9AF1C13AED81"
"
GetObject Method (ActiveX)
Gets the object in a dictionary, given the name (keyword) of the object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetObject(Name)
object
    Type: Dictionary
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name (keyword) of the object in the dictionary.
Return Value (RetVal)
Type: Object
The object corresponding to the given name (keyword).
Remarks
For example, querying the name \"SecondKeyword\" in the following dictionary would return the object \"Object2\":
MyDictionary
Keyword - Object
FirstKeyword - Object1
SecondKeyword - Object2
Examples
VBA:
Sub Example_GetObject()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary. It then
    ' returns the object using GetObject.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add(\"TEST_DICTIONARY\")
    
    ' Load the ARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ARX Application.
    On Error GoTo ERRORHANDLER
    ThisDrawing.Application.LoadArx \"MyARXApp.dll\"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = \"OBJ1\"
    className = \"CAsdkDictObject\"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
    ' Find the object
    Dim tempObj As Object
    Set tempObj = dictObj.GetObject(keyName)
    
ERRORHANDLER:
    MsgBox Err.Description, , \"GetObject Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetObject()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries \"TEST_DICTIONARY\"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj \"MyARXApp.dll\")
    
    ;; Create the custom object in the dictionary
    (setq keyName \"OBJ1\")
    (setq className \"CAsdkDictObject\")
    (setq customObj (vla-AddObject dictObj keyName className))
    ;; Find the object
    (setq tempObj (vla-GetObject dictObj keyName))
)
")
("GetObjectIdString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-608ABDA5-D489-4DC8-B13E-643AA782B696"
"
GetObjectIdString Method (ActiveX)
Returns an object's ID as a string.
Supported platforms: Windows only
Signature
VBA:
RetVal = Object.GetObjectIdString(acadObject, bHex)
object
    Type: Utility
    The object this method applies to.
acadObject
    Access: Input-only
    Type: Object
    AutoCAD object to return its object ID.
bHex
    Access: Input-only
    Type: Boolean
    Determines if the object ID is returned as a whole number or a hexadecimal.
Return Value (RetVal)
Type: String
The object ID as a string.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetOrientation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BA56C0C6-745D-4790-AF12-0366B6BAF061"
"
GetOrientation Method (ActiveX)
Gets the angle specified. Ignores the setting of the ANGBASE system variable.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetOrientation([Point [, Prompt]])
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the base point.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: Double
The specified angle.
Remarks
AutoCAD pauses for user input of an angle, and sets the return value to the value of the selected angle. The Point parameter specifies an angle base point in the WCS. The Prompt parameter specifies a string that AutoCAD displays before it pauses. Both Point and Prompt are optional.
The AutoCAD user can specify the angle by entering a number in the current angular units format. The user can also specify the angle by specifying two 2D locations on the graphics screen. AutoCAD draws a rubber-band line from the first point to the current crosshairs position to help the user visualize the angle. If the Point parameter is provided, AutoCAD uses this value as the first of the two points. The angle is measured in the XY plane of the WCS (this method ignores the Z field of Point). The direction of angular increase is always counterclockwise.
Regardless of the method used to specify the angle, GetOrientation always sets the return value to a value expressed in radians.
This method is similar to the GetAngle method, but it ignores the current direction of angle 0, which is stored in the ANGBASE system variable. The 0 angle employed by GetOrientation is always to the right: \"east\" or \"three o'clock.\"
If a keyword is returned instead of an angle, AutoCAD will generate the error message \"User input keyword.\" Use the GetInput method to obtain the keyword from the return value.
Examples
VBA:
Sub Example_GetOrientation()
    ' This example uses the GetOrientation method to demonstrate three different ways to retrieve
    ' an orientation from the user.
    
    AppActivate ThisDrawing.Application.Caption
        
    Dim retOrientation As Double
    
    ' Return the Orientation in radians with a prompt
    retOrientation = ThisDrawing.Utility.GetOrientation(, \"Enter an Orientation: \")
    MsgBox \"The Orientation entered was \" & retOrientation & vbCrLf & _
            \"(Enter the next value without prompting.)\", , \"GetOrientation Example\"
    
    ' Return the Orientation in radians without any prompt
    retOrientation = ThisDrawing.Utility.GetOrientation()
    MsgBox \"The Orientation entered was \" & retOrientation, , \"GetOrientation Example\"
    
    ' Return the Orientation in radians with a prompt and an Orientation base point
    Dim basePnt(0 To 2) As Double
    basePnt(0) = 2#: basePnt(1) = 2#: basePnt(2) = 0#
    retOrientation = ThisDrawing.Utility.GetOrientation(basePnt, \"Enter an Orientation: \")
    MsgBox \"The Orientation entered was \" & retOrientation, , \"GetOrientation Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetOrientation()
    ;; This example uses the GetOrientation method to demonstrate three different ways to retrieve
    ;; an orientation from the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Return the Orientation in radians with a prompt
    (setq retOrientation (vla-GetOrientation (vla-get-Utility doc) nil \"Enter an Orientation: \"))
    (alert (strcat \"The Orientation entered was \" (rtos retOrientation 2) \"\n\"
                   \"(Enter the next value without prompting.)\"))
    ;; Return the Orientation in radians without any prompt
    (setq retOrientation (vla-GetOrientation (vla-get-Utility doc)))
    (alert (strcat \"The Orientation entered was \" (rtos retOrientation 2)))
    
    ;; Return the Orientation in radians with a prompt and an Orientation base point
    (setq basePnt (vlax-3d-point 2 2 0))
    (setq retOrientation (vla-GetOrientation (vla-get-Utility doc) basePnt \"Enter an Orientation: \"))
    (alert (strcat \"The Orientation entered was \" (rtos retOrientation 2)))
)
")
("GetOverride" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E447FF0D-9540-45DF-9B24-95C7D66F0A52"
"
GetOverride Method (ActiveX)
Get a cell's overrides.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetOverride(nRow, nCol, nContent) 
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nContent
    Access: Input-only
    Type: Long
    The value of the cell's content.
Return Value (RetVal)
Type: AcCellProperty enum
The cell's overrides.
    acAlignmentProperty
    acAllCellProperties
    acAutoScale
    acBackgroundColor
    acBitProperties
    acContentColor
    acContentLayout
    acContentProperties
    acDataFormat
    acDataType
    acDataTypeAndFormat
    acEnableBackgroundColor
    acFlowDirBtoT
    acInvalidCellProperty
    acLock
    acMarginBottom
    acMarginLeft
    acMarginRight
    acMarginTop
    acMergeAll
    acRotation
    acScale
    acTextHeight
    acTextStyle
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetPaperMargins" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2CF57709-4DBE-4CBE-A4AF-45D90C8F8B54"
"
GetPaperMargins Method (ActiveX)
Gets the margins for the layout or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.GetPaperMargins LowerLeft, UpperRight
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
LowerLeft
    Access: Output-only
    Type: Variant (two-element array of doubles)
    The X and Y values for the lower-left margin.
UpperRight
    Access: Output-only
    Type: Variant (two-element array of doubles)
    The X and Y values for the upper-right margin.
Return Value (RetVal)
No return value.
Remarks
The print origin is offset from the edge of the paper by the margin specified here.
The units for these values are specified by the PaperUnits property.
Examples
VBA:
Sub Example_GetPaperMargins()
    ' This example will access the Layouts collection for the current drawing
    ' and list the plot size based on the margins returned from the GetPaperMargins
    ' property for each Layout except model space.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim Measurement As String
    Dim MarginLowerLeft As Variant, MarginUpperRight As Variant
    Dim PaperHeight As Double, PaperWidth As Double
    Dim PlotHeight As Double, PlotWidth As Double
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    msg = vbCrLf & vbCrLf   ' Start with a space
    
    ' Get the margin information of every layout in this drawing
    For Each Layout In Layouts
        ' Skip model space
        If Layout.name = \"Model\" Then GoTo NEXT_LAYOUT
        ThisDrawing.ActiveLayout = Layout
        
        msg = msg & Layout.name & vbCrLf
        
        ' Get paper size and margin information
        Layout.GetPaperMargins MarginLowerLeft, MarginUpperRight
        Layout.GetPaperSize PaperWidth, PaperHeight
        
        ' Do plot area calculations
        PlotWidth = PaperWidth - (MarginUpperRight(0) - MarginLowerLeft(0))
        PlotHeight = PaperHeight - (MarginUpperRight(1) - MarginLowerLeft(1))
        
        ' Are we using inches or millimeters
        Measurement = \" millimeter(s)\"
        
        ' Format for display
        msg = msg & vbTab & \"The paper size for this layout is: \" & PaperWidth & \" X \" & PaperHeight & Measurement & vbCrLf & vbCrLf
        msg = msg & vbTab & \"The paper margins are: \" & vbCrLf & _
                            vbTab & vbTab & \"Left\" & vbTab & \"(\" & MarginLowerLeft(0) & \")\" & Measurement & vbCrLf & _
                            vbTab & vbTab & \"Right\" & vbTab & \"(\" & MarginUpperRight(0) & \")\" & Measurement & vbCrLf & _
                            vbTab & vbTab & \"Top\" & vbTab & \"(\" & MarginUpperRight(1) & \")\" & Measurement & vbCrLf & _
                            vbTab & vbTab & \"Bottom\" & vbTab & \"(\" & MarginLowerLeft(1) & \")\" & Measurement & vbCrLf & vbCrLf
        msg = msg & vbTab & \"The paper plot area for this layout is: \" & PlotWidth & \" X \" & PlotHeight & Measurement & vbCrLf
        msg = msg & \"_____________________\" & vbCrLf
        
NEXT_LAYOUT:
    Next
    
    ' Display paper size and margin information
    MsgBox \"Paper plot information for the current drawing is: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetPaperMargins()
    ;; This example will access the Layouts collection for the current drawing
    ;; and list the plot size based on the margins returned from the GetPaperMargins
    ;; property for each Layout except model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\")   ;; Start with a space
    
    ;; Get the margin information of every layout in this drawing
    (vlax-for Layout Layouts
        ;; Skip model space
        (if (/= (vla-get-Name Layout) \"Model\")
	           (progn
	               (vla-put-ActiveLayout doc Layout)
	        
	               (setq msg (strcat msg (vla-get-Name Layout) \"\n\"))
	        
	               ;; Get paper size and margin information
	               (vla-GetPaperMargins Layout 'MarginLowerLeft 'MarginUpperRight)
	               (vla-GetPaperSize Layout 'PaperWidth 'PaperHeight)
	               ;; Do plot area calculations
	               (setq PlotWidth (- PaperWidth (- (vlax-safearray-get-element MarginUpperRight 0) (vlax-safearray-get-element MarginLowerLeft 0))))
	               (setq PlotHeight (- PaperHeight (- (vlax-safearray-get-element MarginUpperRight 1) (vlax-safearray-get-element MarginLowerLeft 1))))
	        
	               ;; Are we using inches or millimeters
	               (setq Measurement \" millimeter(s)\")
	        
	               ;; Format for display
	               (setq msg (strcat msg \"The paper size for this layout is: \" (rtos PaperWidth 2) \" X \" (rtos PaperHeight 2) Measurement \"\n\n\"))
	               (setq msg (strcat msg \"  The paper margins are: \n\"
				                              \"  Left (\" (rtos (vlax-safearray-get-element MarginLowerLeft 0) 2) \")\" Measurement \"\n\"
				                              \"  Right (\" (rtos (vlax-safearray-get-element MarginUpperRight 0) 2) \")\" Measurement \"\n\"
				                              \"  Top (\" (rtos (vlax-safearray-get-element MarginUpperRight 1) 2) \")\" Measurement \"\n\"
				                              \"  Bottom (\" (rtos (vlax-safearray-get-element MarginLowerLeft 1) 2) \")\" Measurement \"\n\n\"))
				  
	               (setq msg (strcat msg \"The paper plot area for this layout is: \" (rtos PlotWidth 2) \" X \" (rtos PlotHeight 2) Measurement \"\n\"))
	               (setq msg (strcat msg \"_____________________\n\"))
	           )
	       )
    )
    
    ;; Display paper size and margin information
    (alert (strcat \"Paper plot information for the current drawing is: \" msg))
)
")
("GetPaperSize" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7B662353-85A5-486D-8673-B164DACA3676"
"
GetPaperSize Method (ActiveX)
Gets the width and height of the configured paper.
Supported platforms: Windows only
Signature
VBA:
object.GetPaperSize Width, Height
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Width
    Access: Output-only
    Type: Double
    The width of the paper.
Height
    Access: Output-only
    Type: Double
    The height of the paper.
Return Value (RetVal)
No return value.
Remarks
The units for the width and height values are specified by the PaperUnits property.
To set the paper size, use the CanonicalMediaName property.
Examples
VBA:
Sub Example_GetPaperSize()
    ' This example gets the width and height of the default
    ' paper size for your system.
    
    Dim PaperWidth As Double
    Dim PaperHeight As Double
    
    ThisDrawing.ActiveLayout.GetPaperSize PaperWidth, PaperHeight
    
    MsgBox \"The default paper size is \" & vbCrLf & _
           \"Width: \" & PaperWidth & vbCrLf & _
           \"Height: \" & PaperHeight
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetPaperSize()
    ;; This example gets the width and height of the default
    ;; paper size for your system.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-GetPaperSize (vla-get-ActiveLayout doc) 'PaperWidth 'PaperHeight)
    
    (alert (strcat \"The default paper size is \"
                   \"\nWidth: \" (rtos PaperWidth 2)
                   \"\nHeight: \" (rtos PaperHeight 2)))
)
")
("GetPlotDeviceNames" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-67E9FB52-7725-4EA7-9666-C26B4D260D0A"
"
GetPlotDeviceNames Method (ActiveX)
Gets all available plot device names.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetPlotDeviceNames()
object
    Type: Layout, PlotConfiguration
    The object this method applies to.
Return Value (RetVal)
Type: Variant (array of strings)
The array of available device names for the system.
Remarks
You should call RefreshPlotDeviceInfo before the first time you use this method. Once you have called RefreshPlotDeviceInfo, you do not need to call it again unless your plot device information changes during the session.
Examples
VBA:
Sub Example_GetPlotDeviceNames()
    ' This example gets the current plot device information
    ' and then displays the list of plot device names,
    ' media names, localized media names, and plot style
    ' table entries.
    Dim Layout As ACADLayout
    Set Layout = ThisDrawing.ModelSpace.Layout
    
    ' Refresh the current plot information for
    ' this session.
    Layout.RefreshPlotDeviceInfo
    
    ' List all the valid device names for the system
    Dim plotDevices As Variant
    plotDevices = Layout.GetPlotDeviceNames()
    
    Dim x As Integer
    For x = LBound(plotDevices) To UBound(plotDevices)
        MsgBox plotDevices(x)
    Next
    
    ' List all the media names, and their localized version
    Dim mediaNames As Variant
    mediaNames = Layout.GetCanonicalMediaNames()
    
    For x = LBound(mediaNames) To UBound(mediaNames)
        MsgBox mediaNames(x)
        MsgBox Layout.GetLocaleMediaName(mediaNames(x))
    Next
    
    ' List all the entries in the plot style table
    Dim styleNames As Variant
    styleNames = Layout.GetPlotStyleTableNames()
    
    For x = LBound(styleNames) To UBound(styleNames)
        MsgBox styleNames(x)
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetPlotDeviceNames()
    ;; This example gets the current plot device information
    ;; and then displays the list of plot device names,
    ;; media names, localized media names, and plot style
    ;; table entries.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq Layout (vla-get-Layout (vla-get-ModelSpace doc)))
    
    ;; Refresh the current plot information for
    ;; this session.
    (vla-RefreshPlotDeviceInfo Layout)
    
    ;; List all the valid device names for the system
    (setq plotDevices (vlax-variant-value (vla-GetPlotDeviceNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound plotDevices 1) x)
        (alert (vlax-safearray-get-element plotDevices x))
        (setq x (1+ x))
    )
    
    ;; List all the media names, and their localized version
    (setq mediaNames (vlax-variant-value (vla-GetCanonicalMediaNames Layout)))
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound mediaNames 1) x)
        (alert (vlax-safearray-get-element mediaNames x))
        (alert (vla-GetLocaleMediaName Layout (vlax-safearray-get-element mediaNames x)))
        (setq x (1+ x))
    )
    
    ;; List all the entries in the plot style table
    (setq styleNames (vlax-variant-value (vla-GetPlotStyleTableNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound styleNames 1) x)
        (alert (vlax-safearray-get-element styleNames x))
        (setq x (1+ x))
    )
)
")
("GetPlotStyleTableNames" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D36B145F-2855-4CBB-9BF6-A0BA66BE8A36"
"
GetPlotStyleTableNames Method (ActiveX)
Gets all available plot style table names.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetPlotStyleTableNames()
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Return Value (RetVal)
Type: Variant (array of strings)
The array of available plot style table names for the system.
Remarks
You should call RefreshPlotDeviceInfo before the first time you use this method. Once you have called RefreshPlotDeviceInfo, you do not need to call it again unless your plot device information changes during the session.
GetPlotStyleTableNames returns all available plot style tables found on the system, including both CTB and STB files. To filter the results for one type of plot style table, use the PSTYLEMODE system variable.
Examples
VBA:
Sub Example_GetPlotStyleTableNames()
    ' This example gets the current plot device information
    ' and then displays the list of plot device names,
    ' media names, localized media names, and plot style
    ' table entries.
    Dim Layout As ACADLayout
    Set Layout = ThisDrawing.ModelSpace.Layout
    
    ' Refresh the current plot information for
    ' this session.
    Layout.RefreshPlotDeviceInfo
    
    ' List all the valid device names for the system
    Dim plotDevices As Variant
    plotDevices = Layout.GetPlotDeviceNames()
    
    Dim x As Integer
    For x = LBound(plotDevices) To UBound(plotDevices)
        MsgBox plotDevices(x)
    Next
    
    ' List all the media names, and their localized version
    Dim mediaNames As Variant
    mediaNames = Layout.GetCanonicalMediaNames()
    
    For x = LBound(mediaNames) To UBound(mediaNames)
        MsgBox mediaNames(x)
        MsgBox Layout.GetLocaleMediaName(mediaNames(x))
    Next
    
    ' List all the entries in the plot style table
    Dim styleNames As Variant
    styleNames = Layout.GetPlotStyleTableNames()
    
    For x = LBound(styleNames) To UBound(styleNames)
        MsgBox styleNames(x)
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetPlotStyleTableNames()
    ;; This example gets the current plot device information
    ;; and then displays the list of plot device names,
    ;; media names, localized media names, and plot style
    ;; table entries.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq Layout (vla-get-Layout (vla-get-ModelSpace doc)))
    
    ;; Refresh the current plot information for
    ;; this session.
    (vla-RefreshPlotDeviceInfo Layout)
    
    ;; List all the valid device names for the system
    (setq plotDevices (vlax-variant-value (vla-GetPlotDeviceNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound plotDevices 1) x)
        (alert (vlax-safearray-get-element plotDevices x))
        (setq x (1+ x))
    )
    
    ;; List all the media names, and their localized version
    (setq mediaNames (vlax-variant-value (vla-GetCanonicalMediaNames Layout)))
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound mediaNames 1) x)
        (alert (vlax-safearray-get-element mediaNames x))
        (alert (vla-GetLocaleMediaName Layout (vlax-safearray-get-element mediaNames x)))
        (setq x (1+ x))
    )
    
    ;; List all the entries in the plot style table
    (setq styleNames (vlax-variant-value (vla-GetPlotStyleTableNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound styleNames 1) x)
        (alert (vlax-safearray-get-element styleNames x))
        (setq x (1+ x))
    )
)
")
("GetPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5C8BA75E-5F87-479B-B167-3961F93E617E"
"
GetPoint Method (ActiveX)
Gets the point selected in AutoCAD.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetPoint([Point [, Prompt]])
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the relative base point.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The 3D WCS coordinates of the point the AutoCAD user has selected.
Remarks
AutoCAD pauses for user input of a point, and sets the return value to the value of the selected point. The Point parameter specifies a relative base point in the WCS. The Prompt parameter specifies a string that AutoCAD displays before it pauses. Both Point and Prompt are optional.
The AutoCAD user can specify the point by entering a coordinate in the current units format; GetPoint treats the Point parameter and the return value as three-dimensional points. The user can specify the point also by specifying a location on the graphics screen. If the Point parameter is provided, AutoCAD draws a rubber-band line from Point to the current crosshair position.
The coordinates of the point stored in the return value are expressed in terms of the WCS.
If a keyword is returned instead of a point, AutoCAD will generate the error message \"User input keyword.\" Use the GetInput method to obtain the keyword from the return value.
Examples
VBA:
Sub Example_GetPoint()
    ' This example returns a point entered by the user.
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim returnPnt As Variant
    
    ' Return a point using a prompt
    returnPnt = ThisDrawing.Utility.GetPoint(, \"Enter a point: \")
    MsgBox \"The WCS of the point is: \" & returnPnt(0) & \", \" & returnPnt(1) & \", \" & returnPnt(2) & vbCrLf & _
           \"(Enter the next value without prompting.)\", , \"GetPoint Example\"
    
    ' Return a point, no prompt
    returnPnt = ThisDrawing.Utility.GetPoint
    MsgBox \"The WCS of the point is: \" & returnPnt(0) & \", \" & returnPnt(1) & \", \" & returnPnt(2), , \"GetPoint Example\"
    
    ' Return a point using a base point and a prompt
    Dim basePnt(0 To 2) As Double
    basePnt(0) = 2#: basePnt(1) = 2#: basePnt(2) = 0#
    returnPnt = ThisDrawing.Utility.GetPoint(basePnt, \"Enter a point: \")
    MsgBox \"The WCS of the point is: \" & returnPnt(0) & \", \" & returnPnt(1) & \", \" & returnPnt(2)
    
    ' Create a line from the base point and the last point entered
    Dim lineObj As AcadLine
    Set lineObj = ThisDrawing.ModelSpace.AddLine(basePnt, returnPnt)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetPoint()
    ;; This example returns a point entered by the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Return a point using a prompt
    (setq returnPnt (vlax-variant-value (vla-GetPoint (vla-get-Utility doc) nil \"Enter a point: \")))
    (alert (strcat \"The WCS of the point is: \" (rtos (vlax-safearray-get-element returnPnt 0) 2) \", \"
		                                             (rtos (vlax-safearray-get-element returnPnt 1) 2) \", \"
		                                             (rtos (vlax-safearray-get-element returnPnt 2) 2) \"\n\"
                                               \"(Enter the next value without prompting.)\"))
    
    ;; Return a point, no prompt
    (setq returnPnt (vlax-variant-value (vla-GetPoint (vla-get-Utility doc))))
    (alert (strcat \"The WCS of the point is: \" (rtos (vlax-safearray-get-element returnPnt 0) 2) \", \"
		                                             (rtos (vlax-safearray-get-element returnPnt 1) 2) \", \"
		                                             (rtos (vlax-safearray-get-element returnPnt 2) 2)))
    
    ;; Return a point using a base point and a prompt
    (setq basePnt (vlax-3d-point 2 2 0))
    (setq returnPnt (vlax-variant-value (vla-GetPoint (vla-get-Utility doc) basePnt \"Enter a point: \")))
    (alert (strcat \"The WCS of the point is: \" (rtos (vlax-safearray-get-element returnPnt 0) 2) \", \"
		                                             (rtos (vlax-safearray-get-element returnPnt 1) 2) \", \"
		                                             (rtos (vlax-safearray-get-element returnPnt 2) 2)))
    
    ;; Create a line from the base point and the last point entered
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace basePnt returnPnt))
    (vla-ZoomAll acadObj)
)
")
("GetReal" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-32F140FF-B7F4-409C-ADAD-4C304A841A76"
"
GetReal Method (ActiveX)
Gets a real (double) value from the user.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetReal([Prompt])
object
    Type: Utility
    The object this method applies to.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: Double
The value returned from the user.
Remarks
AutoCAD pauses for user input of a real value, and sets the return value to the value that the user enters. The Prompt parameter specifies a string that AutoCAD displays before it pauses. The Prompt is optional.
If a keyword is returned instead of a double, AutoCAD will generate the error message \"User input keyword.\" Use the GetInput method to obtain the keyword from the return value.
Examples
VBA:
Sub Example_GetReal()
    ' This example returns the Real entered by the user.
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim returnReal As Double
    
    ' Return the value entered by user. A prompt is provided.
    returnReal = ThisDrawing.Utility.GetReal(\"Enter an Real: \")
    MsgBox \"The real entered was \" & returnReal & vbCrLf & _
            \"(Enter the next value without prompting.)\", , \"GetReal Example\"
    
    ' Return the value entered by user. No prompt is provided.
    returnReal = ThisDrawing.Utility.GetReal()
    MsgBox \"The real entered was \" & returnReal, , \"GetReal Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetReal()
    ;; This example returns the Real entered by the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Return the value entered by user. A prompt is provided.
    (setq returnReal (vla-GetReal (vla-get-Utility doc) \"Enter an Real: \"))
    (alert (strcat \"The real entered was \" (rtos returnReal 2) \"\n\"
                   \"(Enter the next value without prompting.)\"))
    
    ;; Return the value entered by user. No prompt is provided.
    (setq returnReal (vla-GetReal (vla-get-Utility doc)))
    (alert (strcat \"The real entered was \" (rtos returnReal 2)))
)
")
("GetRelativeDrawOrder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1A7646E1-CEAE-4D67-8944-6329D796E056"
"
GetRelativeDrawOrder Method (ActiveX)
Returns the objects specified, sorted by the draw order, with the bottom object first.
Supported platforms: Windows only
Signature
VBA:
object.GetRelativeDrawOrder Objects, honorSortentsSysvar
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Output-only
    Type: Variant (array of Objects)
    An array of objects sorted by draw order.
honorSortentsSysvar
    Access: Input-only
    Type: Boolean
        True: Use the setting of the DRAWORDERCTL system variable.
        False: Setting is ignored.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
                                  6 20 0
                                 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("GetRemoteFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-912C1C27-9FEA-4CB1-BE50-054603A31547"
"
GetRemoteFile Method (ActiveX)
Downloads the file specified by a URL.
Supported platforms: Windows only
Signature
VBA:
object.GetRemoteFile URL, LocalFile, IgnoreCache
object
    Type: Utility
    The object this method applies to.
URL
    Access: Input-only
    Type:String
    The URL of the file to download.
LocalFile
    Access: Output-only
    Type: String
    The file at the specified URL.
IgnoreCache
    Access: Input-only
    Type: Boolean
        True: Download even if the file has already been transferred in this session.
        False: Do not download if the file has already been transferred in this session.
Return Value (RetVal)
No return value.
Remarks
If you maintain a list of files that have already been downloaded in the current or a previous session (a cache), it may be more efficient to avoid a duplicate transfer and make a copy of the locally available file instead. You can explicitly force a download by setting the IgnoreCache parameter to True, in which case the cache will be bypassed altogether.
When accessing a secure URL, a dialog box will be posted prompting the user for the necessary password information. Message boxes will also appear if the user has not suppressed this activity in the browser.
When downloading a file, AutoCAD creates a temporary file for internal processing. Do not attempt to access this temporary file. Information in this file is deleted at the end of the AutoCAD session.
Examples
VBA:
Sub Example_GetRemoteFile()
    ' This example will prompt the user for a URL to download and will verify that
    ' a proper URL was entered.  After downloading, the example will attempt to load
    ' the downloaded URL as a drawing.
    '
    ' * Note: Remember to delete the downloaded file from your disk drive when finished.
    
    Dim Utility As AcadUtility
    Dim URL As String, DestFile As String, FileURL As String
    
    Set Utility = ThisDrawing.Utility   ' Connect to Utility object
    
GETURL:
    ' Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    URL = Utility.GetString(False, vbLf & \"Enter the complete URL of the file you wish to download: \")
    
    URL = Trim(URL)                     ' Get rid of blank spaces
    
    If URL = \"\" Then Exit Sub           ' Did user cancel
    ' Determine if user entered a valid URL; if not, prompt again
    If Not (Utility.IsURL(URL)) Then
        MsgBox \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\"
        GoTo GETURL
    End If
        
    ' Download URL
    Utility.GetRemoteFile URL, DestFile, True
    
    ' Display downloaded file information
    MsgBox URL & \" was downloaded to: \" & DestFile
   
    ' Use IsRemoteFile to determine if this file was downloaded from a URL.
    ' If it was, display the URL it was downloaded from
    '
    ' * Note: Although the results that IsRemoteFile will return are already known
    ' since the file was just downloaded it is important to know how this
    ' method can be used.
    If Utility.IsRemoteFile(DestFile, FileURL) Then
        MsgBox \"The file: \" & DestFile & \" is a downloaded file and was downloaded from: \" & FileURL
    Else
        MsgBox \"The file: \" & DestFile & \" is not a downloaded file.\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetRemoteFile()
    ;; This example will prompt the user for a URL to download and will verify that
    ;; a proper URL was entered.  After downloading, the example will provide information
    ;; about the downloaded drawing.
    ;;
    ;; * Note: Remember to delete the downloaded file from your disk drive when finished.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq Utility (vla-get-Utility doc))   ;; Connect to Utility object
    
    ;; Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    (setq URL (vla-GetString Utility :vlax-false \"\nEnter the complete URL of the file you wish to download: \"))
  
    (if (/= URL \"\")
        (progn
	           (if (= (vla-IsURL Utility URL) :vlax-false)
	               (alert \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\")
	               (progn
		                  ;; Download URL
		                  (vla-GetRemoteFile Utility URL 'DestFile :vlax-true)
		    
		                  ;; Display downloaded file information
		                  (alert (strcat URL \" was downloaded to: \" DestFile \"\n\"))
		                  ;; Use IsRemoteFile to determine if this file was downloaded from a URL.
	              	    ;; If it was, display the URL it was downloaded from
	              	    ;;
		                  ;; * Note: Although the results that IsRemoteFile will return are already known
		                  ;; since the file was just downloaded it is important to know how this
		                  ;; method can be used.
		                  (if (= (vla-IsRemoteFile Utility DestFile URL) :vlax-true)
		                      (alert (strcat \"The file: \" DestFile \" is a downloaded file and was downloaded from: \" URL))
		                      (alert (strcat \"The file: \" DestFile \" is not a downloaded file.\"))
		                  )
	              	)
	           )
	       )
    )
)
")
("GetRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E3BCA98F-F9F6-4C7B-BAE1-89631412DFED"
"
GetRotation Method (ActiveX)
Gets the rotation value for a cell or cell style.
Supported platforms: Windows only
Signature - Table
VBA:
RetVal = object.GetRotation(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
Signature - TableStyle
VBA:
RetVal = object.GetRotation(StringCellStyle)
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    The cell style name.
Return Value (RetVal)
Type: Double
The rotation value for the cell or cell style.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellClass()
    ' This example creates a TableStyle object and sets values for
    ' the style classes and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetCellClass \"NewTestStyle\", 4
      
    customObj.SetRotation \"NewTestStyle\", 8.4
      
    MsgBox \"The cell class is \" & customObj.GetCellClass(\"NewTestStyle\") & _
           \" the cell rotation is \" & customObj.GetRotation(\"NewTestStyle\")
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellClass()
    ;; This example creates a TableStyle object and sets values for
    ;; the style classes and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (vla-SetCellClass customObj \"NewTestStyle\" 4)
    (vla-SetRotation customObj \"NewTestStyle\" 8.4)
      
    (alert (strcat \"The cell class is \" (itoa (vla-GetCellClass customObj \"NewTestStyle\"))
                   \" and the cell rotation is \" (rtos (vla-GetRotation customObj \"NewTestStyle\") 2) \".\"
           )
    )
)
")
("GetRowHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2676F3AD-B201-4D4D-B76A-7028F0B9530D"
"
GetRowHeight Method (ActiveX)
Returns the row height for the row at the specified row index in the table.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetRowHeight(row)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
Return Value (RetVal)
Type: Double
The height of the row.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetRowType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B1B8AE63-5887-4386-A1F6-7C72B32B5E98"
"
GetRowType Method (ActiveX)
Returns the row type for the specified row.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetRowType(row)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
Return Value (RetVal)
Type: AcRowType enum
The row type.
    acDataRow
    acHeaderRow
    acTitleRow
    acUnknownRow
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2364905F-5369-4EB1-AE19-B27081A706F0"
"
GetScale Method (ActiveX)
Gets the scale value for a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetScale(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Integer
    The content value for the cell.
Return Value (RetVal)
Type: Double
The scale value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetSectionTypeSettings" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3355B477-5FD0-494C-BB85-F3C7443F0A4E"
"
GetSectionTypeSettings Method (ActiveX)
Gets the section type settings object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetSectionTypeSettings(secType)
object
    Type: SectionSettings
    The object this method applies to.
secType
    Access: Input-only
    Type: AcSectionType enum
        acSectionType2dSection
        acSectionType3dSection
        acSectionTypeLiveSection
Return Value (RetVal)
Type: SectionTypeSettings
The SectionTypeSettings object that represents the settings for the section value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetSnapSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7938C315-7A3F-47EF-9B31-B78AC6A425D9"
"
GetSnapSpacing Method (ActiveX)
Gets the snap spacing for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.GetSnapSpacing XSpacing, YSpacing
object
    Type: PViewport, Viewport
    The objects this method applies to.
XSpacing
    Access: Output-only
    Type: Double
    The snap spacing for the X axis.
YSpacing
    Access: Output-only
    Type: Double
    The snap spacing for the Y axis.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetSnapSpacing()
    ' This example finds the current Snap spacing, and changes that spacing.
    
    ' Find the current active Model space viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Turn on Snap spacing and reset the viewport.
    viewportObj.SnapOn = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Find the current Snap spacing
    Dim XSpacing As Double
    Dim YSpacing As Double
    
    viewportObj.GetSnapSpacing XSpacing, YSpacing
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, Title:=\"GetSnapSpacing Example\"
    
    ' Change the Snap spacing
    XSpacing = XSpacing * 0.5
    YSpacing = YSpacing * 0.5
    viewportObj.SetSnapSpacing XSpacing, YSpacing
    ThisDrawing.ActiveViewport = viewportObj
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, Title:=\"GetSnapSpacing Example\"
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetSnapSpacing()
    ;; This example finds the current Snap spacing, and changes that spacing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Find the current active Model space viewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Turn on Snap spacing and reset the viewport.
    (vla-put-SnapOn viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Find the current Snap spacing
    (vla-GetSnapSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
    
    ;; Change the Snap spacing
    (vla-SetSnapSpacing viewportObj (* XSpacing 0.5) (* YSpacing 0.5))
    (vla-put-ActiveViewport doc viewportObj)
    (vla-GetSnapSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
)
")
("GetString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4C5A1510-D470-4918-B2DC-FAAB9712BC33"
"
GetString Method (ActiveX)
Gets a string from the user.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetString(HasSpaces [, Prompt])
object
    Type: Utility
    The object this method applies to.
HasSpaces
    Access: Input-only
    Type: Long
        0: The return string cannot contain spaces. It is terminated by a carriage return or space.
        1: The return string can contain spaces. It is terminated by a carriage return only.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text used to prompt the user for input.
Return Value (RetVal)
Type: String
The string returned from the user.
Remarks
AutoCAD pauses for user input of the string, and sets the result to the string that the user enters. The HasSpaces parameter specifies whether the string can contain spaces. The Prompt parameter specifies a string that this method displays before AutoCAD pauses.
The AutoCAD user can enter the string from the keyboard. If the HasSpaces parameter is True, the string can contain blanks and the user must terminate it by entering [Return]. If HasSpaces is False, entering either a blank or [Return] terminates the string. If the user enters more than 132 characters, string entry continues until the user enters a blank or carriage return (according to HasSpaces), but GetString places only the first 132 characters into the return value.
Examples
VBA:
Sub Example_GetString()
    ' This example demonstrates different ways of returning a string
    ' entered by a user.
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim returnString As String
    
    ' Prompt & Input cannot contain blanks
    returnString = ThisDrawing.Utility.GetString(False, \"Enter text (a space or  terminates input): \")
    MsgBox \"The string entered was '\" & returnString & \"'\", , \"GetString Example\"
    
    ' Prompt & Input can contain blanks
    returnString = ThisDrawing.Utility.GetString(True, \"Enter text ( terminates input):\")
    MsgBox \"The string entered was '\" & returnString & \"'\", , \"GetString Example\"
    
    ' Prompt & Input can contain blanks, but not an empty string
    Dim NoNull As Integer
    NoNull = 1    ' Disallow null
    ThisDrawing.Utility.InitializeUserInput NoNull
    returnString = ThisDrawing.Utility.GetString(True, \"Enter text ( terminates input): \")
    MsgBox \"The string entered was '\" & returnString & \"'\", , \"GetString Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetString()
    ;; This example demonstrates different ways of returning a string
    ;; entered by a user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Prompt & Input cannot contain blanks
    (setq returnString (vla-GetString (vla-get-Utility doc) :vlax-false \"Enter text (a space or <enter> terminates input): \"))
    (alert (strcat \"The string entered was '\" returnString \"'\"))
    
    ;; Prompt & Input can contain blanks
    (setq returnString (vla-GetString (vla-get-Utility doc) :vlax-true \"Enter text (<enter> terminates input):\"))
    (alert (strcat \"The string entered was '\" returnString \"'\"))
    
    ;; Prompt & Input can contain blanks, but not an empty string
    (setq NoNull 1)    ;; Disallow null
    (vla-InitializeUserInput (vla-get-Utility doc) NoNull)
    (setq returnString (vla-GetString (vla-get-Utility doc) :vlax-true \"Enter text (<enter> terminates input): \"))
    (alert (strcat \"The string entered was '\" returnString \"'\"))
)
")
("GetSubEntity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D00A264-378F-4496-9D54-90FC70C999A1"
"
GetSubEntity Method (ActiveX)
Gets an object or subentity interactively.
Supported platforms: Windows only
Signature
VBA:
object.GetSubEntity Object, PickedPoint, TransMatrix, ContextData [, Prompt]
object
    Type: Utility
    The object this method applies to.
Object
    Access: Output-only
    Type: Object
    The picked object or subentity. Can be one of any of the drawing objects.
PickedPoint
    Access: Output-only
    Type: Variant (three-element array of doubles)
    A 3D WCS coordinate specifying the point that was selected.
TransMatrix
    Access: Output-only
    Type: Variant (4x4 array of doubles)
    The translation matrix applied to this entity.
ContextData
    Access: Output-only
    Type: Variant (array of longs)
    An array of object IDs for any nested objects in the selected object.
Prompt
    Access: Input-only; optional
    Type: Variant (string)
    The text to display to prompt the user for input.
Return Value (RetVal)
No return value.
Remarks
This method requires the AutoCAD user to select an object by picking a point on the graphics screen. If an object or subentity is picked, it is returned in the first parameter, and the second parameter will contain the point picked in WCS coordinates. If the pick point is not on an object the method will fail.
This method can retrieve an object even if it is not visible on the screen or if it is on a frozen layer.
Examples
VBA:
Sub Example_GetSubEntity()
    ' This example prompts the user to select on object on the screen with a mouse click,
    ' and returns some information about the selected object.
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim Object As Object
    Dim PickedPoint As Variant, TransMatrix As Variant, ContextData As Variant
    Dim HasContextData As String
    
    On Error GoTo NOT_ENTITY
        
TRYAGAIN:
        
    MsgBox \"Use the mouse to click on an object in the current drawing after dismissing this dialog box.\"
        
    ' Get information about selected object
    ThisDrawing.Utility.GetSubEntity Object, PickedPoint, TransMatrix, ContextData
    
    ' Process and display selected object properties
    HasContextData = IIf(VarType(ContextData) = vbEmpty, \" does not \", \" does \")
    
    MsgBox \"The object you chose was an: \" & TypeName(Object) & vbCrLf & _
            \"Your point of selection was: \" & PickedPoint(0) & \", \" & _
                                              PickedPoint(1) & \", \" & _
                                              PickedPoint(2) & vbCrLf & _
            \"This object\" & HasContextData & \"have nested objects.\"
    
    Exit Sub
    
NOT_ENTITY:
    ' If you click on empty space or do not select an entity,
    ' this error will be generated
    If MsgBox(\"You have not selected an object.  Click OK to try again.\", _
               vbOKCancel & vbInformation) = vbOK Then
        Resume TRYAGAIN
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetSubEntity()
    ;; This example prompts the user to select on object on the screen with a mouse click,
    ;; and returns some information about the selected object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get information about selected object
    (vla-GetSubEntity (vla-get-Utility doc) 'Object 'PickedPoint 'TransMatrix 'ContextData \"Select a subentity: \")
    
    ;; Process and display selected object properties
    (if (/= ContextData nil)
        (setq HasContextData \" does \")
        (setq HasContextData \" does not \")
    )
    
    (alert (strcat \"The object you chose was an: \" (vla-get-ObjectName Object)
                   \"\nYour point of selection was: \" (rtos (vlax-safearray-get-element PickedPoint 0) 2) \", \"
		                                                   (rtos (vlax-safearray-get-element PickedPoint 1) 2) \", \"
		                                                   (rtos (vlax-safearray-get-element PickedPoint 2) 2)
                   \"\nThis object\" HasContextData \"have nested objects.\"))
)
")
("GetSubSelection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2118C290-39B7-460E-9B0E-527E3BCF894F"
"
GetSubSelection Method (ActiveX)
Returns the row and column indexes of the cells in a subselection set.
Supported platforms: Windows only
Signature
VBA:
object.GetSubSelection rowMin, rowMax, colMin, colMax
object
    Type: Table
    The object this method applies to.
rowMin
    Access: Output-only
    Type: Long
    The zero-based minimum row index for the subselection set of cells in the table.
rowMax
    Access: Output-only
    Type: Long
    The zero-based maximum row index for the subselection set of cells in the table.
colMin
    Access: Output-only
    Type: Long
    The zero-based minimum column index for the subselection set of cells in the table.
colMax
    Access: Output-only
    Type: Long
    The zero-based maximum column index for the subselection set of cells in the table.
Return Value (RetVal)
No return value.
Remarks
This method gets the row and column indices of the cells in the subselection set. The total number of selected cells is equal to (rowMax - rowMin + 1) * (colMax - colMin + 1).
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-049B05A2-A096-4729-A9CF-0A4BAFB1BAB7"
"
GetText Method (ActiveX)
Returns the text value for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetText(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
Return Value (RetVal)
Type: String
The text value of the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetTextHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-49AC8768-B650-4D1B-94E8-2F5F72F411C2"
"
GetTextHeight Method (ActiveX)
Returns the text height for the specified row type.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetTextHeight(rowType)
object
    Type: Table, TableStyle
    The objects this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: Double
The text height for the specified row type.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetTextHeight()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetTextHeight()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("GetTextHeight2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C60CCD4E-A151-401F-AA6D-0A42AFA5E2BE"
"
GetTextHeight2 Method (ActiveX)
Gets the text height for a cell.
Supported platforms: Windows only
Signature - Table
VBA:
RetVal = object.GetTextHeight2(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
Signature - TableStyle
VBA:
RetVal = object.GetTextHeight2(strCellStyle)
object
    Type: TableStyle
    The object this method applies to.
strCellStyle
    Access: Input-only
    Type: String
    A named cell style in the table style.
Return Value (RetVal)
Type: Double
The text height value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetTextRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0975FF30-D82B-4494-9676-F231A0D89E02"
"
GetTextRotation Method (ActiveX)
Returns the text rotation for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetTextRotation(row, col)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
Return Value (RetVal)
Type: AcRotationAngle enum
    acDegrees000
    acDegrees090
    acDegrees180
    acDegrees270
    acDegreesUnknown
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetTextString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16DC0D7E-708E-44B4-9A59-1BDEFCA76A3D"
"
GetTextString Method (ActiveX)
Gets the text value of a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetTextString(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
Return Value (RetVal)
Type: String
The string value of the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetTextStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-84729374-0C8E-4A00-9A2F-7D9D83EA4887"
"
GetTextStyle Method (ActiveX)
Gets the text style name for the specified row types.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetTextStyle(rowTypes)
object
    Type: Table, TableStyle
    The objects this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Return Value (RetVal)
Type: String
The text style name to use for the specified row types.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GetTextStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetTextStyle()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("GetTextStyle2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0B9E39EC-8CEA-49EB-B56D-8CD6D5A55991"
"
GetTextStyle2 Method (ActiveX)
Gets the text style name for a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetTextStyle2(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
Return Value (RetVal)
Type: String
The String value of the name.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetTextStyleId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9FEDB229-A100-44DC-91E1-B498AAD2BF65"
"
GetTextStyleId Method (ActiveX)
Gets the ObjectId for the text style of the named cell style.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetTextStyleId(bstrCellStyle)
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The named cell style.
Return Value (RetVal)
Type: Long_PTR
The object id of the named text style.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetUCSMatrix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-85495614-C788-45C7-8E26-2BC8A2C3A490"
                "
GetUCSMatrix Method (ActiveX)
Gets the transformation matrix consisting of UCS coordinate system data.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetUCSMatrix()
object
    Type: UCS
    The object this method applies to.
Return Value (RetVal)
Type: Variant (4x4 array of doubles)
The UCS matrix.
Remarks
To transform an entity into a given UCS, use the TransformBy method, using the matrix returned by this method as the input for that method.
Examples
VBA:
Sub Example_GetUCSMatrix()
    ' This example creates a new UCS and finds the UCS matrix for it.
    ' It then creates a circle using WCS coordinates and
    ' transforms the circle for the UCS.
    
    ' Define a new UCS and turn on the UCS icon at the origin.
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPoint(0 To 2) As Double
    Dim yAxisPoint(0 To 2) As Double
    
    origin(0) = 2: origin(1) = 2: origin(2) = 0
    xAxisPoint(0) = 3: xAxisPoint(1) = 2: xAxisPoint(2) = 0
    yAxisPoint(0) = 2: yAxisPoint(1) = 3: yAxisPoint(2) = 0
    
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPoint, yAxisPoint, \"UCS1\")
    ThisDrawing.ActiveUCS = ucsObj
    ThisDrawing.ActiveViewport.UCSIconOn = True
    ThisDrawing.ActiveViewport.UCSIconAtOrigin = True
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    
    ' Create a circle using WCS coordinates
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 1: center(1) = 1: center(2) = 0
    radius = 0.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    
    ' Get the UCS transformation matrix
    Dim TransMatrix As Variant
    TransMatrix = ucsObj.GetUCSMatrix()
    
    ' Transform the circle to the UCS coordinates
    MsgBox \"Transform the circle.\", , \"GetUCSMatrix Example\"
    circleObj.TransformBy (TransMatrix)
    circleObj.Update
    
    MsgBox \"The circle is transformed.\", , \"GetUCSMatrix Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetUCSMatrix()
    ;; This example creates a new UCS and finds the UCS matrix for it.
    ;; It then creates a circle using WCS coordinates and
    ;; transforms the circle for the UCS.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define a new UCS and turn on the UCS icon at the origin.
    (setq origin (vlax-3d-point 2 2 0)
          xAxisPoint (vlax-3d-point 3 2 0)
          yAxisPoint (vlax-3d-point 2 3 0))
    
    (setq ucsObj (vla-Add (vla-get-UserCoordinateSystems doc) origin xAxisPoint yAxisPoint \"UCS1\"))
    (vla-put-ActiveUCS doc ucsObj)
    (vla-put-UCSIconOn (vla-get-ActiveViewport doc) :vlax-true)
    (vla-put-UCSIconAtOrigin (vla-get-ActiveViewport doc) :vlax-true)
    (vla-put-ActiveViewport doc (vla-get-ActiveViewport doc))
    
    ;; Create a circle using WCS coordinates
    (setq center (vlax-3d-point 1 1 0)
          radius 0.5)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    
    ;; Get the UCS transformation matrix
    (setq TransMatrix (vla-GetUCSMatrix ucsObj))
    
    ;; Transform the circle to the UCS coordinates
    (alert \"Transform the circle.\")
    (vla-TransformBy circleObj TransMatrix)
    (vla-Update circleObj)
    
    (alert \"The circle is transformed.\")
)
    ДаНет
Если не указано другое, эта работа лицензируется в соответствии с условиями «Attribution-NonCommercial-ShareAlike» («Атрибуция — Некоммерческое использование — На тех же условиях») 3.0 Непортированная. Для получения дополнительной информации см. раздел вопросов и ответов Autodesk Creative Commons.
    Заявление о конфиденциальностиУсловия использованияСообщить о нарушении© 2023 Autodesk Inc. Все права защищены.
 ")
("GetUniqueCellStyleName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-056E26F8-2BFA-4064-9632-7DA0B619137E"
                          "
GetUniqueCellStyleName Method (ActiveX)
Gets a unique cell style name with the base name that is passed as the prefix.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetUniqueCellStyleName(pszBaseName)
object
    Type: TableStyle
    The object this method applies to.
pszBaseName
    Access: Input-only
    Type: String
    The base cell style name.
Return Value (RetVal)
Type: String
The cell style name.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("GetUniqueSectionName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1CCFF645-BD4A-4868-9EFB-0DF08E0BADBB"
                        "
GetUniqueSectionName Method (ActiveX)
Finds a unique section plane name.
Supported platforms: Windows only
Signature
VBA:
Retval = object.GetUniqueSectionName(pszBaseName)
object
    Type: SectionManager
    The object this method applies to.
pszBaseName
    Access: Input-only
    Type: String
    The base name from which the unique section plane name is coined. The base name can be any arbitrary string.
Return Value (RetVal)
Type: String
The section plane name.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F8978A2D-3A99-4E66-BDA3-D8D1E22DC161"
            "
GetValue Method (ActiveX)
Gets the value of a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetValue(nRow, nCol, nContent)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to delete.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to delete.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
Return Value (RetVal)
Type: Variant
The value of the cell.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetVariable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2D00EF00-0579-4424-85C3-BEABB329CBAD"
               "
GetVariable Method (ActiveX)
Gets the current setting of an AutoCAD system variable.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetVariable(Name)
object
    Type: Document
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the variable to return. Must contain a valid system variable name (the case of the characters is not significant).
Return Value (RetVal)
Type: Variant
The value of the specified system variable.
Remarks
For a list of all the AutoCAD system variables and their types, please refer to \"System Variables\" in the AutoCAD Help system.
Examples
VBA:
Sub Example_GetVariable()
    ' This example finds the current setting of the
    ' system variable FILLMODE.
    
    Dim sysVarName As String
    Dim varData As Variant
    
    sysVarName = \"FILLMODE\"
    varData = ThisDrawing.GetVariable(sysVarName)
    MsgBox sysVarName & \" = \" & varData, , \"GetVariable Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetVariable()
    ;; This example finds the current setting of the
    ;; system variable FILLMODE.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    (setq sysVarName \"FILLMODE\")
    (setq varData (vlax-variant-value (vla-GetVariable doc sysVarName)))
    (alert (strcat sysVarName \" = \" (itoa varData)))
)
")
("GetVertexCount" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B0E7A682-C022-4C87-AD56-6918FB04DBB5"
                  "
GetVertexCount Method (ActiveX)
Gets the number of vertices in the specified leader line.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetVertexCount(leaderLineIndex)
object
    Type: MLeader
    The object this method applies to.
leaderLineIndex
    Access: Input-only
    Type: Long
    The leader line index.
Return Value (RetVal)
Type: Long
The number of vertices.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GetWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5673C339-D392-45FB-A11E-03463BE8D6D4"
             "
GetWeight Method (ActiveX)
Gets the weight of the control point at a given index.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.GetWeight(Index)
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Integer
    The index location in the array of points that make up the spline. A positive integer beginning with 0.
Return Value (RetVal)
Type: Double
The weight of the specified control point.
Remarks
Control points fine-tune a spline definition by adding weight to a portion of the spline curve.
Examples
VBA:
Sub Example_GetWeight()
    ' This example creates a spline object in model space.
    ' It then finds the weight of the first control point
    ' and changes that value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display the coordinates of the first fit point
    Dim weight As Double
    weight = splineObj.GetWeight(0)
    MsgBox \"The weight of control point 1 is \" & weight, , \"GetWeight Example\"
    
    ' Change the weight of the first control point
    weight = 5
    splineObj.SetWeight 0, weight
    splineObj.Update
    MsgBox \"The weight of control point 1 is now \" & weight, , \"GetWeight Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetWeight()
    ;; This example creates a spline object in model space.
    ;; It then finds the weight of the first control point
    ;; and changes that value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display the coordinates of the first fit point
    (setq weight (vla-GetWeight splineObj 0))
    (alert (strcat \"The weight of control point 1 is \" (rtos weight 2)))
    
    ;; Change the weight of the first control point
    (setq weight 5)
    (vla-SetWeight splineObj 0 weight)
    (vla-Update splineObj)
    (alert (strcat \"The weight of control point 1 is now \" (rtos weight 2)))
)
")
("GetWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-60D35D7B-9328-4FD2-A4AB-20EDB5991F6F"
            "
GetWidth Method (ActiveX)
Gets the start and end width for a polyline.
Supported platforms: Windows only
Signature
VBA:
object.GetWidth Index, StartWidth, EndWidth
object
    Type: LWPolyline, Polyline
    The objects this method applies to.
Index
    Access: Input-only
    Type: Integer
    The index location of the polyline for which the width is returned. The index must be a positive integer beginning with 0.
StartWidth
    Access: Output-only
    Type: Double
    The start width of the polyline at the given index.
EndWidth
    Access: Output-only
    Type: Double
    The end width of the polyline at the given index.
Return Value (RetVal)
No return value.
Remarks
Polyline: this method will fail if the polyline Type property is acCubicSplinePoly or acQuadSplinePoly.
Examples
VBA:
Sub Example_GetWidth()
    ' The following code prompts you to select a lightweight
    ' polyline, then displays the width of each segment of the
    ' selected polyline. 
    AppActivate ThisDrawing.Application.Caption
   
    Dim returnObj As AcadObject
    Dim basePnt As Variant
    Dim retCoord As Variant
    Dim StartWidth As Double
    Dim EndWidth As Double
    Dim i, j As Long
    Dim nbr_of_segments As Long
    Dim nbr_of_vertices As Long
    Dim segment As Long
    Dim message_string
              
    On Error Resume Next
   
    ThisDrawing.Utility.GetEntity returnObj, basePnt, \"Select a polyline\"
       
    ' Make sure the user selected a polyline.
    If Err <> 0 Then
        If returnObj.EntityName <> \"AcDbPolyline\" Then
            MsgBox \"You did not select a polyline\"
        End If
        Exit Sub
    End If
    
    ' Obtain the coordinates of each vertex of the selected polyline.
    ' The coordinates are returned in an array of points.
    retCoord = returnObj.Coordinates
    
    segment = 0
    i = LBound(retCoord)                 ' Start index of coordinates array
    j = UBound(retCoord)                 ' End index of coordinates array
    nbr_of_vertices = ((j - i) \ 2) + 1  ' Number of vertices in the polyline
    
    ' Determine the number of segments in the polyline.
    ' A closed polyline has as many segments as it has vertices.
    ' An open polyline has one fewer segment than it has vertices.
    ' Check the Closed property to determine if the polyline is closed.
    
    If returnObj.Closed Then
        nbr_of_segments = nbr_of_vertices
    Else
        nbr_of_segments = nbr_of_vertices - 1
    End If
    
    ' Get the width of each segment of the polyline
    Do While nbr_of_segments > 0
          
        ' Get the width of the current segment
        returnObj.GetWidth segment, StartWidth, EndWidth
        
        message_string = \"The segment that begins at \" & retCoord(i) & \",\" & retCoord(i + 1) _
            & \" has a start width of \" & StartWidth & \" and an end width of \" & EndWidth
        MsgBox message_string, , \"GetWidth Example\"
     
        ' Prepare to obtain width of next segment, if any
        i = i + 2
        segment = segment + 1
        nbr_of_segments = nbr_of_segments - 1
    Loop
      
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetWidth()
    ;; The following code prompts you to select a lightweight
    ;; polyline, then displays the width of each segment of the
    ;; selected polyline. 
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    (vla-GetEntity (vla-get-Utility doc) 'returnObj 'basePnt \"Select a polyline: \")
       
    ;; Make sure the user selected a polyline.
    (if (/= returnObj nil)
        (progn
            (if (= (vla-get-ObjectName returnObj) \"AcDbPolyline\")
	               (progn
		                  ;; Obtain the coordinates of each vertex of the selected polyline.
		                  ;; The coordinates are returned in an array of points.
		                  (setq retCoord (vlax-variant-value (vla-get-Coordinates returnObj)))
		    
		                  (setq segment 0
		                        i (vlax-safearray-get-l-bound retCoord 1)                 ;; Start index of coordinates array
		                        j (vlax-safearray-get-u-bound retCoord 1)                 ;; End index of coordinates array
		                        nbr_of_vertices (+ (/ (- j i) 2) 1))                      ;; Number of vertices in the polyline
		    
		                  ;; Determine the number of segments in the polyline.
		                  ;; A closed polyline has as many segments as it has vertices.
		                  ;; An open polyline has one fewer segment than it has vertices.
		                  ;; Check the Closed property to determine if the polyline is closed.
		                  (if (= (vla-get-Closed returnObj) :vlax-true)
		                      (setq nbr_of_segments nbr_of_vertices)
		                      (setq nbr_of_segments (1- nbr_of_vertices))
		                  )
		    
		                  ;; Get the width of each segment of the polyline
		                  (while (>= nbr_of_segments 0)
		                      ;; Get the width of the current segment
		                      (vla-GetWidth returnObj segment 'StartWidth 'EndWidth)
		        
		                      (setq message_string (strcat \"The segment that begins at \" (rtos (vlax-safearray-get-element retCoord i) 2) \",\"
						                                                                             (rtos (vlax-safearray-get-element retCoord (1+ i)) 2)
		                                                   \" has a start width of \" (rtos StartWidth 2) \" and an end width of \" (rtos EndWidth 2)))
                        (alert message_string)
		     
                        ;; Prepare to obtain width of next segment, if any
                        (setq i (+ i 2))
                        (setq segment (1+ segment))
                        (setq nbr_of_segments (1- nbr_of_segments))
		                  )
                )
                (alert \"Object selected was not a polyline\")
            )
        )
        (alert \"No object was selected.\")
    )
)
")
("GetWindowToPlot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C2F875C1-C95A-4B6E-849A-79B03BCA4666"
                   "
GetWindowToPlot Method (ActiveX)
Gets the coordinates that define the portion of the layout to plot.
Supported platforms: Windows only
Signature
VBA:
object.GetWindowToPlot LowerLeft, UpperRight
object
    Type: Layout, PlotConfiguration
    The object this method applies to.
LowerLeft
    Access: Output-only
    Type: Variant (two-element array of doubles)
    The X and Y values for the lower-left window.
UpperRight
    Access: Output-only
    Type: Variant (two-element array of doubles)
    The X and Y values for the upper-right window.
Return Value (RetVal)
No return value.
Remarks
The window coordinates are taken from the origin.
The units for these values are specified by the PaperUnits property.
The PlotType property must be set to acWindow for these coordinates to be used for the plot.
Examples
VBA:
Sub Example_GetWindowToPlot()
    ' This example allows the user to define an area in the current layout to plot
    ' and displays a plot preview of the defined area.
    '
    ' * Note: You will have to exit the plot preview
    '  before the VBA example will stop and control will be returned
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim point1 As Variant, point2 As Variant
    
    ' Get first point in window
    point1 = ThisDrawing.Utility.GetPoint(, \"Click the lower-left of the window to plot.\")
    ReDim Preserve point1(0 To 1)   ' Change this to a 2D array by removing the Z position
    
    ' Get second point in window
    point2 = ThisDrawing.Utility.GetPoint(, \"Click the upper-right of the window to plot.\")
    ReDim Preserve point2(0 To 1)   ' Change this to a 2D array by removing the Z position
    
    ' Send information about window to current layout
    ThisDrawing.ActiveLayout.SetWindowToPlot point1, point2
    
    ' Read back window information
    ThisDrawing.ActiveLayout.GetWindowToPlot point1, point2
    
    MsgBox \"Press any key to plot the following window:\" & vbCrLf & vbCrLf & _
           \"Lower Left: \" & point1(0) & \", \" & point1(1) & vbCrLf & _
           \"Upper Right: \" & point2(0) & \", \" & point2(1)
    
    ' Make sure the instruction is to plot a view, not some other plot style
    ThisDrawing.ActiveLayout.PlotType = acWindow
    
    ' Send Plot To Window
    ThisDrawing.ActiveLayout.ConfigName = \"DWG to PDF.pc3\"
    ThisDrawing.Plot.DisplayPlotPreview acFullPreview
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetWindowToPlot()
    ;; This example allows the user to define an area in the current layout to plot
    ;; and displays a plot preview of the defined area.
    ;;
    ;; * Note: You will have to exit the plot preview
    ;;  before the VBA example will stop and control will be returned
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Get first point in window
    (setq point1 (vlax-variant-value (vla-GetPoint (vla-get-Utility doc) nil \"Click the lower-left of the window to plot.\")))
    ;; Change this to a 2D array by removing the Z position
    (setq pointTemp1 (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-put-element pointTemp1 0 (vlax-safearray-get-element point1 0))
    (vlax-safearray-put-element pointTemp1 1 (vlax-safearray-get-element point1 1))
    
    ;; Get second point in window
    (setq point2 (vlax-variant-value (vla-GetCorner (vla-get-Utility doc) point1 \"Click the upper-right of the window to plot.\")))
    ;; Change this to a 2D array by removing the Z position
    (setq pointTemp2 (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-put-element pointTemp2 0 (vlax-safearray-get-element point2 0))
    (vlax-safearray-put-element pointTemp2 1 (vlax-safearray-get-element point2 1))
    
    ;; Send information about window to current layout
    (vla-SetWindowToPlot (vla-get-ActiveLayout doc) pointTemp1 pointTemp2)
    
    ;; Read back window information
    (vla-GetWindowToPlot (vla-get-ActiveLayout doc) 'point1 'point2)
    (setq point1 (vlax-safearray->list point1)
	         point2 (vlax-safearray->list point2))
  
    (alert (strcat \"Press any key to plot the following window:\"
                   \"\nLower Left: \" (rtos (nth 0 point1) 2) \", \" (rtos (nth 1 point1) 2)
                   \"\nUpper Right: \" (rtos (nth 0 point2) 2) \", \" (rtos (nth 1 point2) 2)))
    
    ;; Make sure the instruction is to plot a view, not some other plot style
    (vla-put-PlotType (vla-get-ActiveLayout doc) acWindow)
    
    ;; Send Plot To Window - A plot device must be set before a preview can be created
    (vla-DisplayPlotPreview (vla-get-Plot doc) acFullPreview)
)
")
("GetXData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-330FCA31-A2A9-47F0-972D-6915B6B98426"
            "
GetXData Method (ActiveX)
Gets the extended data (XData) associated with an object.
Supported platforms: Windows only
Signature
VBA:
object.GetXData AppName, XDataType, XDataValue
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, Dimension, DimStyle, Group, Layer, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, RegisteredApplication, TableStyle, TextStyle, UCS, View, Viewport, XRecord
    The objects this method applies to.
AppName
    Access: Input-only
    Type: String
    A NULL string will return all the data attached to the object, regardless of the application that created it. Supplying an application name will return only the data that was created by the specified application.
XDataType
    Access: Output-only
    Type: Variant (array of shorts)
    An array of short integer values that represent the DXF group code values for each value in the extended data (XData).
XDataValue
    Access: Output-only
    Type: Variant (array of variants)
    An array of values that make up the extended data (XData).
Return Value (RetVal)
No return value.
Remarks
Extended data is an example of instance-specific data created by applications written with ObjectARX or AutoLISP. This data can be added to any object. This data follows the object's definition data, and is maintained in the order that it was saved into the document. (AutoCAD maintains this information, but does not use it.)
Examples
VBA:
Sub Example_GetXData()
    ' This example creates a line and attaches extended data to that line.
    
    ' Create the line
    Dim lineObj As AcadLine
    Dim startPt(0 To 2) As Double, endPt(0 To 2) As Double
    startPt(0) = 1#: startPt(1) = 1#: startPt(2) = 0#
    endPt(0) = 5#: endPt(1) = 5#: endPt(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPt, endPt)
    ZoomAll
    ' Initialize all the xdata values. Note that first data in the list should be
    ' application name and first datatype code should be 1001
    Dim DataType(0 To 9) As Integer
    Dim Data(0 To 9) As Variant
    Dim reals3(0 To 2) As Double
    Dim worldPos(0 To 2) As Double
    
    DataType(0) = 1001: Data(0) = \"Test_Application\"
    DataType(1) = 1000: Data(1) = \"This is a test for xdata\"
    DataType(2) = 1003: Data(2) = \"0\"                   ' layer
    DataType(3) = 1040: Data(3) = 1.23479137438413E+40  ' real
    DataType(4) = 1041: Data(4) = 1237324938            ' distance
    DataType(5) = 1070: Data(5) = 32767                 ' 16 bit Integer
    DataType(6) = 1071: Data(6) = 32767                 ' 32 bit Integer
    DataType(7) = 1042: Data(7) = 10                    ' scaleFactor
    reals3(0) = -2.95: reals3(1) = 100: reals3(2) = -20
    DataType(8) = 1010: Data(8) = reals3                ' real
    
    worldPos(0) = 4: worldPos(1) = 400.99999999: worldPos(2) = 2.798989
    DataType(9) = 1011: Data(9) = worldPos              ' world space position
    
    ' Attach the xdata to the line
    lineObj.SetXData DataType, Data
    
    ' Return the xdata for the line
    Dim xdataOut As Variant
    Dim xtypeOut As Variant
    lineObj.GetXData \"\", xtypeOut, xdataOut
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetXData()
    ;; This example creates a line and attaches extended data to that line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the line
    (setq startPt (vlax-3d-point 1 1 0)
          endPt (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPt endPt))
    (vla-ZoomAll acadObj)
    ;; Initialize all the xdata values. Note that first data in the list should be
    ;; application name and first datatype code should be 1001
    (setq DataType (vlax-make-safearray vlax-vbInteger '(0 . 9)))
    (setq Data (vlax-make-safearray vlax-vbVariant '(0 . 9)))
    (vlax-safearray-put-element DataType 0 1001)
    (vlax-safearray-put-element Data 0 \"Test_Application\")
    (vlax-safearray-put-element DataType 1 1000)
    (vlax-safearray-put-element Data 1 \"This is a test for xdata\")
    ;; layer
    (vlax-safearray-put-element DataType 2 1003)
    (vlax-safearray-put-element Data 2 \"0\")
    ;; real
    (vlax-safearray-put-element DataType 3 1040)
    (vlax-safearray-put-element Data 3 1.23479137438413E+40)
    ;; distance
    (vlax-safearray-put-element DataType 4 1041)
    (vlax-safearray-put-element Data 4 1237324938)
  
    ;; 16 bit Integer
    (vlax-safearray-put-element DataType 5 1070)
    (vlax-safearray-put-element Data 5 32767)
    ;; 32 bit Integer
    (vlax-safearray-put-element DataType 6 1071)
    (vlax-safearray-put-element Data 6 32767)
    ;; scaleFactor
    (vlax-safearray-put-element DataType 7 1042)
    (vlax-safearray-put-element Data 7 10)
    ;; 3D point
    (setq reals3 (vlax-3d-point -2.95 100 -20))
    (vlax-safearray-put-element DataType 8 1010)
    (vlax-safearray-put-element Data 8 reals3)
    
    ;; world space position
    (setq worldPos (vlax-3d-point 4 400.99999999 2.798989))
    (vlax-safearray-put-element DataType 9 1011)
    (vlax-safearray-put-element Data 9 worldPos)
    
    ;; Attach the xdata to the line
    (vla-SetXData lineObj DataType Data)
    
    ;; Return the xdata for the line
    (vla-GetXData lineObj \"\" 'xtypeOut 'xdataOut)
)
")
("GetXRecordData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DD8EA14F-4913-44F3-8BEE-C455C150CE4E"
                  "
GetXRecordData Method (ActiveX)
Gets the extended record data (XRecordData) associated with a dictionary.
Supported platforms: Windows only
Signature
VBA:
object.GetXRecordData XRecordDataType, XRecordDataValue
object
    Type: XRecord
    The object this method applies to.
XRecordDataType
    Access: Output-only
    Type: Variant (array of shorts)
    An array of short integer values that represent the DXF group code values for each value in the extended record (XRecord) data.
XRecordDataValue
    Access: Output-only
    Type: Variant (array of variants)
    An array of values that make up the extended record (XRecord) data.
Return Value (RetVal)
No return value.
Remarks
XRecord objects are used to store and manage arbitrary data. This object is similar in concept to XData but is not limited by size or order.
Unlike XData, XRecords work with the standard AutoCAD group codes which are all below 1000 in value. All the standard AutoCAD group codes are supported. This means that, in addition to all the normally used data types, an XRecord is capable of storing object IDs, which allows XRecords to own other objects including other XRecords.
The following group codes are common to all XRecord objects:
Group codes 	Description
100 	Subclass marker (AcDbXrecord)
1-369 (except 5 and 105) 	These values can be used by an application in any way.
Examples
VBA:
Sub Example_SetXRecordData()
    ' This example creates a new XRecord if one doesn't exist,
    ' appends data to the XRecord, and reads it back.  To see data being added,
    ' run the example more than once.
    
    Dim TrackingDictionary As AcadDictionary, TrackingXRecord As AcadXRecord
    Dim XRecordDataType As Variant, XRecordData As Variant
    Dim ArraySize As Long, iCount As Long
    Dim DataType As Integer, Data As String, msg As String
    
    ' Unique identifiers to distinguish our XRecordData from other XRecordData
    Const TYPE_STRING = 1
    Const TAG_DICTIONARY_NAME = \"ObjectTrackerDictionary\"
    Const TAG_XRECORD_NAME = \"ObjectTrackerXRecord\"
    ' Connect to the dictionary in which the XRecord is stored
    On Error GoTo CREATE
    Set TrackingDictionary = ThisDrawing.Dictionaries(TAG_DICTIONARY_NAME)
    Set TrackingXRecord = TrackingDictionary.GetObject(TAG_XRECORD_NAME)
    On Error GoTo 0
    
    ' Get current XRecordData
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    
    ' If there is no array already, create one
    If VarType(XRecordDataType) And vbArray = vbArray Then
        ArraySize = UBound(XRecordDataType) + 1       ' Get the size of the data elements returned
        ArraySize = ArraySize + 1                        ' Increase to hold new data
    
        ReDim Preserve XRecordDataType(0 To ArraySize)
        ReDim Preserve XRecordData(0 To ArraySize)
    Else
        ArraySize = 0
        ReDim XRecordDataType(0 To ArraySize) As Integer
        ReDim XRecordData(0 To ArraySize) As Variant
    End If
    
    ' Append new XRecord Data
    '
    ' For this sample, we only append the current time to the XRecord
    XRecordDataType(ArraySize) = TYPE_STRING: XRecordData(ArraySize) = CStr(Now)
    TrackingXRecord.SetXRecordData XRecordDataType, XRecordData
    
    ' Read back all XRecordData entries
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    ArraySize = UBound(XRecordDataType)
    
    ' Retrieve and display stored XRecordData
    For iCount = 0 To ArraySize
        ' Get information for this element
        DataType = XRecordDataType(iCount)
        Data = XRecordData(iCount)
        
        If DataType = TYPE_STRING Then
            msg = msg & Data & vbCrLf
        End If
    Next
    
    MsgBox \"The data in the XRecord is: \" & vbCrLf & vbCrLf & msg, vbInformation
    
    Exit Sub
CREATE:
    ' Create the objects that hold the XRecordData
    If TrackingDictionary Is Nothing Then  ' Make sure the tracking object is there
        Set TrackingDictionary = ThisDrawing.Dictionaries.Add(TAG_DICTIONARY_NAME)
        Set TrackingXRecord = TrackingDictionary.AddXRecord(TAG_XRECORD_NAME)
    End If
    
    Resume
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetXRecordData()
    ;; This example creates a new XRecord if one doesn't exist,
    ;; appends data to the XRecord, and then reads it back.  To see data being added,
    ;; run the example more than once.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Unique identifiers to distinguish this XRecordData from other XRecordData
    (setq TYPE_STRING 1
          TAG_DICTIONARY_NAME \"ObjectTrackerDictionary\"
          TAG_XRECORD_NAME \"ObjectTrackerXRecord\")
    ;; Connect to the dictionary in which to store the XRecord
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq TrackingDictionary (vl-catch-all-apply 'vla-Item (list dictionaries TAG_DICTIONARY_NAME)))
    ;; (= (vl-catch-all-error-message TrackingDictionary) \"Automation Error. Key not found\")
  
    (if (= (type TrackingDictionary) 'VLA-OBJECT)
        (setq TrackingXRecord (vla-GetObject TrackingDictionary TAG_XRECORD_NAME))
        (progn
            ;; Create the objects that hold this XRecordData
            (setq TrackingDictionary (vla-Add dictionaries TAG_DICTIONARY_NAME))
            (setq TrackingXRecord  (vla-AddXRecord TrackingDictionary TAG_XRECORD_NAME))
	       )
    )
    ;; Get current XRecordData
    (vla-GetXRecordData TrackingXRecord 'temp-XRecordDataType 'temp-XRecordData)
    
    ;; If there is no array yet then create one
    (setq ArraySize 0)
    (if (/= temp-XRecordDataType nil)
        (progn
	           (setq ArraySize (vlax-safearray-get-u-bound temp-XRecordDataType 1))
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger (cons 0 (1+ ArraySize))))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant (cons 0 (1+ ArraySize))))
            (setq iCount 0)
            (while (>= ArraySize iCount)
                ;; Get information for this element
                (setq DataType (vlax-safearray-get-element temp-XRecordDataType iCount))
                (setq Data (vlax-variant-value (vlax-safearray-get-element temp-XRecordData iCount)))
                (vlax-safearray-put-element XRecordDataType iCount DataType)
                (vlax-safearray-put-element XRecordData iCount Data)
	      
                (setq iCount (1+ iCount))
            )
	       )
        (progn
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger '(0 . 0)))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant '(0 . 0)))
	       )
    )
    
    ;; Append new XRecord Data
    ;;
    ;; For this sample we only append the current time to the XRecord
    (vlax-safearray-put-element XRecordDataType ArraySize TYPE_STRING)
    (setq cdate (rtos (vlax-variant-value (vla-GetVariable doc \"CDATE\")) 2 6))
    (vlax-safearray-put-element XRecordData ArraySize (strcat (substr cdate 5 2) \"/\"
							                                                       (substr cdate 7 2) \"/\"
							                                                       (substr cdate 1 4) \"-\"
							                                                       (substr cdate 10 2) \":\"
							                                                       (substr cdate 12 2) \":\"
							                                                       (substr cdate 14)))
    (vla-SetXRecordData TrackingXRecord XRecordDataType XRecordData)
    
    ;; Read back all XRecordData entries
    (vla-GetXRecordData TrackingXRecord XRecordDataType XRecordData)
    (setq ArraySize (vlax-safearray-get-u-bound XRecordDataType 1))
    
    ;; Retrieve and display stored XRecordData
    (setq iCount 0
	         msg \"\")
    (while (>= ArraySize iCount)
        ;; Get information for this element
        (setq DataType (vlax-safearray-get-element XRecordDataType iCount))
        (setq Data (vlax-variant-value (vlax-safearray-get-element XRecordData iCount)))
        (if (= DataType TYPE_STRING)
            (setq msg (strcat msg Data \"\n\"))
        )
      
        (setq iCount (1+ iCount))
    )
    
    (alert (strcat \"The data in the XRecord is: \n\n\" msg))
)
")
("GetXdata" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-330FCA31-A2A9-47F0-972D-6915B6B98426"
            "
GetXData Method (ActiveX)
Gets the extended data (XData) associated with an object.
Supported platforms: Windows only
Signature
VBA:
object.GetXData AppName, XDataType, XDataValue
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, Dimension, DimStyle, Group, Layer, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, RegisteredApplication, TableStyle, TextStyle, UCS, View, Viewport, XRecord
    The objects this method applies to.
AppName
    Access: Input-only
    Type: String
    A NULL string will return all the data attached to the object, regardless of the application that created it. Supplying an application name will return only the data that was created by the specified application.
XDataType
    Access: Output-only
    Type: Variant (array of shorts)
    An array of short integer values that represent the DXF group code values for each value in the extended data (XData).
XDataValue
    Access: Output-only
    Type: Variant (array of variants)
    An array of values that make up the extended data (XData).
Return Value (RetVal)
No return value.
Remarks
Extended data is an example of instance-specific data created by applications written with ObjectARX or AutoLISP. This data can be added to any object. This data follows the object's definition data, and is maintained in the order that it was saved into the document. (AutoCAD maintains this information, but does not use it.)
Examples
VBA:
Sub Example_GetXData()
    ' This example creates a line and attaches extended data to that line.
    
    ' Create the line
    Dim lineObj As AcadLine
    Dim startPt(0 To 2) As Double, endPt(0 To 2) As Double
    startPt(0) = 1#: startPt(1) = 1#: startPt(2) = 0#
    endPt(0) = 5#: endPt(1) = 5#: endPt(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPt, endPt)
    ZoomAll
    ' Initialize all the xdata values. Note that first data in the list should be
    ' application name and first datatype code should be 1001
    Dim DataType(0 To 9) As Integer
    Dim Data(0 To 9) As Variant
    Dim reals3(0 To 2) As Double
    Dim worldPos(0 To 2) As Double
    
    DataType(0) = 1001: Data(0) = \"Test_Application\"
    DataType(1) = 1000: Data(1) = \"This is a test for xdata\"
    DataType(2) = 1003: Data(2) = \"0\"                   ' layer
    DataType(3) = 1040: Data(3) = 1.23479137438413E+40  ' real
    DataType(4) = 1041: Data(4) = 1237324938            ' distance
    DataType(5) = 1070: Data(5) = 32767                 ' 16 bit Integer
    DataType(6) = 1071: Data(6) = 32767                 ' 32 bit Integer
    DataType(7) = 1042: Data(7) = 10                    ' scaleFactor
    reals3(0) = -2.95: reals3(1) = 100: reals3(2) = -20
    DataType(8) = 1010: Data(8) = reals3                ' real
    
    worldPos(0) = 4: worldPos(1) = 400.99999999: worldPos(2) = 2.798989
    DataType(9) = 1011: Data(9) = worldPos              ' world space position
    
    ' Attach the xdata to the line
    lineObj.SetXData DataType, Data
    
    ' Return the xdata for the line
    Dim xdataOut As Variant
    Dim xtypeOut As Variant
    lineObj.GetXData \"\", xtypeOut, xdataOut
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GetXData()
    ;; This example creates a line and attaches extended data to that line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the line
    (setq startPt (vlax-3d-point 1 1 0)
          endPt (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPt endPt))
    (vla-ZoomAll acadObj)
    ;; Initialize all the xdata values. Note that first data in the list should be
    ;; application name and first datatype code should be 1001
    (setq DataType (vlax-make-safearray vlax-vbInteger '(0 . 9)))
    (setq Data (vlax-make-safearray vlax-vbVariant '(0 . 9)))
    (vlax-safearray-put-element DataType 0 1001)
    (vlax-safearray-put-element Data 0 \"Test_Application\")
    (vlax-safearray-put-element DataType 1 1000)
    (vlax-safearray-put-element Data 1 \"This is a test for xdata\")
    ;; layer
    (vlax-safearray-put-element DataType 2 1003)
    (vlax-safearray-put-element Data 2 \"0\")
    ;; real
    (vlax-safearray-put-element DataType 3 1040)
    (vlax-safearray-put-element Data 3 1.23479137438413E+40)
    ;; distance
    (vlax-safearray-put-element DataType 4 1041)
    (vlax-safearray-put-element Data 4 1237324938)
  
    ;; 16 bit Integer
    (vlax-safearray-put-element DataType 5 1070)
    (vlax-safearray-put-element Data 5 32767)
    ;; 32 bit Integer
    (vlax-safearray-put-element DataType 6 1071)
    (vlax-safearray-put-element Data 6 32767)
    ;; scaleFactor
    (vlax-safearray-put-element DataType 7 1042)
    (vlax-safearray-put-element Data 7 10)
    ;; 3D point
    (setq reals3 (vlax-3d-point -2.95 100 -20))
    (vlax-safearray-put-element DataType 8 1010)
    (vlax-safearray-put-element Data 8 reals3)
    
    ;; world space position
    (setq worldPos (vlax-3d-point 4 400.99999999 2.798989))
    (vlax-safearray-put-element DataType 9 1011)
    (vlax-safearray-put-element Data 9 worldPos)
    
    ;; Attach the xdata to the line
    (vla-SetXData lineObj DataType Data)
    
    ;; Return the xdata for the line
    (vla-GetXData lineObj \"\" 'xtypeOut 'xdataOut)
)
")
("HandleToObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E03AFFD7-B473-45F9-9FF1-CE4D09C94CF3"
                  "
HandleToObject Method (ActiveX)
Gets the object that corresponds to the given handle.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.HandleToObject(Handle)
object
    Type: Document
    The object this method applies to.
Handle
    Access: Input-only
    Type: String
    The handle of the object to return.
Return Value (RetVal)
Type: Object
The object that corresponds to the given handle.
Remarks
This method can return only objects in the current document.
Examples
VBA:
Sub Example_HandleToObject()
    ' This example creates a spline in model space, and returns the
    ' handle for the spline. Then the spline is returned from the handle and colored.
    
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ZoomAll
    
    ' Find the handle of the spline
    Dim handle As String
    handle = splineObj.handle
    MsgBox \"The handle of the Spline is: \" & splineObj.handle, , \"HandleToObject Example\"
        
    ' Find an object from a given handle
    Dim tempObj As AcadObject
    Set tempObj = ThisDrawing.HandleToObject(handle)
    ' Now use the newly initialized object variable to color the object 
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call color.SetRGB(80, 100, 244)
    
    tempObj.TrueColor = color
    
    ThisDrawing.Regen True
    MsgBox \"The Spline is now blue.\", , \"ObjectIDToObject Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HandleToObject()
    ;; This example creates a spline in model space, and returns the
    ;; handle for the spline. Then the spline is returned from the handle and colored.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
				                                 10 0 0
				                                )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Find the handle of the spline
    (setq handle (vla-get-Handle splineObj))
    (alert (strcat \"The handle of the Spline is: \" handle))
        
    ;; Find an object from a given handle
    (setq tempObj (vla-HandleToObject doc handle))
    ;; Now use the newly initialized object variable to color the object
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    (vla-put-TrueColor tempObj color)
    
    (vla-Regen doc :vlax-true)
    (alert \"The Spline is now blue.\")
    (vlax-release-object color)
)
")
("Highlight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0A923D53-9C04-48F1-AF3A-BAD27CECCABC"
             "
Highlight Method (ActiveX)
Sets the highlight status for the given object, or for all objects in a given selection set.
Supported platforms: Windows only
Signature
VBA:
object.Highlight HighlightFlag
object
    Type: All drawing objects, AttributeReference, Dimension, Group, SelectionSet
    The objects this method applies to.
HighlightFlag
    Access: Input-only
    Type: Boolean
        True: The object is highlighted.
        False: The existing highlight is removed from the object.
Return Value (RetVal)
No return value.
Remarks
Once the highlight flag for an object has been set, a call to the Update or Regen method is required to view the change.
Note: This function does not return the current highlight status of an object.
Examples
VBA:
Sub Example_Highlight()
    ' This example creates several objects in model space.
    ' It then iterates through model space, highlights each
    ' object, and displays its Entity Name.
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection and
    ' highlight each object.
    
    Dim entName As String
    Dim entry As AcadEntity
    For Each entry In ThisDrawing.ModelSpace
        entName = entry.ObjectName
        entry.Highlight (True)
        MsgBox \"The name of this object is \" & entName, vbInformation, \"Highlight Example\"
        entry.Highlight (False)
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Highlight()
    ;; This example creates several objects in model space.
    ;; It then iterates through the objects in model space and displays the
    ;; Handle for each object found.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
				                              3 5
				                             )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection and display
    ;; the object name of each object found.
    (vlax-for entry (vla-get-ModelSpace doc)
        (setq entName (vla-get-ObjectName entry))
        (vla-Highlight entry :vlax-true)
        (alert (strcat \"The name of this object is \" entName))
        (vla-Highlight entry :vlax-false)
    )
)
")
("HitTest" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8812BEE2-BD9F-488D-BAA1-A38060FA4D86"
           "
HitTest Method (ActiveX)
Performs a hit test on the section plane or table cell at the specified location.
Supported platforms: Windows only
Signature - Section
VBA:
object.HitTest varPtHit, pHit, pSegmentIndex, pPtOnSegment, pSubItem
Object
object
    Type: Section
    The object this method applies to.
varPtHit
    Access: Input-only
    Type: Variant
    Point at which to perform the hit test.
pHit
    Access: Output-only
    Type: Boolean
    True if the given point lies on the section plane.
pSegmentIndex
    Access: Output-only
    Type: Integer
    Index of segment on the section line that passes near or through the hit point.
pPtOnSegment
    Access: Output-only
    Type: Variant
    The actual point on the section plane geometry. This parameter may return nothing if this data is not required.
pSubItem
    Access: Output-only
    Type: AcSectionSubItem enum
    One or more of the values. This parameter may return nothing if this data is not required.
        acSectionSubItemBackLine
        acSectionSubItemBackLineBottom
        acSectionSubItemBackLineTop
        acSectionSubItemkNone
        acSectionSubItemSectionLine
        acSectionSubItemSectionLineBottom
        acSectionSubItemSectionLineTop
        acSectionSubItemVerticalLineBottom
        acSectionSubItemVerticalLineTop
Signature - Table
VBA:
RetVal = object.HitTest(wpt, wviewVec, resultRowIndex, resultColumnIndex)
object
    Type: Table
    The object this method applies to.
wpt
    Access: Input-only
    Type: Variant
    3D point in WCS specifying the input pick point.
wviewVec
    Access: Input-only
    Type: Variant
    3D vector in WCS specifying the view direction for the hit test.
resultRowIndex
    Access: Output-only
    Type: Long
    Row index of the selected cell.
resultColumnIndex
    Access: Output-only
    Type: Long
    Column index of the selected cell.
Return Value (RetVal) - Section
No return value.
Return Value (RetVal) - Table
Type: Boolean
True if the hit test is in a table cell.
Remarks
Table: This function performs a hit test by specifying a point and viewing direction. The cell hit by the ray is returned.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Import" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5B441D77-BE99-454A-AAE3-9E19731B07D5"
          "
Import Method (ActiveX)
Imports a drawing or a group of saved layer settings from a file.
Supported platforms: Windows only
Signature - Document
VBA:
RetVal = object.Import(FileName, InsertionPoint, ScaleFactor)
object
    Type: Document
    The object this method applies to.
FileName
    Access: Input-only
    Type: String
    The name of the file to be imported.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates location in the current drawing where the imported file is placed.
ScaleFactor
    Access: Input-only
    Type: Double
    The scale used to place the imported file.
Signature - LayerStateManager
VBA:
object.Import FileName
object
    Type: LayerStateManager
    The object this method applies to.
FileName
    Access: Input-only
    Type: String
    The name of the file you are importing layer settings from.
Return Value (RetVal) - Document
Type: Object
In the case of importing a WMF file, a BlockReference object is returned. In all other cases, the return value is NULL.
Return Value (RetVal) - LayerStateManager
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Import()
    ' This example will create a new drawing. Be sure to save
    ' your work and start a new drawing before running this example.
    ' This example creates a circle. It then exports the drawing
    ' to a file called DXFExport.DXF. It then opens a new drawing
    ' and imports the file.
    
    ' Create the circle for visual representation
    Dim circleObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 2: centerPt(1) = 2: centerPt(2) = 0
    radius = 1
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ZoomAll
    
    ' Create an empty selection set
    Dim sset As AcadSelectionSet
    Set sset = ThisDrawing.SelectionSets.Add(\"TEST\")
    
    ' Export the current drawing to the file specified above.
    Dim exportFile As String
    exportFile = \"C:\AutoCAD\DXFExport\"    ' Adjust path for your system
    ThisDrawing.Export exportFile, \"DXF\", sset
    
    ' Open a new drawing
    Dim Acad As AcadApplication
    Dim newdoc As AcadDocument
    Set Acad = ThisDrawing.Application
    Set newdoc = Acad.Documents.Add(\"acad.dwt\")
    
    ' Define the import
    Dim importFile As String
    Dim InsertPoint(0 To 2) As Double
    Dim scalefactor As Double
    importFile = \"C:\AutoCAD\DXFExport.dxf\"  ' Adjust path for your system
    InsertPoint(0) = 0#: InsertPoint(1) = 0#: InsertPoint(2) = 0#
    scalefactor = 2#
    
    ' Import the file
    ThisDrawing.Import importFile, InsertPoint, scalefactor
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Import()
    ;; This example will create a new drawing. Be sure to save
    ;; your work and start a new drawing before running this example.
    ;; This example creates a circle. It then exports the drawing
    ;; to a file called DXFExport.DXF. It then opens a new drawing
    ;; and imports the file.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the circle for visual representation
    (setq centerPt (vlax-3d-point 2 2 0))  
    (setq radius 1)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPt radius))
    (vla-ZoomAll acadObj)
    
    ;; Create an empty selection set
    (setq sset (vla-Add (vla-get-SelectionSets doc) \"TEST\"))
    
    ;; Export the current drawing to the file specified above.
    (setq exportFile \"C:\\AutoCAD\\DXFExport\")    ;; Adjust path for your system
    (vla-Export doc exportFile \"DXF\" sset)
    
    ;; Define the import
    (setq insertPoint (vlax-3d-point 0 0 0))  
    (setq importFile \"C:\\AutoCAD\\DXFExport.dxf\"  ;; Adjust path for your system
          scalefactor 2)
    
    ;; Import the file
    (vla-Import doc importFile insertPoint scalefactor)
    (vla-ZoomAll acadObj)
    (vla-Delete sset)
)
")
("InitializeUserInput" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B03BCD05-F925-4FD2-B131-BD7DCF3FA06C"
                       "
InitializeUserInput Method (ActiveX)
Initializes the GetKeyword method.
Supported platforms: Windows only
Signature
VBA:
object.InitializeUserInput Bits [, Keyword]
object
    Type: Utility
    The object this method applies to.
Bits
    Access: Input-only
    Type: Integer
    To set more than one condition at a time, add the values together in any combination. If this value is not included or is set to 0, none of the control conditions apply.
        1: Disallows NULL input. This prevents the user from responding to the request by entering only [Return] or a space.
        2: Disallows input of zero (0). This prevents the user from responding to the request by entering 0.
        4: Disallows negative values. This prevents the user from responding to the request by entering a negative value.
        8: Does not check drawing limits, even if the LIMCHECK system variable is on. This enables the user to enter a point outside the current drawing limits. This condition applies to the next user-input function even if the AutoCAD LIMCHECK system variable is currently set.
        16: Not currently used.
        32: Uses dashed lines when drawing rubber-band lines or boxes. This causes the rubber-band line or box that AutoCAD displays to be dashed instead of solid, for those methods that let the user specify a point by selecting a location on the graphics screen. (Some display drivers use a distinctive color instead of dashed lines.) If the AutoCAD POPUPS system variable is 0, AutoCAD ignores this bit.
        64: Ignores Z coordinate of 3D points (GetDistance method only). This option ignores the Z coordinate of 3D points returned by the GetDistance method, so an application can ensure this function returns a 2D distance.
        128: Allows arbitrary input—whatever the user types.
Keyword
    Access: Input-only; optional
    Type: Variant (array of strings)
    The keywords that the following user-input method will recognize.
Return Value (RetVal)
No return value.
Remarks
Keywords must be defined with this method before the call to GetKeyword. Certain user-input methods can accept keyword values in addition to the values they normally return, provided that this method has been called to define the keyword. The user-input methods that can accept keywords are: GetKeyword, GetInteger, GetReal, GetDistance, GetAngle, GetOrientation, GetPoint, and GetCorner.
Examples
VBA:
Sub Example_InitializeUserInput()
    ' This example prompts for user input of a point. By using the
    ' InitializeUserInput method to define a keyword list, the example can also
    ' return keywords entered by the user.
    
    AppActivate ThisDrawing.Application.Caption
    
    On Error Resume Next
    
    ' Define the valid keywords
    Dim keywordList As String
    keywordList = \"Line Circle\"
    
    ' Call InitializeUserInput to set up the keywords
    ThisDrawing.Utility.InitializeUserInput 128, keywordList
    
    ' Get the user input
    Dim returnPnt As Variant
    returnPnt = ThisDrawing.Utility.GetPoint(, vbLf & \"Enter a point [Line/Circle]: \")
    If Err Then
         If StrComp(Err.Description, \"User input is a keyword\", 1) = 0 Then
         ' One of the keywords was entered
             Dim inputString As String
             Err.Clear
             inputString = ThisDrawing.Utility.GetInput
             MsgBox \"You entered the keyword: \" & inputString
         Else
             MsgBox \"Error selecting the point: \" & Err.Description
             Err.Clear
         End If
    Else
        ' Display point coordinates
        MsgBox \"The WCS of the point is: \" & returnPnt(0) & \", \" & returnPnt(1) & \", \" & returnPnt(2), , \"GetInput Example\"
    End If
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_InitializeUserInput()
    ;; This example prompts for user input of a point. By using the
    ;; InitializeUserInput method to define a keyword list, it can also
    ;; return keywords entered by the user.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the valid keywords
    (setq keywordList \"Line Circle\")
    
    ;; Call InitializeUserInput to set up the keywords
    (vla-InitializeUserInput (vla-get-Utility doc) 128 keywordList)
    
    ;; Get the user input
    (setq returnPntOrErr (vl-catch-all-apply 'vla-GetPoint (list (vla-get-Utility doc) nil \"Enter a point [Line/Circle]: \")))
    (if (= (type returnPntOrErr)'VL-CATCH-ALL-APPLY-ERROR)
        (progn
            (if (= (vl-catch-all-error-message returnPntOrErr) \"Automation Error. User input is a keyword\")
	        (progn
                    (setq inputString (vla-GetInput (vla-get-Utility doc)))
                    (alert (strcat \"You entered the keyword: \" inputString))
		)
                (alert \"User pressed ESC or unknown input was provided.\")
	    )
        )
        ;; Display point coordinates
        (progn
	    (setq returnPnt (vlax-safearray->list (vlax-variant-value returnPntOrErr)))
            (alert (strcat \"The WCS of the point is: \" (rtos (nth 0 returnPnt) 2) \", \" (rtos (nth 1 returnPnt) 2) \", \" (rtos (nth 2 returnPnt) 2)))
	)
    )
)
")
("InsertBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-17F86FDD-B7FC-4F43-9F16-B4958F73A66D"
               "
InsertBlock Method (ActiveX)
Inserts a drawing file or a named block that has been defined in the current drawing.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.InsertBlock(InsertionPoint, Name [, Xscale [, Yscale [, ZScale [, Rotation [, Password]]]]])
object
    Type: Block, ModelSpace, PaperSpace
    The objects this method applies to.
InsertionPoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the location in the drawing to insert the block.
Name
    Access: Input-only
    Type: String
    The name of the AutoCAD drawing file or the name of the block to insert. If it is a file name, include the .dwg extension and any path information necessary for AutoCAD to find the file.
Xscale
    Access: Input-only; optional
    Type: Double
    The default equals 1.0. Must be a positive number.
Yscale
    Access: Input-only; optional
    Type: Double
    The default equals 1.0. Must be a positive number.
Zscale
    Access: Input-only; optional
    Type: Double
    The default equals 1.0. Must be a positive number.
Rotation
    Access: Input-only; optional
    Type: Double
    The default equals 0.0 radians.
Password
    Access: Input-only; optional
    Type: Variant
    The password that was applied to the drawing file when it was saved.
Return Value (RetVal)
Type: BlockReference
The placed block as a Block Reference object.
Remarks
Inserting a block into another block will create nested blocks.
Attempting to call the InsertBlock method with an uninitialized Name parameter results in unexpected behavior.
Examples
VBA:
Sub Example_InsertBlock()
    ' This example creates a block containing a circle.
    ' It then inserts the block.
    ' Create the block
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"CircleBlock\")
    
    ' Add a circle to the block
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 0: center(1) = 0: center(2) = 0
    radius = 1
    Set circleObj = blockObj.AddCircle(center, radius)
   
    ' Insert the block
    Dim blockRefObj As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"CircleBlock\", 1#, 1#, 1#, 0)
    
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_InsertBlock()
    ;; This example creates a block containing a circle.
    ;; It then inserts the block.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the block
    (setq insertionPnt (vlax-3d-point 0 0 0))
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"CircleBlock\"))
    
    ;; Add a circle to the block
    (setq center (vlax-3d-point 0 0 0)
          radius 1)
    (setq circleObj (vla-AddCircle blockObj center radius))
   
    ;; Insert the block
    (setq insertionPnt (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj (vla-InsertBlock modelSpace insertionPnt \"CircleBlock\" 1 1 1 0))
    
    (vla-ZoomAll acadObj)
)
")
("InsertColumns" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8AEDD5DB-4446-4FA3-81FA-656B6B7004AD"
                 "
InsertColumns Method (ActiveX)
Inserts columns in a table.
Supported platforms: Windows only
Signature
VBA:
object.InsertColumns col, Width, cols
object
    Type: Table
    The object this method applies to.
col
    Access: Input-only
    Type: Long
    The zero-based column index.
Width
    Access: Input-only
    Type: Double
    The width of the column.
cols
    Access: Input-only
    Type: Long
    The number of columns to insert.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("InsertColumnsAndInherit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9856FC46-050D-4A52-8C49-1B42CB228C21"
                           "
InsertColumnsAndInherit Method (ActiveX)
Insert columns into a table from another table.
Supported platforms: Windows only
Signature
VBA:
object.InsertColumnsAndInherit col, nInheritFrom, nNumCols
object
    Type: Table
    The object this method applies to.
col
    Access: Input-only
    Type: Long
    The col index to insert to.
nInheritFrom
    Access: Input-only
    Type: Long
    The table index to grab from.
nNumCols
    Access: Input-only
    Type: Long
    The number of columns to grab.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("InsertLoopAt" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E35E3387-14E8-433D-B6A6-82E034A11BEE"
                "
InsertLoopAt Method (ActiveX)
Inserts a loop at a given index of a hatch.
Supported platforms: Windows only
Signature
VBA:
object.InsertLoopAt Index, LoopType, Loop
object
    Type: Hatch
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index location in the array of vertices that make up the hatch boundary. The index must be a positive integer beginning with 0.
LoopType
    Access: Input-only
    Type: AcLoopType enum
        acHatchLoopTypeDefault
        acHatchLoopTypeExternal
        acHatchLoopTypePolyline
        acHatchLoopTypeDerived
        acHatchLoopTypeTextbox
Loop
    Access: Input-only
    Type: Variant (object or array of objects)
    An object or array of objects forming a closed boundary. If an array of objects is used, their endpoints must coincide for the loop to be created properly. The loop, or the array defining the loop, can consist of the following types of objects: Arc, Circle, Ellipse, Line, Polyline, Region, Spline
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_InsertLoopAt()
    ' This example creates an associative hatch in model space.
    ' A Loop is then inserted into the hatch.
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    MsgBox \"Insert another loop.\", , \"InsertLoopAt Example\"
    
    ' Insert the second circle as the other inner loop
    Dim LoopObj(0) As AcadEntity
    radius = 0.5
    Set LoopObj(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.InsertLoopAt hatchObj.NumberOfLoops, acHatchLoopTypeDefault, LoopObj
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    MsgBox \"Loop inserted.\", , \"InsertLoopAt Example\"
                       
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_InsertLoopAt()
    ;; This example creates an associative hatch in model space.
    ;; A Loop is then inserted into the hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    (alert \"Insert another loop.\")
    
    ;; Insert the second circle as the other inner loop
    (setq radius 0.5)
    (setq LoopObj (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element LoopObj 0 circle2)
  
    (vla-InsertLoopAt hatchObj (vla-get-NumberOfLoops hatchObj) acHatchLoopTypeDefault LoopObj)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    (alert \"Loop inserted.\")
)
")
("InsertRows" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-423356D9-CAAA-45BA-B8B9-AD475594317C"
              "
InsertRows Method (ActiveX)
Inserts rows in a table.
Supported platforms: Windows only
Signature
VBA:
object.InsertRows row, Height, Rows
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index.
Height
    Access: Input-only
    Type: Double
    The height of the rows.
Rows
    Access: Input-only
    Type: Long
    The number of rows to insert.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("InsertRowsAndInherit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CF92D20D-CED0-4F24-B33A-046B20AB7FE5"
                        "
InsertRowsAndInherit Method (ActiveX)
Insert rows into a table from another table.
Supported platforms: Windows only
Signature
VBA:
object.InsertRowsAndInherit nIndex, nInheritFrom, nNumRows
object
    Type: Table
    The object this method applies to.
nIndex
    Access: Input-only
    Type: Long
    The row index to insert to.
nInheritFrom
    Access: Input-only
    Type: Long
    The table index to grab from.
nNumRows
    Access: Input-only
    Type: Long
    The number of rows to grab.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IntersectWith" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1243A593-5DAE-4DC3-B539-59FDA990E687"
                 "
IntersectWith Method (ActiveX)
Gets the points where one object intersects another object in the drawing.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IntersectWith(IntersectObject, ExtendOption)
object
    Type: All drawing objects (except PViewport and PolygonMesh), AttributeReference
    The objects this method applies to.
IntersectObject
    Access: Input-only
    Type: Object
    The object can be one of the supported drawing objects or an AttributeReference.
ExtendOption
    Access: Input-only
    Type: AcExtendOption enum
    This option specifies if none, one or both, of the objects are to be extended in order to attempt an intersection.
        acExtendNone: Does not extend either object.
        acExtendThisEntity: Extends the base object.
        acExtendOtherEntity: Extends the object passed as an argument.
        acExtendBoth: Extends both objects.
Return Value (RetVal)
Type: Variant (array of doubles)
The array of points where one object intersects another object in the drawing.
Remarks
If the two objects do not intersect, no data is returned. You can request the point of intersection that would occur if one or both of the objects were extended to meet the other. For example, in the following illustration, Line1 is the base object from which this method was called and line3 is the object passed as a parameter. If the ExtendOption passed is acExtendThisEntity, point A is returned as the point where line1 would intersect line3 if line1 were extended. If the ExtendOption is acExtendOtherEntity, no data is returned because even if line3 were extended, it would not intersect line1.
If the intersection type is acExtendBothEntities and line2 is passed as the parameter entity, point B is returned. If the ExtendOption is acExtendNone and line2 is the parameter entity, no data is returned.
Examples
VBA:
Sub Example_IntersectWith()
    ' This example creates a line and circle and finds the points at
    ' which they intersect.
    
    ' Create the line
    Dim lineObj As AcadLine
    Dim startPt(0 To 2) As Double
    Dim endPt(0 To 2) As Double
    startPt(0) = 1: startPt(1) = 1: startPt(2) = 0
    endPt(0) = 5: endPt(1) = 5: endPt(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPt, endPt)
        
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 3: centerPt(1) = 3: centerPt(2) = 0
    radius = 1
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ZoomAll
      
    ' Find the intersection points between the line and the circle
    Dim intPoints As Variant
    intPoints = lineObj.IntersectWith(circleObj, acExtendNone)
    
    ' Print all the intersection points
    Dim I As Integer, j As Integer, k As Integer
    Dim str As String
    If VarType(intPoints) <> vbEmpty Then
        For I = LBound(intPoints) To UBound(intPoints)
            str = \"Intersection Point[\" & k & \"] is: \" & intPoints(j) & \",\" & intPoints(j + 1) & \",\" & intPoints(j + 2)
            MsgBox str, , \"IntersectWith Example\"
            str = \"\"
            I = I + 2
            j = j + 3
            k = k + 1
        Next
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IntersectWith()
    ;; This example creates a line and circle and finds the points at
    ;; which they intersect.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the line
    (setq startPt (vlax-3d-point 1 1 0)
          endPt (vlax-3d-point 5 5 0))  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq lineObj (vla-AddLine modelSpace startPt endPt))
        
    ;; Create the circle
    (setq centerPt (vlax-3d-point 1 1 0)
          radius 1)
    (setq circleObj (vla-AddCircle modelSpace centerPt radius))
    (vla-ZoomAll acadObj)
      
    ;; Find the intersection points between the line and the circle
    (setq intPoints (vla-IntersectWith lineObj circleObj acExtendNone))
    
    ;; Print all the intersection points
    (setq I 0
          j 0
          k 0)
    (if (/= (type intPoints) vlax-vbEmpty)
        (while (>= (vlax-safearray-get-u-bound (vlax-variant-value intPoints) 1) I)
            (setq tempPoint (vlax-safearray->list (vlax-variant-value intPoints)))
            (setq str (strcat \"Intersection Point[\" (itoa k) \"] is: \" (rtos (nth j tempPoint) 2) \",\"
                                                                      (rtos (nth (1+ j) tempPoint) 2) \",\"
                                                                      (rtos (nth (+ j 2) tempPoint) 2)))
            (alert str)
            (setq str \"\"
                  I (+ I 2)
                  j (+ j 3)
                  k (1+ k))
        )
    )
)
")
("IsContentEditable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8A3938A3-A7CD-44A5-9A08-A047814F11CC"
                     "
IsContentEditable Method (ActiveX)
Check if a cell has editable content.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsContentEditable(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
Return Value (RetVal)
Type: Boolean
    True: Content is editable.
    False: Content is not editable.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsEmpty" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0D2C5D0A-D4B1-486D-8668-6E935E4DFE26"
           "
IsEmpty Method (ActiveX)
Determines if a cell is empty based on its row and column position.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsEmpty(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to check.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to check.
Return Value (RetVal)
Type: Boolean
    True: Table cell is empty.
    False: Table cell is not empty.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsFormatEditable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E7FD60B2-0466-46C4-91D5-97BADE16C3CF"
                    "
IsFormatEditable Method (ActiveX)
Check if a cell has editable format.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsFormatEditable(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
Return Value (RetVal)
Type: Boolean
    True: Format of the table cell can be modified.
    False: Format of the table cell cannot be modified.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsMergeAllEnabled" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-766EFEC2-4551-40BA-A16E-50DC6C6DE298"
                     "
IsMergeAllEnabled Method (ActiveX)
Checks if cell merging is on.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsMergeAllEnabled(nRow, nCol)
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
Return Value (RetVal)
Type: Boolean
    True: Cells can be merged.
    False: Cell cannot be merged.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsMergedCell" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B6B07A3B-B173-412B-9272-0D93999EEE3B"
                "
IsMergedCell Method (ActiveX)
Returns the merge status of a cell.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsMergedCell(row, col, minRow, maxRow, minCol, maxCol)
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number.
col
    Access: Input-only
    Type: Long
    The column number.
minRow
    Access: Input-only
    Type: Long
    Zero-based lower bound of a row index.
maxRow
    Access: Input-only
    Type: Long
    Zero-based upper bound of a row index.
minCol
    Access: Input-only
    Type: Long
    Zero-based lower bound of a column index.
maxCol
    Access: Input-only
    Type: Long
    Zero-based upper bound of a column index.
Return Value (RetVal)
Type: Boolean
    True: Cell is merged with one or more cells.
    False: Cell is not merged with one or more cells.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsRemoteFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-01CBB935-A8B2-40B0-B3EA-A1B1AC4B120B"
                "
IsRemoteFile Method (ActiveX)
Returns the URL from which a remote file was downloaded.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsRemoteFile(LocalFile, URL)
object
    Type: Utility
    The object this method applies to.
LocalFile
    Access: Input-only
    Type: String
    The downloaded file.
URL
    Access: Output-only
    Type: String
    The URL from which the file was downloaded, if any.
Return Value (RetVal)
Type: Boolean
    True: The file was downloaded from a remote location.
    False: The file was not downloaded from a remote location.
Remarks
This method is the inverse of the IsURL method and provides a mapping from a local file to the corresponding URL from which the file was downloaded.
Examples
VBA:
Sub Example_IsRemoteFile()
    ' This example will prompt the user for a URL to download and will verify that
    ' a proper URL was entered.  After downloading, the example will attempt to load
    ' the downloaded URL as a drawing.
    '
    ' * Note: Remember to delete the downloaded file from your disk drive when finished.
    
    Dim Utility As AcadUtility
    Dim URL As String, DestFile As String, FileURL As String
    
    Set Utility = ThisDrawing.Utility   ' Connect to Utility object
    
GETURL:
    ' Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    URL = Utility.GetString(False, vbLf & \"Enter the complete URL of the file you wish to download: \")
    
    URL = Trim(URL)                     ' Get rid of blank spaces
    
    If URL = \"\" Then Exit Sub           ' Did user cancel
    ' Determine if user entered a valid URL; if not, prompt again
    If Not (Utility.IsURL(URL)) Then
        MsgBox \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\"
        GoTo GETURL
    End If
        
    ' Download URL
    Utility.GetRemoteFile URL, DestFile, True
    
    ' Display downloaded file information
    MsgBox URL & \" was downloaded to: \" & DestFile
   
    ' Use IsRemoteFile to determine if this file was downloaded from a URL.
    ' If it was, display the URL it was downloaded from
    '
    ' * Note: Although the results that IsRemoteFile will return are already known
    ' since the file was just downloaded it is important to know how this
    ' method can be used.
    If Utility.IsRemoteFile(DestFile, FileURL) Then
        MsgBox \"The file: \" & DestFile & \" is a downloaded file and was downloaded from: \" & FileURL
    Else
        MsgBox \"The file: \" & DestFile & \" is not a downloaded file.\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsRemoteFile()
    ;; This example will prompt the user for a URL to download and will verify that
    ;; a proper URL was entered.  After downloading, the example will provide information
    ;; about the downloaded drawing.
    ;;
    ;; * Note: Remember to delete the downloaded file from your disk drive when finished.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq Utility (vla-get-Utility doc))   ;; Connect to Utility object
    
    ;; Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    (setq URL (vla-GetString Utility :vlax-false \"Enter the complete URL of the file you wish to download: \"))
  
    (if (/= URL \"\")
        (progn
	           (if (= (vla-IsURL Utility URL) :vlax-false)
	               (alert \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\")
	               (progn
	                   ;; Download URL
	                   (vla-GetRemoteFile Utility URL 'DestFile :vlax-true)
		    
	                   ;; Display downloaded file information
	                   (alert (strcat URL \" was downloaded to: \" DestFile \"\n\"))
	                   ;; Use IsRemoteFile to determine if this file was downloaded from a URL.
	                   ;; If it was, display the URL it was downloaded from
	                   ;;
	                   ;; * Note: Although the results that IsRemoteFile will return are already known
	                   ;; since the file was just downloaded it is important to know how this
	                   ;; method can be used.
	                   (if (= (vla-IsRemoteFile Utility DestFile URL) :vlax-true)
	                       (alert (strcat \"The file: \" DestFile \" is a downloaded file and was downloaded from: \" URL))
	                       (alert (strcat \"The file: \" DestFile \" is not a downloaded file.\"))
	                   )
	               )
	           )
	       )
    )
)
")
("IsURL" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-64056A56-779C-49BB-9352-77602E5FBCBD"
         "
IsURL Method (ActiveX)
Validates a given URL.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.IsURL(URL)
object
    Type: Utility
    The object this method applies to.
LocalFile
    Access: Input-only
    Type: String
    The URL to validate.
Return Value (RetVal)
Type: Boolean
    True: The string represents a valid URL.
    False: The string is not a valid URL.
Remarks
The definition of a \"valid\" URL is application-dependent, in that a given third-party application may not be interested in supporting all Internet protocols. For instance, an application that attempts to connect users to websites would probably not need to provide access to FTP sites. In this hypothetical application, a False value would be returned if the URL that begins with something other than \"http://\", \"https://\", \"ftp://\", or \"file:///\" was entered.
The default functionality of this method for AutoCAD supports FTP, HTTP, HTTPS, and FILE protocols.
Examples
VBA:
Sub Example_IsRemoteFile()
    ' This example will prompt the user for a URL to download and will verify that
    ' a proper URL was entered.  After downloading, the example will attempt to load
    ' the downloaded URL as a drawing.
    '
    ' * Note: Remember to delete the downloaded file from your disk drive when finished.
    
    Dim Utility As AcadUtility
    Dim URL As String, DestFile As String, FileURL As String
    
    Set Utility = ThisDrawing.Utility   ' Connect to Utility object
    
GETURL:
    ' Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    URL = Utility.GetString(False, vbLf & \"Enter the complete URL of the file you wish to download: \")
    
    URL = Trim(URL)                     ' Get rid of blank spaces
    
    If URL = \"\" Then Exit Sub           ' Did user cancel
    ' Determine if user entered a valid URL; if not, prompt again
    If Not (Utility.IsURL(URL)) Then
        MsgBox \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\"
        GoTo GETURL
    End If
        
    ' Download URL
    Utility.GetRemoteFile URL, DestFile, True
    
    ' Display downloaded file information
    MsgBox URL & \" was downloaded to: \" & DestFile
   
    ' Use IsRemoteFile to determine if this file was downloaded from a URL.
    ' If it was, display the URL it was downloaded from
    '
    ' * Note: Although the results that IsRemoteFile will return are already known
    ' since the file was just downloaded it is important to know how this
    ' method can be used.
    If Utility.IsRemoteFile(DestFile, FileURL) Then
        MsgBox \"The file: \" & DestFile & \" is a downloaded file and was downloaded from: \" & FileURL
    Else
        MsgBox \"The file: \" & DestFile & \" is not a downloaded file.\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsRemoteFile()
    ;; This example will prompt the user for a URL to download and will verify that
    ;; a proper URL was entered.  After downloading, the example will provide information
    ;; about the downloaded drawing.
    ;;
    ;; * Note: Remember to delete the downloaded file from your disk drive when finished.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq Utility (vla-get-Utility doc))   ;; Connect to Utility object
    
    ;; Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    (setq URL (vla-GetString Utility :vlax-false \"Enter the complete URL of the file you wish to download: \"))
  
    (if (/= URL \"\")
        (progn
	           (if (= (vla-IsURL Utility URL) :vlax-false)
	               (alert \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\")
	               (progn
	                   ;; Download URL
	                   (vla-GetRemoteFile Utility URL 'DestFile :vlax-true)
		    
	                   ;; Display downloaded file information
	                   (alert (strcat URL \" was downloaded to: \" DestFile \"\n\"))
	                   ;; Use IsRemoteFile to determine if this file was downloaded from a URL.
	                   ;; If it was, display the URL it was downloaded from
	                   ;;
	                   ;; * Note: Although the results that IsRemoteFile will return are already known
	                   ;; since the file was just downloaded it is important to know how this
	                   ;; method can be used.
	                   (if (= (vla-IsRemoteFile Utility DestFile URL) :vlax-true)
	                       (alert (strcat \"The file: \" DestFile \" is a downloaded file and was downloaded from: \" URL))
	                       (alert (strcat \"The file: \" DestFile \" is not a downloaded file.\"))
	                   )
	               )
	           )
	       )
    )
)
")
("Item" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A5B6ACC4-DCD8-4FE2-AB06-D3C3C349475B"
        "
Item Method (ActiveX)
Gets the member object at a given index in a collection, group, or selection set.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Item(Index)
object
    Type: All collections, Group, SelectionSet
    The objects this method applies to.
Index
    Access: Input-only
    Type: Variant
    The index location in the collection for the member item to query.
    The index must be either an integer or a string. If an integer, the index must be between 0 and N-1, where N is the number of objects in the collection or selection set.
Return Value (RetVal)
Type: Object
The object at the given index location in the collection or selection set.
Remarks
This method supports string-based iteration. For example, if a block named BLOCK1 was created with the following statement:
Set block1 = Blocks.Add(\"BLOCK1\")
you could reference the object through the following statement:
Set whichblock = Blocks.Item(\"BLOCK1\")
Note: The Item method is case-sensitive when used with the SelectionSets collection; it is not case-sensitive for other collections.
Dictionaries: The return value type for this method is IAcadObject. This allows you to retrieve named objects from the dictionaries collection that are not of the type Dictionary.
Examples
VBA:
Sub Example_Item()
    ' This example shows two uses of the Item method.
    ' The first uses Item with an index counter to return an item in a collection.
    ' The second uses Item with a string to return an item in a collection.
    
    ' Iterate thru the model space collection,
    ' get all the items in the collection
    ' and store them in an array called newObjs
    Dim count As Integer
    count = ThisDrawing.ModelSpace.count
    
    ReDim newObjs(count) As AcadEntity
    Dim index As Integer
    For index = 0 To count - 1
        Set newObjs(index) = ThisDrawing.ModelSpace.Item(index)
    Next
    
    ' Get a particular item, in this case a layer, based on name \"0\"
    Dim layerObj As AcadLayer
    Set layerObj = ThisDrawing.Layers.Item(\"0\")
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Item()
    ;; This example shows two uses of the Item method.
    ;; The first uses Item with an index counter to return an item in a collection.
    ;; The second uses Item with a string to return an item in a collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Iterate thru the model space collection,
    ;; get all the items in the collection
    ;; and store them in an array called newObjs
    (setq count (vla-get-Count (vla-get-ModelSpace doc))
          index 0)
    
    (setq newObjs (vlax-make-safearray vlax-vbObject (cons 0 count)))
    (while (>= (1- count) index)
        (vlax-safearray-put-element newObjs index (vla-Item (vla-get-ModelSpace doc) index))
        (setq index (1+ index))
    )
    
    ;; Get a particular item, in this case a layer, based on name \"0\"
    (setq layerObj (vla-Item (vla-get-Layers doc) \"0\"))
)
")
("LaunchBrowserDialog" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6591F0AE-50E0-4C73-A569-B7F33470C5E8"
                       "
LaunchBrowserDialog Method (ActiveX)
Launches a dialog box in which a user can enter a URL.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.LaunchBrowserDialog(SelectedURL, DialogTitle, OpenButtonCaption, StartPageURL, RegistryRootKey, OpenButtonAlwaysEnabled)
object
    Type: Utility
    The object this method applies to.
SelectedURL
    Access: Output-only
    Type: String
    The URL selected.
DialogTitle
    Access: Input-only
    Type: String
    The title to be displayed in the dialog box.
OpenButtonCaption
    Access: Input-only
    Type: String
    The caption for the OK/Open button.
StartPageURL
    Access: Input-only
    Type: String
    An initial URL to be displayed.
ReigstryRootKey
    Access: Input-only
    Type: String
    Product root key for storing persistent dialog box information. This key specifies where information about the size, position, and other preferences information of the dialog box can be stored across sessions. Input an empty string to disregard this functionality.
OpenButtonAlwaysEnabled
    Access: Input-only
    Type: Boolean
        True: The Open button is enabled, allowing a file or link to be selected.
        False: The Open button is disabled and is only enabled when the user selects a file for download.
Return Value (RetVal)
Type: Boolean
    True: The dialog box was opened successfully.
    False: The dialog box did not open successfully.
Remarks
The last parameter, OpenButtonAlwaysEnabled, determines whether the user can select HTML links in addition to files that can be downloaded.
Examples
VBA:
Sub Example_LaunchBrowserDialog()
    ' This example will prompt the user for a URL to download and will verify that
    ' a proper URL was entered.  After downloading, the example will attempt to load
    ' the downloaded URL as a drawing.
    '
    ' * Note: Remember to delete the downloaded file from your disk drive when finished.
    
    Dim Utility As AcadUtility
    Dim URL As String, DestFile As String, FileURL As String
    
    Set Utility = ThisDrawing.Utility   ' Connect to Utility object
    
GETURL:
    ' Prompt user for a URL to download.  This should be a URL to an AutoCAD drawing file.
    URL = InputBox(\"Enter the complete URL of the file you wish to download. \" & _
                    \"Enter BROWSER to select the URL from a web browser\", _
                    \"Enter URL To Download\", URL)
    
    URL = Trim(URL)                     ' Get rid of blank spaces
    
    If URL = \"\" Then Exit Sub           ' Did user cancel
    ' Does the user want to select from a browser?
    If StrComp(URL, \"BROWSER\", vbTextCompare) = 0 Then
        Utility.LaunchBrowserDialog _
        URL, \"AutoCAD Browser\", \"Open\", \"https://www.autodesk.com\", \"ACADBROWSER\", True
        
        GoTo GETURL     ' Return to display chosen URL and allow modifications
    End If
    ' Determine if user entered a valid URL; if not, prompt again
    If Not (Utility.IsURL(URL)) Then
        MsgBox \"The URL you entered is not valid.  Make sure the syntax is a valid URL.\"
        GoTo GETURL
    End If
        
    ' Download URL
    Utility.GetRemoteFile URL, DestFile, True
    
    ' Display downloaded file information
    MsgBox URL & \" was downloaded to: \" & DestFile & vbCrLf & vbCrLf & _
           \"Press any key to attempt to load the new file as a drawing.\"
    ' Attempt to load file as drawing; if an error occurs, this was probably not a drawing
    ' file, but rather the text from a web page.
    ' Try loading the downloaded file into a text editor to view the contents.
    On Error Resume Next
    ThisDrawing.Application.Documents.Open DestFile
    If Err.Number <> 0 Then
        MsgBox \"Error loading downloaded file as a drawing: \" & Err.Description & vbCrLf & vbCrLf & _
               \"This is probably not a valid drawing file!\"
    End If
    On Error GoTo 0
    
    ' Use IsRemoteFile to determine if this file was downloaded from a URL.
    ' If it was, display the URL it was downloaded from
    '
    ' * Note: Although the results IsRemoteFile will return are already known because
    ' the file was just downloaded, it is important to know how this
    ' method can be used.
    If Utility.IsRemoteFile(DestFile, FileURL) Then
        MsgBox \"The file: \" & DestFile & \" is a downloaded file and was downloaded from: \" & FileURL
    Else
        MsgBox \"The file: \" & DestFile & \" is not a downloaded file.\"
    End If
End Sub
Visual LISP:
Not available
")
("ListArx" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-26F0E044-CAE1-43F0-87FA-7CBF03024C50"
           "
ListARX Method (ActiveX)
Gets the currently loaded ObjectARX applications.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.ListArx
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
Type: Variant
An array of ObjectARX applications currently loaded. Returns empty if no applications are currently loaded.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ListARX()
    ' This example gets all the loaded ObjectARX applications
    
    ' Get the list of applications
    Dim appList As Variant
    appList = ThisDrawing.Application.ListArx
    
    ' Iterate through the list, and display the names, if any.
    If VarType(appList) <> vbEmpty Then
        Dim I As Integer
        For I = LBound(appList) To UBound(appList)
            MsgBox \"ObjectARX application name: \" & appList(I)
        Next
    Else
        MsgBox \"No ObjectARX applications present.\"
    End If
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ListARX()
    ;; This example gets all the loaded ObjectARX applications
    (setq acadObj (vlax-get-acad-object))
  
    ;; Get the list of applications
    (setq appList (vla-ListArx acadObj))
    
    ;; Iterate through the list, and display the names, if any.
    (if (/= (vlax-variant-value appList) vlax-vbEmpty)
        (progn
            (setq I 0
                  appList (vlax-variant-value appList))
            (while (>= (vlax-safearray-get-u-bound appList 1) I)
                (alert (strcat \"ObjectARX application name: \" (vlax-safearray-get-element appList I)))
                (setq I (1+ I))
            )
        )
        (alert \"No ObjectARX applications present.\")
    )
)
")
("Load" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D33266B-184F-4994-8B91-DF909F24C7F2"
        "
Load Method (ActiveX)
Loads a menu group from a customization (CUIx) file or the definition of a linetype from a library (LIN) file.
Supported platforms: Windows only
Signature - Linetypes
VBA:
object.Load LineTypeName, FileName
object
    Type: Linetypes
    The object this method applies to.
LineTypeName
    Access: Input-only
    Type: String
    The name of the linetype to load.
FileName
    Access: Input-only
    Type: String
    The name of the file the linetype is in.
Signature - MenuGroups
VBA:
RetVal = object.Load(MenuFileName [,BaseMenu])
object
    Type: MenuGroups
    The object this method applies to.
MenuFileName
    Access: Input-only
    Type: String
    The name of the customization (CUIx) file to load.
BaseMenu
    Access: Input-only; optional
    Type: Variant
    If this parameter is set to True, then the menu group will be loaded as a base menu (similar to the AutoCAD MENU command). If this parameter is omitted, the menu group will be loaded as a partial menu (similar to the AutoCAD CUILOAD command).
Return Value (RetVal) - Linetypes
No return value.
Return Value (RetVal) - MenuGroups
Type: MenuGroup
The MenuGroup object that is created as a result of loading the customization (CUIx) file.
Remarks
Linetypes: Although you can create a linetype and add it to the Linetypes collection object using the Add method, it will be created with the default properties only. Because you cannot edit linetype properties with this release of ActiveX Automation, use this method to load existing linetypes into your drawing.
MenuGroups: AutoCAD searches for customization files with the specified MenuFileName and a .cuix extension.
Examples
VBA:
Sub Example_Load()
    ' This example attempts to load the linetype \"CENTER\" from
    ' the acad.lin file. If the linetype already exists, then
    ' a message is displayed.
    
    Dim linetypeName As String
    linetypeName = \"CENTER\"
    
    ' Load \"CENTER\" line type from acad.lin file
    On Error Resume Next    ' trap any load errors
    ThisDrawing.Linetypes.Load linetypeName, \"acad.lin\"
    
    ' If the name already exists, then notify user
    If Err.Description = \"Duplicate record name\" Then
        MsgBox \"A line type named '\" & linetypeName & \"' already exists.\", , \"Load Example\"
    End If
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Load()
    ;; This example attempts to load the linetype \"CENTER\" from
    ;; the acad.lin file. If the linetype already exists, then
    ;; a message is displayed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq linetypeName \"CENTER\")
    
    ;; Load \"CENTER\" line type from acad.lin file
    (setq err (vl-catch-all-apply 'vla-Load (list (vla-get-Linetypes doc) linetypeName \"acad.lin\")))
    
    ;; If the name already exists, then notify user
    (if (vl-catch-all-error-p err)
        (if (= (vl-catch-all-error-message err) \"Automation Error. Duplicate record name\")
            (alert (strcat \"A line type named '\" linetypeName \"' already exists.\"))
        )
    ) 
)
")
("LoadArx" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-50BB2B5A-2DA9-4B7E-A9F0-B2D1FFE6047C"
           "
LoadARX Method (ActiveX)
Loads the specified ObjectARX application.
Supported platforms: Windows only
Signature
VBA:
object.LoadARX Name
object
    Type: Application
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The full path name of the .arx application to load.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LoadARX()
    ' This example loads an ObjectARX application.
    
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX application.
    ThisDrawing.Application.LoadArx \"MyARXApp.arx\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LoadARX()
    ;; This example loads an ObjectARX application.
    (setq acadObj (vlax-get-acad-object))
    
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj \"MyARXApp.arx\")
)
")
("LoadDvb" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4F19B20D-BF8C-4505-A13A-4B6102778E24"
           "
LoadDVB Method (ActiveX)
Loads the specified AutoCAD VBA project file.
Supported platforms: Windows only
Signature
VBA:
object.LoadDVB Name
object
    Type: Application
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The full path name of the .dvb project to load.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LoadDVB()
    ' This example loads a DVB file and runs a macro
    ' contained in the file using the RunMacro method.
    '
    ' This example uses a DVB file named drawline.dvb.
    ' You should change the example to use a file on your computer.
    '
    ' * Note: If you open a DVB file and then run the example to load it, there will be an error
    ' when the DVB file is unloaded.
    Dim FileName As String
    
    FileName = \"c:\drawline.dvb\"
    
    ' Load a sample VBA project DVB file
    LoadDVB FileName
    
    ' Run the drawline sample macro
    RunMacro \"Module1.Drawline\"
    
    ' Unload the drawline VBA project DVB file now.
    UnloadDVB FileName
    
    MsgBox \"The DVB file has been run!\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LoadDVB()
    ;; This example loads a DVB file and runs a macro
    ;; contained in the file using the RunMacro method.
    ;;
    ;; This example uses a DVB file named drawline.dvb.
    ;; You should change the example to use a file on your computer.
    ;;
    ;; * Note: If you open a DVB file and then run the example to load it, there will be an error
    ;; when the DVB file is unloaded.
    (setq FileName (findfile \".\\Sample\\VBA\\drawline.dvb\"))
    
    ;; Load a sample VBA project DVB file
    (vla-LoadDVB acadObj FileName)
    
    ;; Run the drawline sample macro
    (vla-RunMacro acadObj \"Module1.Drawline\")
    
    ;; Unload the drawline VBA project DVB file now.
    (vla-UnloadDVB acadObj FileName)
    
    (alert \"The DVB file has been run!\")
)
")
("LoadShapeFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0F90A5A6-8A73-437A-8C82-E8C12932968D"
                 "
LoadShapeFile Method (ActiveX)
Loads a shape file (SHX).
Supported platforms: Windows only
Signature
VBA:
object.LoadShapeFile FullName
object
    Type: Document
    The object this method applies to.
FullName
    Access: Input-only
    Type: String
    The full path and name of the shape file to load.
Return Value (RetVal)
No return value.
Remarks
This method makes all the shapes in the shape file available to the current drawing. To add a shape into the drawing, use the AddShape method.
You must load a shape file the first time you need it. AutoCAD loads it thereafter. The shape file must be available each time you edit the drawing.
Examples
VBA:
Sub Example_LoadShapeFile()
    ' This example loads a shape file
    
    Dim shapeFileToLoad As String
    shapeFileToLoad = \"C:/AutoCAD/Support/ltypeshp.shx\"
    
    ' Load the shape file
    On Error GoTo ERRORHANDLE
    ThisDrawing.LoadShapeFile shapeFileToLoad
    Exit Sub
ERRORHANDLE:
    MsgBox Err.Description, Title:=\"LoadShapeFile\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LoadShapeFile()
    ;; This example loads a shape file
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq shapeFileToLoad (findfile \"ltypeshp.shx\"))
    
    ;; Load the shape file
    (vla-LoadShapeFile doc shapeFileToLoad)
)
")
("MergeCells" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-157634F8-7FC2-4802-9728-7451DA33DFD2"
              "
MergeCells Method (ActiveX)
Merges cells in a table.
Supported platforms: Windows only
Signature
VBA:
object.MergeCells minRow, maxRow, minCol, maxCol
object
    Type: Table
    The object this method applies to.
minRow
    Access: Input-only
    Type: Long
    The zero-based lower bound of a row index.
maxRow
    Access: Input-only
    Type: Long
    The zero-based upper bound of a row index.
minCol
    Access: Input-only
    Type: Long
    The zero-based lower bound of a column index.
maxCol
    Access: Input-only
    Type: Long
    The zero-based upper bound of a column index.
Return Value (RetVal)
No return value.
Remarks
This method merges a rectangular region of cells. The total number of cells to be merged is equal to (maxRow - minRow + 1) * (maxCol - minCol + 1).
Examples
VBA:
Sub Example_MergeCells()
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.ModelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    Call MyTable.MergeCells(2, 3, 2, 3)
    MsgBox \"The cells have been merged appropriately.\"
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MergeCells()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
  
    (vla-MergeCells MyTable 2 3 2 3)
    (alert \"The cells have been merged appropriately.\")
    (vla-ZoomExtents acadObj)
)
")
("Mirror" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F89941D6-676B-43C0-8D92-9AFDAFB03780"
          "
Mirror Method (ActiveX)
Creates a mirror-image copy of a planar object around an axis.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Mirror(Point1, Point2)
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point of the mirror axis.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point of the mirror axis.
Return Value (RetVal)
Type: Object
This object can be one of any drawing object and is the result of mirroring the original object.
Remarks
The two points specified as parameters become the endpoints of a line around which the base object is reflected.
Selected object
Point1 and Point2 specifying the mirror axis
Mirrored object
This method places the reflected image into the drawing and retains the original object. To remove the original object, use the Delete method.
You can mirror a Viewport object in paper space, although doing so has no effect on its model space view or on model space objects.
AutoCAD checks to see if the object to be copied owns any other object. If it does, it performs a copy on those objects as well. The process continues until all owned objects have been copied.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Note: To manage the reflection properties of text objects, use the MIRRTEXT system variable. The default setting of MIRRTEXT is On (1), which causes text objects to be mirrored just like any other object. When MIRRTEXT is off (0), text is not mirrored.
Before mirroring
After mirroring (MIRRTEXT = 1)
After mirroring (MIRRTEXT = 0)
Examples
VBA:
Sub Example_Mirror()
    ' This example creates a lightweight polyline
    ' and then mirrors that polyline.
    
    ' Create the polyline
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 1
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ZoomAll
    
    ' Define the mirror axis
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 0: point1(1) = 4.25: point1(2) = 0
    point2(0) = 4: point2(1) = 4.25: point2(2) = 0
        
    MsgBox \"Mirror the polyline.\", , \"Mirror Example\"
    
    ' Mirror the polyline
    Dim mirrorObj As AcadLWPolyline
    Set mirrorObj = plineObj.Mirror(point1, point2)
    
    ZoomAll
    MsgBox \"Mirror completed.\", , \"Mirror Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Mirror()
    ;; This example creates a lightweight polyline
    ;; and then mirrors that polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                  4 1
                                 )
    )
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    (vla-ZoomAll acadObj)
    
    ;; Define the mirror axis
    (setq point1 (vlax-3d-point 0 4.25 0)
          point2 (vlax-3d-point 4 4.25 0))
        
    (alert \"Mirror the polyline.\")
    
    ;; Mirror the polyline
    (setq mirrorObj (vla-Mirror plineObj point1 point2))
    
    (vla-ZoomAll acadObj)
    (alert \"Mirror completed.\")
)
")
("Mirror3D" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0862213C-8E61-40EA-B182-3C7CE5D7A1EE"
            "
Mirror3D Method (ActiveX)
Creates a mirror image of the given object about a plane.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Mirror3D(Point1, Point2, Point3)
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point of the mirror plane.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point of the mirror plane.
Point3
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the third point of the mirror plane.
Return Value (RetVal)
Type: Object
This object can be one of any drawing object and is the result of mirroring the original object.
Remarks
Object mirrored about a plane defined by three points
AutoCAD checks to see if the object to be copied owns any other object. If it does, it performs a copy on those objects as well. The process continues until all owned objects have been copied.
Note: You cannot execute this method while simultaneously iterating through a collection. An iteration will open the work space for a read-only operation, while this method attempts to perform a read-write operation. Complete any iteration before you call this method.
AttributeReference: You should not attempt to use this method on AttributeReference objects. AttributeReference objects inherit this method because they are one of the drawing objects, however, it is not feasible to perform this operation on an attribute reference.
Examples
VBA:
Sub Example_Mirror3D()
    ' This example creates a box in model space, and mirrors the box about a plane.
    
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Define the mirroring plane with three points
    Dim mirrorPt1(0 To 2) As Double
    Dim mirrorPt2(0 To 2) As Double
    Dim mirrorPt3(0 To 2) As Double
    
    mirrorPt1(0) = 1.25: mirrorPt1(1) = 0: mirrorPt1(2) = 0
    mirrorPt2(0) = 1.25: mirrorPt2(1) = 2: mirrorPt2(2) = 0
    mirrorPt3(0) = 1.25: mirrorPt3(1) = 2: mirrorPt3(2) = 2
    
    ' Mirror the box
    Dim mirrorBoxObj As Acad3DSolid
    Set mirrorBoxObj = boxObj.Mirror3D(mirrorPt1, mirrorPt2, mirrorPt3)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Mirror3D()
    ;; This example creates a box in model space, and mirrors the box about a plane.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Define the mirroring plane with three points
    (setq mirrorPt1 (vlax-3d-point 1.25 0 0)
          mirrorPt2 (vlax-3d-point 1.25 2 0)
          mirrorPt3 (vlax-3d-point 1.25 2 2))
    
    ;; Mirror the box
    (setq mirrorBoxObj (vla-Mirror3D boxObj mirrorPt1 mirrorPt2 mirrorPt3))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("Move" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FF65DF24-D646-4DC2-894D-095E426DC2C1"
        "
Move Method (ActiveX)
Moves an object along a vector.
Supported platforms: Windows only
Signature
VBA:
object.Move Point1, Point2
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point of the move vector.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point of the move vector.
Return Value (RetVal)
No return value.
Remarks
The two points you specify define a displacement vector indicating how far the given object is to be moved and in what direction.
Given object with two points indicated
Moved object
Examples
VBA:
Sub Example_Move()
    ' This example creates a circle and then performs
    ' a move on that circle.
    
    ' Create the circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 2#: center(1) = 2#: center(2) = 0#
    radius = 0.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    
    ' Define the points that make up the move vector
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 2: point2(1) = 0: point2(2) = 0
        
    MsgBox \"Move the circle 2 units in the X direction.\", , \"Move Example\"
    
    ' Move the circle
    circleObj.Move point1, point2
    
    ZoomAll
    MsgBox \"Move completed.\", , \"Move Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Move()
    ;; This example creates a circle and then performs
    ;; a move on that circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the circle
    (setq center (vlax-3d-point 2 2 0)
          radius 0.5)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    
    ;; Define the points that make up the move vector
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 2 0 0))
        
    (alert \"Move the circle 2 units in the X direction.\")
    
    ;; Move the circle
    (vla-Move circleObj point1 point2)
    
    (vla-ZoomAll acadObj)
    (alert \"Move completed.\")
)
")
("MoveAbove" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-34DFB888-D55F-4C20-A306-291B154405E4"
             "
MoveAbove Method (ActiveX)
Moves objects above the target in the draw order.
Supported platforms: Windows only
Signature
VBA:
object.MoveAbove Objects, Target 
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Input-only
    Type: Variant
    The objects to move.
Target
    Access: Input-only
    Type: AcadEntity
    The target of the draw order.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
                                  6 20 0
                                 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("MoveBelow" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-45CA4C5D-5408-4EC9-98B8-18FE4DD8BC2B"
             "
MoveBelow Method (ActiveX)
Moves objects below the target in the draw order.
Supported platforms: Windows only
Signature
VBA:
object.MoveBelow Objects, Target
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Input-only
    Type: Variant
    The objects to move.
Target
    Access: Input-only
    Type: AcadEntity
    The target of the draw order.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
                                  6 20 0
                                 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("MoveContent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-96C54E2B-9E8E-4CA2-97B0-5AAD243C08A8"
               "
MoveContent Method (ActiveX)
Moves the index content of a cell.
Supported platforms: Windows only
Signature
VBA:
object.MoveContent nRow, nCol, nFromIndex, nToIndex
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to check.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to check.
nFromIndex
    Access: Input-only
    Type: Long
    The index of the content to be moved.
nToindex
    Access: Input-only
    Type: Long
    The index of the content to be placed at.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ContentChange()
    ' This example adds a table in model space
    ' and manipulates its contents
    
    ' Note: One content is created for each cell by default;
    ' this function need to be called only to create additional contents.
    
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As IAcadTable
    Dim sID As Long
    Dim newSID As Long
    Dim row As Long
    Dim col As Long
    
    ' Creates arbitrary cell points to check
    row = 2
    col = 2
    
    ' Creates the table with an arbitrary number of cells
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox \"There is no content in the cell, but it is editable\"
        End If
    End If
    ' Create some content in an arbitrary cell
    sID = MyTable.CreateContent(row, col, 8)
    MsgBox \"The content ID is \" & sID
 
    ' Move the content to another index
    MyTable.MoveContent row, col, sID, 4
    
    ' Check that the content has been deleted
    MyTable.DeleteContent row, col
    
    If MyTable.IsEmpty(row, col) Then
        If MyTable.IsContentEditable(row, col) Then
            MsgBox \"There is no content in the cell, but it is editable\"
        End If
    End If
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ContentChange()
    ;; This example adds a table in model space
    ;; and manipulates its contents
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Note: One content is created for each cell by default;
    ;; this function need to be called only to create additional contents.
    
    (setq pt (vlax-3d-point 0 0 0))
    
    ;; Creates arbitrary cell points to check
    (setq row 2
          col 2)
    
    ;; Creates the table with an arbitrary number of cells
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    (vla-SetTextHeight MyTable (+ acDataRow acHeaderRow acTitleRow) 1)
  
    (vla-Regen doc :vlax-true)
    (vla-ZoomExtents acadObj)
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert \"There is no content in the cell, but it is editable\")
        )
    )
    ;; Create some content in an arbitrary cell
    (setq sID1 (vla-CreateContent MyTable row col 0))
    (setq sID2 (vla-CreateContent MyTable row col 1))
    (vla-SetTextString MyTable row col sID1 \"Value1\")
    (vla-SetTextString MyTable row col sID2 \"Value2\")
    (vla-Regen doc :vlax-true)
  
    (alert (strcat \"The content IDs are \"
		                 \"\nValue1: \" (itoa sID1)
		                 \"\nValue2: \" (itoa sID2)))
 
    ;; Move the content to another index
    (vla-MoveContent MyTable row col sID2 sID1)
    (vla-Regen doc :vlax-true)
    (alert \"Content order changed\")
  
    ;  Check that the content has been deleted
    (vla-DeleteContent MyTable row col)
    (vla-Regen doc :vlax-true)
    
    (if (= (vla-IsEmpty MyTable row col) :vlax-true)
        (if (= (vla-IsContentEditable MyTable row col) :vlax-true)
            (alert \"There is no content in the cell, but it is editable\")
        )
    )
)
")
("MoveToBottom" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-95465F68-7498-48F1-9945-5E76F363FAD3"
                "
MoveToBottom Method (ActiveX)
Moves objects to the bottom of the draw order.
Supported platforms: Windows only
Signature
VBA:
object.MoveToBottom Objects
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Input-only
    Type: Variant
    The objects to move.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
                                  6 20 0
                                 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("MoveToTop" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0FA80CF9-427C-40F1-A400-BFD4AE81EE99"
             "
MoveToTop Method (ActiveX)
Moves objects to the top of the draw order.
Supported platforms: Windows only
Signature
VBA:
object.MoveToTop Objects
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Input-only
    Type: Variant
    The objects to move.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
                                  6 20 0
                                 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the top
    (vla-MoveToTop sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("New" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C8035300-FCBC-4633-8B55-B04A139F39EA"
       "
New Method (ActiveX)
Creates a new document in SDI mode.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.New(TemplateFileName)
object
    Type: Document
    The object this method applies to.
TemplateFileName
    Access: Input-only
    Type: String
    The full path and file name of the template file.
Return Value (RetVal)
Type: Document
The newly created Document object.
Remarks
You should call the New method from the Document object only when working in SDI mode. When working in MDI mode, use the Add method on the Documents collection to create a new drawing.
Examples
VBA:
Sub Example_New()
    ' This example creates a new drawing based on the template ansi-a.dwt.
    ' Note: The path to the template file is included with its name. Adjust
    ' this path for your installation location before running this example.
    
    Dim templateFileName As String
    templateFileName = \"c:\AutoCAD\template\ansi-a.dwt\"
    
    If AcadApplication.preferences.System.SingleDocumentMode = True Then
        ThisDrawing.New templateFileName
    Else
        ThisDrawing.Application.Documents.Add templateFileName
    End If
End Sub
Visual LISP:
Not available
")
("NumCustomInfo" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CB5EF468-20FB-479C-AB51-AA53B8259624"
                 "
NumCustomInfo Method (ActiveX)
Returns the number of custom property fields that have been set.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.NumCustomInfo
object
    Type: SummaryInfo
    The object this method applies to.
Return Value (RetVal)
Type: Long
The number of custom property fields that have been set for the drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_NumCustomInfo()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumCustomInfo()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("ObjectIDToObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D8F70EF0-116B-41E8-B149-B104009FCF86"
                    "
ObjectIDToObject Method (ActiveX)
Gets the object that corresponds to the given object ID.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.ObjectIDToObject(ID)
object
    Type: Database, Document
    The objects this method applies to.
ID
    Access: Input-only
    Type: Long_PTR
    The object ID of the object to return.
Return Value (RetVal)
Type: Object
The object that corresponds to the given object ID.
Remarks
This method can return only objects that are in the current document.
Examples
VBA:
Sub Example_ObjectIDToObject()
    ' This example creates a spline in model space, and returns the
    ' handle for the spline. Then the spline is returned from the handle and colored.
    
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ZoomAll
    
    Dim objectID As Long
    objectID = splineObj.ObjectID
    MsgBox \"The objectID of the Spline is: \" & objectID, , \"ObjectIDToObject Example\"
        
    ' Find an object from a given objectID
    Dim tempObj As AcadObject
    Set tempObj = ThisDrawing.ObjectIdToObject(objectID)
    ' Now use the newly initialized object variable to color the object
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    tempObj.TrueColor = color
    
    ThisDrawing.Regen True
    MsgBox \"The Spline is now blue.\", , \"ObjectIDToObject Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectIDToObject()
    ;; This example creates a spline in model space, and returns the
    ;; handle for the spline. Then the spline is returned from the handle and colored.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Find the objectID of the spline
    (setq objectID (vla-get-objectID splineObj))
    (alert (strcat \"The objectID of the Spline is: \" (itoa objectID)))
        
    ;; Find an object from a given objectID
    (setq tempObj (vla-ObjectIDToObject doc objectID))
    ;; Now use the newly initialized object variable to color the object 
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
  
    (vla-put-TrueColor tempObj color)
    
    (vla-Regen doc :vlax-true)
    (alert \"The Spline is now blue.\")
    (vlax-release-object color)
)
")
("ObjectIdToObject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D8F70EF0-116B-41E8-B149-B104009FCF86"
                    "
ObjectIDToObject Method (ActiveX)
Gets the object that corresponds to the given object ID.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.ObjectIDToObject(ID)
object
    Type: Database, Document
    The objects this method applies to.
ID
    Access: Input-only
    Type: Long_PTR
    The object ID of the object to return.
Return Value (RetVal)
Type: Object
The object that corresponds to the given object ID.
Remarks
This method can return only objects that are in the current document.
Examples
VBA:
Sub Example_ObjectIDToObject()
    ' This example creates a spline in model space, and returns the
    ' handle for the spline. Then the spline is returned from the handle and colored.
    
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ZoomAll
    
    Dim objectID As Long
    objectID = splineObj.ObjectID
    MsgBox \"The objectID of the Spline is: \" & objectID, , \"ObjectIDToObject Example\"
        
    ' Find an object from a given objectID
    Dim tempObj As AcadObject
    Set tempObj = ThisDrawing.ObjectIdToObject(objectID)
    ' Now use the newly initialized object variable to color the object
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    tempObj.TrueColor = color
    
    ThisDrawing.Regen True
    MsgBox \"The Spline is now blue.\", , \"ObjectIDToObject Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectIDToObject()
    ;; This example creates a spline in model space, and returns the
    ;; handle for the spline. Then the spline is returned from the handle and colored.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Find the objectID of the spline
    (setq objectID (vla-get-objectID splineObj))
    (alert (strcat \"The objectID of the Spline is: \" (itoa objectID)))
        
    ;; Find an object from a given objectID
    (setq tempObj (vla-ObjectIDToObject doc objectID))
    ;; Now use the newly initialized object variable to color the object 
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
  
    (vla-put-TrueColor tempObj color)
    
    (vla-Regen doc :vlax-true)
    (alert \"The Spline is now blue.\")
    (vlax-release-object color)
)
")
("Offset" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-50EF273A-7552-4D6B-8523-BB956334D08A"
          "
Offset Method (ActiveX)
Creates a new object at a specified offset distance from an existing object.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Offset(Distance)
object
    Type: Arc, Circle, Ellipse, Line, LWPolyline, Polyline, Spline, XLine
    The objects this method applies to.
Distance
    Access: Input-only
    Type: Double
    The distance to offset the object. The offset can be a positive or negative number, but it cannot equal zero. If the offset is negative, this is interpreted as being an offset to make a \"smaller\" curve (that is, for an arc it would offset to a radius that is \"Distance less\" than the starting curve's radius). If \"smaller\" has no meaning, then it would offset in the direction of smaller X, Y, and Z WCS coordinates.
Return Value (RetVal)
Type: Variant (array of objects)
An array of the newly created objects resulting from the offset.
Remarks
For many curves, the result of this operation will be a single new curve (which may not be of the same type as the original curve). For example, offsetting an ellipse will result in a spline because the result does not fit the equation of an ellipse. In some cases it may be necessary for the offset result to be several curves.
An original object and the object with an offset in red.
Examples
VBA:
Sub Example_Offset()
    ' This example creates a lightweight polyline
    ' and then offsets the polyline.
    
    ' Create the polyline
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 1
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ZoomAll
            
    MsgBox \"Offset the polyline by 0.25.\", , \"Offset Example\"
    
    ' Offset the polyline
    Dim offsetObj As Variant
    offsetObj = plineObj.offset(0.25)
    
    ZoomAll
    MsgBox \"Offset completed.\", , \"Offset Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Offset()
    ;; This example creates a lightweight polyline
    ;; and then offsets the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                  4 1
                                 )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    (vla-ZoomAll acadObj)
            
    (alert \"Offset the polyline by 0.25.\")
    
    ;; Offset the polyline
    (setq offsetObj (vla-Offset plineObj 0.25))
    
    (vla-ZoomAll acadObj)
    (alert \"Offset completed.\")
)
")
("Open" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9ED7A548-7978-4BFD-8462-E2FA747E8880"
        "
Open Method (ActiveX)
Opens an existing drawing file (DWG) and makes it the active document.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Open(Name [, ReadOnly] [, Password])
object
    Type: Document, Documents
    The objects this method applies to.
Name
    Access: Input-only
    Type: String
    The full path and file name, or a valid URL address, of the drawing file to open. If the drawing is in the folder specified by the SupportPath property, then the path is not needed and the file name is sufficient.
ReadOnly (Documents only)
    Access: Input-only; optional
    Type: Variant
    The default setting is False.
        True: Opens the drawing as a read-only drawing.
        False: Opens the drawing as a read-write drawing.
Password
    Access: Input-only; optional
    Type: Variant
    Password to open an encrypted drawing.
Return Value (RetVal)
Type: Document
The Document object that represents the opened drawing file.
Remarks
It is recommended that you save the current drawing before calling this method.
This method opens AutoCAD drawing files only. Use the Import method to open SAT, EPS, DXF, WMF, or BMP format files.
When working in MDI mode, you should always use the Open method from the Documents collection.
When accessing a secure URL, a dialog box prompts the user for the necessary password information. Message boxes appear if the user has not suppressed this activity in the browser.
When downloading a file, AutoCAD creates a temporary file for internal processing. Do not attempt to access this temporary file. Information in this file is deleted at the end of the AutoCAD session.
Examples
VBA:
Sub Example_Open()
    ' The following example opens \"C:\AutoCAD\Sample\city map.dwg\" file.
    ' This drawing may not exist on your system. Change the drawing
    ' path and name to reflect a valid AutoCAD drawing on your system.
    
    If AcadApplication.Preferences.System.SingleDocumentMode = True Then
        ThisDrawing.Open \"C:\AutoCAD\Sample\city map.dwg\"
    Else
        ThisDrawing.Application.Documents.Open \"C:\AutoCAD\Sample\city map.dwg\"
    End If
End Sub
Visual LISP:
Not available
")
("PlotToDevice" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-55FEED17-E697-4CF3-B9C3-6ACCF060672F"
                "
PlotToDevice Method (ActiveX)
Plots a layout to a device.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.PlotToDevice([plotConfig])
object
    Type: Plot
    The object this method applies to.
plotConfig
    Access: Input-only; optional
    Type: String
    The full path and file name of the PC3 file to use instead of the current configuration. If this parameter is not provided, the current configuration will be used. If the configuration file is not found at the specified path, AutoCAD will search the printer configuration path for the file before it defaults to the current configuration.
Return Value (RetVal)
Type: Boolean
    True: The plot was successfully sent to the device.
    False: The plot was not sent to the device. There was either a plot process failure or the plot was cancelled.
Remarks
The drawing from which the plot is initiated must be active for the plot to succeed.
To plot in the foreground, you must set the AutoCAD BACKGROUNDPLOT system variable to 0. Otherwise, plotting occurs in the background.
The plot device is specified using the ConfigName property for the layout or plot configuration.
If the PC3 file specified or the current plot configuration contains plot-to-file information, this method may actually send the plot to a file instead of to a device. Be careful to review all current plot configuration information for the specified layout. To plot several layouts, you can use the SetLayoutsToPlot method before invoking the PlotToDevice method.
To create a new configured plotter (PC3) file, use the Add-a-Plotter wizard in AutoCAD. For more information about PC3 files, see the AutoCAD Online Help system.
Examples
VBA:
Sub Example_PlotToDevice()
    ' This example sends a plot of the current drawing
    ' to the default device for your system.
    
    ThisDrawing.ActiveLayout.ConfigName = \"DWF6 ePlot.pc3\"
    
    ThisDrawing.Plot.PlotToDevice
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotToDevice()
    ;; This example sends a plot of the current drawing
    ;; to the current device.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWF6 ePlot.pc3\")
    (vla-PlotToDevice (vla-get-Plot doc))
)
")
("PlotToFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-85A6B1AF-80AA-4F56-8305-6EFD4A4D8CF8"
              "
PlotToFile Method (ActiveX)
Plots a layout to the specified file.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.PlotToFile(plotFile [, plotConfig])
object
    Type: Plot
    The object this method applies to.
plotFile
    Access: Input-only
    Type: String
    The name of the file to plot the active layout to. If you plot multiple layouts, the file name for each plot will be generated from the drawing and layout names.
plotConfig
    Access: Input-only; optional
    Type: String
    The full path and file name of the PC3 file to use instead of the current configuration. If this parameter is not provided, the current configuration will be used.
Return Value (RetVal)
Type: Boolean
    True: The plot was successfully sent to the file.
    False: The plot was not sent to the file. There was either a plot process failure or the plot was cancelled.
Remarks
The drawing from which the plot is initiated must be active for the plot to succeed.
To plot in the foreground, you must set the AutoCAD BACKGROUNDPLOT system variable to 0. Otherwise, plotting occurs in the background.
If you plot the active layout (that is, you have not called SetLayoutsToPlot before this method), the plotFile parameter specifies the name for the output plot file. If you plot multiple layouts using the SetLayoutsToPlot method, the output plot files are automatically named using the drawing name, layout name, and any path information provided in the plotFile parameter.
If a file extension is provided in the plotFile parameter, that extension will almost always be used for the output plot file. The specified extension will be overwritten only for certain raster output drivers that replace user-provided extensions with .gif.
If a file extension is not provided in the plotFile parameter, an extension is automatically generated for the output plot file based on the default extension for the specified driver or device.
For some plotters, the output format you choose determines the file extension and whether the plot is written to a file. Also, some plotters might not be able to plot to a file. For further information, see the AutoCAD Online Help system or the plotter's manual from the manufacturer.
Examples
VBA:
Sub Example_PlotToFile()
    ' This example sends a plot of the current drawing
    ' to a file.
    
    ThisDrawing.ActiveLayout.ConfigName = \"DWF6 ePlot.pc3\"
    
    ' Define the output file name.
    ' Use \"\" to use the drawing name as the file name.
    Dim plotFileName As String
    plotFileName = \"MyPlot\"
    
    Dim result As Boolean
        
    result = ThisDrawing.Plot.PlotToFile(plotFileName)
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotToFile()
    ;; This example sends a plot of the current drawing
    ;; to a file.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Set a device current that outputs to a file
    (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWF6 ePlot.pc3\")
    ;; Define the plot variable
    (setq currentPlot (vla-get-Plot doc))
    
    ;; Define the output file name.
    ;; Use \"\" to use the drawing name as the file name.
    ;; Note: if the file name exists an error will be generated.
    (setq plotFileName \"MyPlot\")
    (vla-PlotToFile currentPlot plotFileName)
)
")
("PolarPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D42DF63B-6156-4470-9163-61E08901EDA7"
              "
PolarPoint Method (ActiveX)
Gets the point at a specified angle and distance from a given point.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.PolarPoint(Point, Angle, Distance)
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the start point.
Angle
    Access: Input-only
    Type: Double
    The angle in radians.
Distance
    Access: Input-only
    Type: Double
    The distance in current units.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The 3D WCS coordinates at the specified angle and distance from a given point.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PolarPoint()
    ' This example finds the coordinate of a point that is a given
    ' distance and angle from a base point.
    
    Dim polarPnt As Variant
    Dim basePnt(0 To 2) As Double
    Dim angle As Double
    Dim distance As Double
    
    basePnt(0) = 2#: basePnt(1) = 2#: basePnt(2) = 0#
    angle = 0.1744444   ' 45 degrees
    distance = 5
    polarPnt = ThisDrawing.Utility.PolarPoint(basePnt, angle, distance)
    
    ' Create a line from the base point to the polar point
    Dim lineObj As AcadLine
    Set lineObj = ThisDrawing.ModelSpace.AddLine(basePnt, polarPnt)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PolarPoint()
    ;; This example finds the coordinate of a point that is a given
    ;; distance and angle from a base point.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq basePnt (vlax-3d-point 2 2 0)
          ang 0.1744444   ;; 45 degrees
          dist 5)
    
    (setq polarPnt (vla-PolarPoint (vla-get-Utility doc) basePnt ang dist))
    
    ;; Create a line from the base point to the polar point
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace basePnt polarPnt))
    (vla-ZoomAll acadObj)
)
")
("PostCommand" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D3B8666-1B40-47C0-911B-859E3C38FB1A"
               "
PostCommand Method (ActiveX)
Posts a command string to the document for execution when the document enters an idle state.
Supported platforms: Windows only
Signature
VBA:
object.PostCommand Command
object
    Type: Document
    The object this method applies to.
Command
    Access: Input-only
    Type: String
    The command string to post.
Return Value (RetVal)
No return value.
Remarks
Use a space or the ASCII carriage return character (vbCr) at the end of the command string to end the command; this is equivalent to pressing Enter on the keyboard.
This method processes any AutoCAD command-line function, including AutoLISP expressions.
If the document is not active, the document is made activate and the string is executed when the document has focus.
This method is asynchronous. If you need to execute a command string synchronously, use the SendCommand method.
Examples
VBA:
Sub Example_PostCommand()
   ' This example sends a command for evaluation to the AutoCAD Command prompt
   ' of the current drawing
   
   ' Start creating a Circle in the active drawing
   ThisDrawing.PostCommand \"._circle\" & vbCr & \"2,2,0\" & vbCr
   
   MsgBox \"CIRCLE command has been started, enter a radius to finish the command.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PostCommand()
    ;; This example sends a command for evaluation to the AutoCAD Command prompt
    ;; of the current drawing
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Start creating a Circle in the active drawing
    (vla-PostCommand doc \"._circle 2,2,0 \")
   
    (alert \"CIRCLE command has been started, enter a radius to finish the command.\")
)
")
("Prompt" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BBD8159B-14AB-4FF9-9DF8-8126C28F08E0"
          "
Prompt Method (ActiveX)
Displays a prompt on the command line.
Supported platforms: Windows only
Signature
VBA:
object.Prompt Message
object
    Type: Utility
    The object this method applies to.
Message
    Access: Input-only
    Type: String
    The prompt to display.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Prompt()
    ' This example will use the Utility object to display a prompt to the
    ' AutoCAD command line.  To see the results after running the example,
    ' switch to AutoCAD and look at the command line.
    
    ThisDrawing.Utility.Prompt \"Press any key...\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Prompt()
    ;; This example will use the Utility object to display a prompt to the
    ;; AutoCAD command line.  To see the results after running the example,
    ;; switch to AutoCAD and look at the command line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (vla-Prompt (vla-get-Utility doc) \"Press any key...\")
)
")
("PurgeAll" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9FD38B4D-2554-419A-9A1F-916725A300F5"
            "
PurgeAll Method (ActiveX)
Removes unused named references such as unused blocks or layers from the document.
Supported platforms: Windows only
Signature
VBA:
object.PurgeAll
object
    Type: Document
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method is the equivalent of entering purge at the Command prompt, selecting the All option, and then choosing Yes to the \"Purge Everything?\" prompt.
Deleted objects remain in the document until they are purged using this method.
Examples
VBA:
Sub Example_PurgeAll()
    ' This example removes all unused named references from the database
    
    ThisDrawing.PurgeAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PurgeAll()
    ;; This example removes all unused named references from the database
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-PurgeAll doc)
)
")
("PurgeFitData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CFE86811-C486-44C6-87BE-759D6CE3D837"
                "
PurgeFitData Method (ActiveX)
Purges the fit data of a spline.
Supported platforms: Windows only
Signature
VBA:
object.PurgeFitData
object
    Type: Spline
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
Removes the fit data of a spline.
Examples
VBA:
Sub Example_PurgeFitData()
    ' This example creates a spline object in model space.
    ' It then returns the current number of fit points,
    ' and then purges the fit data.
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    MsgBox \"Before the purge there are \" & splineObj.NumberOfFitPoints & \" fit points.\", , \"PurgeFitData Example\"
    ' Purge the fit data
    splineObj.PurgeFitData
    ThisDrawing.Regen True
    MsgBox \"After the purge there are \" & splineObj.NumberOfFitPoints & \" fit points.\", , \"PurgeFitData Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PurgeFitData()
    ;; This example creates a spline object in model space.
    ;; It then returns the current number of fit points,
    ;; and then purges the fit data.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"Before the purge there are \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" fit points.\"))
    ;; Purge the fit data
    (vla-PurgeFitData splineObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"After the purge there are \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" fit points.\"))
)
")
("PutRemoteFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E50E449A-94CC-446E-832D-774796F8B1DD"
                 "
PutRemoteFile Method (ActiveX)
Uploads a file to a remote FTP location specified by a URL known to AutoCAD.
Supported platforms: Windows only
Signature
VBA:
object.PutRemoteFile URL, LocalFile
object
    Type: Utility
    The object this method applies to.
URL
    Access: Input-only
    Type: String
    The URL location to upload the file to.
LocalFile
    Access: Input-only
    Type: String
    The file to upload.
Return Value (RetVal)
No return value.
Remarks
This method is designed to complement the GetRemoteFile method.
When a secure URL is accessed, a dialog box prompts the user for the necessary password information. Message boxes appear if the user has not suppressed this activity in their browser.
Examples
VBA:
Sub Example_PutRemoteFile()
    ' This example transfers a local file to a remote URL.  Since this example
    ' relies on both a remote server name and a local file, you will have to
    ' modify both the DestURL and LocalFile variables below to run this example.
    
    Dim DestURL As String, LocalFile As String
    
    ' Define source and destination
    DestURL = \"ftp://www.myserver.com/autocadfiles/\"
    LocalFile = \"c:\program files\autocad\sample\city map.dwg\"
    
    ' Transfer local file to remote location
    ThisDrawing.Utility.PutRemoteFile DestURL, LocalFile
    
    MsgBox LocalFile & \" was just transfered to: \" & DestURL
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PutRemoteFile()
    ;; This example transfers a local file to a remote URL.  Since this example
    ;; relies on both a remote server name and a local file, you will have to
    ;; modify both the DestURL and LocalFile variables below to run this example.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define source and destination
    (setq DestURL \"ftp://www.myserver.com/autocadfiles/\")
    (setq LocalFile \"C:\\autocad\\samples\\city map.dwg\")
    
    ;; Transfer local file to remote location
    (vla-PutRemoteFile (vla-get-Utility doc) DestURL LocalFile)
    
    (alert (strcat LocalFile \" was just transfered to: \" DestURL))
)
")
("Quit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E9E18EC6-6FE9-4ED9-9BAF-87FA62D42ECB"
        "
Quit Method (ActiveX)
Closes the drawing file and exits the AutoCAD application.
Supported platforms: Windows only
Signature
VBA:
object.Quit
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
If AutoCAD is in the middle of a command, an \"AutoCAD unable to service automation request\" error message will be generated. If the document has not been saved, you will be prompted to save the drawing.
Examples
VBA:
Sub Example_Quit()
    ' Warning: This example will quit AutoCAD and VBA.
    
    ThisDrawing.Application.Quit
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Quit()
    ;; Warning: This example will quit AutoCAD.
    (setq acadObj (vlax-get-acad-object))
    (vla-Quit acadObj)
)
")
("RealToString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D9504E90-9AFD-420E-B95F-5E2B9EE72119"
                "
RealToString Method (ActiveX)
Converts a real (double) value to a string.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.RealToString(Value, Unit, Precision)
object
    Type: Utility
    The object this method applies to.
Value
    Access: Input-only
    Type: Double
    The value to be converted.
Unit
    Access: Input-only
    Type: AcUnits enum
        acDefaultUnits
        acScientific
        acDecimal
        acEngineering
        acArchitectural
        acFractional
Precision
    Access: Input-only
    Type: Long
    The precision of the value. An integer between 0 and 8.
Return Value (RetVal)
Type: String
The value as a properly formatted string.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_RealToString()
    ' This example converts values in a given format to their string equivalents.
    
    Dim unit As Long
    Dim valueAsStr As String
    Dim precision As Integer
    Dim valueAsReal As Double
    precision = 6
    
    ' Convert a real value 17.5 using Scientific mode to a String
    unit = acScientific
    valueAsStr = ThisDrawing.Utility.RealToString(17.5, unit, precision)
    MsgBox \"17.5 in scientific format is \" & valueAsStr, , \"RealToString Example\"
    
    ' Convert a real value 17.5 using Decimal mode to a String
    unit = acDecimal
    valueAsStr = ThisDrawing.Utility.RealToString(17.5, unit, precision)
    MsgBox \"17.5 in decimal format is \" & valueAsStr, , \"RealToString Example\"
    
    ' Convert a real value 17.5 using Engineering mode to a String
    unit = acEngineering
    valueAsStr = ThisDrawing.Utility.RealToString(17.5, unit, precision)
    MsgBox \"17.5 in engineering format is \" & valueAsStr, , \"RealToString Example\"
    
    ' Convert a real value 17.5 using Architectural mode to a String
    unit = acArchitectural
    valueAsStr = ThisDrawing.Utility.RealToString(17.5, unit, precision)
    MsgBox \"17.5 in architectural format is \" & valueAsStr, , \"RealToString Example\"
    
    ' Converts a real value 17.5 using fractional mode to a String
    unit = acFractional
    valueAsStr = ThisDrawing.Utility.RealToString(17.5, unit, precision)
    MsgBox \"17.5 in fractional format is \" & valueAsStr, , \"RealToString Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RealToString()
    ;; This example converts values in a given format to their string equivalents.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq precision 6)
    
    ;; Convert a real value 17.5 using Scientific mode to a String
    (setq valueAsStr (vla-RealToString (vla-get-Utility doc) 17.5 acScientific precision))
    (alert (strcat \"17.5 in scientific format is \" valueAsStr))
    
    ;; Convert a real value 17.5 using Decimal mode to a String
    (setq valueAsStr (vla-RealToString (vla-get-Utility doc) 17.5 acDecimal precision))
    (alert (strcat \"17.5 in decimal format is \" valueAsStr))
    
    ;; Convert a real value 17.5 using Engineering mode to a String
    (setq valueAsStr (vla-RealToString (vla-get-Utility doc) 17.5 acEngineering precision))
    (alert (strcat \"17.5 in engineering format is \" valueAsStr))
    
    ;; Convert a real value 17.5 using Architectural mode to a String
    (setq valueAsStr (vla-RealToString (vla-get-Utility doc) 17.5 acArchitectural precision))
    (alert (strcat \"17.5 in architectural format is \" valueAsStr))
    
    ;; Converts a real value 17.5 using fractional mode to a String
    (setq valueAsStr (vla-RealToString (vla-get-Utility doc) 17.5 acFractional precision))
    (alert (strcat \"17.5 in fractional format is \" valueAsStr))
)
")
("RecomputeTableBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5ED2334B-96E1-4CE9-9FD9-C5B02561717E"
                       "
RecomputeTableBlock Method (ActiveX)
Updates a table block.
Supported platforms: Windows only
Signature
VBA:
object.RecomputeTableBlock bForceUpdate
object
    Type: Table
    The object this method applies to.
bForceUpdate
    Access: Input-only
    Type: Boolean
        True: Table block is updated.
        False: Table block is not updated.
Return Value (RetVal)
No return value.
Remarks
This function updates the table block record that the Table object references to match changes made to the Table object since the most recent update of the table block record.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RefreshPlotDeviceInfo" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1E8879B2-E616-4436-9356-15D0D6A3F0E9"
                         "
RefreshPlotDeviceInfo Method (ActiveX)
Updates the plot, canonical media, and plot style table information to reflect the current system state.
Supported platforms: Windows only
Signature
VBA:
object.RefreshPlotDeviceInfo
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Return Value (RetVal)
No return value.
Remarks
It is recommended that you refresh your plot device information before you use GetCanonicalMediaNames, GetPlotDeviceNames, or GetPlotStyleTableNames methods for a given AutoCAD session. After that, you need only refresh the information if some part of the device setup changes during the course of the session.
Examples
VBA:
Sub Example_RefreshPlotDeviceInfo()
    ' This example gets the current plot device information,
    ' and then displays the list of plot device names,
    ' media names, localized media names, and plot style
    ' table entries.
    Dim Layout As ACADLayout
    Set Layout = ThisDrawing.ModelSpace.Layout
    
    ' Refresh the current plot information for
    ' this session.
    Layout.RefreshPlotDeviceInfo
    
    ' List all the valid device names for the system
    Dim plotDevices As Variant
    plotDevices = Layout.GetPlotDeviceNames()
    
    Dim x As Integer
    For x = LBound(plotDevices) To UBound(plotDevices)
        MsgBox plotDevices(x)
    Next
    
    ' List all the media names and their localized version
    Dim mediaNames As Variant
    mediaNames = Layout.GetCanonicalMediaNames()
    
    For x = LBound(mediaNames) To UBound(mediaNames)
        MsgBox mediaNames(x)
        MsgBox Layout.GetLocaleMediaName(mediaNames(x))
    Next
    
    ' List all the entries in the plot style table
    Dim styleNames As Variant
    styleNames = Layout.GetPlotStyleTableNames()
    
    For x = LBound(styleNames) To UBound(styleNames)
        MsgBox styleNames(x)
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RefreshPlotDeviceInfo()
    ;; This example gets the current plot device information
    ;; and then displays the list of plot device names,
    ;; media names, localized media names, and plot style
    ;; table entries.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq Layout (vla-get-Layout (vla-get-ModelSpace doc)))
    
    ;; Refresh the current plot information for
    ;; this session.
    (vla-RefreshPlotDeviceInfo Layout)
    
    ;; List all the valid device names for the system
    (setq plotDevices (vlax-variant-value (vla-GetPlotDeviceNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound plotDevices 1) x)
        (alert (vlax-safearray-get-element plotDevices x))
        (setq x (1+ x))
    )
    
    ;; List all the media names, and their localized version
    (setq mediaNames (vlax-variant-value (vla-GetCanonicalMediaNames Layout)))
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound mediaNames 1) x)
        (alert (vlax-safearray-get-element mediaNames x))
        (alert (vla-GetLocaleMediaName Layout (vlax-safearray-get-element mediaNames x)))
        (setq x (1+ x))
    )
    
    ;; List all the entries in the plot style table
    (setq styleNames (vlax-variant-value (vla-GetPlotStyleTableNames Layout)))
    
    (setq x 0)
    (while (>= (vlax-safearray-get-u-bound styleNames 1) x)
        (alert (vlax-safearray-get-element styleNames x))
        (setq x (1+ x))
    )
)
")
("Regen" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CCF21523-F711-4FA0-9D5B-4A3D3F61D37F"
         "
Regen Method (ActiveX)
Regenerates the entire drawing and recomputes the screen coordinates and view resolution for all objects.
Supported platforms: Windows only
Signature
VBA:
object.Regen WhichViewports
object
    Type: Document
    The object this method applies to.
WhichViewports
    Access: Input-only
    Type: AcRegenType enum
        acActiveViewport: Regenerates only the active viewport.
        acAllViewports: Regenerates all viewports on the document.
Return Value (RetVal)
No return value.
Remarks
Regen also reindexes the drawing database for optimum display and better object selection performance.
Examples
VBA:
Sub Example_Regen()
    ' The following example regenerates the complete drawing
    ThisDrawing.Regen acAllViewports
    
    ' The following example regenerates the active viewport in the current drawing
    ThisDrawing.Regen acActiveViewport
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Regen()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; The following example regenerates the complete drawing
    (vla-Regen doc acAllViewports)
    
    ;; The following example regenerates the active viewport in the current drawing
    (vla-Regen doc acActiveViewport)
)
")
("Reload" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9FAE45D2-6FC4-4ABE-8F0A-87591D026C91"
          "
Reload Method (ActiveX)
Reloads the external reference (xref).
Supported platforms: Windows only
Signature
VBA:
object.Reload
object
    Type: ExternalReference
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
When you reload an xref, the most recently saved version of the referenced drawing is loaded into the current drawing.
Examples
VBA:
Sub Example_Reload()
    On Error GoTo ERRORHANDLER
                          
    ' Define external reference to be inserted
    Dim xrefHome As AcadBlock
    Dim xrefInserted As AcadExternalReference
    Dim insertionPnt(0 To 2) As Double
    Dim PathName As String
    insertionPnt(0) = 1
    insertionPnt(1) = 1
    insertionPnt(2) = 0
    PathName = \"c:/AutoCAD/sample/City map.dwg\"
    
    ' Add the external reference to the block
    Set xrefInserted = ThisDrawing.ModelSpace. _
            AttachExternalReference(PathName, \"XREF_IMAGE\", _
            insertionPnt, 1, 1, 1, 0, False)
    ZoomAll
    MsgBox \"The external reference is attached.\"
    
    ' Reload the external reference definition
    ThisDrawing.Blocks.Item(xrefInserted.name).Reload
    MsgBox \"The external reference is reloaded.\"
    Exit Sub
ERRORHANDLER:
    MsgBox Err.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Reload()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
                         
    ;; Define external reference to be inserted
    (setq insertionPnt (vlax-3d-point 1 1 0)
          pathName (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg\"))
    
    ;; Add the external reference to the block
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq xrefInserted (vla-AttachExternalReference modelSpace pathName \"XREF_IMAGE\" insertionPnt 1 1 1 0 :vlax-false))
    (vla-ZoomAll acadObj)
    (alert \"The external reference is attached.\")
    
    ;; Unload the external reference definition
    (vla-Unload (vla-Item (vla-get-Blocks doc) \"XREF_IMAGE\"))
    (vla-Regen doc :vlax-true)
    (alert \"The external reference is unloaded.\")
    ;; Reload the external reference definition
    (vla-Reload (vla-Item (vla-get-Blocks doc) \"XREF_IMAGE\"))
    (alert \"The external reference is reloaded.\")
)
")
("Remove" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FFD7B0D3-ACAE-4AAF-BC8D-C33AB2A6A523"
          "
Remove Method (ActiveX)
Removes a named object from the dictionary.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.Remove(Name)
object
    Type: Dictionary
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name (keyword) of the object to be removed from the dictionary.
Return Value (RetVal)
Type: Object
The object being removed from the dictionary.
Remarks
For example, removing the object with the name \"FirstKeyword\" from the following dictionary:
    MyDictionary
    Keyword Object
    FirstKeyword Object1
    SecondKeyword Object2
Results in the following dictionary:
    MyDictionary
    Keyword Object
    SecondKeyword Object2
Examples
VBA:
Sub Example_Remove()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary. It then
    ' removes the object from the dictionary.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add(\"TEST_DICTIONARY\")
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX Application.
    ThisDrawing.Application.LoadArx \"MyARXApp.arx\"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = \"OBJ1\"
    className = \"CAsdkDictObject\"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
    ' Remove the object from the dictionary using the keyName
    dictObj.Remove keyName
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Remove()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary. It then
    ;; removes the object from the dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries \"TEST_DICTIONARY\"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX Application.
    (vla-LoadArx acadObj \"MyARXApp.arx\")
    
    ;; Create the custom object in the dictionary
    (setq keyName \"OBJ1\")
    (setq className \"CAsdkDictObject\")
    
    (setq customObj (vla-AddObject dictObj keyName className))
    
    ;; Remove the object from the dictionary using the keyName
    (vla-Remove dictObj keyName)
)
")
("RemoveAllOverrides" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C67F0543-90CC-44A9-936C-AB4CB30CEA55"
                      "
RemoveAllOverrides Method (ActiveX)
Removes all the overrides for a cell.
Supported platforms: Windows only
Signature
VBA:
object.RemoveAllOverrides nRow, nCol
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RemoveCustomByIndex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D7E02E57-9523-4EAF-B3CC-C3689FCBF708"
                       "
RemoveCustomByIndex Method (ActiveX)
Deletes the custom property name (key) and value that correspond to an index value.
Supported platforms: Windows only
Signature
VBA:
object.RemoveCustomByIndex Index
object
    Type: SummaryInfo
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index value of the property you want to delete. The index range is from zero to one less than the number of custom properties.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_RemoveCustomByIndex()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RemoveCustomByIndex()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
    ;; Remove custom properties
    (vla-RemoveCustomByIndex summaryInfo 0)
    (vla-RemoveCustomByKey summaryInfo Key1)
)
")
("RemoveCustomByKey" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B828232C-2849-47E5-8D55-0E1B9F830456"
                     "
RemoveCustomByKey Method (ActiveX)
Deletes the custom property value that corresponds to a name (key) value.
Supported platforms: Windows only
Signature
VBA:
object.RemoveCustomByKey key
object
    Type: SummaryInfo
    The object this method applies to.
key
    Access: Input-only
    Type: String
    The name of the custom property that you want to delete.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_RemoveCustomByKey()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RemoveCustomByKey()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
    ;; Remove custom properties
    (vla-RemoveCustomByIndex summaryInfo 0)
    (vla-RemoveCustomByKey summaryInfo Key1)
)
")
("RemoveItems" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4D363D03-14FA-4D58-928A-A6BA399CE762"
               "
RemoveItems Method (ActiveX)
Removes specified items from the group or selection set.
Supported platforms: Windows only
Signature
VBA:
object.RemoveItems Objects
object
    Type: Group, SelectionSet
    The objects this method applies to.
Objects
    Access: Input-only
    Type: Variant (array of objects)
    An array of objects to be removed.
Return Value (RetVal)
No return value.
Remarks
Items removed from a group or selection set remain in the drawing; they are simply no longer associated to the group or selection set. This functionality mimics the functionality found in the Clear method, except that RemoveItems allows you to specify individual items to be removed instead of the entire selection set.
This method differs from the Delete and Erase methods in that it does not remove objects from the drawing.
Examples
VBA:
Sub Example_RemoveItems()
    ' This example creates a selection set and several objects.
    ' It adds the objects to the selection set, and then
    ' removes two of the objects from the selection set.
    
    ' Create the new selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SELECTIONSET\")
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection.
    ' Collect the objects found into an array of objects
    ' to be added to the selection set.
    ReDim ssobjs(0 To ThisDrawing.ModelSpace.Count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.Count - 1
        Set ssobjs(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects to the selection set
    ssetObj.AddItems ssobjs
    GoSub LISTOBJS
    
    ' Remove two of the objects from the selection set
    Dim removeObjects(0 To 1) As AcadEntity
    Set removeObjects(0) = ellObj
    Set removeObjects(1) = circObj
    ssetObj.RemoveItems removeObjects
    MsgBox \"The ellipse and circle have been removed from the selection set.\"
    GoSub LISTOBJS
    Exit Sub
LISTOBJS:
    
    ' List all the objects in the selection set
    If ssetObj.Count = 0 Then
        MsgBox \"The selection set is empty\"
    Else
        For I = 0 To ssetObj.Count - 1
            MsgBox \"The selection set contains: \" & ssetObj.Item(I).ObjectName
        Next
    End If
    Return
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RemoveItems()
    ;; This example creates a selection set and several objects.
    ;; It adds the objects to the selection set, and then
    ;; removes two of the objects from the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create the new selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_SELECTIONSET\"))
    
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
				  3 5
				 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection.
    ;; Collect the objects found into an array of objects
    ;; to be added to the selection set.
    (setq ssobjs (vlax-make-safearray vlax-vbObject (cons 0 (- (vla-get-Count modelSpace) 1))))
    (setq cnt 0)
    (vlax-for each-item modelSpace
        (vlax-safearray-put-element ssobjs cnt each-item)
        (setq cnt (1+ cnt))
    )
    
    ;; Add the array of objects to the selection set
    (vla-AddItems ssetObj ssobjs)
  
    ;; List all the objects in the selection set
    (setq I 0)
    (if (= (vla-get-Count ssetObj) 0)
        (alert \"The selection set is empty\")
        (while (>= (1- (vla-get-Count ssetObj)) I)
            (alert (strcat \"The selection set contains: \" (vla-get-ObjectName (vla-Item ssetObj I))))
            (setq I (1+ I))
        )
    )
    
    ;; Remove two of the objects from the selection set
    (setq removeObjects (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element removeObjects 0 ellObj)
    (vlax-safearray-put-element removeObjects 1 circObj)
    (vla-RemoveItems ssetObj removeObjects)
    (alert \"The ellipse and circle have been removed from the selection set.\")
    ;; List all the objects in the selection set
    (setq I 0)
    (if (= (vla-get-Count ssetObj) 0)
        (alert \"The selection set is empty\")
        (while (>= (1- (vla-get-Count ssetObj)) I)
            (alert (strcat \"The selection set contains: \" (vla-get-ObjectName (vla-Item ssetObj I))))
            (setq I (1+ I))
        )
    )
    (vla-Delete ssetObj)
)
")
("RemoveLeader" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B5BEA743-8EF4-4F17-9541-E58CE3DADE9D"
                "
RemoveLeader Method (ActiveX)
Removes the leader cluster with specified index.
Supported platforms: Windows only
Signature
VBA:
object.RemoveLeader leaderIndex
object
    Type: MLeader
    The object this method applies to.
leaderIndex
    Access: Input-only
    Type: Long
    The leader index.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RemoveLeaderLine" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-406B94E3-9B38-4F52-B5BB-DE12E1BD4FEF"
                    "
RemoveLeaderLine Method (ActiveX)
Removes the leaderLine with specified index.
Supported platforms: Windows only
Signature
VBA:
object.RemoveLeaderLine leaderLineIndex
object
    Type: MLeader
    The object this method applies to.
leaderLineIndex
    Access: Input-only
    Type: Long
    The leader line index.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RemoveVertex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-70302CED-4321-4874-951D-C604EF073F2B"
                "
RemoveVertex method (ActiveX)
Removes a vertex in the section line.
Supported platforms: Windows only
Signature
VBA:
object.RemoveVertex nIndex
object
    Type: Section
    The object this method applies to.
nIndex
    Access: Input-only
    Type: Long
    The index of the vertex to be removed.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Rename" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9BE05E63-C0C0-4F36-81D6-AEF2A194A209"
          "
Rename Method (ActiveX)
Renames an item in a dictionary or a set of saved layer settings.
Supported platforms: Windows only
Signature
VBA:
object.Rename OldName, NewName
object
    Type: Dictionary, LayerStateManager
    The objects this method applies to.
OldName
    Access: Input-only
    Type: String
    The current name (keyword) of the object in the dictionary, or the name of a set of saved layer settings.
NewName
    Access: Input-only
    Type: String
    The new name (keyword) for the object in the dictionary, or the new name of the saved layer settings.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Rename()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary. It then
    ' renames the object in the dictionary.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add(\"TEST_DICTIONARY\")
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX application.
    ThisDrawing.Application.LoadArx \"MyARXApp.dll\"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = \"OBJ1\"
    className = \"CAsdkDictObject\"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
    ' Rename the object
    dictObj.Rename keyName, \"NewKeyName\"
    
End Sub
Public Sub Example_RenameLayerSettings()
    ' This example renames a set of saved layer settings from
    ' \"ColorLinetype\" to \"OldColorLinetype.\"
	
    Dim oLSM As AcadLayerStateManager
	
    ' Access the LayerStateManager object.
    Set oLSM = ThisDrawing.Application. _
       GetInterfaceObject(\"AutoCAD.AcadLayerStateManager.\" & Left(AcadApplication.Version, 2))
	   
    ' Associate the current drawing database with the 
    ' LayerStateManager object.
    oLSM.SetDatabase ThisDrawing.Database
	
    ' Rename the saved layer settings.
    oLSM.Rename \"ColorLinetype\", \"OldColorLinetype\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Rename()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary. It then
    ;; renames the object in the dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries \"TEST_DICTIONARY\"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj \"MyARXApp.dll\")
    
    ;; Create the custom object in the dictionary
    (setq keyName \"OBJ1\")
    (setq className \"CAsdkDictObject\")
    
    (setq customObj (vla-AddObject dictObj keyName className))
    
    ;; Rename the object
    (vla-Rename dictObj keyName \"NewKeyName\")
)
(defun c:Example_RenameLayerSettings()
    ;; This example renames a set of saved layer settings from
    ;; \"ColorLinetype\" to \"OldColorLinetype.\"
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Access the LayerStateManager object.
    (setq oLSM (vla-GetInterfaceObject acadObj (strcat \"AutoCAD.AcadLayerStateManager.\" (substr (getvar \"ACADVER\") 1 2))))
	   
    ;; Associate the current drawing database with the 
    ;; LayerStateManager object.
    (vla-SetDatabase oLSM (vla-get-Database doc))
	
    (vla-Save oLSM \"ColorLinetype\" (+ acLsColor acLsLineType))
    ;; Rename the saved layer settings.
    (vla-Rename oLSM \"ColorLinetype\" \"OldColorLinetype\")
)
")
("RenameCellStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A3A60F6E-1369-45F3-AF7C-A9240841310B"
                   "
RenameCellStyle Method (ActiveX)
Renames a cell style.
Supported platforms: Windows only
Signature
VBA:
object.RenameCellStyle StringOldName, StringNewName
object
    Type: TableStyle
    The object this method applies to.
StringOldName
    Access: Input-only
    Type: String
    The old cell style name.
StringNewName
    Access: Input-only
    Type: String
    The new cell style name.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("Replace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-87E2F10A-A62D-4CC9-A11C-2E6BDD39D480"
           "
Replace Method (ActiveX)
Replaces an item in the dictionary by a given item.
Supported platforms: Windows only
Signature
VBA:
object.Replace Name, NewObject
object
    Type: Dictionary
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name (keyword) of the object to be replaced.
NewObject
    Access: Input-only
    Type: Object
    The new object.
Return Value (RetVal)
No return value.
Remarks
For example, \"FirstKeyword,\" in the following dictionary:
    MyDictionary
    Keyword Object
    FirstKeyword Object1
    SecondKeyword Object2
has a new object, \"NewObject,\" attached to it:
    MyDictionary
    Keyword Object
    FirstKeyword NewObject
    SecondKeyword Object2
Examples
VBA:
Sub Example_Replace()
    ' This example creates a dictionary and adds
    ' a custom object to that dictionary. It then
    ' replaces the object in the dictionary.
    
    Dim dictObj As AcadDictionary
    Set dictObj = ThisDrawing.Dictionaries.Add(\"TEST_DICTIONARY\")
    
    ' Load the ObjectARX application that defines the custom object.
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the path and name of your ObjectARX application.
    ThisDrawing.Application.LoadArx \"MyARXApp.dll\"
    
    ' Create the custom object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadObject
    
    keyName = \"OBJ1\"
    className = \"CAsdkDictObject\"
    
    Set customObj = dictObj.AddObject(keyName, className)
    
    ' Replace the object from the dictionary with a different object
    Dim newCustomObject As AcadObject
    dictObj.Replace keyName, newCustomObject
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Replace()
    ;; This example creates a dictionary and adds
    ;; a custom object to that dictionary. It then
    ;; replaces the object in the dictionary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Add dictionaries \"TEST_DICTIONARY\"))
    
    ;; Load the ObjectARX application that defines the custom object.
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the path and name of your ObjectARX application.
    (vla-LoadArx acadObj \"MyARXApp.dll\")
    
    ;; Create the custom object in the dictionary
    (setq keyName \"OBJ1\")
    (setq className \"CAsdkDictObject\")
    
    (setq customObj (vla-AddObject dictObj keyName className))
    
    ;; Replace the object from the dictionary with a different object
    (setq newCustomObject (vlax-make-variant))
    (vlax-variant-type newCustomObject vlax-vbObject)
    (vla-Replace dictObj keyName newCustomObject)
)
")
("ReselectSubRegion" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-86EEF224-A6FD-4BD4-9548-A0B7271F5E0D"
                     "
ReselectSubRegion Method (ActiveX)
Returns subentities of a selection set in a table.
Supported platforms: Windows only
Signature
VBA:
object.ReselectSubRegion
object
    Type: Table
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method reselects the current subselection (if any).
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ResetBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-09C1799B-0DE5-43DB-82DF-D12F645EE1F7"
              "
ResetBlock Method (ActiveX)
Resets the dynamic block to the default state.
Supported platforms: Windows only
Signature
VBA:
object.ResetBlock
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this method applies to.
Return Value (RetVal)
No return value.
Remarks
The ComparedReference and ExternalReference objects inherit this method from BlockReference, but this method doesn't affect either of the object types when used.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ResetCellValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-56701DBD-57F3-4A7F-8025-E1A9AFFD0E55"
                  "
ResetCellValue Method (ActiveX)
Reset the cell value for the given row and column.
Supported platforms: Windows only
Signature
VBA:
object.ResetCellValue row, col
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Reverse" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BAA9C80B-2191-4CF1-8F9D-84CC07398532"
           "
Reverse Method (ActiveX)
Reverses the direction of a spline.
Supported platforms: Windows only
Signature
VBA:
object.Reverse
object
    Type: Spline
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Reverse()
    ' This example creates a spline in model space.
    ' It then reverses the spline and therefore the
    ' control point data.
    
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim msg As String
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ZoomAll
    GoSub GETPOINTS
    MsgBox \"Before the reverse the first control point is \" & msg
    ' Reverse the Spline and therefore control point data
    splineObj.Reverse
    ThisDrawing.Regen True
    GoSub GETPOINTS
    MsgBox \"After the reverse the first control point is \" & msg
    Exit Sub
GETPOINTS:
    msg = \"\"
    ' Get the coordinates from the first control point again
    Dim count As Integer
    For count = 0 To 2
        msg = msg & splineObj.GetControlPoint(0)(count) & \", \"
    Next
    msg = VBA.Left(msg, Len(msg) - 2)
    Return
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Reverse()
    ;; This example creates a spline in model space.
    ;; It then reverses the spline and therefore the
    ;; control point data.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				                                 5 5 0
				                                 10 0 0
				                                )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    ;; Get the coordinates from the first control point again
    (setq msg \"\"
          count 0)
    (while (>= 2 count)
        (setq msg (strcat msg (rtos (vlax-safearray-get-element (vlax-variant-value (vla-GetControlPoint splineObj 0)) count) 2) \", \")
              count (1+ count)
        )
    )
    (setq msg (vl-string-right-trim \", \" msg))
    (alert (strcat \"Before the reverse the first control point is \" msg))
    ;; Reverse the Spline and therefore control point data
    (vla-Reverse splineObj)
    (vla-Regen doc :vlax-true)
  
    ;; Get the coordinates from the first control point again
    (setq msg \"\"
          count 0)
    (while (>= 2 count)
        (setq msg (strcat msg (rtos (vlax-safearray-get-element (vlax-variant-value (vla-GetControlPoint splineObj 0)) count) 2) \", \")
              count (1+ count)
        )
    )
    (setq msg (vl-string-right-trim \", \" msg))
    (alert (strcat \"After the reverse the first control point is \" msg))
)
")
("Rotate" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A060558E-092C-403D-8A63-276BAB901F5C"
          "
Rotate Method (ActiveX)
Rotates an object around a base point.
Supported platforms: Windows only
Signature
VBA:
object.Rotate BasePoint, RotationAngle
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
BasePoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the point through which the axis of rotation is defined as parallel to the Z axis of the UCS.
RotationAngle
    Access: Input-only
    Type: Double
    The angle in radians to rotate the object. This angle determines how far an object rotates around the base point relative to its current location.
Return Value (RetVal)
No return value.
Remarks
Examples
VBA:
Sub Example_Rotate()
    ' This example creates a lightweight polyline
    ' and then rotates that polyline.
    
    ' Create the polyline
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    points(0) = 1: points(1) = 2
    points(2) = 1: points(3) = 3
    points(4) = 2: points(5) = 3
    points(6) = 3: points(7) = 3
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 2
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ZoomAll
            
    MsgBox \"Rotate the polyline by 45 degrees.\", , \"Rotate Example\"
    
    ' Define the rotation
    Dim basePoint(0 To 2) As Double
    Dim rotationAngle As Double
    basePoint(0) = 4: basePoint(1) = 4.25: basePoint(2) = 0
    rotationAngle = 0.7853981   ' 45 degrees
    
    ' Rotate the polyline
    plineObj.Rotate basePoint, rotationAngle
    
    ZoomAll
    MsgBox \"Rotation completed.\", , \"Rotate Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Rotate()
    ;; This example creates a lightweight polyline
    ;; and then rotates that polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 1
                                  1 3
                                  2 3
                                  3 3
                                  4 4
                                  4 2
                                 )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    (vla-ZoomAll acadObj)
            
    (alert \"Rotate the polyline by 45 degrees.\")
    
    ;; Define the rotation
    (setq basePoint (vlax-3d-point 4 4.25 0)
          rotationAngle 0.7853981)   ;; 45 degrees
    
    ;; Rotate the polyline
    (vla-Rotate plineObj basePoint rotationAngle)
    
    (vla-ZoomAll acadObj)
    (alert \"Rotation completed.\")
)
")
("Rotate3D" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1057C914-CB4F-43C9-841F-F80207D9398E"
            "
Rotate3D Method (ActiveX)
Rotates an object around a 3D axis. Point1 and Point2 define the line that becomes the axis of rotation.
Supported platforms: Windows only
Signature
VBA:
object.Rotate3D Point1, Point2, RotationAngle
object
    Type: All drawing objects, AttributeReference, Dimension
    The object this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point of the axis line.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point of the axis line.
RotationAngle
    Access: Input-only
    Type: Double
    The angle in radians to rotate the object about the selected axis.
Return Value (RetVal)
No return value.
Remarks
Examples
VBA:
Sub Example_Rotate3D()
    ' This example creates a box in model space.
    ' It then rotates the box about an axis.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ThisDrawing.Regen True
        
    ' Define the rotation axis with two points
    Dim rotatePt1(0 To 2) As Double
    Dim rotatePt2(0 To 2) As Double
    Dim rotateAngle As Double
    
    rotatePt1(0) = -3: rotatePt1(1) = 4: rotatePt1(2) = 0
    rotatePt2(0) = -3: rotatePt2(1) = -4: rotatePt2(2) = 0
    rotateAngle = 30
    rotateAngle = rotateAngle * 3.141592 / 180#
    
    ' Draw a line between the two axis points so that it is visible.
    ' This is optional. It is not required for the rotation.
    Dim axisLine As AcadLine
    Set axisLine = ThisDrawing.ModelSpace.AddLine(rotatePt1, rotatePt2)
    axisLine.Update
    MsgBox \"Rotate the box 30 degrees about the axis shown.\", , \"Rotate3D Example\"
    ' Rotate the box
    boxObj.Rotate3D rotatePt1, rotatePt2, rotateAngle
    ThisDrawing.Regen True
    MsgBox \"The box is rotated 30 degrees.\", , \"Rotate3D Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Rotate3D()
    ;; This example creates a box in model space.
    ;; It then rotates the box about an axis.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
        
    ;; Define the rotation axis with two points
    (setq rotatePt1 (vlax-3d-point -3 4 0)
          rotatePt2 (vlax-3d-point -3 -4 0)
          rotateAngle (/ (* 30 3.141592) 180))
    
    ;; Draw a line between the two axis points so that it is visible.
    ;; This is optional. It is not required for the rotation.
    (setq axisLine (vla-AddLine modelSpace rotatePt1 rotatePt2))
    (vla-Update axisLine)
    (alert \"Rotate the box 30 degrees about the axis shown.\")
    ;; Rotate the box
    (vla-Rotate3D boxObj rotatePt1 rotatePt2 rotateAngle)
    (vla-Regen doc :vlax-true)
    (alert \"The box is rotated 30 degrees.\")
)
")
("RunMacro" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-638E14CA-798C-42BC-8F2B-5E9D6952C707"
            "
RunMacro Method (ActiveX)
Runs a VBA macro from the Application object.
Supported platforms: Windows only
Signature
VBA:
object.RunMacro MacroPath
object
    Type: Application
    The object this method applies to.
MacroPath
    Access: Input-only
    Type: String
    A string representing the calling sequence of the macro to run. The calling sequence must have the following syntax, where [] represent optional parameters:
    [Filename.dvb.][ProjectName.][ModuleName.]MacroName
    Note: If Filename.dvb is followed by ProjectName, separate the names with an exclamation point instead of a period, as in the following example:
    Filename.dvb!ProjectName
    The Filename.dvb specified will be loaded if it is not already loaded. If the path to the Filename.dvb is not specified, the AutoCAD search path is searched to locate the file. If ProjectName is not specified, all currently loaded projects are searched to locate the macro.
Return Value (RetVal)
No return value.
Remarks
To associate a macro with a popup menu or toolbar item, use the Macro property.
Examples
VBA:
Sub Example_RunMacro()
    ' This example loads a DVB file and runs a macro
    ' contained in the file using the RunMacro method.
    '
    ' This example uses a DVB file named drawline.dvb.
    ' You should change the example to use a file on your computer.
    '
    ' * Note: If you open a DVB file and then run the example to load it, there will be an error
    ' when the DVB file is unloaded.
    Dim FileName As String
    
    FileName = \"c:\drawline.dvb\"
    
    ' Load a sample VBA project DVB file
    LoadDVB FileName
    
    ' Run the drawline sample macro
    RunMacro \"Module1.Drawline\"
    
    ' Unload the drawline VBA project DVB file now that we are done
    UnloadDVB FileName
    
    MsgBox \"The DVB file has been run!\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RunMacro()
    ;; This example loads a DVB file and runs a macro
    ;; contained in the file using the RunMacro method.
    ;;
    ;; This example uses a DVB file named drawline.dvb.
    ;; You should change the example to use a file on your computer.
    ;;
    ;; * Note: If you open a DVB file and then run the example to load it, there will be an error
    ;; when the DVB file is unloaded.
    (setq acadObj (vlax-get-acad-object))
    (setq fileName (findfile \".\\Sample\\VBA\\drawline.dvb\"))
    
    ;; Load a sample VBA project DVB file
    (vla-LoadDVB acadObj fileName)
    
    ;; Run the drawline sample macro
    (vla-RunMacro acadObj \"Module1.Drawline\")
    
    ;; Unload the drawline VBA project DVB file now that we are done
    (vla-UnloadDVB acadObj fileName)
    
    (alert \"The DVB file has been run!\")
)
")
("Save" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DA24D47F-FB6C-4C0B-8DDB-87D0AD4455F0"
        "
Save Method (ActiveX)
Saves a document or group of layer property settings; no longer supported for menu groups.
Supported platforms: Windows only
Signature - Document
VBA:
object.Save
object
    Type: Document
    The object this method applies to.
Signature - LayerStateManager
VBA:
object.Save Name, Mask
object
    Type: LayerStateManager
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name to be assigned to the saved layer settings.
Mask
    Access: Input-only
    Type: AcLayerStateMask enum
    A number representing the layer properties to be saved and restored. Use the following constants to identify layer properties:
        acLsAll: All layer properties
        acLsColor: Color
        acLsFrozen: Frozen or thawed
        acLsLineType: Linetype
        acLsLineWeight: Lineweight
        acLsLocked: Locked or unlocked
        acLsNewViewport: New viewport layers frozen or thawed
        acLsNone: None
        acLsOn: On or off
        acLsPlot: Plotting on or off
        acLsPlotStyle: Plot style
Signature - MenuGroup
VBA:
object.Save MenuFileType
object
    Type: MenuGroup
    The object this method applies to.
MenuFileType
    Access: Input-only
    Type: AcMenuFileType enum
        acMenuFileCompiled
        acMenuFileSource
Return Value (RetVal)
No return value.
Remarks
Document: When you save a document to a secure URL, a dialog box prompts the user for the necessary password information.
Menugroup: This method has no effect for menu groups in AutoCAD 2006 or later. This method will be removed from the MenuGroup object in a future release.
Examples
VBA:
Sub Example_Save()
    ' The following example saves current drawing
    
    ThisDrawing.Save
    
End Sub
Sub Example_Save_LayerSettings()
    ' The following code saves the color and linetype settings
    ' of the current layer.
    Dim oLSM As AcadLayerStateManager
    ' Access the LayerStateManager object
    Set oLSM = ThisDrawing.Application. _
       GetInterfaceObject(\"AutoCAD.AcadLayerStateManager.\" & Left(AcadApplication.Version, 2))
    ' Associate the current drawing database with LayerStateManager
    oLSM.SetDatabase ThisDrawing.Database
    oLSM.Save \"ColorLinetype\", acLsColor + acLsLineType
End Sub
Visual LISP:
(defun c:Example_Save()
    ;; The following example saves current drawing
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-Save doc)
)
(defun c:Example_Save_LayerSettings()
    ;; The following code saves the color and linetype settings
    ;; of the current layer.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Access the LayerStateManager object
    (setq oLSM (vla-GetInterfaceObject acadObj (strcat \"AutoCAD.AcadLayerStateManager.\" (substr (getvar \"ACADVER\") 1 2))))
    ;; Associate the current drawing database with LayerStateManager
    (vla-SetDatabase oLSM (vla-get-Database doc))
    (vla-Save oLSM \"ColorLinetype\" (+ acLsColor acLsLineType))
)
")
("SaveAs" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ED0D0B02-25FC-4ED2-9DEE-2B0C9AA9416A"
          "
SaveAs Method (ActiveX)
Saves the document to a specified file; no longer supported for menu groups.
Supported platforms: Windows only
Signature - Document
VBA:
object.SaveAs FileName [, FileType] [, SecurityParams]
object
    Type: Document
    The object this method applies to.
FileName
    Access: Input-only
    Type: String
    The full path and file name, or valid URL address, for the file. The active document takes on the new name.
FileType
    Access: Input-only; optional
    Type: AcSaveAsType enum
        acR12_dxf: AutoCAD R12 DXF (*.dxf)
        acR14_dwg: AutoCAD R14 DWG (*.dwg)
        ac2000_dwg: AutoCAD 2000 DWG (*.dwg)
        ac2000_dxf: AutoCAD 2000 DXF (*.dxf)
        ac2000_Template: AutoCAD 2000 Drawing Template File (*.dwt)
        ac2004_dwg: AutoCAD 2004 DWG (*.dwg)
        ac2004_dxf: AutoCAD 2004 DXF (*.dxf)
        ac2004_Template: AutoCAD 2004 Drawing Template File (*.dwt)
        ac2007_dwg: AutoCAD 2007 DWG (*.dwg)
        ac2007_dxf: AutoCAD 2007 DXF (*.dxf)
        ac2007_Template: AutoCAD 2007 Drawing Template File (*.dwt)
        ac2010_dwg: AutoCAD 2010 DWG (*.dwg)
        ac2010_dxf: AutoCAD 2010 DXF (*.dxf)
        ac2010_Template: AutoCAD 2010 Drawing Template File (*.dwt)
        ac2013_dwg: AutoCAD 2013 DWG (*.dwg)
        ac2013_dxf: AutoCAD 2013 DXF (*.dxf)
        ac2013_Template: AutoCAD 2013 Drawing Template File (*.dwt)
        ac2018_dwg: AutoCAD 2018 DWG (*.dwg)
        ac2018_dxf: AutoCAD 2018 DXF (*.dxf)
        ac2018_Template: AutoCAD 2018 Drawing Template File (*.dwt)
        acNative: A synonym for the latest drawing release. In this release, this value equals ac2018_dwg.
SecurityParams
    Access: Input-only; optional
    Type: Variant (a SecurityParams object)
    Security settings used to specify a digital signature for the drawing.
    Note: Starting with AutoCAD-2016 based products, the ability to password protect a drawing file has been discontinued. Trying to password protect a drawing file in an AutoCAD-2016 based product results in an error. The security parameters related to password protection must be removed to save a drawing file.
Signature - MenuGroup
VBA:
object.SaveAs MenuFileName, MenuFileType
object
    Type: MenuGroup
    The object this method applies to.
MenuFileName
    Access: Input-only
    Type: String
    The full path and file name for the menugroup to be saved to.
MenuFileType
    Access: Input-only
    Type: AcMenuFileType enum
        acMenuFileCompiled
        acMenuFileSource
Return Value (RetVal)
No return value.
Remarks
The default file type for documents is ac2013_dwg. The value acR14_dxf is obsolete.
Documents can be saved only as files with the extensions indicated above. To save a document in a different file type, use the Export method.
When saving to a secure URL, a dialog box prompts the user for the necessary password information. Message boxes appear if the user has not suppressed this activity in the browser.
Menu groups cannot be saved in AutoCAD 2006 and later releases. This method will be removed from the MenuGroup object in a future release.
Examples
VBA:
Sub Example_SaveAs()
    ' The following example saves current drawing as \"test.dwg\"
    
    ThisDrawing.SaveAs \"test.dwg\"
    
End Sub
Visual LISP:
(defun c:Example_SaveAs()
    ;; The following example saves current drawing as \"test.dwg\"
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-SaveAs doc \"test.dwg\")
)
")
("ScaleEntity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F5A968AB-47BC-4D86-A04D-5985FF217596"
               "
ScaleEntity Method (ActiveX)
Scales an object equally in the X, Y, and Z directions.
Supported platforms: Windows only
Signature
VBA:
object.ScaleEntity BasePoint, ScaleFactor
object
    Type: All drawing objects, AttributeReference, Dimension
    The objects this method applies to.
BasePoint
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the base point.
ScaleFactor
    Access: Input-only
    Type: Double
    The factor by which to scale the object. The dimensions of the object are multiplied by the scale factor. A scale factor greater than 1 enlarges the object. A scale factor between 0 and 1 reduces the object. The scale factor must be greater than 0.0.
Return Value (RetVal)
No return value.
Remarks
ScaleFactor = 0.5 and ScaleFactor = 2
Examples
VBA:
Sub Example_ScaleEntity()
    ' This example creates a lightweight polyline
    ' and then scales that polyline.
    
    ' Create the polyline
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    points(0) = 1: points(1) = 2
    points(2) = 1: points(3) = 3
    points(4) = 2: points(5) = 3
    points(6) = 3: points(7) = 3
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 2
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ZoomAll
            
    MsgBox \"Scale the polyline by 0.5\", , \"ScaleEntity Example\"
    
    ' Define the scale
    Dim basePoint(0 To 2) As Double
    Dim scalefactor As Double
    basePoint(0) = 4: basePoint(1) = 4.25: basePoint(2) = 0
    scalefactor = 0.5
    
    ' Scale the polyline
    plineObj.ScaleEntity basePoint, scalefactor
    
    ZoomAll
    MsgBox \"Scale completed.\", , \"ScaleEntity Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ScaleEntity()
    ;; This example creates a lightweight polyline
    ;; and then scales that polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 2
                                  1 3
                                  2 3
                                  3 3
                                  4 4
                                  4 2
                                 )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    (vla-ZoomAll acadObj)
            
    (alert \"Scale the polyline by 0.5\")
    
    ;; Define the scale
    (setq basePoint (vlax-3d-point 4 4.25 0)
          scalefactor 0.5)
    
    ;; Scale the polyline
    (vla-ScaleEntity plineObj basePoint scalefactor)
    
    (vla-ZoomAll acadObj)
    (alert \"Scale completed.\")
)
")
("SectionSolid" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FB1253E1-770C-4685-8EE4-81D241F405D8"
                "
SectionSolid Method (ActiveX)
Creates a region that represents the intersection of a plane defined by three points and the solid.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.SectionSolid(Point1, Point2, Point3)
object
    Type: 3DSolid
    The object this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point.
Point3
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the third point.
Return Value (RetVal)
Type: Region
The resulting section as a region.
Remarks
Examples
VBA:
Sub Example_SectionSolid()
    ' This example creates a box in model space.
    ' It then sections the box based on a plane
    ' defined by three points. The section is returned
    ' as a region.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Define the section plane with three points
    Dim sectionPt1(0 To 2) As Double
    Dim sectionPt2(0 To 2) As Double
    Dim sectionPt3(0 To 2) As Double
    
    sectionPt1(0) = 1.5: sectionPt1(1) = 7.5: sectionPt1(2) = 0
    sectionPt2(0) = 1.5: sectionPt2(1) = 7.5: sectionPt2(2) = 10
    sectionPt3(0) = 8.5: sectionPt3(1) = 2.5: sectionPt3(2) = 10
    
    ' Section the box
    Dim sectionObj As AcadRegion
    Set sectionObj = boxObj.SectionSolid(sectionPt1, sectionPt2, sectionPt3)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SectionSolid()
    ;; This example creates a box in model space.
    ;; It then sections the box based on a plane
    ;; defined by three points. The section is returned
    ;; as a region.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Define the section plane with three points
    (setq sectionPt1 (vlax-3d-point 1.5 7.5 0)
          sectionPt2 (vlax-3d-point 1.5 7.5 10)
          sectionPt3 (vlax-3d-point 8.5 2.5 10))
    
    ;; Section the box
    (setq sectionObj (vla-SectionSolid boxObj sectionPt1 sectionPt2 sectionPt3))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("Select" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4CDE43DD-E3EF-4EF8-B377-4B9ED03E4C96"
          "
Select Method (ActiveX)
Selects objects and places them into a selection set, or selects a cell in a table.
Supported platforms: Windows only
Signature - SelectionSet
VBA:
object.Select Mode [, Point1] [, Point2] [, FilterType, FilterData]
object
    Type: SelectionSet
    The object this method applies to.
Mode
    Access: Input-only
    Type: AcSelect enum
        acSelectionSetWindow
        acSelectionSetCrossing
        acSelectionSetPrevious
        acSelectionSetLast
        acSelectionSetAll
Point1
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates, or array of coordinates, specifying Point1. See the mode definitions for the proper use of Point1.
Point2
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying Point2. See the mode definitions for the proper use of Point2.
FilterType
    Access: Input-only; optional
    Type: Variant
    A DXF group code specifying the type of filter to use.
FilterData
    Access: Input-only; optional
    Type: Variant
    The value to filter on.
Signature - Table
VBA:
object.Select wpt, wvwVec, wvwxvec, wxaper, wyaper, allowOutside, resultRowIndex, resultColumnIndex
object
    Type: Table
    The object this method applies to.
wpt
    Access: Input-only
    Type: Variant
    3D point in WCS specifying the input pick point.
wvwVec
    Access: Input-only
    Type: Variant
    3D vector in WCS specifying the view direction for the hit test.
wvwxvec
    Access: Input-only
    Type: Variant
    3D vector in WCS specifying the view orientation for the hit test.
wxaper
    Access: Output-only
    Type: Double
    Width of aperture box centered at the hit point for the hit test; reserved for future use.
wyaper
    Access: Output-only
    Type: Double
    Height of aperture box centered at the hit point for the hit test; reserved for future use.
allowOutside
    Access: Input-only
    Type: Boolean
        True: Pick point outside the table will select a cell.
        False: Pick point outside the table will not select a cell.
resultRowIndex
    Access: Output-only
    Type: Long
    Row index of the selected cell.
resultColumnIndex
    Access: Output-only
    Type: Long
    Column index of the selected cell.
Return Value (RetVal)
No return value.
Remarks - SelectionSet
This method supports the filtering mechanism.
The following selection modes are available:
    Window: Selects all objects completely inside a rectangular area whose corners are defined by Point1 and Point2.
    Crossing: Selects objects within and crossing a rectangular area whose corners are defined by Point1 and Point2.
    Previous: Selects the most recent selection set. This mode is ignored if you switch between paper space and model space and attempt to use the selection set.
    Last: Selects the most recently created visible objects.
    All: Selects all objects.
For more selection mode options, see the SelectByPolygon, SelectAtPoint, and SelectOnScreen methods.
Remarks - Table
This function selects a cell in the table by specifying a point, viewing direction, and orientation. The row and column index of the selected cell are returned in resultRowIndex and resultColumnIndex.
Examples
VBA:
Sub Example_Select()
    ' This example adds members to a selection set, first by crossing and
    ' then by filtering for circles.
    
    ' Create the selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SSET\")
    
    ' Add all object to the selection set that lie within a crossing of (28,17,0) and
    ' (-3.3, -3.6,0) 
    Dim mode As Integer
    Dim corner1(0 To 2) As Double
    Dim corner2(0 To 2) As Double
    
    mode = acSelectionSetCrossing
    corner1(0) = 28: corner1(1) = 17: corner1(2) = 0
    corner2(0) = -3.3: corner2(1) = -3.6: corner2(2) = 0
    ssetObj.Select mode, corner1, corner2
    
    ' Add all the Circles to the selection set that lie within the crossing of (28,17,0) and
    ' (-3.3, -3.6,0) by filtering from the current drawing
    Dim gpCode(0) As Integer
    Dim dataValue(0) As Variant
    gpCode(0) = 0
    dataValue(0) = \"Circle\"
    
    Dim groupCode As Variant, dataCode As Variant
    groupCode = gpCode
    dataCode = dataValue
    
    ssetObj.Select mode, corner1, corner2, groupCode, dataCode
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Select()
    ;; This example adds members to a selection set, first by crossing and
    ;; then by filtering for circles.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SSET\"))
    
    ;; Add all object to the selection set that lie within a crossing of (28,17,0) and
    ;; (-3.3, -3.6,0)
    (setq mode acSelectionSetCrossing
          corner1 (vlax-3d-point 28 17 0)
          corner2 (vlax-3d-point -3.3 -3.6 0))
    (vla-Select ssetObj mode corner1 corner2)
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Clear ssetObj)
  
    ;; Add all the Circles to the selection set that lie within the crossing of (28,17,0) and
    ;; (-3.3, -3.6,0) by filtering from the current drawing
    (setq gpCode (vlax-make-safearray vlax-vbInteger '(0 . 0)))
    (vlax-safearray-put-element gpCode 0 0)
    (setq dataValue (vlax-make-safearray vlax-vbVariant '(0 . 0)))
    (vlax-safearray-put-element dataValue 0 \"Circle\")
    
    (vla-Select ssetObj mode corner1 corner2 gpCode dataValue)
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Delete ssetObj)
)
")
("SelectAtPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E5B81EA6-308F-4F9E-9318-4A4B238092F0"
                 "
SelectAtPoint Method (ActiveX)
Selects an object passing through a given point and places it into a selection set.
Supported platforms: Windows only
Signature
VBA:
object.SelectAtPoint Point, FilterType, FilterData
object
    Type: SelectionSet
    The object this method applies to.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D UCS coordinates specifying the point to use for the selection.
FilterType
    Access: Input-only; optional
    Type: Variant
    A DXF group code specifying the type of filter to use.
FilterData
    Access: Input-only; optional
    Type: Variant
    The value to filter on.
Return Value (RetVal)
No return value.
Remarks
This method supports the filtering mechanism.
The PICKBOX system variable affects object selection.
For more selection mode options, see the Select, SelectByPolygon, and SelectOnScreen methods.
Examples
VBA:
Sub Example_SelectAtPoint()
    ' This example adds objects to a selection set by identifying a point.
    ' At first all objects at the point are added to the selection set. Then
    ' only circle objects at the point are added to the selection set.
    
    ' Create the selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SSET1\")
   
    ' Add to the selection set all the objects that lie at point(6.8,9.4,0) 
    Dim point(0 To 2) As Double
    point(0) = 6.8: point(1) = 9.4: point(2) = 0
    ssetObj.SelectAtPoint point
    
    ' Add to the selection set all the Circles that lie at point (6.8,9.4,0) 
    Dim gpCode(0) As Integer
    Dim dataValue(0) As Variant
    gpCode(0) = 0
    dataValue(0) = \"Circle\"
    
    Dim groupCode As Variant, dataCode As Variant
    groupCode = gpCode
    dataCode = dataValue
    
    ssetObj.SelectAtPoint point, groupCode, dataCode
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SelectAtPoint()
    ;; This example adds objects to a selection set by identifying a point.
    ;; At first all objects at the point are added to the selection set. Then
    ;; only circle objects at the point are added to the selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_SSET1\"))
   
    ;; Add to the selection set all the objects that lie at point(6.8,9.4,0)
    (setq point (vlax-3d-point 6.8 9.4 0))
    (vla-SelectAtPoint ssetObj point)
  
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Clear ssetObj)
    
    ;; Add to the selection set all the Circles that lie at point (6.8,9.4,0)
    (setq gpCode (vlax-make-safearray vlax-vbInteger '(0 . 0)))
    (vlax-safearray-put-element gpCode 0 0)
    (setq dataValue (vlax-make-safearray vlax-vbVariant '(0 . 0)))
    (vlax-safearray-put-element dataValue 0 \"Circle\")
    
    (vla-SelectAtPoint ssetObj point gpCode dataValue)
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Delete ssetObj)
)
")
("SelectByPolygon" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D8002585-5D08-45E2-AF6C-6E894FA3D463"
                   "
SelectByPolygon Method (ActiveX)
Selects objects within a fence and adds them to the selection set.
Supported platforms: Windows only
Signature
VBA:
object.SelectByPolygon Mode, PointsList [, FilterType, FilterData]
object
    Type: SelectionSet
    The object this method applies to.
Mode
    Access: Input-only
    Type: AcSelect enum
        acSelectionSetFence
        acSelectionSetWindowPolygon
        acSelectionSetCrossingPolygon
PointsList
    Access: Input-only
    Type: Variant (three-element array of doubles)
    An array of 3D WCS coordinates specifying the selection fence.
FilterType
    Access: Input-only; optional
    Type: Variant
    A DXF group code specifying the type of filter to use.
FilterData
    Access: Input-only; optional
    Type: Variant
    The value to filter on.
Return Value (RetVal)
No return value.
Remarks
The following selection modes are available:
    Fence: Selects all objects crossing a selection fence. The fence is defined by coordinates in PointsList.
    WindowPolygon: Selects objects within a polygon defined by PointsList.
    CrossingPolygon: Selects objects within and crossing an area defined by a polygon. Use PointsList to define the coordinates of the polygon. AutoCAD will close the last vector of the polygon. A polygon definition cannot cross itself.
This method supports the filtering mechanism.
For more selection mode options, see the Select, SelectAtPoint, and SelectOnScreen methods.
Examples
VBA:
Sub Example_SelectByPolygon()
    ' This example adds objects to a selection set by defining a polygon.
    
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SSET2\")
     
    ' Add to the selection set all the objects that lie within a fence 
    Dim mode As Integer
    Dim pointsArray(0 To 11) As Double
    mode = acSelectionSetFence
    pointsArray(0) = 28.2: pointsArray(1) = 17.2: pointsArray(2) = 0
    pointsArray(3) = -5: pointsArray(4) = 13: pointsArray(5) = 0
    pointsArray(6) = -3.3: pointsArray(7) = -3.6: pointsArray(8) = 0
    pointsArray(9) = 28: pointsArray(10) = -3: pointsArray(11) = 0
    
    ssetObj.SelectByPolygon mode, pointsArray
    
    ' Add to the selection set all the Circles that lie within fence 
    ReDim gpCode(0 To 1) As Integer
    gpCode(0) = 0
    gpCode(1) = 10
    
    Dim pnt(0 To 2) As Double
    pnt(0) = 3: pnt(1) = 6: pnt(2) = 0
    
    ReDim dataValue(0 To 1) As Variant
    dataValue(0) = \"Circle\"
    dataValue(1) = pnt
    
    Dim groupCode As Variant, dataCode As Variant
    groupCode = gpCode
    dataCode = dataValue
    
    ssetObj.SelectByPolygon mode, pointsArray, groupCode, dataCode
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SelectByPolygon()
    ;; This example adds objects to a selection set by defining a polygon.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_SSET2\"))
     
    ;; Add to the selection set all the objects that lie within a fence 
    (setq mode acSelectionSetFence)
    (setq pointsArray (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill pointsArray '(28.2 17.2 0
                                       -5 13 0
                                       -3.3 -3.6 0
                                       28 -3 0
                                      )
    )
    
    (vla-SelectByPolygon ssetObj mode pointsArray)
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Clear ssetObj)
    ;; Add to the selection set all the Circles that lie within fence and at point 3,6
    (setq gpCode (vlax-make-safearray vlax-vbInteger '(0 . 1)))
    (vlax-safearray-put-element gpCode 0 0)
    (vlax-safearray-put-element gpCode 1 10)
    (setq pnt (vlax-3d-point 3 6 0))
    (setq dataValue (vlax-make-safearray vlax-vbVariant '(0 . 1)))
    (vlax-safearray-put-element dataValue 0 \"Circle\")
    (vlax-safearray-put-element dataValue 1 pnt)
    
    (vla-SelectByPolygon ssetObj mode pointsArray gpCode dataValue)
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Delete ssetObj)
)
")
("SelectOnScreen" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C4B442A3-D6A9-48FA-8C86-03D49A3B2ED7"
                  "
SelectOnScreen Method (ActiveX)
Prompts the user to pick an object from the screen.
Supported platforms: Windows only
Signature
VBA:
object.SelectOnScreen [FilterType, FilterData]
object
    Type: SelectionSet
    The object this method applies to.
FilterType
    Access: Input-only; optional
    Type: Variant
    A DXF group code specifying the type of filter to use.
FilterData
    Access: Input-only; optional
    Type: Variant
    The value to filter on.
Return Value (RetVal)
No return value.
Remarks
This method supports the filtering mechanism.
AutoCAD's default prompt for picking an object will be used automatically.
For more selection mode options, see the Select, SelectByPolygon, and SelectAtPoint methods.
Examples
VBA:
Sub Example_SelectOnScreen()
    ' This example adds objects to a selection set by prompting the user
    ' to select ones to add.
    
    AppActivate ThisDrawing.Application.Caption
    
    ' Create the selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_SSET\")
    
    ' Add objects to a selection set by prompting user to select on the screen
    ssetObj.SelectOnScreen
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SelectOnScreen()
    ;; This example adds objects to a selection set by prompting the user
    ;; to select ones to add.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_SSET\"))
    
    ;; Add objects to a selection set by prompting user to select on the screen
    (vla-SelectOnScreen ssetObj)
    
    (alert (strcat \"Objects selected: \" (itoa (vla-get-Count ssetObj))))
    (vla-Delete ssetObj)
)
")
("SelectSubRegion" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-97DD5958-645A-4236-9674-D52A2B7E7A60"
                   "
SelectSubRegion Method (ActiveX)
Selects a set of cells in a table.
Supported platforms: Windows only
Signature
VBA:
object.SelectSubRegion wpt1, wpt2, wvwVec, wvwxVec, seltype, bIncludeCurrentSelection, rowMin, rowMax, colMin, colMax
object
    Type: Table
    The object this method applies to.
wpt1
    Access: Input-only
    Type: Variant
    3D point in WCS specifying the first corner point of the window box selection.
wpt2
    Access: Input-only
    Type: Variant
    3D point in WCS specifying the second corner point of the window box selection.
wvwvec
    Access: Input-only
    Type: Variant
    3D vector in WCS specifying the view direction of the selection.
wvwxvec
    Access: Input-only
    Type: Variant
    3D vector in WCS specifying the view orientation of the hit test.
seltype
    Access: Input-only
    Type: AcSelectType enum
    The selection type.
        acCrossing: Cross-selection type
        acWindow: Window-selection type
bincludecurrentselection
    Access: Input-only
    Type: Boolean
        True: Selected cells returned will include currently selected cells and newly selected cells.
        False: Only newly selected cells are returned.
rowMin
    Access: Output-only
    Type: Long
    The zero-based lower bound of row index.
rowMax
    Access: Output-only
    Type: Long
    The zero-based upper bound of row index.
colMin
    Access: Output-only
    Type: Long
    The zero-based lower bound of column index.
colMax
    Access: Output-only
    Type: Long
    The zero-based upper bound of column index.
Return Value (RetVal)
No return value.
Remarks
The row and column index of the upper and lower bounds of the selected region are returned in rowMin, rowMax, colMin, and colMax.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SendCommand" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E13A580D-04CA-46C1-B807-95BB461A0A57"
               "
SendCommand Method (ActiveX)
Sends a command string from a VB or VBA application to the document for processing.
Supported platforms: Windows only
Signature
VBA:
object.SendCommand Command
object
    Type: Document
    The object this method applies to.
Command
    Access: Input-only
    Type: String
    The command to send to the document.
Return Value (RetVal)
No return value.
Remarks
Use a space or the ASCII carriage return character (vbCr) at the end of the command string to end the command; this is equivalent to pressing Enter on the keyboard.
This method processes any AutoCAD command-line function, including AutoLISP expressions.
If the drawing specified is not active, it will be made active.
This method is generally synchronous. However, if the command sent with this method requires any user interaction (such as picking a point on the screen) then this method will continue as soon as the user input begins. The command will then continue to be processed asynchronously.
When this method is called from an event handler it is processed asynchronously.
You should never use this method to issue a command for which there is an ActiveX method available. For example, do not use SendCommand \"VBALOAD \". Instead, use the LoadDVB method.
Examples
VBA:
Sub Example_SendCommand()
   ' This example sends a command for evaluation to the AutoCAD command line
   ' of a particular drawing 
   
   ' Create a Circle in the active drawing and 
   ' zoom to display the entire circle
   ThisDrawing.SendCommand \"_Circle\" & vbCr & \"2,2,0\" & vbCr & \"4\" & vbCr
   ThisDrawing.SendCommand \"_zoom\" & vbCr & \"a\" & vbCr
   
   ' Refresh view
   ThisDrawing.Regen acAllViewports
   
   MsgBox \"A circle command has been sent to the command line of the current drawing.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SendCommand()
    ;; This example sends a command for evaluation to the AutoCAD command line
    ;; of a particular drawing 
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a Circle in the active drawing and 
    ;; zoom to display the entire circle
    (vla-SendCommand doc (strcat \"_circle 2,2,0 4 \"))
    (vla-SendCommand doc (strcat \"_zoom a \"))
   
    ;; Refresh view
    (vla-Regen doc acAllViewports)
   
    (alert \"A circle command has been sent to the command line of the current drawing.\")
)
")
("SendModelessOperationEnded" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B7C60BF7-7C90-4AFA-B908-AAC468969E39"
                              "
SendModelessOperationEnded Method (ActiveX)
Indicates a modeless operation has ended.
Supported platforms: Windows only
Signature
VBA:
object.SendModelessOperationEnded Context
object
    Type: Utility
    The object this method applies to.
Context
    Access: Output-only
    Type: String
    A text value passed to the SendModelessOperationStart method.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SendModelessOperationStart" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1C9B3704-7712-4E12-B722-372700F71A59"
                              "
SendModelessOperationStart Method (ActiveX)
Indicates a modeless operation will start.
Supported platforms: Windows only
Signature
VBA:
object.SendModelessOperationStart Context
object
    Type: Utility
    The object this method applies to.
Context
    Access: Input-only
    Type: String
    The text value for the SendModelessOperationEnded method to return after the modeless operation has ended.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetAlignment" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2B85EBC7-1D82-468A-A5B7-455423B686A2"
                "
SetAlignment Method (ActiveX)
Sets a cell alignment for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetAlignment rowTypes, cellAlignment
object
    Type: Table, TableStyle
    The objects this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
cellAlignment
    Access: Input-only
    Type: AcCellAlignment enum
    The alignment to use for the row types.
        acBottomCenter: Centers text at a point based on the bottom of the text.
        acBottomLeft: Left-justifies text at a point based on the bottom of the text.
        acBottomRight: Right-justifies text at a point based on the bottom of the text.
        acMiddleCenter: Centers text at a point based on the middle of the text.
        acMiddleLeft: Left-justifies text at a point based on the middle of the text.
        acMiddleRight: Right-justifies text at a point based on the middle of the text.
        acTopCenter: Centers text at a point based on the top of the text.
        acTopLeft: Left-justifies text at a point based on the top of the text.
        acTopRight: Right-justifies text at a point based on the top of the text.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetAlignment()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetAlignment()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)
)
")
("SetAlignment2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1B24A60E-C217-4349-BE68-96CCE30C8CD1"
                 "
SetAlignment2 Method (ActiveX)
Sets the cell alignment.
Supported platforms: Windows only
Signature
VBA:
object.SetAlignment2 bstrCellStyle, cellAlignment
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The cell style which needs an alignment change.
cellAlignment
    Access: Input-only
    Type: AcCellAlignment enum
    The new cell alignment.
        acBottomCenter: Centers text at a point based on the bottom of the text.
        acBottomLeft: Left-justifies text at a point based on the bottom of the text.
        acBottomRight: Right-justifies text at a point based on the bottom of the text.
        acMiddleCenter: Centers text at a point based on the middle of the text.
        acMiddleLeft: Left-justifies text at a point based on the middle of the text.
        acMiddleRight: Right-justifies text at a point based on the middle of the text.
        acTopCenter: Centers text at a point based on the top of the text.
        acTopLeft: Left-justifies text at a point based on the top of the text.
        acTopRight: Right-justifies text at a point based on the top of the text.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetAlignment2()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment2 \"Title\", acBottomRight
      
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetAlignment2()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment2 customObj \"Title\" acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)
)
")
("SetAutoScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DFC22763-C461-4C7A-9BC0-C685BBC2521D"
                "
SetAutoScale Method (ActiveX)
Sets the value specifying whether auto scale is used in the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetAutoScale row, col, bValue
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
bValue
    Access: Input-only
    Type: Boolean
        True: Auto scale is used for the cell.
        False: Auto scale is not used for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetAutoScale2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-28971E41-B8DD-4325-BF81-67A36243DAAA"
                 "
SetAutoScale2 Method (ActiveX)
Sets the auto-scale flag value for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetAutoScale2 nRow, nCol, nContent, bAutoFit
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
bAutoFit
    Access: Input-only
    Type: Boolean
        True: Auto scale is used for the cell.
        False: Auto scale is not used for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBackgroundColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0A380D73-5D5D-4E3C-9839-9DBC19BAD32C"
                      "
SetBackgroundColor Method (ActiveX)
Sets a background color value for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetBackgroundColor rowTypes, pColor
object
    Type: Table, TableStyle
    The objects this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to apply to the specified row type.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetBackgroundColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
    
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetBackgroundColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetBackgroundColorNone customObj acHeaderRow :vlax-false)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	         )
    )
    (vlax-release-object col)
)
")
("SetBackgroundColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7842FBAB-416B-458A-BFFE-F2230F3E7799"
                       "
SetBackgroundColor2 Method (ActiveX)
Sets a background color value for the specified named cell style.
Supported platforms: Windows only
Signature
VBA:
object.SetBackgroundColor2 bstrCellStyle, color
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The named cell style.
color
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to apply to the specified cell style.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBackgroundColorNone" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EC710A68-CADB-497A-BABE-BC28C36B9E39"
                          "
SetBackgroundColorNone Method (ActiveX)
Sets the value specifying whether there is no background color for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetBackgroundColorNone rowTypes, bValue
object
    Type: Table, TableStyle
    The object this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
bValue
    Access: Input-only
    Type: Boolean
        True: Background color is applied.
        False: Background color is not applied.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBlockAttributeValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2E4C0EB7-B243-4F85-BF03-36F7CCE35AD5"
                          "
SetBlockAttributeValue Method (ActiveX)
Sets the attribute value for an attribute in a block contained within a MLeader or Table object.
Supported platforms: Windows only
Signature - MLeader
VBA:
object.SetBlockAttributeValue attdefId, value
object
    Type: MLeader
    The object this method applies to.
attdefID
    Access: Input-only
    Type: Long_PTR
    The attribute definition ID.
value
    Access: Input-only
    Type: String
    The new attribute value.
Signature - Table
VBA:
object.SetBlockAttributeValue row, col, attdefId, StringValue
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row in the table.
col
    Access: Input-only
    Type: Long
    The column in the table.
attdefId
    Access: Input-only
    Type: Long_PTR
    The object ID of the attribute definition.
StringValue
    Access: Input-only
    Type: String
    The attribute value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Blockttribute()
    ' This example creates an MLeader object and gets and sets values for
    ' the block attribute type.
    Dim points(0 To 5) As Double
    points(0) = 0: points(1) = 4: points(2) = 0
    points(3) = 1.5: points(4) = 5: points(5) = 0
    Dim i As Long
    Dim oML As AcadMLeader
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.ContentType = acBlockContent
    oML.ContentBlockType = acBlockBox
    Dim sBlock As String
    sBlock = oML.ContentBlockName
    Dim o As AcadEntity
    For Each o In ThisDrawing.Blocks(sBlock)
        If o.ObjectName = \"AcDbAttributeDefinition\" Then
            oML.SetBlockAttributeValue o.ObjectID, \"123\"
            MsgBox oML.GetBlockAttributeValue(o.ObjectID)
        End If
    Next o
    
    Update
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BlockAttribute()
    ;; This example creates an MLeader object and gets and sets values for
    ;; the block attribute type.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(0 4 0
                                  1.5 5 0
                                 )
    )
    (setq i 0)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-ContentType oML acBlockContent)
    (vla-put-ContentBlockType oML acBlockBox)
    (setq sBlock (vla-get-ContentBlockName oML))
    (vlax-for o (vla-Item (vla-get-Blocks doc) sBlock)
        (if (= (vla-get-ObjectName o) \"AcDbAttributeDefinition\")
	           (progn
                (vla-SetBlockAttributeValue oML (vla-get-ObjectID o) \"123\")
                (alert (vla-GetBlockAttributeValue oML (vla-get-ObjectID o)))
	           )
        )
    )
  
    (vla-Update acadObj)
    (vla-ZoomExtents acadObj)
)
")
("SetBlockAttributeValue2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-973C2CEC-91F4-4800-9064-C40B46350A0B"
                           "
SetBlockAttributeValue2 Method (ActiveX)
Sets the attribute value associated to a specified block cell.
Supported platforms: Windows only
Signature
VBA:
object.SetBlockAttributeValue2 nRow, nCol, nContent, blkId, value
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
blkId
    Access: Input-only
    Type: Long_PTR
    The block table record object id to check.
value
    Access: Input-only
    Type: String
    The attribute value to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBlockRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DE86AFDB-DBFA-4193-BC03-B4E0ECAA9203"
                    "
SetBlockRotation Method (ActiveX)
Sets the block rotation angle for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetBlockRotation row, col, blkRotation
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
blkRotation
    Access: Input-only
    Type: Double
    The block rotation angle.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBlockScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B2B5C5F8-3CC0-4151-9451-3EF14A043820"
                 "
SetBlockScale Method (ActiveX)
Sets the block scale value for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetBlockScale row, col, blkScale
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
blkScale
    Access: Input-only
    Type: Double
    The scale of the block.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBlockTableRecordId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8A78F69E-EACF-4985-B9E1-6DA662240AF0"
                         "
SetBlockTableRecordId Method (ActiveX)
Sets the block table record ID of the cell.
Supported platforms: Windows only
Signature
VBA:
object.SetBlockTableRecordId row, col, blkId, bAutoFit
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
blkId
    Access: Input-only
    Type: Long_PTR
    The block table record object id to set in the cell.
bAutoFit
    Access: Input-only
    Type: Boolean
        True: The block is set to auto fit the cell.
        False: The block is not set to auto fit the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBlockTableRecordId2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0C8D4634-B341-4B9F-972B-BED80F8423ED"
                          "
SetBlockTableRecordId2 Method (ActiveX)
Sets the block table record object id associated to a specified cell.
Supported platforms: Windows only
Signature
VBA:
object.SetBlockTableRecordId2 nRow, nCol, nContent, blkId, autoFit
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
blkId
    Access: Input-only
    Type: Long_PTR
    The block table record object id to set.
autoFit
    Access: Input-only
    Type: Boolean
        True: The block is set to auto fit the cell.
        False: The block is not set to auto fit the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetBreakHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5E4EDEE0-7D8F-47CD-A706-9865022A0E03"
                  "
SetBreakHeight Method (ActiveX)
Sets the break height for the table.
Supported platforms: Windows only
Signature
VBA:
object.SetBreakHeight nIndex, dHeight
object
    Type: Table
    The object this method applies to.
nIndex
    Access: Input-only
    Type: Long
    The index of the table.
dHeight
    Access: Input-only
    Type: Double
    The new height value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BreakHeight()
    ' This example creates a table object and then breaks it into
    ' two tables.
    
    ' Create a new table object in model space
    Dim pt(2) As Double
    
    Dim modelSpace As AcadModelSpace
    Set modelSpace = ThisDrawing.modelSpace
    
    Dim table As AcadTable
    Set table = modelSpace.AddTable(pt, 5, 5, 10, 30)
    
    table.EnableBreak = True
    table.BreakSpacing = 3.5
    table.TableBreakHeight = 35#
    table.AllowManualHeights = True
    table.SetBreakHeight 0, 20#
    table.SetBreakHeight 1, 35#
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BreakHeight()
    ;; This example creates a table object and then breaks it into
    ;; two tables.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new table object in model space
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq table (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-put-EnableBreak table :vlax-true)
    (vla-put-BreakSpacing table 3.5)
    (vla-put-TableBreakHeight table 35.0)
    (vla-put-AllowManualHeights table :vlax-true)
    (vla-SetBreakHeight table 0 20.0)
    (vla-SetBreakHeight table 1 35.0)
    (vla-ZoomExtents acadObj)
)
")
("SetBulge" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E1CE125E-AB3A-4645-B548-E43200064F9C"
            "
SetBulge Method (ActiveX)
Sets the bulge for the polyline at the given index.
Supported platforms: Windows only
Signature
VBA:
object.SetBulge Index, Value
object
    Type: LWPolyline, Polyline
    The objects this method applies to.
Index
    Access: Input-only
    Type: Long
    The index location of the vertex you wish to set. The first vertex is index 0.
Value
    Access: Input-only
    Type: Double
    The bulge value for the vertex at the given index.
Return Value (RetVal)
No return value.
Remarks
Polyline: this method will fail if the polyline Type property is not acSimplePoly.
The bulge is the tangent of 1/4 of the included angle for the arc between the selected vertex and the next vertex in the polyline's vertex list. A negative bulge value indicates that the arc goes clockwise from the selected vertex to the next vertex. A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
Examples
VBA:
Sub Example_SetBulge()
    ' This example creates a lightweight polyline in model space.
    ' It then finds and changes the bulge for a given segment.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 11) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
    points(10) = 4: points(11) = 1
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ZoomAll
    
    ' Find the bulge of the third segment
    Dim currentBulge As Double
    currentBulge = plineObj.GetBulge(3)
    MsgBox \"The bulge for the third segment is \" & plineObj.GetBulge(3), , \"SetBulge Example\"
    
    ' Change the bulge of the third segment
    plineObj.SetBulge 3, -0.5
    plineObj.Update
    MsgBox \"The bulge for the third segment is now \" & plineObj.GetBulge(3), , \"SetBulge Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetBulge()
    ;; This example creates a lightweight polyline in model space.
    ;; It then finds and changes the bulge for a given segment.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 11)))
    (vlax-safearray-fill points '(1 1
                                  1 2
                                  2 2
                                  3 2
                                  4 4
                                  4 1
                                 )
    )   
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    
    ;; Find the bulge of the third segment
    (setq currentBulge (vla-GetBulge plineObj 3))
    (alert (strcat \"The bulge for the third segment is \" (rtos (vla-GetBulge plineObj 3) 2)))
    
    ;; Change the bulge of the third segment
    (vla-SetBulge plineObj 3 -0.5)
    (vla-Update plineObj)
    (alert (strcat \"The bulge for the third segment is now \" (rtos (vla-GetBulge plineObj 3) 2)))
)
")
("SetCellAlignment" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C1C4ADB2-2A8B-4817-8082-86D5BC770C05"
                    "
SetCellAlignment Method (ActiveX)
Sets the cell alignment for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellAlignment row, col, cellAlignment
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
cellAlignment
    Access: Input-only
    Type: AcCellAlignment enum
    The cell alignment.
        acBottomCenter
        acBottomLeft
        acBottomRight
        acMiddleCenter
        acMiddleLeft
        acMiddleRight
        acTopCenter
        acTopLeft
        acTopRight
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellBackgroundColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-774201E4-7039-4048-9D81-7F5DE712E729"
                          "
SetCellBackgroundColor Method (ActiveX)
Sets the background true color value for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellBackgroundColor row, col, pColor
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the background color of the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellBackgroundColorNone" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-03A78369-89B0-4CED-A40D-B6ABBB53BC39"
                              "
SetCellBackgroundColorNone Method (ActiveX)
Sets the value specifying that there is no background color for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellBackgroundColorNone row, col, bValue
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
bValue
    Access: Input-only
    Type: Boolean
        True: Background color is enabled for the cell.
        False: Background color is not enabled for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellClass" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FACB1E29-D68A-4F9C-8CB9-919C4A0457BE"
                "
SetCellClass Method (ActiveX)
Sets the class of a cell style.
Supported platforms: Windows only
Signature
VBA:
object.SetCellClass StringCellStyle, cellClass
object
    Type: TableStyle
    The object this method applies to.
StringCellStyle
    Access: Input-only
    Type: String
    The cell style name.
cellClass
    Access: Input-only
    Type: Integer
    The cell style class.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellClass()
    ' This example creates a TableStyle object and sets values for
    ' the style classes and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetCellClass \"NewTestStyle\", 4
      
    customObj.SetRotation \"NewTestStyle\", 8.4
      
    MsgBox \"The cell class is \" & customObj.GetCellClass(\"NewTestStyle\") & _
           \" the cell rotation is \" & customObj.GetRotation(\"NewTestStyle\")
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellClass()
    ;; This example creates a TableStyle object and sets values for
    ;; the style classes and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
  
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (vla-SetCellClass customObj \"NewTestStyle\" 4)
    (vla-SetRotation customObj \"NewTestStyle\" 8.4)
      
    (alert (strcat \"The cell class is \" (itoa (vla-GetCellClass customObj \"NewTestStyle\"))
                   \" and the cell rotation is \" (rtos (vla-GetRotation customObj \"NewTestStyle\") 2) \".\"
           )
    )
)
")
("SetCellContentColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8CBFFDC7-1166-4D78-BCF0-A3984D6BB397"
                       "
SetCellContentColor Method (ActiveX)
Sets the true color value for the content of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellContentColor row, col, pColor
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the content of the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellDataType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C04C84AC-8F60-40AA-A9EF-703F335743F9"
                   "
SetCellDataType Method (ActiveX)
Sets the cell data and unit type for the given row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellDataType row, col, dataType, unitType
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
pDataType
    Access: Input-only
    Type: AcValueDataType enum
    The new cell data type.
        acBuffer
        acDate
        acDouble
        acGeneral
        acLong
        acObjectId
        acPoint2d
        acPoint3d
        acResbuf
        acString
        acUnknownDataType
pUnitType
    Access: Input-only
    Type: AcValueUnitType enum
    The new cell unit type.
        acUnitAngle
        acUnitArea
        acUnitDistance
        acUnitless
        acUnitVolume
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("SetCellFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3E04BE12-84D3-4B37-8106-660504B47005"
                 "
SetCellFormat Method (ActiveX)
Sets the cell format for the given row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellFormat row, col, pFormat
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
pFormat
    Access: Input-only
    Type: String
    The new cell format.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("SetCellGridColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-71651B75-0942-4461-8D2B-755FE1333D58"
                    "
SetCellGridColor Method (ActiveX)
Sets the grid color value for an edge of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellGridColor row, col, edges, pColor
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
edges
    Access: Input-only
    Type: AcCellEdgeMask enum
    The cell edges.
        acBottomMask
        acLeftMask
        acRightMask
        acTopMask
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the cell grid.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellGridLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-84954C42-12E8-4729-8276-2B3B77AB24B2"
                         "
SetCellGridLineWeight Method (ActiveX)
Sets the grid lineweight value for an edge of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellGridLineWeight row, col, edges, Lineweight
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
edges
    Access: Input-only
    Type: AcCellEdgeMask enum
    The cell edges.
        acBottomMask
        acLeftMask
        acRightMask
        acTopMask
Lineweight
    Access: Input-only
    Type: ACAD_LWEIGHT enum
    The lineweight to apply to the cell grid.
        acLnWt000
        acLnWt005
        acLnWt009
        acLnWt013
        acLnWt015
        acLnWt018
        acLnWt020
        acLnWt025
        acLnWt030
        acLnWt035
        acLnWt040
        acLnWt050
        acLnWt053
        acLnWt060
        acLnWt070
        acLnWt080
        acLnWt090
        acLnWt100
        acLnWt106
        acLnWt120
        acLnWt140
        acLnWt158
        acLnWt200
        acLnWt211
        acLnWtByLayer
        acLnWtByBlock
        acLnWtByLwDefault
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellGridVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A1ED6B6E-44E2-4CEE-8EDB-1B2D508F332D"
                         "
SetCellGridVisibility Method (ActiveX)
Sets the grid visibility value for an edge of the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellGridVisibility row, col, edges, bValue
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
edges
    Access: Input-only
    Type: AcCellEdgeMask enum
    The cell edges.
        acBottomMask
        acLeftMask
        acRightMask
        acTopMask
bValue
    Access: Input-only
    Type: Boolean
    The visibility of the grid for the cell.
        True: Grid is visible for the cell.
        False: Grid is not visible for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellState" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D8CEDCFC-16DC-49A5-8064-65A6791357A1"
                "
SetCellState Method (ActiveX)
Sets the state for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetCellState nRow, nCol, nLock
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nLock
    Access: Input-only
    Type: AcCellState enum
    The new cell state.
        acCellStateContentLocked
        acCellStateContentModified
        acCellStateContentReadOnly
        acCellStateFormatLocked
        acCellStateFormatModified
        acCellStateFormatReadOnly
        acCellStateLinked
        acCellStateNone
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("SetCellStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2E9EE0DD-31AB-41BC-8ABF-B3ECB549E657"
                "
SetCellStyle Method (ActiveX)
Sets a cell style to the cell.
Supported platforms: Windows only
Signature
VBA:
object.SetCellStyle nRow, nCol, szCellStyle
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
szCellStyle
    Access: Input-only
    Type: String
    The cell style to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("SetCellTextHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4B0FC445-DBBF-473C-86A2-BEC7DB6A4453"
                     "
SetCellTextHeight Method (ActiveX)
Sets the text height for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellTextHeight row, col, TextHeight
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
TextHeight
    Access: Input-only
    Type: Double
    The text height for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellTextStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A1450A92-374D-4E8C-8500-22344A872DAE"
                    "
SetCellTextStyle Method (ActiveX)
Sets the text style name for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellTextStyle row, col, bstrName
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
bstrName
    Access: Input-only
    Type: String
    The text style for the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8928075F-8D48-4F8B-96F3-D359866D535D"
               "
SetCellType Method (ActiveX)
Sets the cell type for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellType row, col, CellType
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
CellType
    Access: Input-only
    Type: AcCellType enum
    The cell type for the cell.
        acBlockCell
        acTextCell
        acUnknownCell
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCellValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7E44F906-3BD5-4EA7-A828-067DF359F052"
                "
SetCellValue Method (ActiveX)
Sets the cell value for the given row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellValue row, col, val
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
val
    Access: Output-only
    Type: Variant
    The new cell value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellManipulation()
    ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.modelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetCellDataType(2, 2, acLong, acUnitDistance)
    Call MyTable.SetCellFormat(1, 3, \"testFormat\")
    Call MyTable.SetCellState(4, 3, acCellStateContentLocked)
    Call MyTable.SetCellValue(1, 4, 5)
    
    MsgBox MyTable.GetCellValue(1, 4) & \" is the test cell's value \"
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellManipulation()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetCellDataType MyTable 2 2 acLong acUnitDistance)
    (vla-SetCellFormat MyTable 1 3 \"testFormat\")
    (vla-SetCellState MyTable 4 3 acCellStateContentLocked)
    (vla-SetCellValue MyTable 1 4 5)
    
    (alert (strcat (itoa (vlax-variant-value (vla-GetCellValue MyTable 1 4))) \" is the test cell's value.\"))
    (vla-ZoomExtents acadObj)
)
")
("SetCellValueFromText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4E1FAAFC-2F06-4C52-8268-451CA509AD38"
                        "
SetCellValueFromText Method (ActiveX)
Sets the cell value for the given row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetCellValueFromText row, col, val, nOption
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell to set.
col
    Access: Input-only
    Type: Long
    The column number of the cell to set.
val
    Access: Input-only
    Type: String
    The new cell value.
nOption
    Access: Input-only
    Type: AcParseOption enum
    The type of content parsing to use.
        acParseOptionNone
        acPreserveMtextFormat
        acSetDefaultFormat
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-095F270A-0770-4886-AB4D-1AE8034B951F"
            "
SetColor Method (ActiveX)
Sets the true color value for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetColor rowTypes, pColor
object
    Type: TableStyle
    The object this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the row types.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colCurrent As AcadAcCmColor, colRowCurrent As AcadAcCmColor, colNoneCurrent As Boolean
    Set colCurrent = tableStyle.GetBackgroundColor(AcRowType.acDataRow + AcRowType.acTitleRow)
    Set colRowCurrent = tableStyle.GetColor(acDataRow)
    colNoneCurrent = tableStyle.GetBackgroundColorNone(AcRowType.acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colCurrent.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowCurrent.ColorIndex & vbLf & _
           \"Background None = \" & colNoneCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, col
    col.SetRGB 255, 0, 0
    tableStyle.SetColor AcRowType.acDataRow, col
    If colNoneCurrent = False Then
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, True
    Else
        tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, False
    End If
      
    Dim colNew As AcadAcCmColor, colRowNew As AcadAcCmColor, colNoneNew As Boolean
    Set colNew = tableStyle.GetBackgroundColor(AcRowType.acTitleRow)
    Set colRowNew = tableStyle.GetColor(acDataRow)
    colNoneNew = tableStyle.GetBackgroundColorNone(acHeaderRow)
    MsgBox \"Table colors \" & vbLf & _
           \"Background ACI value = \" & colNew.ColorIndex & vbLf & _
           \"Row Text ACI value = \" & colRowNew.ColorIndex & vbLf & _
           \"Background None = \" & colNoneNew
  
    tableStyle.SetBackgroundColor AcRowType.acTitleRow, colCurrent
    tableStyle.SetColor AcRowType.acDataRow, colRowCurrent
    tableStyle.SetBackgroundColorNone AcRowType.acHeaderRow, colNoneCurrent
    
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colCurrent (vla-GetBackgroundColor tableStyle (+ acDataRow acTitleRow)))
    (setq colRowCurrent (vla-GetColor tableStyle acDataRow))
    (setq colNoneCurrent (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colCurrent)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowCurrent)) \"\n\"
		                 \"Background None = \" (if (= colNoneCurrent :vlax-true) \"True\" \"False\")))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetBackgroundColor tableStyle acTitleRow col)
    (vla-SetRGB col 255 0 0)
    (vla-SetColor tableStyle acDataRow col)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow (if (= colNoneCurrent :vlax-true) :vlax-false :vlax-true))
  
    (setq colNew (vla-GetBackgroundColor tableStyle acTitleRow))
    (setq colRowNew (vla-GetColor tableStyle acDataRow))
    (setq colNoneNew (vla-GetBackgroundColorNone tableStyle acHeaderRow))
    (alert (strcat \"Table colors \n\"
		                 \"Background ACI value = \" (itoa (vla-get-ColorIndex colNew)) \"\n\"
		                 \"Row Text ACI value = \" (itoa (vla-get-ColorIndex colRowNew)) \"\n\"
		                 \"Background None = \" (if (= colNoneNew :vlax-true) \"True\" \"False\")))
    (vla-SetBackgroundColor tableStyle acTitleRow colCurrent)
    (vla-SetColor tableStyle acDataRow colRowCurrent)
    (vla-SetBackgroundColorNone tableStyle acHeaderRow colNoneCurrent)
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("SetColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D91707BD-B3E5-4C49-8783-14B1A5F3B1A9"
             "
SetColor2 Method (ActiveX)
Sets the color value for the specified named cell style.
Supported platforms: Windows only
Signature
VBA:
object.SetColor2 bstrCellStyle, color
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The named cell style.
color
    Access: Input-only
    Type: AcCmColor
    The AutoCAD color object to assign to the cell style.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetColorBookColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4533286A-E4E8-4159-992C-10C2E69C4323"
                     "
SetColorBookColor Method (ActiveX)
Specifies the color name from an existing color book.
Supported platforms: Windows only
Signature
VBA:
object.SetColorBookColor BookName, ColorName
object
    Type: AcCmColor
    The object this method applies to.
BookName
    Access: Input-only
    Type: String
    The file name of the color book.
ColorName
    Access: Input-only
    Type: String
    The name of the color.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetColorBookColor()
    ' This example draws a line and specifies a color name
    ' from an existing color book.
  
    Dim FirstColor As AcadAcCmColor
    Set FirstColor = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    FirstColor.SetRGB 80, 100, 244
  
    Dim line As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
    Set line = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    FirstColor.SetColorBookColor \"PANTONE+ Solid Uncoated\", \"PANTONE Yellow 012 U\"
    line.TrueColor = FirstColor
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetColorBookColor()
    ;; This example draws a line and specifies a color name
    ;; from an existing color book.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq FirstColor (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB FirstColor 80 100 244)
  
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    (vla-SetColorBookColor FirstColor \"PANTONE+ Solid Uncoated\" \"PANTONE Yellow 012 U\")
    (vla-put-TrueColor lineObj FirstColor)
    (vlax-release-object FirstColor)
)
")
("SetColumnName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F5FE13EE-A3B7-46B1-A119-401756F54230"
                 "
SetColumnName Method (ActiveX)
Sets a name to a column.
Supported platforms: Windows only
Signature
VBA:
object.SetColumnName nIndex, name
object
    Type: Table
    The object this method applies to.
nIndex
    Access: Input-only
    Type: Long
    The index of the column.
name
    Access: Input-only
    Type: String
    The new name.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ColumnName()
     ' This example adds a table in model space and sets and gets a column name
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.ModelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Dim cName As String
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    
    Call MyTable.SetColumnName(2, \"Test Name\")
    MsgBox \"The column name is: \" & vbCrLf & _
           MyTable.GetColumnName(2)
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ColumnName()
    ;; This example adds a table in model space and sets and gets a column name
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
    
    (vla-SetColumnName MyTable 2 \"Test Name\")
    (alert (strcat \"The column name is: \n\"
                   (vla-GetColumnName MyTable 2)))
    (vla-ZoomExtents acadObj)
)
")
("SetColumnWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F9800295-53CB-4D8E-B786-DBA53A526DE1"
                  "
SetColumnWidth Method (ActiveX)
Sets the column width for the column at the specified column index in the table.
Supported platforms: Windows only
Signature
VBA:
object.SetColumnWidth col, Width
object
    Type: Table
    The object this method applies to.
col
    Access: Input-only
    Type: Long
    The column in the table.
Width
    Access: Input-only
    Type: Double
    The width to assign to the column.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetContentColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C3151A2C-D4C7-4E69-825E-EA639CD80FF6"
                   "
SetContentColor Method (ActiveX)
Sets the true color value for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetContentColor rowTypes, pColor
object
    Type: Table
    The object this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the row types.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetContentColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-950432DC-8ACE-4271-AAAC-0158CA43EC63"
                    "
SetContentColor2 Method (ActiveX)
Sets the color value for the cell content based on the row, column, and content location.
Supported platforms: Windows only
Signature
VBA:
object.SetContentColor2 nRow, nCol, nContent, pColor
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row in the table.
nCol
    Access: Input-only
    Type: Long
    The column in the table.
nContent
    Access: Input-only
    Type: Long
    The content location in a cell.
pColor
    Access:
    Type: AcCmColor
    The AutoCAD true color object to assign to the specified content in the cell.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetContentLayout" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-74844F83-B4A3-4621-8635-C20B8941894C"
                    "
SetContentLayout Method (ActiveX)
Sets the content layout for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetContentLayout nRow, nCol, nLayout
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nLayout
    Access: Input-only
    Type: AcCellContentLayout enum
    The new layout value.
        acCellContentLayoutFlow
        acCellContentLayoutStackedHorizontal
        acCellContentLayoutStackedVertical
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetControlPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D0C7C665-6580-4AF0-977D-D6BC8F93F1E4"
                   "
SetControlPoint Method (ActiveX)
Sets the control point of the spline at a given index.
Supported platforms: Windows only
Signature
VBA:
object.SetControlPoint Index, Value
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index location of the control point you wish to set. The first control point is index 0.
Value
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the control point for the spline at the given index location.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetControlPoint()
    ' This example creates a spline object in model space.
    ' It then finds the coordinates of the first control point
    ' and changes that value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display the coordinates of the first control point
    Dim controlPoint As Variant
    controlPoint = splineObj.GetControlPoint(0)
    MsgBox \"Control point 1 is at \" & controlPoint(0) & \", \" & controlPoint(1) & \", \" & controlPoint(2), , \"SetControlPoint Example\"
    
    ' Change the coordinates of the first fit point
    controlPoint(0) = 0: controlPoint(1) = 3: controlPoint(2) = 0
    splineObj.SetControlPoint 0, controlPoint
    splineObj.Update
    MsgBox \"Control point 1 is now at \" & controlPoint(0) & \", \" & controlPoint(1) & \", \" & controlPoint(2), , \"SetControlPoint Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetControlPoint()
    ;; This example creates a spline object in model space.
    ;; It then finds the coordinates of the first control point
    ;; and changes that value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display the coordinates of the first control point
    (setq controlPoint (vlax-safearray->list (vlax-variant-value (vla-GetControlPoint splineObj 0))))
    (alert (strcat \"Control point 1 is at \" (rtos (nth 0 controlPoint) 2) \", \" (rtos (nth 1 controlPoint) 2) \", \" (rtos (nth 2 controlPoint) 2)))
    
    ;; Change the coordinate of the first fit point
    (setq controlPoint (vlax-3d-point 0 3 0))
    (vla-SetControlPoint splineObj 0 controlPoint)
    (vla-Update splineObj)
    (setq controlPoint (vlax-safearray->list (vlax-variant-value (vla-GetControlPoint splineObj 0))))
    (alert (strcat \"Control point 1 is now at \" (rtos (nth 0 controlPoint) 2) \", \" (rtos (nth 1 controlPoint) 2) \", \" (rtos (nth 2 controlPoint) 2)))
)
")
("SetCustomByIndex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CE27EC98-F315-45D6-A870-C92562818A9C"
                    "
SetCustomByIndex Method (ActiveX)
Sets the custom property name (key) and value that correspond to an index value.
Supported platforms: Windows only
Signature
VBA:
object.SetCustomByIndex Index, key, Value
object
    Type: SummaryInfo
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index value of the property. The index range is from zero to one less than the number of custom properties.
key
    Access: Input-only
    Type: String
    The custom property name for the index value.
Value
    Access: Input-only
    Type: String
    The custom property value for the index value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetCustomByIndex()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetCustomByIndex()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("SetCustomByKey" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CAF6F231-995C-4DD2-96F7-91F6649E6DDB"
                  "
SetCustomByKey Method (ActiveX)
Sets the custom property value that corresponds to a name (key) value.
Supported platforms: Windows only
Signature
VBA:
object.SetCustomByKey key, pValue
object
    Type: SummaryInfo
    The object this method applies to.
key
    Access: Input-only
    Type: String
    The name of the custom property.
pValue
    Access: Input-only
    Type: String
    The value for the custom property name.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetCustomByKey()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetCustomByKey()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("SetCustomData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5BB29807-967F-4E22-BE84-F267DE481F98"
                 "
SetCustomData Method (ActiveX)
Sets the custom data associated to a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetCustomData nRow, nCol, szKey, data
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
szKey
    Access: Input-only
    Type: String
    The input key of the AcDbEvalContextPair.
data
    Access: Input-only
    Type: Variant
    The custom data to store.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetCustomScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CAFE8D48-E120-428A-B592-0DFE06BAF780"
                  "
SetCustomScale Method (ActiveX)
Sets the custom scale for a layout or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.SetCustomScale Numerator, Denominator
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
Numerator
    Access: Input-only
    Type: Double
    A positive number representing the numerator in the scale ratio. This value represents the number of inches or mm for the scale.
Denominator
    Access: Input-only
    Type: Double
    A positive number representing the denominator in the scale ratio. This value represents the number of drawing units for the scale.
Return Value (RetVal)
No return value.
Remarks
The units for the Numerator parameter can be found in the PaperUnits property.
The Numerator and Denominator parameters must be greater than zero.
Changes made by this method will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
Examples
VBA:
Sub Example_SetCustomScale()
    ' This example will access the Layouts collection for the current drawing
    ' and list basic information about the custom scale for each Layout.
    ' It will then change the custom scale information for model space and re-display
    ' the scale information.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim Numerator As Double, Denominator As Double
    Dim Measurement As String
    
    ' Display current scale information
    GoSub DISPLAY_SCALE_INFO
    
    ' Modify scale
    Numerator = 1
    Denominator = 1
    
    ThisDrawing.Layouts(\"Model\").SetCustomScale Numerator, Denominator
    ThisDrawing.Regen acAllViewports
            
    ' Display new scale information
    GoSub DISPLAY_SCALE_INFO
        
    Exit Sub
    
DISPLAY_SCALE_INFO:
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    msg = vbCrLf & vbCrLf   ' Start with a space
    
    ' Get the scale information of every layout in this drawing
    For Each Layout In Layouts
        msg = msg & Layout.name & vbCrLf
        
        ' Get scale information
        Layout.GetCustomScale Numerator, Denominator
        
        ' Identify whether inches or millimeters are being used.
        Measurement = IIf(Layout.PaperUnits = acInches, \" inch(es)\", \" millimeter(s)\")
        
        ' Format for display
        msg = msg & vbTab & \"Contains \" & Numerator & Measurement & vbCrLf
        msg = msg & vbTab & \"Contains \" & Denominator & \" drawing units\" & vbCrLf
        msg = msg & \"_____________________\" & vbCrLf
        
    Next
    
    ' Display custom scale information
    MsgBox \"Custom scale information for the current drawing is: \" & msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetCustomScale()
    ;; This example will access the Layouts collection for the current drawing
    ;; and list basic information about the custom scale for each Layout.
    ;; It will then change the custom scale information for model space and re-display
    ;; the scale information.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Display current scale information
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\")
    
    ;; Get the scale information of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg (vla-get-Name Layout) \"\n\"))
        
        ;; Get scale information
        (vla-GetCustomScale Layout 'Numerator 'Denominator)
        
        ;; Are we using inches or millimeters
        (setq Measurement (if (= (vla-get-PaperUnits Layout) acInches) \" inch(es)\n\" \" millimeter(s)\n\"))
        
        ;; Format for display
        (setq msg (strcat msg \"  Contains \" (rtos Numerator 2) Measurement
                              \"  Contains \" (rtos Denominator 2) \" drawing units\n\"
                              \"_____________________\n\"))   
    )
    
    ;; Display custom scale information
    (alert (strcat \"Custom scale information for the current drawing is: \" msg))
  
    ;; Modify scale
    (setq Numerator 1
          Denominator 1)
    
    (vla-SetCustomScale (vla-Item (vla-get-Layouts doc) \"Model\") Numerator Denominator)
    (vla-Regen doc acAllViewports)
            
    ;; Display new scale information
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\")
    
    ;; Get the scale information of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg (vla-get-Name Layout) \"\n\"))
        
        ;; Get scale information
        (vla-GetCustomScale Layout 'Numerator 'Denominator)
        
        ;; Are we using inches or millimeters
        (setq Measurement (if (= (vla-get-PaperUnits Layout) acInches) \" inch(es)\n\" \" millimeter(s)\n\"))
        
        ;; Format for display
        (setq msg (strcat msg \"  Contains \" (rtos Numerator 2) Measurement
                              \"  Contains \" (rtos Denominator 2) \" drawing units\n\"
                              \"_____________________\n\"))   
    )
    ;; Display custom scale information
    (alert (strcat \"Custom scale information for the current drawing is: \" msg))
)
")
("SetDataFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5EA7A591-5730-4266-BB92-5E11F37384B7"
                 "
SetDataFormat Method (ActiveX)
Sets the format for the cell.
Supported platforms: Windows only
Signature
VBA:
object.SetDataFormat nRow, nCol, nContent, szFormat
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
szFormat
    Access: Input-only
    Type: String
    A string holding the value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetDataType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B5AFE3DE-47CF-481E-9729-F5E15341BAF5"
               "
SetDataType Method (ActiveX)
Sets the data type and unit type for the specified row type.
Supported platforms: Windows only
Signature
VBA:
object.SetDataType rowTypes, nDataType, nUnitType
object
    Type: Table, TableStyle
    The objects this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
nDataType
    Access: Input-only
    Type: AcValueDataType enum
    The new data type.
        acBuffer
        acDate
        acDouble
        acGeneral
        acLong
        acObjectId
        acPoint2d
        acPoint3d
        acResbuf
        acString
        acUnknownDataType
nUnitType
    Access: Input-only
    Type: AcValueUnitType enum
    The new unit type.
        acUnitAngle
        acUnitArea
        acUnitDistance
        acUnitless
        acUnitVolume
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetDataType2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CAA10251-B8AA-43F2-85DB-80B4E143F40F"
                "
SetDataType2 Method (ActiveX)
Sets the row data type and unit type for the specified row type and content.
Supported platforms: Windows only
Signature
VBA:
object.SetDataType2 nRow, nCol, nContent, dataType, unitType
object
    Type: Table, TableStyle
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
dataType
    Access: Input-only
    Type: AcValueDataType enum
    The new data type.
        acBuffer
        acDate
        acDouble
        acGeneral
        acLong
        acObjectId
        acPoint2d
        acPoint3d
        acResbuf
        acString
        acUnknownDataType
unitType
    Access: Input-only
    Type: AcValueUnitType enum
    The new unit type.
        acUnitAngle
        acUnitArea
        acUnitDistance
        acUnitless
        acUnitVolume
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetDoglegDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-32B570AC-541B-49F5-B3AF-5FAF041EE039"
                      "
SetDoglegDirection Method (ActiveX)
Sets the dog leg direction of the specific leader.
Supported platforms: Windows only
Signature
VBA:
object.SetDoglegDirection leaderIndex, dirVec
object
    Type: MLeader
    The object this method applies to.
leaderIndex
    Access: Input-only
    Type: Integer
    The index of the leader cluster where the new leader line is to be added.
dirVec
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The indexes of leaderlines owned by the input leader.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetFieldId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DF211B7B-9655-4F83-8504-608B881CA6A7"
              "
SetFieldId Method (ActiveX)
Sets the field object ID of the specified cell.
Supported platforms: Windows only
Signature
VBA:
object.SetFieldId row, col, fieldId
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
fieldId
    Access: Input-only
    Type: Long_PTR
    The field object ID.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetFieldId2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F2235B65-73E4-477A-9330-0E68818BEB4F"
               "
SetFieldId2 Method (ActiveX)
Sets the field object id associated to a specified cell.
Supported platforms: Windows only
Signature
VBA:
object.SetFieldId2 nRow, nCol, nContent, acDbObjectId, nflag
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
acDbObjectId
    Access: Input-only
    Type: Long_PTR
    The field object id to set.
nflag
    Access: Input-only
    Type: AcCellOption enum
    The cell inheritance flag.
        kCellOptionNone
        kInheritCellFormat
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetFitPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DBB4B09C-24B0-4BB8-B96B-C59C1D06E9E4"
               "
SetFitPoint Method (ActiveX)
Sets a fit point for the spline.
Supported platforms: Windows only
Signature
VBA:
object.SetFitPoint Index, Value
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The index location of the fit point you wish to set. The first fit point is index 0.
Value
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the fit point for the spline at the given index location.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetFitPoint()
    ' This example creates a spline object in model space.
    ' It then finds the coordinates of the first fit point
    ' and changes that value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display the coordinates of the first fit point
    Dim fitPoint As Variant
    fitPoint = splineObj.GetFitPoint(0)
    MsgBox \"Fit point 1 is at \" & fitPoint(0) & \", \" & fitPoint(1) & \", \" & fitPoint(2), , \"SetFitPoint Example\"
    
    ' Change the coordinates of the first fit point
    fitPoint(0) = 0: fitPoint(1) = 3: fitPoint(2) = 0
    splineObj.SetFitPoint 0, fitPoint
    splineObj.Update
    MsgBox \"Fit point 1 is now at \" & fitPoint(0) & \", \" & fitPoint(1) & \", \" & fitPoint(2), , \"SetFitPoint Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetFitPoint()
    ;; This example creates a spline object in model space.
    ;; It then finds the coordinates of the first fit point
    ;; and changes that value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
				                                 10 0 0
				                                )
    )
    
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display the coordinates of the first fit point
    (setq fitPoint (vlax-variant-value (vla-GetFitPoint splineObj 0)))
    (alert (strcat \"Fit point 1 is at \" (rtos (vlax-safearray-get-element fitPoint 0) 2) \", \"
                                        (rtos (vlax-safearray-get-element fitPoint 1) 2) \", \"
                                        (rtos (vlax-safearray-get-element fitPoint 2) 2)))
    
    ;; Change the coordinates of the first fit point
    (setq fitPoint (vlax-3d-point 0 3 0))
    (vla-SetFitPoint splineObj 0 fitPoint)
    (vla-Update splineObj)
    (setq fitPoint (vlax-variant-value fitPoint))
    (alert (strcat \"Fit point 1 is now at \" (rtos (vlax-safearray-get-element fitPoint 0) 2) \", \"
                                            (rtos (vlax-safearray-get-element fitPoint 1) 2) \", \"
                                            (rtos (vlax-safearray-get-element fitPoint 2) 2)))
)
")
("SetFont" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DB668114-2395-43C6-858C-2F2514C4BF46"
           "
SetFont Method (ActiveX)
Sets the definition data of the font for the TextStyle.
Supported platforms: Windows only
Signature
VBA:
object.SetFont Typeface, Bold, Italic, CharSet, PitchAndFamily
object
    Type: TextStyle
    The object this method applies to.
Typeface
    Access: Input-only
    Type: String
    The typeface (font name).
Bold
    Access: Input-only
    Type: Boolean
    Sets the TextStyle to bold.
        True: The TextStyle is bold.
        False: The TextStyle is not bold.
Italic
    Access: Input-only
    Type: Boolean
    Sets the TextStyle to italic.
        True: The TextStyle is italic.
        False: The TextStyle is not italic.
CharSet
    Access: Input-only
    Type: Long
    The character set for the font. (See the available values in the Remarks section.)
PitchAndFamily
    Access: Input-only
    Type: Long
    The pitch and family definitions for the font. (See the available values in the Remarks section.)
Return Value (RetVal)
No return value.
Remarks
The following section provides definitions for constants to use with this method. To use these constants, copy the definitions you need and paste them into the Declarations section of your application. A complete list of the constants that are available from Microsoft can be found in the file win32api.txt, which is provided with the Visual Basic Development Environment.
The CharSet parameter specifies the character set for the font. To use the following constants in your VB or VBA application, copy the definitions into the Declaration section of your code.
Public Const ANSI_CHARSET = 0
Public Const DEFAULT_CHARSET = 1
Public Const SYMBOL_CHARSET = 2
Public Const SHIFTJIS_CHARSET = 128
Public Const OEM_CHARSET = 255
The PitchAndFamily parameter specifies the pitch and family values for the font. The value is determined by a combination of three different settings. To provide the PitchAndFamily value, choose a setting from each of the categories, and then use the OR operator to combine them. A setting is required from the first two categories; the pitch and the family. The third category, the TrueType Flag, is only used when you are specifying a TrueType font.
To use the following constants in your VB or VBA application, copy the definitions into the Declaration section of your code.
' Pitch Values
Public Const DEFAULT_PITCH = 0
Public Const FIXED_PITCH = 1
Public Const VARIABLE_PITCH = 2
' Family Values
Public Const FF_DONTCARE = 0    '  Don't care or don't know.
Public Const FF_ROMAN = 16      '  Variable stroke width, serifed.
Public Const FF_SWISS = 32      '  Variable stroke width, sans-serifed.
Public Const FF_MODERN = 48     '  Constant stroke width, serifed or sans-serifed.
Public Const FF_SCRIPT = 64     '  Cursive, etc.
Public Const FF_DECORATIVE = 80 '  Old English, etc.
' TrueType Flag
Public Const TMPF_TRUETYPE = &H4
Examples
VBA:
Sub Example_SetFont()
    ' This example finds the font information for the active text style.
    ' It then changes the font to bold.
    
    Dim typeFace As String
    Dim Bold As Boolean
    Dim Italic As Boolean
    Dim charSet As Long
    Dim PitchandFamily As Long
    
    ThisDrawing.ActiveTextStyle.GetFont typeFace, Bold, Italic, charSet, PitchandFamily
    
    MsgBox \"The current text style has the following font properties:\" & vbCrLf _
           & \"Typeface: \" & typeFace & vbCrLf _
           & \"Bold: \" & Bold & vbCrLf _
           & \"Italic: \" & Italic & vbCrLf _
           & \"Character set: \" & charSet & vbCrLf _
           & \"Pitch and Family: \" & PitchandFamily
            
    ' Change the bold property
    Bold = Not Bold
    
    ThisDrawing.ActiveTextStyle.SetFont typeFace, Bold, Italic, charSet, PitchandFamily
    MsgBox \"The current text style has the following font properties:\" & vbCrLf _
           & \"Typeface: \" & typeFace & vbCrLf _
           & \"Bold: \" & Bold & vbCrLf _
           & \"Italic: \" & Italic & vbCrLf _
           & \"Character set: \" & charSet & vbCrLf _
           & \"Pitch and Family: \" & PitchandFamily
            
    ' Reset the font
    Bold = Not Bold
    ThisDrawing.ActiveTextStyle.SetFont typeFace, Bold, Italic, charSet, PitchandFamily
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetFont()
    ;; This example finds the font information for the active text style.
    ;; It then changes the font to bold.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-GetFont (vla-get-ActiveTextStyle doc) 'typeFace 'Bold 'Italic 'charSet 'PitchandFamily)
    
    (alert (strcat \"The current text style has the following font properties:\"
                   \"\nTypeface: \" typeFace
                   \"\nBold: \" (if (= Bold :vlax-true) \"True\" \"False\")
                   \"\nItalic: \" (if (= Italic :vlax-true) \"True\" \"False\")
                   \"\nCharacter set: \" (itoa charSet)
                   \"\nPitch and Family: \" (itoa PitchandFamily)))
            
    ;; Change the bold property
    (setq Bold (if (= Bold :vlax-true) :vlax-false :vlax-true))
    (vla-SetFont (vla-get-ActiveTextStyle doc) typeFace Bold Italic charSet PitchandFamily)
  
    (alert (strcat \"The current text style has the following font properties:\"
                   \"\nTypeface: \" typeFace
                   \"\nBold: \" (if (= Bold :vlax-true) \"True\" \"False\")
                   \"\nItalic: \" (if (= Italic :vlax-true) \"True\" \"False\")
                   \"\nCharacter set: \" (itoa charSet)
                   \"\nPitch and Family: \" (itoa PitchandFamily)))
            
    ;; Reset the font
    (setq Bold (if (= Bold :vlax-true) :vlax-false :vlax-true))
    (vla-SetFont (vla-get-ActiveTextStyle doc) typeFace Bold Italic charSet PitchandFamily)
)
")
("SetFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8E47DFF2-20F2-4628-8AEB-7E6126C2A7D1"
             "
SetFormat Method (ActiveX)
Sets the format for the specified row type.
Supported platforms: Windows only
Signature
VBA:
object.SetFormat rowTypes, pFormat
object
    Type: Table, TableStyle
    The object this method applies to.
rowType
    Access: Input-only
    Type: AcRowType enum
    The row type to check.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
pFormat
    Access: Input-only
    Type: String
    The format for the row.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetFormat2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3A9A5F67-09A1-4244-A371-3D02EFD5590A"
              "
SetFormat2 Method (ActiveX)
Sets the format of a cell style.
Supported platforms: Windows only
Signature
VBA:
object.SetFormat2 bstrCellStyle, bstrFormat
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The cell style name.
bstrFormat
    Access: Input-only
    Type: String
    The cell style format.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("SetFormula" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2745BD48-A555-46DB-BE81-19D3DDCAD4F2"
              "
SetFormula Method (ActiveX)
Sets the formula for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetFormula nRow, nCol, nContent, pszFormula
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nContent
    Access: Input-only
    Type: Long
    The value of the content.
pszFormula
    Access: Input-only
    Type: String
    The new formula.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetGridColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DF80B4AB-0481-4702-967F-021B4F59AD9F"
                "
SetGridColor Method (ActiveX)
Sets the grid color value for the specified grid linetypes and row types.
Supported platforms: Windows only
Signature
VBA:
object.SetGridColor gridLineTypes, rowTypes, pColor
object
    Type: Table, TableStyle
    The objects this method applies to.
gridLineTypes
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the grid lines.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetGridColor()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetGridColor()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetBackgroundColorNone customObj acHeaderRow :vlax-false)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)
)
")
("SetGridColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E1B6202B-C9A7-49F5-B103-110FB13ED9EB"
                 "
SetGridColor2 Method (ActiveX)
Sets the grid color for the specified cell.
Supported platforms: Windows only
Signature
VBA:
object.SetGridColor2 nRow, nCol, nGridLineType, pColor
object
    Type: Table, TableStyle
    The objects this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
pColor
    Access: Input-only
    Type: AcCmColor
    The AutoCAD true color object to assign to the grid.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetGridDoubleLineSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16ED01F1-71CB-4E9F-AD65-735F3F8B0F1E"
                            "
SetGridDoubleLineSpacing Method (ActiveX)
Sets the line spacing value for the specified cell.
Supported platforms: Windows only
Signature
VBA:
object.SetGridDoubleLineSpacing nRow, nCol, nGridLineType, fSpacing
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
fSpacing
    Access: Input-only
    Type: Double
    The new spacing value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetGridLineStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6A975E03-D5EA-4095-859E-F30D2789D452"
                    "
SetGridLineStyle Method (ActiveX)
Sets the grid line style for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetGridLineStyle nRow, nCol, nGridLineTypes, nLineStyle
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
nLineStyle
    Access: Input-only
    Type: AcGridLineStyle enum
    The new gridLineStyle.
        acGridLineStyleDouble
        acGridLineStyleSingle
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetGridLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8F8C7FF3-FA86-4323-99C1-7E7FE4B5204E"
                     "
SetGridLineWeight Method (ActiveX)
Sets the grid lineweight value for the specified grid linetypes and row types.
Supported platforms: Windows only
Signature
VBA:
object.SetGridLineWeight gridLineTypes, rowTypes, Lineweight
object
    Type: Table, TableStyle
    The objects this method applies to.
gridLineTypes
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
Lineweight
    Access: Input-only
    Type: ACAD_LWEIGHT enum
    The lineweight to assign to the grid.
        acLnWt000
        acLnWt005
        acLnWt009
        acLnWt013
        acLnWt015
        acLnWt018
        acLnWt020
        acLnWt025
        acLnWt030
        acLnWt035
        acLnWt040
        acLnWt050
        acLnWt053
        acLnWt060
        acLnWt070
        acLnWt080
        acLnWt090
        acLnWt100
        acLnWt106
        acLnWt120
        acLnWt140
        acLnWt158
        acLnWt200
        acLnWt211
        acLnWtByLayer
        acLnWtByBlock
        acLnWtByLwDefault
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetGridLineWeight()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colGridCurrent As AcadAcCmColor, lwGridCurrent As ACAD_LWEIGHT, visGridCurrent As Boolean
    Set colGridCurrent = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridCurrent = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridCurrent = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridCurrent.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridCurrent & vbLf & _
           \"Visibility (Top) =  \" & visGridCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetGridColor acHorzBottom, acTitleRow, col
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, acLnWt025
    If visGridCurrent = False Then
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, True
    Else
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, False
    End If
      
    Dim colGridNew As AcadAcCmColor, lwGridNew As ACAD_LWEIGHT, visGridNew As Boolean
    Set colGridNew = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridNew = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridNew = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridNew.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridNew & vbLf & _
           \"Visibility (Top) =  \" & visGridNew
             
    tableStyle.SetGridColor acHorzBottom, acTitleRow, colGridCurrent
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, lwGridCurrent
    tableStyle.SetGridVisibility acHorzTop, acTitleRow, visGridCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetGridLineWeight()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Get the current TableStyle object
    (setq tableStyle (vla-Item dictObj (vla-GetVariable doc \"CTABLESTYLE\")))
      
    (setq colGridCurrent (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridCurrent (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridCurrent (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridCurrent))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridCurrent)
		                 \"\nVisibility (Top)= \" (if (= visGridCurrent :vlax-true) \"True\" \"False\")))
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 0 0 255)
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow col)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow acLnWt025)
    (vla-SetGridVisibility tableStyle acHorzTop acTitleRow (if (= visGridCurrent :vlax-true) :vlax-false :vlax-true))
    (setq colGridNew (vla-GetGridColor tableStyle acHorzBottom acTitleRow))
    (setq lwGridNew (vla-GetGridLineWeight tableStyle acHorzBottom acTitleRow))
    (setq visGridNew (vla-GetGridVisibility tableStyle acHorzTop acTitleRow))
    (alert (strcat \"Grid settings\"
		                 \"\nColor (Bottom) = \" (itoa (vla-get-ColorIndex colGridNew))
		                 \"\nLineweight (Bottom) = \" (itoa lwGridNew)
		                 \"\nVisibility (Top)= \" (if (= visGridNew :vlax-true) \"True\" \"False\")))
    (vla-SetGridColor tableStyle acHorzBottom acTitleRow colGridCurrent)
    (vla-SetGridLineWeight tableStyle acHorzBottom acTitleRow lwGridCurrent)
    (vla-SetGridVisibility tableStyle acHorzBottom acTitleRow visGridCurrent)
  
    (alert \"Reset the table style back to its original values.\")
    (vlax-release-object col)
)
")
("SetGridLineWeight2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-20F135D4-D2B3-4F48-9F18-83CFB1652E6F"
                      "
SetGridLineWeight2 Method (ActiveX)
Sets the grid lineweight value for the specified cell.
Supported platforms: Windows only
Signatures - Table
VBA:
object.SetGridLineWeight2 nRow, nCol, nGridLineType, lineWeight
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
lineWeight
    Access: Input-only
    Type: ACAD_LWEIGHT enum
    The new line weight.
        acLnWt000
        acLnWt005
        acLnWt009
        acLnWt013
        acLnWt015
        acLnWt018
        acLnWt020
        acLnWt025
        acLnWt030
        acLnWt035
        acLnWt040
        acLnWt050
        acLnWt053
        acLnWt060
        acLnWt070
        acLnWt080
        acLnWt090
        acLnWt100
        acLnWt106
        acLnWt120
        acLnWt140
        acLnWt158
        acLnWt200
        acLnWt211
        acLnWtByLayer
        acLnWtByBlock
        acLnWtByLwDefault
Signatures - TableStyle
VBA:
object.SetGridLineWeight2 bstrCellStyle, gridLineType, Lineweight
object
    Type: TableStyle
    object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    A named cell style in the table style.
gridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
Lineweight
    Access: Input-only
    Type: ACAD_LWEIGHT enum
    The new line weight.
        acLnWt000
        acLnWt005
        acLnWt009
        acLnWt013
        acLnWt015
        acLnWt018
        acLnWt020
        acLnWt025
        acLnWt030
        acLnWt035
        acLnWt040
        acLnWt050
        acLnWt053
        acLnWt060
        acLnWt070
        acLnWt080
        acLnWt090
        acLnWt100
        acLnWt106
        acLnWt120
        acLnWt140
        acLnWt158
        acLnWt200
        acLnWt211
        acLnWtByLayer
        acLnWtByBlock
        acLnWtByLwDefault
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetGridLinetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B188FEA0-38C8-42F5-8819-E7F2A8A0CE41"
                   "
SetGridLinetype Method (ActiveX)
Sets the object with the grid linetype value for the specified cell.
Supported platforms: Windows only
Signature
VBA:
object.SetGridLinetype nRow, nCol, nGridLineType, idLinetype
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
idLinetype
    Access: Input-only
    Type: Long_PTR
    The point which references the new linetype.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetGridSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D3E8938D-1329-44ED-9DA1-C9BFE3D8A943"
                  "
SetGridSpacing Method (ActiveX)
Sets the grid spacing for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.SetGridSpacing XSpacing, YSpacing
object
    Type: PViewport, Viewport
    The objects this method applies to.
XSpacing
    Access: Input-only
    Type: Double
    The X spacing of the grid in the viewport.
YSpacing
    Access: Input-only
    Type: Double
    The Y spacing of the grid in the viewport.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetGridSpacing()
    ' This example turns on the grid for the current viewport.
    ' It then finds the current grid spacing, and changes that spacing.
    
    ' Find the current active viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Turn on the grid and reset the viewport to see it come on.
    viewportObj.GridOn = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Find the current grid spacing
    Dim XSpacing As Double
    Dim YSpacing As Double
    
    viewportObj.GetGridSpacing XSpacing, YSpacing
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, , \"SetGridSpacing Example\"
    
    ' Change the grid spacing
    XSpacing = XSpacing * 0.5
    YSpacing = YSpacing * 0.5
    viewportObj.SetGridSpacing XSpacing, YSpacing
    ThisDrawing.ActiveViewport = viewportObj
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, , \"SetGridSpacing Example\"
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetGridSpacing()
    ;; This example turns on the grid for the current viewport.
    ;; It then finds the current grid spacing, and changes that spacing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Find the current active viewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Turn on the grid and reset the viewport to see it come on.
    (vla-put-GridOn viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Find the current grid spacing
    (vla-GetGridSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
    
    ;; Change the grid spacing
    (vla-SetGridSpacing viewportObj (* XSpacing 0.5) (* YSpacing 0.5))
    (vla-put-ActiveViewport doc viewportObj)
    (vla-GetGridSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
)
")
("SetGridVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-45C12586-73F3-4EDD-A15B-8850B8F50A8F"
                     "
SetGridVisibility Method (ActiveX)
Sets the grid visibility value for the specified grid linetype and row types.
Supported platforms: Windows only
Signature
VBA:
object.SetGridVisibility gridLineTypes, rowTypes, bValue
object
    Type: Table, TableStyle
    The objects this method applies to.
gridLineTypes
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
bValue
    Access: Input-only
    Type: Boolean
        True: The grid is visible for the specified row type.
        False: The grid is not visible for the specified row type.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetGridVisibility()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Get the current TableStyle object
    Dim tableStyle As AcadTableStyle
    Set tableStyle = dictObj.Item(ThisDrawing.GetVariable(\"CTABLESTYLE\"))
  
    Dim colGridCurrent As AcadAcCmColor, lwGridCurrent As ACAD_LWEIGHT, visGridCurrent As Boolean
    Set colGridCurrent = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridCurrent = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridCurrent = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridCurrent.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridCurrent & vbLf & _
           \"Visibility (Top) =  \" & visGridCurrent
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 0, 0, 255
    tableStyle.SetGridColor acHorzBottom, acTitleRow, col
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, acLnWt025
    If visGridCurrent = False Then
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, True
    Else
        tableStyle.SetGridVisibility acHorzTop, acTitleRow, False
    End If
      
    Dim colGridNew As AcadAcCmColor, lwGridNew As ACAD_LWEIGHT, visGridNew As Boolean
    Set colGridNew = tableStyle.GetGridColor(acHorzBottom, acTitleRow)
    lwGridNew = tableStyle.GetGridLineWeight(acHorzBottom, acTitleRow)
    visGridNew = tableStyle.GetGridVisibility(acHorzTop, acTitleRow)
    MsgBox \"Grid settings \" & vbLf & _
           \"nColor (Bottom) = \" & colGridNew.ColorIndex & vbLf & _
           \"nLineweight (Bottom) = \" & lwGridNew & vbLf & _
           \"Visibility (Top) =  \" & visGridNew
             
    tableStyle.SetGridColor acHorzBottom, acTitleRow, colGridCurrent
    tableStyle.SetGridLineWeight acHorzBottom, acTitleRow, lwGridCurrent
    tableStyle.SetGridVisibility acHorzTop, acTitleRow, visGridCurrent
      
    MsgBox \"Reset the table style back to its original values.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetGridVisibility()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetBackgroundColorNone customObj acHeaderRow :vlax-false)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)
)
")
("SetGridVisibility2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D98D6045-331E-4182-8863-99EC90803FA2"
                      "
SetGridVisibility2 Method (ActiveX)
Sets the grid visibility value for the specified cell or cell style.
Supported platforms: Windows only
Signature - Table
VBA:
object.SetGridVisibility2 nRow, nCol, nGridLineType, bVisible
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nGridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
bVisible
    Access: Input-only
    Type: Boolean
        True: The grid is visible for the specified cell.
        False: The grid is not visible for the specified cell.
Signature - TableStyle
VBA:
object.SetGridVisibility2 bstrCellStyle, gridLineType, bValue
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    A named cell style in the table style.
gridLineType
    Access: Input-only
    Type: AcGridLineType enum
    The grid linetypes to change.
        acHorzBottom
        acHorzInside
        acHorzTop
        acInvalidGridLine
        acVertInside
        acVertLeft
        acVertRight
bValue
    Access: Input-only
    Type: Boolean
        True: The grid is visible for the specified cell style.
        False: The grid is not visible for the specified cell style.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetInvisibleEdge" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A14EDA04-5E4C-4E75-B2E2-0534B093DBF7"
                    "
SetInvisibleEdge Method (ActiveX)
Sets the visibility state of an edge at a given index.
Supported platforms: Windows only
Signature
VBA:
object.SetInvisibleEdge Index, State
object
    Type: 3DFace
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    An index specifying the edge to set. The index must be between 0 and 3 inclusive.
State
    Access: Input-only
    Type: Boolean
        True: Sets the edge to invisible.
        False: Sets the edge to visible.
Return Value (RetVal)
No return value.
Remarks
You can create a 3DFace object in which all edges are invisible. It does not appear in wireframe presentations, but can hide material in line drawings. It does not appear in shaded renderings.
The Regen method must be called for any visibility changes to appear in the drawing.
Examples
VBA:
Sub Example_SetInvisibleEdge()
    ' This example creates a 3D face in model space.
    ' It then toggles the visibility of the  first edge.
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim point3(0 To 2) As Double
    Dim point4(0 To 2) As Double
    
    ' Define the four coordinates of the face
    point1(0) = 1#: point1(1) = 1#: point1(2) = 0#
    point2(0) = 5#: point2(1) = 1#: point2(2) = 1#
    point3(0) = 1#: point3(1) = 10#: point3(2) = 0#
    point4(0) = 5#: point4(1) = 5#: point4(2) = 1#
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ZoomAll
    
    ' Find the current visibility status of the first edge of the face
    Dim visStatus As Boolean
    visStatus = faceObj.GetInvisibleEdge(0)
    MsgBox \"The first face is currently \" & IIf(faceObj.GetInvisibleEdge(0), \"visible.\", \"invisible.\"), , \"GetInvisibleEdge Example\"
    
    ' Toggle the visibility of the first edge of the face
    faceObj.SetInvisibleEdge 0, Not (visStatus)
    ThisDrawing.Regen False
    MsgBox \"The first face is now \" & IIf(faceObj.GetInvisibleEdge(0), \"visible.\", \"invisible.\"), , \"GetInvisibleEdge Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetInvisibleEdge()
    ;; This example creates a 3D face in model space.
    ;; It then toggles the visibility of the  first edge.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 1 1 0)
          point2 (vlax-3d-point 5 1 1)
          point3 (vlax-3d-point 5 5 1)
          point4 (vlax-3d-point 1 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
    
    ;; Find the current visibility status of the first edge of the face
    (setq visStatus (vla-GetInvisibleEdge faceObj 0))
    (alert (strcat \"The first face is currently \" (if (= visStatus :vlax-true) \"visible.\" \"invisible.\")))
    
    ;; Toggle the visibility of the first edge of the face
    (vla-SetInvisibleEdge faceObj 0 (if (= visStatus :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc :vlax-false)
    (alert (strcat \"The first face is now \" (if (= (vla-GetInvisibleEdge faceObj 0) :vlax-true) \"visible.\" \"invisible.\")))
)
")
("SetLayoutsToPlot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-514B4377-CFE5-403F-87A7-B0D3AB16CC66"
                    "
SetLayoutsToPlot Method (ActiveX)
Specifies the layout or layouts to plot.
Supported platforms: Windows only
Signature
VBA:
object.SetLayoutsToPlot layoutList
object
    Type: Plot
    The object this method applies to.
layoutList
    Access: Input-only
    Type: Variant
    An array of layout names representing the layouts to plot.
Return Value (RetVal)
No return value.
Remarks
This method may become obsolete and may be removed in a future version of AutoCAD.
If the layoutList parameter is NULL or this method is not called at all, the active layout is sent to the plot.
After each call to the PlotToFile or PlotToDevice method, the default layout to plot is reset to the active layout. To specify any layout other than the active layout, you must call the SetLayoutsToPlot method before each plot.
Examples
VBA:
Sub Example_SetLayoutsToPlot()
    ' This example plots the layouts of a drawing.
    Dim oPlot As AcadPlot
    Dim AddedLayouts() As String
    Dim LayoutList As Variant
    Dim oLayout As AcadLayout
    Dim ArraySize As Integer, BatchCount As Integer
    
    For Each oLayout In ThisDrawing.Layouts
        ArraySize = ArraySize + 1
        ReDim Preserve AddedLayouts(1 To ArraySize)
        AddedLayouts(ArraySize) = oLayout.Name
    Next
    LayoutList = AddedLayouts
    Set oPlot = ThisDrawing.Plot
    oPlot.SetLayoutsToPlot LayoutList
    oPlot.PlotToDevice \"DWF6 ePlot.pc3\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetLayoutsToPlot()
    ;; This example plots the layouts of a drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq AddedLayouts (vlax-make-safearray vlax-vbString (cons 0 (1- (vla-get-Count (vla-get-Layouts doc)))))
          ArraySize 0)
    
    (vlax-for oLayout (vla-get-Layouts doc)
        (vlax-safearray-put-element AddedLayouts ArraySize (vla-get-Name oLayout))
        (setq ArraySize (1+ ArraySize))
    )
    (setq oPlot (vla-get-Plot doc))
    (vla-SetLayoutsToPlot oPlot AddedLayouts)
    (vla-PlotToDevice oPlot \"DWF6 ePlot.pc3\")
)
")
("SetLeaderLineVertices" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4783B9A9-0DA9-4DC5-ADDC-36BF0C58CB3F"
                         "
SetLeaderLineVertices Method (ActiveX)
Sets the vertices of leader line with specified index.
Supported platforms: Windows only
Signature
VBA:
object.SetLeaderLineVertices leaderLineIndex, pointArray
object
    Type: MLeader
    The object this method applies to.
leaderLineIndex
    Access: Input-only
    Type: Long
    The leader line index.
pointArray
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The vertices of leader lines owned by the input leader.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetMargin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-180D2C78-B661-439A-8891-73849F40D47B"
             "
SetMargin Method (ActiveX)
Sets the margin for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetMargin nRow, nCol, nMargins, fMargin
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type: Long
    The value of the column.
nMargins
    Access: Input-only
    Type: AcCellMargin enum
    The value of the margins.
        acCellMarginBottom
        acCellMarginHorzSpacing
        acCellMarginLeft
        acCellMarginRight
        acCellMarginTop
        acCellMarginVertSpacing
pValue
    Access: Input-only
    Type: Double
    The new margin value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetNames" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-150F7E76-DB8B-4F60-9F22-D9E6DDA89787"
            "
SetNames Method (ActiveX)
Specifies the color name and book name of the color.
Supported platforms: Windows only
Signature
VBA:
object.SetNames ColorName, ColorBook
object
    Type: AcCmColor
    The object this method applies to.
ColorName
    Access: Input-only
    Type: String
    The name of the color.
BookName
    Access: Input-only
    Type: String
    The color book name of the color.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetNames()
    'This example draws a circle and
    'returns the color name and color book name of the color.
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 125, 175, 235
    col.SetNames \"MyColor\", \"MyColorBook\"
    
    Dim cir As AcadCircle
    Dim pt(0 To 2) As Double
    Set cir = ThisDrawing.ModelSpace.AddCircle(pt, 2)
    cir.TrueColor = col
    ZoomAll
    
    Dim retCol As AcadAcCmColor
    Set retCol = cir.TrueColor
    MsgBox \"BookName=\" & col.BookName & vbLf & _
           \"ColorName=\" & col.ColorName
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetNames()
    ;; This example draws a circle and
    ;; returns the color name and color book name of the color.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 125 175 235)
    (vla-SetNames col \"MyColor\" \"MyColorBook\")
      
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq cir (vla-AddCircle modelSpace pt 2))
    (vla-put-TrueColor cir col)
    (vla-ZoomAll acadObj)
    
    (setq retCol (vla-get-TrueColor cir))
    (alert (strcat \"BookName=\" (vla-get-BookName col)
                   \"\nColorName=\" (vla-get-ColorName col)
	          )
    )
    (vlax-release-object col)  
)
")
("SetOverride" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E06C9DDE-DBCD-4EBA-AF90-F98BEDC8CA62"
               "
SetOverride Method (ActiveX)
Sets the overrides for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetOverride nRow, nCol, nContent, nProp
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The value of the row.
nCol
    Access: Input-only
    Type:Long
    The value of the column.
nContent
    Access: Input-only
    Type: Long
    The value of the cell's content.
nProp
    Access:Input-only
    Type: AcCellProperty enum
    The new cell override.
        acAlignmentProperty
        acAllCellProperties
        acAutoScale
        acBackgroundColor
        acBitProperties
        acContentColor
        acContentLayout
        acContentProperties
        acDataFormat
        acDataType
        acDataTypeAndFormat
        acEnableBackgroundColor
        acFlowDirBtoT
        acInvalidCellProperty
        acLock
        acMarginBottom
        acMarginLeft
        acMarginRight
        acMarginTop
        acMergeAll
        acRotation
        acScale
        acTextHeight
        acTextStyle
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetPattern" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A69D499D-9E36-4ABB-8956-8A9F6DB24CA7"
              "
SetPattern Method (ActiveX)
Sets the pattern name and pattern type for the hatch.
Supported platforms: Windows only
Signature
VBA:
object.SetPattern PatternType, PatternName
object
    Type: Hatch
    The object this method applies to.
PatternType
    Access: Input-only
    Type: AcPatternType enum
        acHatchPatternTypePreDefined: Selects the pattern name from those defined in the acad.pat file.
        acHatchPatternTypeUserDefined: Defines a pattern of lines using the current linetype.
        acHatchPatternTypeCustomDefined: Selects the pattern name from a PAT file other than the acad.pat file.
PatternName
    Access: Input-only
    Type: String
    The name of the pattern. Sets a default hatch pattern name of up to 34 characters, no spaces allowed. Returns \"\" if there is no default. Enter a period (.) to set no default.
Return Value (RetVal)
No return value.
Remarks
The hatch pattern can be defined by one of the following options:
PreDefined: Selects the pattern name from those defined in the acad.pat file.
UserDefined: Defines a pattern of lines using the current linetype.
CustomDefined: Selects the pattern name from a PAT file other than the acad.pat file.
Note: The SetPattern method should only be used for the active document.
Examples
VBA:
Sub Example_SetPattern()
    ' This example creates an associative hatch in model space.
    ' The hatch pattern is then changed.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ZoomAll
    
    ' Find the name of the hatch pattern
    patternName = hatchObj.patternName
    MsgBox \"The hatch pattern is \" & hatchObj.patternName, , \"SetPattern Example\"
                   
    ' Change the hatch pattern
    hatchObj.SetPattern acHatchPatternTypePreDefined, \"BRICK\"
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"The hatch pattern is now \" & hatchObj.patternName, , \"SetPattern Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetPattern()
    ;; This example creates an associative hatch in model space.
    ;; The hatch pattern is then changed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0) 
          radius 3
          startAngle 0
          endAngle 3.141592)
  
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)  
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-ZoomAll acadObj)
    
    ;; Find the name of the hatch pattern
    (setq patternName (vla-get-patternName hatchObj))
    (alert (strcat \"The hatch pattern is \" patternName))
                   
    ;; Change the hatch pattern
    (vla-SetPattern hatchObj acHatchPatternTypePreDefined \"BRICK\")
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The hatch pattern is now \" (vla-get-patternName hatchObj)))
)
")
("SetRGB" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1FD95F7C-0EBD-4841-9BE8-7C1EC210548D"
          "
SetRGB Method (ActiveX)
Specifies the RGB values of the True Color.
Supported platforms: Windows only
Signature
VBA:
object.SetRGB Red, Green, Blue
object
    Type: AcCmColor
    The object this method applies to.
Red
    Access: Input-only
    Type: Long
    The red value of the color.
Green
    Access: Input-only
    Type: Long
    The green value of the color.
Blue
    Access: Input-only
    Type: Long
    The blue value of the color.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetRGB()
    ' This example draws a line and returns the RGB values
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    Dim line As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
        
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
        
    Set line = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    line.TrueColor = color
    Dim retcolor As AcadAcCmColor
    Set retcolor = line.TrueColor
    
    MsgBox \"Red = \" & retcolor.Red & vbLf & _
           \"Green = \" & retcolor.Green & vbLf & _
           \"Blue = \" & retcolor.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetRGB()
    ;; This example draws a line and returns the RGB values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (vla-put-TrueColor lineObj color)
    (setq retcolor (vla-get-TrueColor lineObj))
    
    (alert (strcat \"Red = \" (itoa (vla-get-Red retcolor))
                   \"\nGreen = \" (itoa (vla-get-Green retcolor))
                   \"\nBlue = \" (itoa (vla-get-Blue retcolor))))
)
")
("SetRelativeDrawOrder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AD2CA392-D4B5-4F0D-AE0B-3A376B396D31"
                        "
SetRelativeDrawOrder Method (ActiveX)
Sets the relative draw order specified, with the bottom objects first.
Supported platforms: Windows only
Signature
VBA:
object.SetRelativeDrawOrder Objects
object
    Type: SortentsTable
    The object this method applies to.
Objects
    Access: Input-only
    Type: Variant
    The objects for which to set the draw order.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SortentsTable()
    ' This example creates a SortentsTable object and
    ' changes the draw order.
    ' Set drawing to display lineweights and create a True Color object
    Dim ACADPref As AcadDatabasePreferences
    Set ACADPref = ThisDrawing.preferences
    ACADPref.LineWeightDisplay = True
    Dim MyColorObjOne As AcadAcCmColor
    Set MyColorObjOne = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call MyColorObjOne.SetRGB(80, 100, 244)
   
    ' Draw a polyline
    Dim plineObj As AcadPolyline
    Dim points(0 To 8) As Double
    points(0) = 4: points(1) = 4: points(2) = 0
    points(3) = 3: points(4) = 5: points(5) = 0
    points(6) = 6: points(7) = 20: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    plineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(90, 110, 150)
    plineObj.TrueColor = MyColorObjOne
    ' Draw a line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 5: startPoint(1) = 13: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 27: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(50, 80, 230)
    lineObj.TrueColor = MyColorObjOne
     
    ' Draw a circle
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    centerPoint(0) = 10: centerPoint(1) = 15: centerPoint(2) = 0#
    radius = 5#
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    circleObj.Lineweight = acLnWt211
    Call MyColorObjOne.SetRGB(60, 200, 220)
    circleObj.TrueColor = MyColorObjOne
    ZoomAll
    AcadApplication.Update
      
    ' Get an extension dictionary and, if necessary, add a SortentsTable object
    Dim eDictionary As Object
    Set eDictionary = ThisDrawing.ModelSpace.GetExtensionDictionary
    ' Prevent failed GetObject calls from throwing an exception
    On Error Resume Next
    Dim sentityObj As Object
    Set sentityObj = eDictionary.GetObject(\"ACAD_SORTENTS\")
    On Error GoTo 0
    If sentityObj Is Nothing Then
         ' No SortentsTable object, so add one
         Set sentityObj = eDictionary.AddObject(\"ACAD_SORTENTS\", \"AcDbSortentsTable\")
    End If
    
    Dim ObjIds(2) As Long
    ObjIds(0) = plineObj.ObjectID
    ObjIds(1) = lineObj.ObjectID
    ObjIds(2) = circleObj.ObjectID
    
    Dim varObject As AcadObject
    Set varObject = ThisDrawing.ObjectIdToObject(ObjIds(2))
    Dim arr(0) As AcadObject
    Set arr(0) = varObject
    
    ' Move the circle object to the bottom
    sentityObj.MoveToBottom arr
    AcadApplication.Update
         
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SortentsTable()
    ;; This example creates a SortentsTable object and
    ;; changes the draw order.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Set drawing to display lineweights and create a True Color object
    (vla-put-LineWeightDisplay (vla-get-Preferences doc) :vlax-true)
    (setq MyColorObjOne (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB MyColorObjOne 80 100 244)
   
    ;; Draw a polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(4 4 0
                                  3 5 0
				  6 20 0
				 )
    )
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-put-Lineweight plineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 90 110 150)
    (vla-put-TrueColor plineObj MyColorObjOne)
    ;; Draw a line
    (setq startPoint (vlax-3d-point 5 13 0)
          endPoint (vlax-3d-point 5 27 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-put-Lineweight lineObj acLnWt211)
    (vla-SetRGB MyColorObjOne 50 80 230)
    (vla-put-TrueColor lineObj MyColorObjOne)
     
    ;; Draw a circle
    (setq centerPoint (vlax-3d-point 10 15 0)  
          radius 5)
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-SetRGB MyColorObjOne 60 200 220)
    (vla-put-TrueColor circleObj MyColorObjOne)
    (vla-ZoomAll acadObj)
    (vla-Update acadObj)
      
    ;; Get an extension dictionary and, if necessary, add a SortentsTable object
    (setq eDictionary (vla-GetExtensionDictionary modelSpace))
    ;; Prevent failed GetObject calls from throwing an exception
    (setq sentityObj (vl-catch-all-apply 'vla-GetObject (list eDictionary \"ACAD_SORTENTS\")))
  
    (if (= (type sentityObj)'VL-CATCH-ALL-APPLY-ERROR)
         ;; No SortentsTable object, so add one
         (setq sentityObj (vla-AddObject eDictionary \"ACAD_SORTENTS\" \"AcDbSortentsTable\"))
    )
    
    (setq ObjIds (vlax-make-safearray vlax-vbLong '(0 . 2)))
    (vlax-safearray-put-element ObjIds 0 (vla-get-ObjectID plineObj))
    (vlax-safearray-put-element ObjIds 1 (vla-get-ObjectID lineObj))
    (vlax-safearray-put-element ObjIds 2 (vla-get-ObjectID circleObj))
    
    (setq varObject circleObj)
    (setq arr (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element arr 0 varObject)
    
    ;; Move the circle object to the bottom
    (vla-MoveToBottom sentityObj arr)
    (vla-Update acadObj)
    (vlax-release-object MyColorObjOne)
)
")
("SetRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A696EE85-F867-4057-A7CF-26371673C51C"
               "
SetRotation Method (ActiveX)
Sets the rotation value for a cell.
Supported platforms: Windows only
Signature - Table
VBA:
object.SetRotation nRow, nCol, nContent, pValue
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Integer
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Integer
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Integer
    The content value for the cell.
value
    Access: Input-only
    Type: Double
    The new value for the rotation.
Signature - TableStyle
VBA:
object.SetRotation bstrCellStyle, Rotation
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    A named cell style in the table style.
Rotation
    Access: Input-only
    Type: Double
    The new value for the rotation.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetRowHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-40A786BA-74CA-423D-8664-9002DC8E11EB"
                "
SetRowHeight Method (ActiveX)
Sets the height for the row at the specified row index in the table.
Supported platforms: Windows only
Signature
VBA:
object.SetRowHeight row, Height
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row index of the table.
Height
    Access: Input-only
    Type: Double
    The height for the row.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FBE37B26-6EE8-4563-9ECE-D8ECDC68D057"
            "
SetScale Method (ActiveX)
Sets the scale value for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetScale nRow, nCol, nContent, scale
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
scale
    Access: Input-only
    Type: Double
    The new scale value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetSnapSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-848B2A85-8ADC-4F06-B7A9-D6BF2771BB80"
                  "
SetSnapSpacing Method (ActiveX)
Sets the snap spacing for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.SetSnapSpacing XSpacing, YSpacing
object
    Type: PViewport, Viewport
    The object this method applies to.
XSpacing
    Access: Input-only
    Type: Double
    The snap spacing for the X axis.
YSpacing
    Access: Input-only
    Type: Double
    The snap spacing for the Y axis.
Return Value (RetVal)
No return value.
Remarks
The initial value for the X and Y spacing is 1.0000.
This value is also controlled by the SNAPUNIT system variable.
Examples
VBA:
Sub Example_SetSnapSpacing()
    ' This example finds the current Snap spacing and changes it.
    
    ' Find the current active viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Turn on Snap mode and reset the viewport.
    viewportObj.SnapOn = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Find the current Snap spacing
    Dim XSpacing As Double
    Dim YSpacing As Double
    
    viewportObj.GetSnapSpacing XSpacing, YSpacing
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, Title:=\"SetSnapSpacing Example\"
    
    ' Change the Snap spacing
    XSpacing = XSpacing * 0.5
    YSpacing = YSpacing * 0.5
    viewportObj.SetSnapSpacing XSpacing, YSpacing
    ThisDrawing.ActiveViewport = viewportObj
    MsgBox \"X =\" & XSpacing & \", Y =\" & YSpacing, Title:=\"SetSnapSpacing Example\"
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetSnapSpacing()
    ;; This example finds the current Snap spacing, and changes that spacing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Find the current active viewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Turn on Snap spacing and reset the viewport.
    (vla-put-SnapOn viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Find the current Snap spacing
    (vla-GetSnapSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
    
    ;; Change the Snap spacing
    (vla-SetSnapSpacing viewportObj (* XSpacing 0.5) (* YSpacing 0.5))
    (vla-put-ActiveViewport doc viewportObj)
    (vla-GetSnapSpacing viewportObj 'XSpacing 'YSpacing)
    (alert (strcat \"X =\" (rtos XSpacing 2) \", Y =\" (rtos YSpacing 2)))
)
")
("SetSubSelection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-46A865DE-70B9-4E93-A371-B2CEB39B59A1"
                   "
SetSubSelection Method (ActiveX)
Sets the row and column indices of the cells in a subselection set.
Supported platforms: Windows only
Signature
VBA:
object.SetSubSelection rowMin, rowMax, colMin, colMax
object
    Type: Table
    The object this method applies to.
rowMin
    Access: Input-only
    Type: Long
    The zero-based lower bound of row index.
rowMax
    Access: Input-only
    Type: Long
    The zero-based upper bound of row index.
colMin
    Access: Input-only
    Type: Long
    The zero-based lower bound of column index.
colMax
    Access: Input-only
    Type: Long
    The zero-based upper bound of column index.
Return Value (RetVal)
No return value.
Remarks
This method sets the row and column indices of the cells in the subselection set. The total number of selected cells is equal to (rowMax - rowMin + 1) * (colMax - colMin + 1).
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetTemplateId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-493DE9D7-9487-4C77-B3C1-6B4694AB68C5"
                 "
SetTemplateId Method (ActiveX)
Sets a template using an object ID to the table style.
Supported platforms: Windows only
Signature
VBA:
object.SetTemplateId val, option
object
    Type: TableStyle
    The object this method applies to.
val
    Access: Input-only
    Type: Long_PTR
    The object ID to a template.
option
    Access: Input-only
    Type: AcMergeCellStyleOption enum
    The merge cell style to use when applying the template.
        acMergeCellStyleCopyDuplicates
        acMergeCellStyleConvertDuplicatesToOverrides
        acMergeCellStyleIgnoreNewStyles
        acMergeCellStyleNone
        acMergeCellStyleOverwriteDuplicates
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-74DEEE3D-10F5-4D0A-85D2-67899C8B20E2"
           "
SetText Method (ActiveX)
Sets the text value for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetText row, col, pStr
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The zero-based row index for the cell.
col
    Access: Input-only
    Type: Long
    The zero-based column index for the cell.
pStr
    Access: Input-only
    Type: String
    The text value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetTextHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-35CC52D6-03C1-48EE-90A3-97DFBBAC33C3"
                 "
SetTextHeight Method (ActiveX)
Sets the text height for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetTextHeight rowTypes, TextHeight
object
    Type: Table, TableStyle
    The object this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
TextHeight
    Access: Input-only
    Type: Double
    The text height to use for the specified row types.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetTextHeight()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetTextHeight()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)
)
")
("SetTextHeight2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C8351305-95A6-4C79-A4E8-783E10909906"
                  "
SetTextHeight2 Method (ActiveX)
Sets the text height for a cell.
Supported platforms: Windows only
Signature - Table
VBA:
object.SetTextHeight2 nRow, nCol, nContent, height
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
height
    Access: Input-only
    Type: Double
    The new height value.
Signature - TableStyle
VBA:
object.SetTextHeight2 bstrCellStyle, Height
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The name of a cell style associated with the table style.
Height
    Access: Input-only
    Type: Double
    The new height value.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetTextRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0A743BBD-C563-45BB-82E3-05DCCAF28F95"
                   "
SetTextRotation Method (ActiveX)
Sets the text rotation for the specified row and column.
Supported platforms: Windows only
Signature
VBA:
object.SetTextRotation row, col, TextRotation
object
    Type: Table
    The object this method applies to.
row
    Access: Input-only
    Type: Long
    The row number of the cell.
col
    Access: Input-only
    Type: Long
    The column number of the cell.
TextRotation
    Access: Input-only
    Type: AcRotationAngle enum
    The text rotation.
        acDegrees000
        acDegrees090
        acDegrees180
        acDegrees270
        acDegreesUnknown
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetTextString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C5887D04-EB95-4311-A44F-D7046C3085E9"
                 "
SetTextString Method (ActiveX)
Sets the text value of a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetTextString nRow, nCol, nContent, text
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
text
    Access: Input-only
    Type: String
    The string value to store.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetTextStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F1D29F15-74F8-42B3-865C-5EEC4226DDFB"
                "
SetTextStyle Method (ActiveX)
Sets the text style name for the specified row types.
Supported platforms: Windows only
Signature
VBA:
object.SetTextStyle rowTypes, bstrName
object
    Type: Table, TableStyle
    The object this method applies to.
rowTypes
    Access: Input-only
    Type: AcRowType enum
    The row types to change.
        acDataRow
        acHeaderRow
        acTitleRow
        acUnknownRow
bstrName
    Access: Input-only
    Type: String
    The text style name to use for the specified row types.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetTextStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetTextStyle()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("SetTextStyle2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AC968206-3BA0-473D-9978-842E327BBC24"
                 "
SetTextStyle2 Method (ActiveX)
Sets the text style name for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetTextStyle2 nRow, nCol, nContent, StringStyleName
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value for the cell.
StringStyleName
    Access: Input-only
    Type: String
    The new style name to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetTextStyleId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-97D4C2BB-F2B9-435B-9B88-BFA5A06D9C6D"
                  "
SetTextStyleId Method (ActiveX)
Sets a text style using an object ID to a named cell style.
Supported platforms: Windows only
Signature
VBA:
object.SetTextStyleId bstrCellStyle, val
object
    Type: TableStyle
    The object this method applies to.
bstrCellStyle
    Access: Input-only
    Type: String
    The named cell style to modify.
val
    Access: Input-only
    Type: Long_PTR
    The object ID of the text style being to assign to the named cell style.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetToolTip" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-37B2DA0D-9165-4FAF-B421-AF00FF6383D8"
              "
SetToolTip Method (ActiveX)
Sets the tooltip for a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetToolTip nRow, nCol, tip
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The index of the row.
nCol
    Access: Input-only
    Type: Long
    The index of the column.
tip
    Access: Input-only
    Type: String
    The new tooltip text.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B490C108-68DD-4B82-8131-5C601382D22E"
            "
SetValue Method (ActiveX)
Sets the value of a cell.
Supported platforms: Windows only
Signature
VBA:
object.SetValue nRow, nCol, nContent, acValue
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
acValue
    Access: Input-only
    Type: Variant
    The cell value to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetValueFromText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-22CE26B7-0E10-4AF8-8AF5-20360C543F0F"
                    "
SetValueFromText Method (ActiveX)
Sets the value of a cell by parsing the text.
Supported platforms: Windows only
Signature
VBA:
object.SetValueFromText nRow, nCol, nContent, szText, nOption
object
    Type: Table
    The object this method applies to.
nRow
    Access: Input-only
    Type: Long
    The row number of the cell to set.
nCol
    Access: Input-only
    Type: Long
    The column number of the cell to set.
nContent
    Access: Input-only
    Type: Long
    The content value of the cell.
szText
    Access: Input-only
    Type: String
    The text string to set as a value.
nOption
    Access: Input-only
    Type: AcParseOption enum
    Special input option flags.
        acParseOptionNone
        acPreserveMtextFormat
        acSetDefaultFormat
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SetVariable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3E2009E4-2356-49D4-92DD-D16CAED65A4C"
               "
SetVariable Method (ActiveX)
Sets the value of an AutoCAD system variable.
Supported platforms: Windows only
Signature
VBA:
object.SetVariable Name, Value
object
    Type: Document
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the system variable to set.
Value
    Access: Input-only
    Type: Variant
    The new value for the specified system variable.
Return Value (RetVal)
No return value.
Remarks
When setting system variables, AutoCAD may require integers, text, or double values. Passing the wrong data type (for example, passing a variant of type double when an integer is required) will generate an error. The easiest way to avoid this is to use one of the Cxxx functions, such as CInt(), to explicitly type your data before passing it.
For a list of all AutoCAD system variables and their types, please refer to \"System Variables\" in the AutoCAD Help system.
Examples
VBA:
Sub Example_SetVariable()
    ' This example sets various system variables, each of
    ' a different data type.
    
    Dim sysVarName As String
    Dim sysVarData As Variant
    Dim DataType As Integer
    
    ' Set FILEDIA system variable (data type Integer) to 1. NOTE that
    ' you need to declare a variable as the data type of system variable,
    ' assign data to that variable and then make it variant type
    Dim intData As Integer
    sysVarName = \"FILEDIA\"
    intData = 1
    sysVarData = intData    ' Integer data
    ThisDrawing.SetVariable sysVarName, sysVarData
    
    ' Check the variable using GetVariable
    sysVarData = ThisDrawing.GetVariable(sysVarName)
    MsgBox sysVarName & \" = \" & sysVarData, , \"SetVariable Example\"
    
    ' Set DCTCUST system variable (data type String) to \"My Custom Dictionary\"
    Dim strData As String
    sysVarName = \"DCTCUST\"
    strData = \"My Custom Dictionary\"
    sysVarData = strData        ' String data
    ThisDrawing.SetVariable sysVarName, sysVarData
    
    ' Check the variable using GetVariable
    sysVarData = ThisDrawing.GetVariable(sysVarName)
    MsgBox sysVarName & \" = \" & sysVarData, , \"SetVariable Example\"
   
    ' Set CHAMFERA system variable (data type Double) to 1.5
    Dim dataDouble As Double
    sysVarName = \"CHAMFERA\"
    dataDouble = 1.5
    sysVarData = dataDouble ' Double data
    ThisDrawing.SetVariable sysVarName, sysVarData
    ' Check the variable using GetVariable
    sysVarData = ThisDrawing.GetVariable(sysVarName)
    MsgBox sysVarName & \" = \" & sysVarData, , \"SetVariable Example\"
   
    ' Set INSBASE system variable (data type array) to (1.0,1.0,0)
    Dim arrayData3D(0 To 2) As Double
    sysVarName = \"INSBASE\"
    arrayData3D(0) = 1#: arrayData3D(1) = 1#: arrayData3D(2) = 0
    sysVarData = arrayData3D    ' 3D array data
    ThisDrawing.SetVariable sysVarName, sysVarData
    ' Check the variable using GetVariable
    sysVarData = ThisDrawing.GetVariable(sysVarName)
    MsgBox sysVarName & \" = \" & sysVarData(0) & \", \" & sysVarData(1) & \", \" & sysVarData(2), , \"SetVariable Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetVariable()
    ;; This example sets various system variables, each of
    ;; a different data type.
    
    ;; Set FILEDIA system variable (data type Integer) to 1. NOTE that
    ;; you need to declare a variable as the data type of system variable,
    ;; assign data to that variable and then make it variant type
    (setq sysVarName \"FILEDIA\"
          intData 1
          sysVarData intData)    ;; Integer data
    (vla-SetVariable doc sysVarName sysVarData)
    
    ;; Check the variable using GetVariable
    (setq sysVarData (vlax-variant-value (vla-GetVariable doc sysVarName)))
    (alert (strcat sysVarName \" = \" (itoa sysVarData)))
    
    ;; Set DCTCUST system variable (data type String) to \"My Custom Dictionary\"
    (setq sysVarName \"DCTCUST\"
           strData \"My Custom Dictionary\"
           sysVarData strData)        ;; String data
    (vla-SetVariable doc sysVarName sysVarData)
    
    ;; Check the variable using GetVariable
    (setq sysVarData (vlax-variant-value (vla-GetVariable doc sysVarName)))
    (alert (strcat sysVarName \" = \" sysVarData))
   
    ;; Set CHAMFERA system variable (data type Double) to 1.5
    (setq sysVarName \"CHAMFERA\"
          dataDouble 1.5
          sysVarData dataDouble)      ;; Double data
    (vla-SetVariable doc sysVarName sysVarData)
    ;; Check the variable using GetVariable
    (setq sysVarData (vlax-variant-value (vla-GetVariable doc sysVarName)))
    (alert (strcat sysVarName \" = \" (rtos sysVarData 2)))
   
    ;; Set INSBASE system variable (data type array) to (1.0,1.0,0)
    (setq sysVarName \"INSBASE\"
          arrayData3D (vlax-3d-point 1 1 0)
          sysVarData arrayData3D)      ;; 3D array data
    (vla-SetVariable doc sysVarName sysVarData)
    ;; Check the variable using GetVariable
    (setq sysVarData (vlax-variant-value (vla-GetVariable doc sysVarName)))
    (alert (strcat sysVarName \" = \" (rtos (vlax-safearray-get-element sysVarData 0) 2) \", \"
                                    (rtos (vlax-safearray-get-element sysVarData 1) 2) \", \"
                                    (rtos (vlax-safearray-get-element sysVarData 2) 2)))
)
")
("SetView" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A56246A7-65B5-4B62-9AF4-BD2FDC27FF1C"
           "
SetView Method (ActiveX)
Sets the view in a viewport to a saved view in the Views collection object.
Supported platforms: Windows only
Signature
VBA:
object.SetView View
object
    Type: Viewport
    The object this method applies to.
View
    Access: Input-only
    Type: View
    The view to set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetView()
    ' This example creates a new view.
    ' It then changes the active viewport to
    ' the newly created view.
    
    ' Create a new view
    Dim viewObj As AcadView
    Set viewObj = ThisDrawing.Views.Add(\"TESTVIEW\")
    
    ' Set the view characteristics
    viewObj.center(0) = 374: viewObj.center(1) = 313
    viewObj.Width = 450
    viewObj.Height = 354
    
    ' Get the current active viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.ActiveViewport
    MsgBox \"Change to the saved view.\", , \"SetView Example\"
       
    ' Set the view in the viewport
    viewportObj.SetView viewObj
    ThisDrawing.ActiveViewport = viewportObj
        
    ThisDrawing.Regen True
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetView()
    ;; This example creates a new view.
    ;; It then changes the active viewport to
    ;; the newly created view.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new view
    (setq viewObj (vla-Add (vla-get-Views doc) \"TESTVIEW\"))
    
    ;; Set the view characteristics
    (setq centerPoint (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-fill centerPoint '(374 313))
    (vla-put-Center viewObj centerPoint)
    (vla-put-Width viewObj 450)
    (vla-put-height viewObj 354)
    
    ; Get the current active viewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    (alert \"Change to the saved view.\")
       
    ;; Set the view in the viewport
    (vla-SetView viewportObj viewObj)
    (vla-put-ActiveViewport doc viewportObj)
        
    (vla-Regen doc :vlax-true)
)
")
("SetWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-18F9FF5A-09B9-4F64-99C5-2049084D9CC5"
             "
SetWeight Method (ActiveX)
Sets the weight of the control point at a given index.
Supported platforms: Windows only
Signature
VBA:
object.SetWeight Index, Weight
object
    Type: Spline
    The object this method applies to.
Index
    Access: Input-only
    Type: Long
    The position in the control point list to set the weight. The first control point is index 0.
Weight
    Access: Input-only
    Type: Double
    The new weight of the point.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SetWeight()
    ' This example creates a spline object in model space.
    ' It then finds the weight of the first control point
    ' and changes that value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display the coordinates of the first fit point
    Dim weight As Double
    weight = splineObj.GetWeight(0)
    MsgBox \"The weight of control point 1 is \" & weight, , \"SetWeight Example\"
    
    ' Change the weight of the first control point
    weight = 5
    splineObj.SetWeight 0, weight
    splineObj.Update
    MsgBox \"The weight of control point 1 is now \" & weight, , \"SetWeight Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetWeight()
    ;; This example creates a spline object in model space.
    ;; It then finds the weight of the first control point
    ;; and changes that value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
                                     5 5 0
                                     10 0 0
                                    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display the coordinates of the first fit point
    (setq weight (vla-GetWeight splineObj 0))
    (alert (strcat \"The weight of control point 1 is \" (rtos weight 2)))
    
    ;; Change the weight of the first control point
    (setq weight 5)
    (vla-SetWeight splineObj 0 weight)
    (vla-Update splineObj)
    (alert (strcat \"The weight of control point 1 is now \" (rtos weight 2)))
)
")
("SetWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ED45F9D1-AE03-4DF0-9F2D-2019BD42CD52"
            "
SetWidth Method (ActiveX)
Sets the start and end width of a polyline, given the segment index.
Supported platforms: Windows only
Signature
VBA:
object.SetWidth SegmentIndex, StartWidth, EndWidth
object
    Type: LWPolyline, Polyline
    The objects this method applies to.
SegmentIndex
    Access: Input-only
    Type: Long
    An index specifying the segment whose width is to be set. The first segment is index 0.
StartWidth
    Access: Input-only
    Type: Double
    The start width for the specified segment.
EndWidth
    Access: Input-only
    Type: Double
    The end width for the specified segment.
Return Value (RetVal)
No return value.
Remarks
The segment index is the index of a particular segment of the polyline. For example, a polyline with three segments has segment indexes 0, 1, and 2.
Polyline: this method will fail if the polyline Type property is acCubicSplinePoly or acQuadSplinePoly.
Examples
VBA:
Sub Example_SetWidth()
    ' The following code prompts you to select a lightweight
    ' polyline, and then prompts you for the width to set each 
    ' segment of the polyline. 
    ' Pressing ENTER without specifying a width is equivalent to
    ' entering 0.
    AppActivate ThisDrawing.Application.Caption
    Dim returnObj As AcadObject
    Dim basePnt As Variant
    Dim retCoord As Variant
    Dim StartWidth As Double
    Dim EndWidth As Double
    Dim i, j As Long
    Dim nbr_of_segments As Long
    Dim nbr_of_vertices As Long
    Dim segment As Long
    Dim promptStart As String
    Dim promptEnd As String
              
    On Error Resume Next
   
    ThisDrawing.Utility.GetEntity returnObj, basePnt, \"Select a polyline\"
       
    ' Make sure the user selected a polyline.
    If Err <> 0 Then
        If returnObj.EntityName <> \"AcDbPolyline\" Then
            MsgBox \"You did not select a polyline\"
        End If
        Exit Sub
    End If
    
    ' Obtain the coordinates of each vertex of the selected polyline.
    ' The coordinates are returned in an array of points.
    retCoord = returnObj.Coordinates
    
    segment = 0
    i = LBound(retCoord)                 ' Start index of coordinates array
    j = UBound(retCoord)                 ' End index of coordinates array
    nbr_of_vertices = ((j - i) \ 2) + 1  ' Number of vertices in the polyline
    
    ' Determine the number of segments in the polyline.
    ' A closed polyline has as many segments as it has vertices.
    ' An open polyline has one fewer segment than it has vertices.
    ' Check the Closed property to determine if the polyline is closed.
    
    If returnObj.Closed Then
        nbr_of_segments = nbr_of_vertices
    Else
        nbr_of_segments = nbr_of_vertices - 1
    End If
    
    ' Have user set the width for each segment of the polygon
    Do While nbr_of_segments > 0
          
        ' Get width values from the user
        promptStart = vbCrLf & \"Specify the width at the beginning of the segment at \" & retCoord(i) & \",\" & retCoord(i + 1) & \" ==> \"
        promptEnd = vbCrLf & \"Now specify the width at the end of that segment ==> \"
       
        StartWidth = ThisDrawing.Utility.GetReal(promptStart)
        EndWidth = ThisDrawing.Utility.GetReal(promptEnd)
        ' Set the width of the current segment
        returnObj.SetWidth segment, StartWidth, EndWidth
     
        ' Prepare to obtain width of next segment, if any
        i = i + 2
        segment = segment + 1
        nbr_of_segments = nbr_of_segments - 1
    Loop
      
    MsgBox \"Segment widths have been set\", , \"SetWidth Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetWidth()
    ;; The following code prompts you to select a lightweight
    ;; polyline, then displays the width of each segment of the
    ;; selected polyline. 
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    (vla-GetEntity (vla-get-Utility doc) 'returnObj 'basePnt \"Select a polyline: \")
       
    ;; Make sure the user selected a polyline.
    (if (/= returnObj nil)
        (progn
            (if (= (vla-get-ObjectName returnObj) \"AcDbPolyline\")
	               (progn
		                  ;; Obtain the coordinates of each vertex of the selected polyline.
		                  ;; The coordinates are returned in an array of points.
		                  (setq retCoord (vlax-variant-value (vla-get-Coordinates returnObj)))
		    
		                  (setq segment 0
		                        i (vlax-safearray-get-l-bound retCoord 1)                 ;; Start index of coordinates array
		                        j (vlax-safearray-get-u-bound retCoord 1)                 ;; End index of coordinates array
		                        nbr_of_vertices (+ (/ (- j i) 2) 1))                      ;; Number of vertices in the polyline
		    
		                  ;; Determine the number of segments in the polyline.
		                  ;; A closed polyline has as many segments as it has vertices.
		                  ;; An open polyline has one fewer segment than it has vertices.
		                  ;; Check the Closed property to determine if the polyline is closed.
		                  (if (= (vla-get-Closed returnObj) :vlax-true)
		                      (setq nbr_of_segments nbr_of_vertices)
		                      (setq nbr_of_segments (1- nbr_of_vertices))
		                  )
		    
		                  ;; Get the width of each segment of the polyline
		                  (while (>= nbr_of_segments 0)
		                      ;; Get width values from the user
		                      (setq promptStart (strcat \"\nSpecify the width at the beginning of the segment at \" (rtos (vlax-safearray-get-element retCoord i) 2) \",\"
                                                                                                            (rtos (vlax-safearray-get-element retCoord (1+ i)) 2) \" ==> \"))
		                      (setq promptEnd (strcat \"\nNow specify the width at the end of that segment ==> \"))
		                      (setq StartWidth (vla-GetReal (vla-get-Utility doc) promptStart))
		                      (setq EndWidth (vla-GetReal (vla-get-Utility doc) promptEnd))
		                      ;; Set the width of the current segment
		                      (vla-SetWidth returnObj segment StartWidth EndWidth)
		                      ;; Prepare to obtain width of next segment, if any
		                      (setq i (+ i 2)
		                            segment (1+ segment)
		                            nbr_of_segments (1- nbr_of_segments))
	              	    )
	              	)
                (alert \"Object selected was not a polyline\")
            )
       	)
        (alert \"No object was selected.\")
    )
)
")
("SetWindowToPlot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9F4784EE-3203-4C7C-A27E-720B25BB1BD9"
                   "
SetWindowToPlot Method (ActiveX)
Sets the coordinates that define the portion of the layout to plot.
Supported platforms: Windows only
Signature
VBA:
object.SetWindowToPlot LowerLeft, UpperRight
object
    Type: Layout, PlotConfiguration
    The objects this method applies to.
LowerLeft
    Access: Input-only
    Type: Variant (two-element array of doubles)
    The X and Y values for the lower-left window.
UpperRight
    Access: Input-only
    Type: Variant (two-element array of doubles)
    The X and Y values for the upper-right window.
Return Value (RetVal)
No return value.
Remarks
The window coordinates are taken from the origin.
The units for these values are specified by the PaperUnits property.
The PlotType property must be set to acWindow for these coordinates to be used for the plot.
Examples
VBA:
Sub Example_SetWindowToPlot()
    ' This example allows the user to define an area in the current layout
    ' and displays a plot preview of the defined area.
    '
    ' * Note: You have to exit the
    ' plot preview before the VBA example will stop and control will be returned
    AppActivate ThisDrawing.Application.Caption
    Dim point1 As Variant, point2 As Variant
    
    ' Get first point in window
    point1 = ThisDrawing.Utility.GetPoint(, \"Click the lower-left of the window to plot.\")
    ReDim Preserve point1(0 To 1)   ' Change this to a 2D array by removing the Z position
    
    ' Get second point in window
    point2 = ThisDrawing.Utility.GetPoint(, \"Click the upper-right of the window to plot.\")
    ReDim Preserve point2(0 To 1)   ' Change this to a 2D array by removing the Z position
    
    ' Send information about window to current layout
    ThisDrawing.ActiveLayout.SetWindowToPlot point1, point2
    
    ' Read back window information
    ThisDrawing.ActiveLayout.GetWindowToPlot point1, point2
    
    MsgBox \"Press any key to plot the following window:\" & vbCrLf & vbCrLf & _
           \"Lower Left: \" & point1(0) & \", \" & point1(1) & vbCrLf & _
           \"Upper Right: \" & point2(0) & \", \" & point2(1)
    
    ' Be sure to plot a view, not some other plot style
    ThisDrawing.ActiveLayout.PlotType = acWindow
    
    ' Send Plot To Window
    ThisDrawing.ActiveLayout.ConfigName = \"DWG to PDF.pc3\"
    ThisDrawing.Plot.DisplayPlotPreview acFullPreview
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetWindowToPlot()
    ;; This example allows the user to define an area in the current layout to plot
    ;; and displays a plot preview of the defined area.
    ;;
    ;; * Note: You will have to exit the plot preview
    ;;  before the VBA example will stop and control will be returned
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Get first point in window
    (setq point1 (vlax-variant-value (vla-GetPoint (vla-get-Utility doc) nil \"Click the lower-left of the window to plot.\")))
    ;; Change this to a 2D array by removing the Z position
    (setq pointTemp1 (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-put-element pointTemp1 0 (vlax-safearray-get-element point1 0))
    (vlax-safearray-put-element pointTemp1 1 (vlax-safearray-get-element point1 1))
    
    ;; Get second point in window
    (setq point2 (vlax-variant-value (vla-GetCorner (vla-get-Utility doc) point1 \"Click the upper-right of the window to plot.\")))
    ;; Change this to a 2D array by removing the Z position
    (setq pointTemp2 (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-put-element pointTemp2 0 (vlax-safearray-get-element point2 0))
    (vlax-safearray-put-element pointTemp2 1 (vlax-safearray-get-element point2 1))
    
    ;; Send information about window to current layout
    (vla-SetWindowToPlot (vla-get-ActiveLayout doc) pointTemp1 pointTemp2)
    
    ;; Read back window information
    (vla-GetWindowToPlot (vla-get-ActiveLayout doc) 'point1 'point2)
    (setq point1 (vlax-safearray->list point1)
	         point2 (vlax-safearray->list point2))
  
    (alert (strcat \"Press any key to plot the following window:\"
                   \"\nLower Left: \" (rtos (nth 0 point1) 2) \", \" (rtos (nth 1 point1) 2)
                   \"\nUpper Right: \" (rtos (nth 0 point2) 2) \", \" (rtos (nth 1 point2) 2)))
    
    ;; Make sure the instruction is to plot a view, not some other plot style
    (vla-put-PlotType (vla-get-ActiveLayout doc) acWindow)
    
    ;; Send Plot To Window - A plot device must be set before a preview can be created
    (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWG to PDF.pc3\")
    (vla-DisplayPlotPreview (vla-get-Plot doc) acFullPreview)
)
")
("SetXData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EF0393EC-8446-4989-8C72-F3AE49D81176"
            "
SetXData Method (ActiveX)
Sets the extended data (XData) associated with an object.
Supported platforms: Windows only
Signature
VBA:
object.SetXData XDataType, XDataValue
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, Dimension, DimStyle, Group, Layer, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, RegisteredApplication, TableStyle, TextStyle, UCS, View, Viewport, XRecord
    The object this method applies to.
XDataType
    Access: Input-only
    Type: Variant (array of short)
    An array of short integer values that represent the DXF group code values for each value in the extended data (XData).
XDataValue
    Access: Input-only
    Type: Variant (array of variants)
    An array of values that make up the extended data (XData).
Return Value (RetVal)
No return value.
Remarks
Extended data is an example of instance-specific data created by applications written with ObjectARX or AutoLISP. This data can be added to any entity. This data follows the entity's definition data and is maintained in the order in which it was saved into the document. (AutoCAD maintains this information but does not use it.)
Examples
VBA:
Sub Example_SetXdata()
    ' This example creates a line and attaches extended data to that line.
    
    ' Create the line
    Dim lineObj As AcadLine
    Dim startPt(0 To 2) As Double, endPt(0 To 2) As Double
    startPt(0) = 1#: startPt(1) = 1#: startPt(2) = 0#
    endPt(0) = 5#: endPt(1) = 5#: endPt(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPt, endPt)
    ZoomAll
    ' Initialize all the xdata values. Note that first data in the list should be
    ' application name and first datatype code should be 1001
    Dim DataType(0 To 9) As Integer
    Dim Data(0 To 9) As Variant
    Dim reals3(0 To 2) As Double
    Dim worldPos(0 To 2) As Double
    
    DataType(0) = 1001: Data(0) = \"Test_Application\"
    DataType(1) = 1000: Data(1) = \"This is a test for xdata\"
    DataType(2) = 1003: Data(2) = \"0\"                   ' layer
    DataType(3) = 1040: Data(3) = 1.23479137438413E+40  ' real
    DataType(4) = 1041: Data(4) = 1237324938            ' distance
    DataType(5) = 1070: Data(5) = 32767                 ' 16 bit Integer
    DataType(6) = 1071: Data(6) = 32767                 ' 32 bit Integer
    DataType(7) = 1042: Data(7) = 10                    ' scaleFactor
    reals3(0) = -2.95: reals3(1) = 100: reals3(2) = -20
    DataType(8) = 1010: Data(8) = reals3                ' real
    
    worldPos(0) = 4: worldPos(1) = 400.99999999: worldPos(2) = 2.798989
    DataType(9) = 1011: Data(9) = worldPos              ' world space position
    
    ' Attach the xdata to the line
    lineObj.SetXData DataType, Data
    
    ' Return the xdata for the line
    Dim xdataOut As Variant
    Dim xtypeOut As Variant
    lineObj.GetXData \"\", xtypeOut, xdataOut
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetXData()
    ;; This example creates a line and attaches extended data to that line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the line
    (setq startPt (vlax-3d-point 1 1 0)
          endPt (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPt endPt))
    (vla-ZoomAll acadObj)
    ;; Initialize all the xdata values. Note that first data in the list should be
    ;; application name and first datatype code should be 1001
    (setq DataType (vlax-make-safearray vlax-vbInteger '(0 . 9)))
    (setq Data (vlax-make-safearray vlax-vbVariant '(0 . 9)))
    (vlax-safearray-put-element DataType 0 1001)
    (vlax-safearray-put-element Data 0 \"Test_Application\")
    (vlax-safearray-put-element DataType 1 1000)
    (vlax-safearray-put-element Data 1 \"This is a test for xdata\")
    ;; layer
    (vlax-safearray-put-element DataType 2 1003)
    (vlax-safearray-put-element Data 2 \"0\")
    ;; real
    (vlax-safearray-put-element DataType 3 1040)
    (vlax-safearray-put-element Data 3 1.23479137438413E+40)
    ;; distance
    (vlax-safearray-put-element DataType 4 1041)
    (vlax-safearray-put-element Data 4 1237324938)
  
    ;; 16 bit Integer
    (vlax-safearray-put-element DataType 5 1070)
    (vlax-safearray-put-element Data 5 32767)
    ;; 32 bit Integer
    (vlax-safearray-put-element DataType 6 1071)
    (vlax-safearray-put-element Data 6 32767)
    ;; scaleFactor
    (vlax-safearray-put-element DataType 7 1042)
    (vlax-safearray-put-element Data 7 10)
    ;; 3D point
    (setq reals3 (vlax-3d-point -2.95 100 -20))
    (vlax-safearray-put-element DataType 8 1010)
    (vlax-safearray-put-element Data 8 reals3)
    
    ;; world space position
    (setq worldPos (vlax-3d-point 4 400.99999999 2.798989))
    (vlax-safearray-put-element DataType 9 1011)
    (vlax-safearray-put-element Data 9 worldPos)
    
    ;; Attach the xdata to the line
    (vla-SetXData lineObj DataType Data)
    
    ;; Return the xdata for the line
    (vla-GetXData lineObj \"\" 'xtypeOut 'xdataOut)
)
")
("SetXRecordData" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8426BA72-1852-40BC-84D4-F63F49A0DE74"
                  "
SetXRecordData Method (ActiveX)
Sets the extended record data (XRecordData) associated with a dictionary.
Supported platforms: Windows only
Signature
VBA:
object.SetXRecordData XRecordDataType, XRecordData
object
    Type: XRecord
    The object this method applies to.
XRecordDataType
    Access: Input-only
    Type: Variant (array of short)
    An array of short integer values that represent the DXF group code values for each value in the extended record (XRecord) data.
XRecordData
    Access: Input-only
    Type: Variant (array of variants)
    An array of values that make up the extended record (XRecord) data.
Return Value (RetVal)
No return value.
Remarks
XRecord objects are used to store and manage arbitrary data. This object is similar in concept to XData, but is not limited by size or order.
Unlike XData, XRecords work with the standard AutoCAD group codes, which are all below 1000 in value. All the standard AutoCAD group codes are supported. This means that, in addition to all the normally used data types, an XRecord is capable of storing object IDs, which allows XRecords to own other objects including other XRecords.
The following group codes are common to all XRecord objects:
Group codes 	Description
100 	Subclass marker (AcDbXrecord)
1-369 (except 5 and 105) 	These values can be used by an application in any way.
Examples
VBA:
Sub Example_SetXRecordData()
    ' This example creates a new XRecord if one doesn't exist,
    ' appends data to the XRecord, and reads it back.  To see data being added,
    ' run the example more than once.
    
    Dim TrackingDictionary As AcadDictionary, TrackingXRecord As AcadXRecord
    Dim XRecordDataType As Variant, XRecordData As Variant
    Dim ArraySize As Long, iCount As Long
    Dim DataType As Integer, Data As String, msg As String
    
    ' Unique identifiers to distinguish our XRecordData from other XRecordData
    Const TYPE_STRING = 1
    Const TAG_DICTIONARY_NAME = \"ObjectTrackerDictionary\"
    Const TAG_XRECORD_NAME = \"ObjectTrackerXRecord\"
    ' Connect to the dictionary in which the XRecord is stored
    On Error GoTo CREATE
    Set TrackingDictionary = ThisDrawing.Dictionaries(TAG_DICTIONARY_NAME)
    Set TrackingXRecord = TrackingDictionary.GetObject(TAG_XRECORD_NAME)
    On Error GoTo 0
    
    ' Get current XRecordData
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    
    ' If there is no array already, create one
    If VarType(XRecordDataType) And vbArray = vbArray Then
        ArraySize = UBound(XRecordDataType) + 1       ' Get the size of the data elements returned
        ArraySize = ArraySize + 1                        ' Increase to hold new data
    
        ReDim Preserve XRecordDataType(0 To ArraySize)
        ReDim Preserve XRecordData(0 To ArraySize)
    Else
        ArraySize = 0
        ReDim XRecordDataType(0 To ArraySize) As Integer
        ReDim XRecordData(0 To ArraySize) As Variant
    End If
    
    ' Append new XRecord Data
    '
    ' For this sample, we only append the current time to the XRecord
    XRecordDataType(ArraySize) = TYPE_STRING: XRecordData(ArraySize) = CStr(Now)
    TrackingXRecord.SetXRecordData XRecordDataType, XRecordData
    
    ' Read back all XRecordData entries
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    ArraySize = UBound(XRecordDataType)
    
    ' Retrieve and display stored XRecordData
    For iCount = 0 To ArraySize
        ' Get information for this element
        DataType = XRecordDataType(iCount)
        Data = XRecordData(iCount)
        
        If DataType = TYPE_STRING Then
            msg = msg & Data & vbCrLf
        End If
    Next
    
    MsgBox \"The data in the XRecord is: \" & vbCrLf & vbCrLf & msg, vbInformation
    
    Exit Sub
CREATE:
    ' Create the objects that hold the XRecordData
    If TrackingDictionary Is Nothing Then  ' Make sure the tracking object is there
        Set TrackingDictionary = ThisDrawing.Dictionaries.Add(TAG_DICTIONARY_NAME)
        Set TrackingXRecord = TrackingDictionary.AddXRecord(TAG_XRECORD_NAME)
    End If
    
    Resume
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetXRecordData()
    ;; This example creates a new XRecord if one doesn't exist,
    ;; appends data to the XRecord, and then reads it back.  To see data being added,
    ;; run the example more than once.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Unique identifiers to distinguish this XRecordData from other XRecordData
    (setq TYPE_STRING 1
          TAG_DICTIONARY_NAME \"ObjectTrackerDictionary\"
          TAG_XRECORD_NAME \"ObjectTrackerXRecord\")
    ;; Connect to the dictionary in which to store the XRecord
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq TrackingDictionary (vl-catch-all-apply 'vla-Item (list dictionaries TAG_DICTIONARY_NAME)))
    ;; (= (vl-catch-all-error-message TrackingDictionary) \"Automation Error. Key not found\")
  
    (if (= (type TrackingDictionary) 'VLA-OBJECT)
        (setq TrackingXRecord (vla-GetObject TrackingDictionary TAG_XRECORD_NAME))
        (progn
            ;; Create the objects that hold this XRecordData
            (setq TrackingDictionary (vla-Add dictionaries TAG_DICTIONARY_NAME))
            (setq TrackingXRecord  (vla-AddXRecord TrackingDictionary TAG_XRECORD_NAME))
	       )
    )
    ;; Get current XRecordData
    (vla-GetXRecordData TrackingXRecord 'temp-XRecordDataType 'temp-XRecordData)
    
    ;; If there is no array yet then create one
    (setq ArraySize 0)
    (if (/= temp-XRecordDataType nil)
        (progn
	           (setq ArraySize (vlax-safearray-get-u-bound temp-XRecordDataType 1))
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger (cons 0 (1+ ArraySize))))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant (cons 0 (1+ ArraySize))))
            (setq iCount 0)
            (while (>= ArraySize iCount)
                ;; Get information for this element
                (setq DataType (vlax-safearray-get-element temp-XRecordDataType iCount))
                (setq Data (vlax-variant-value (vlax-safearray-get-element temp-XRecordData iCount)))
                (vlax-safearray-put-element XRecordDataType iCount DataType)
                (vlax-safearray-put-element XRecordData iCount Data)
	      
                (setq iCount (1+ iCount))
            )
	       )
        (progn
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger '(0 . 0)))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant '(0 . 0)))
	       )
    )
    
    ;; Append new XRecord Data
    ;;
    ;; For this sample we only append the current time to the XRecord
    (vlax-safearray-put-element XRecordDataType ArraySize TYPE_STRING)
    (setq cdate (rtos (vlax-variant-value (vla-GetVariable doc \"CDATE\")) 2 6))
    (vlax-safearray-put-element XRecordData ArraySize (strcat (substr cdate 5 2) \"/\"
							      (substr cdate 7 2) \"/\"
							      (substr cdate 1 4) \"-\"
							      (substr cdate 10 2) \":\"
							      (substr cdate 12 2) \":\"
							      (substr cdate 14)))
    (vla-SetXRecordData TrackingXRecord XRecordDataType XRecordData)
    
    ;; Read back all XRecordData entries
    (vla-GetXRecordData TrackingXRecord XRecordDataType XRecordData)
    (setq ArraySize (vlax-safearray-get-u-bound XRecordDataType 1))
    
    ;; Retrieve and display stored XRecordData
    (setq iCount 0
	         msg \"\")
    (while (>= ArraySize iCount)
        ;; Get information for this element
        (setq DataType (vlax-safearray-get-element XRecordDataType iCount))
        (setq Data (vlax-variant-value (vlax-safearray-get-element XRecordData iCount)))
        (if (= DataType TYPE_STRING)
            (setq msg (strcat msg Data \"\n\"))
        )
      
        (setq iCount (1+ iCount))
    )
    
    (alert (strcat \"The data in the XRecord is: \n\n\" msg))
)
")
("SetXdata" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EF0393EC-8446-4989-8C72-F3AE49D81176"
            "
SetXData Method (ActiveX)
Sets the extended data (XData) associated with an object.
Supported platforms: Windows only
Signature
VBA:
object.SetXData XDataType, XDataValue
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, Dimension, DimStyle, Group, Layer, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, RegisteredApplication, TableStyle, TextStyle, UCS, View, Viewport, XRecord
    The object this method applies to.
XDataType
    Access: Input-only
    Type: Variant (array of short)
    An array of short integer values that represent the DXF group code values for each value in the extended data (XData).
XDataValue
    Access: Input-only
    Type: Variant (array of variants)
    An array of values that make up the extended data (XData).
Return Value (RetVal)
No return value.
Remarks
Extended data is an example of instance-specific data created by applications written with ObjectARX or AutoLISP. This data can be added to any entity. This data follows the entity's definition data and is maintained in the order in which it was saved into the document. (AutoCAD maintains this information but does not use it.)
Examples
VBA:
Sub Example_SetXdata()
    ' This example creates a line and attaches extended data to that line.
    
    ' Create the line
    Dim lineObj As AcadLine
    Dim startPt(0 To 2) As Double, endPt(0 To 2) As Double
    startPt(0) = 1#: startPt(1) = 1#: startPt(2) = 0#
    endPt(0) = 5#: endPt(1) = 5#: endPt(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPt, endPt)
    ZoomAll
    ' Initialize all the xdata values. Note that first data in the list should be
    ' application name and first datatype code should be 1001
    Dim DataType(0 To 9) As Integer
    Dim Data(0 To 9) As Variant
    Dim reals3(0 To 2) As Double
    Dim worldPos(0 To 2) As Double
    
    DataType(0) = 1001: Data(0) = \"Test_Application\"
    DataType(1) = 1000: Data(1) = \"This is a test for xdata\"
    DataType(2) = 1003: Data(2) = \"0\"                   ' layer
    DataType(3) = 1040: Data(3) = 1.23479137438413E+40  ' real
    DataType(4) = 1041: Data(4) = 1237324938            ' distance
    DataType(5) = 1070: Data(5) = 32767                 ' 16 bit Integer
    DataType(6) = 1071: Data(6) = 32767                 ' 32 bit Integer
    DataType(7) = 1042: Data(7) = 10                    ' scaleFactor
    reals3(0) = -2.95: reals3(1) = 100: reals3(2) = -20
    DataType(8) = 1010: Data(8) = reals3                ' real
    
    worldPos(0) = 4: worldPos(1) = 400.99999999: worldPos(2) = 2.798989
    DataType(9) = 1011: Data(9) = worldPos              ' world space position
    
    ' Attach the xdata to the line
    lineObj.SetXData DataType, Data
    
    ' Return the xdata for the line
    Dim xdataOut As Variant
    Dim xtypeOut As Variant
    lineObj.GetXData \"\", xtypeOut, xdataOut
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SetXData()
    ;; This example creates a line and attaches extended data to that line.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create the line
    (setq startPt (vlax-3d-point 1 1 0)
          endPt (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPt endPt))
    (vla-ZoomAll acadObj)
    ;; Initialize all the xdata values. Note that first data in the list should be
    ;; application name and first datatype code should be 1001
    (setq DataType (vlax-make-safearray vlax-vbInteger '(0 . 9)))
    (setq Data (vlax-make-safearray vlax-vbVariant '(0 . 9)))
    (vlax-safearray-put-element DataType 0 1001)
    (vlax-safearray-put-element Data 0 \"Test_Application\")
    (vlax-safearray-put-element DataType 1 1000)
    (vlax-safearray-put-element Data 1 \"This is a test for xdata\")
    ;; layer
    (vlax-safearray-put-element DataType 2 1003)
    (vlax-safearray-put-element Data 2 \"0\")
    ;; real
    (vlax-safearray-put-element DataType 3 1040)
    (vlax-safearray-put-element Data 3 1.23479137438413E+40)
    ;; distance
    (vlax-safearray-put-element DataType 4 1041)
    (vlax-safearray-put-element Data 4 1237324938)
  
    ;; 16 bit Integer
    (vlax-safearray-put-element DataType 5 1070)
    (vlax-safearray-put-element Data 5 32767)
    ;; 32 bit Integer
    (vlax-safearray-put-element DataType 6 1071)
    (vlax-safearray-put-element Data 6 32767)
    ;; scaleFactor
    (vlax-safearray-put-element DataType 7 1042)
    (vlax-safearray-put-element Data 7 10)
    ;; 3D point
    (setq reals3 (vlax-3d-point -2.95 100 -20))
    (vlax-safearray-put-element DataType 8 1010)
    (vlax-safearray-put-element Data 8 reals3)
    
    ;; world space position
    (setq worldPos (vlax-3d-point 4 400.99999999 2.798989))
    (vlax-safearray-put-element DataType 9 1011)
    (vlax-safearray-put-element Data 9 worldPos)
    
    ;; Attach the xdata to the line
    (vla-SetXData lineObj DataType Data)
    
    ;; Return the xdata for the line
    (vla-GetXData lineObj \"\" 'xtypeOut 'xdataOut)
)
")
("SliceSolid" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-52ABF745-C98C-4315-9871-4247D048E3A5"
              "
SliceSolid Method (ActiveX)
Creates a slice of the 3DSolid object given three points that define the plane.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.SliceSolid(Point1, Point2, Point3, Negative)
object
    Type: 3DSolid
    The object this method applies to.
Point1
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the first point.
Point2
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the second point.
Point3
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the third point.
Negative
    Access: Input-only
    Type: Boolean
    This specifies whether to return the part of the solid that is on the negative side of the plane. If True, then AutoCAD creates a new 3DSolid object that contains the portion of the original solid that is on the negative normal side of the plane.
lid
The resulting slice as a 3DSolid object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SliceSolid()
    ' This example creates a box in model space.
    ' It then slices the box based on a plane
    ' defined by three points. The slice is returned
    ' as a 3Dsolid.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Define the section plane with three points
    Dim slicePt1(0 To 2) As Double
    Dim slicePt2(0 To 2) As Double
    Dim slicePt3(0 To 2) As Double
    
    slicePt1(0) = 1.5: slicePt1(1) = 7.5: slicePt1(2) = 0
    slicePt2(0) = 1.5: slicePt2(1) = 7.5: slicePt2(2) = 10
    slicePt3(0) = 8.5: slicePt3(1) = 2.5: slicePt3(2) = 10
    
    ' slice the box
    Dim sliceObj As Acad3DSolid
    Set sliceObj = boxObj.SliceSolid(slicePt1, slicePt2, slicePt3, True)
    
    ' Change the viewing direction of the viewport
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SliceSolid()
    ;; This example creates a box in model space.
    ;; It then slices the box based on a plane
    ;; defined by three points. The slice is returned
    ;; as a 3Dsolid.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Define the section plane with three points
    (setq slicePt1 (vlax-3d-point 1.5 7.5 0)
          slicePt2 (vlax-3d-point 1.5 7.5 10)
          slicePt3 (vlax-3d-point 8.5 2.5 10))
    
    ;; slice the box
    (setq sliceObj (vla-SliceSolid boxObj slicePt1 slicePt2 slicePt3 :vlax-true))
    
    ;; Change the viewing direction of the viewport
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
)
")
("Split" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4073402E-1833-4B36-A169-2128E17DEDAE"
         "
Split Method (ActiveX)
Splits a viewport into the given number of views.
Supported platforms: Windows only
Signature
VBA:
object.Split NumWins
object
    Type: Viewport
    The object this method applies to.
NumWins
    Access: Input-only
    Type: AcViewportSplitType enum
        acViewport2Horizontal
        acViewport2Vertical
        acViewport3Above
        acViewport3Below
        acViewport3Horizontal
        acViewport3Left
        acViewport3Right
        acViewport3Vertical
        acViewport4
Return Value (RetVal)
No return value.
Remarks
Although the Split method has been called, the changes will not appear until the ActiveViewport property has been used to make the viewport active. This is required even if the viewport was active before the call to Split.
A viewport does not have to be active for this method to work, however, it must be reset to active to see the results of this method.
Examples
VBA:
Sub Example_Split()
    ' This example creates a new viewport and makes it active.
    ' Then it splits the viewport into four windows.
    ' It then takes one of the four windows, and splits that
    ' window horizontally in half.
    Dim newViewport As AcadViewport
       
    ' Create a new viewport and make it active
    Set newViewport = ThisDrawing.Viewports.Add(\"TESTVIEWPORT\")
    ThisDrawing.ActiveViewport = newViewport
    
    ' Split the viewport in four windows
    newViewport.Split acViewport4
    
    ' Make the newly split viewport active
    ThisDrawing.ActiveViewport = newViewport
    
    ' Note that current drawing layout will show four windows.
    ' However, only one of the windows will be active.
    ' The following code sets the lower-left corner window
    ' to be the active window and then splits that
    ' window into two horizontal windows.
    Dim entry
    For Each entry In ThisDrawing.Viewports
        If entry.name = \"TESTVIEWPORT\" Then
            Dim lowerLeft
            lowerLeft = entry.LowerLeftCorner
            If lowerLeft(0) = 0 And lowerLeft(1) = 0 Then
                Set newViewport = entry
                Exit For
            End If
        End If
    Next
    newViewport.Split acViewport2Horizontal
    ThisDrawing.ActiveViewport = newViewport
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Split()
    ;; This example creates a new viewport and makes it active.
    ;; Then it splits the viewport into four windows.
    ;; It then takes one of the four windows, and splits that
    ;; window horizontally in half.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Create a new viewport and make it active
    (setq newViewport (vla-Add (vla-get-Viewports doc) \"TESTVIEWPORT\"))
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Split the viewport in four windows
    (vla-Split newViewport acViewport4)
    
    ;; Make the newly split viewport active
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Note that current drawing layout will show four windows.
    ;; However, only one of the windows will be active.
    ;; The following code sets the lower-left corner window
    ;; to be the active window and then splits that
    ;; window into two horizontal windows.
    (vlax-for entry (vla-get-Viewports doc)
        (if (= (vla-get-Name entry) \"TESTVIEWPORT\")
            (progn
                (setq lowerLeft (vlax-variant-value (vla-get-LowerLeftCorner entry)))
                (if (and (= (vlax-safearray-get-element lowerLeft 0) 0)
                         (= (vlax-safearray-get-element lowerLeft 1) 0))
                    (setq newViewport entry)
                )
            )
        )
    )
    (vla-Split newViewport acViewport2Horizontal)
    (vla-put-ActiveViewport doc newViewport)
)
")
("StartBatchMode" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F7E34A70-53AF-45CF-85D4-1328DBE506CD"
                  "
StartBatchMode Method (ActiveX)
Starts printing in batch mode. (Obsolete)
Supported platforms: Windows only
Signature
VBA:
object.StartBatchMode entryCount
object
    Type: Plot
    The object this method applies to.
entryCount
    Access: Input-only
    Type: Long
    The number of entries to plot in the batch.
Return Value (RetVal)
No return value.
Remarks
This method is obsolete and may be removed in a future version of AutoCAD.
Examples
VBA:
Sub Example_StartBatchMode()
    'This method may become obsolete and may be removed
    'in a future (post-AutoCAD 2005) version.
End Sub
Visual LISP:
Not available
")
("StartUndoMark" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7C669949-1327-4CFD-96CF-CE65EC38DAA8"
                 "
StartUndoMark Method (ActiveX)
Marks the beginning of a block of operations.
Supported platforms: Windows only
Signature
VBA:
object.StartUndoMark
object
    Type: Document
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method allows AutoCAD to set up the necessary environment so operations done between this call and a call to EndUndoMark can be treated as a group of operations.
Examples
VBA:
Sub Example_StartUndoMark()
    ' This example creates a series of lines, each with an undo marker
    ' defined for it. After lines are created, you can switch to AutoCAD and type
    ' the Undo command, and only one line at a time will be undone. If StartUndoMark
    ' call is not made, an undo in AutoCAD will undo all the lines at once.
    
    Dim line As AcadLine
    Dim stPnt(0 To 2) As Double
    Dim endPnt(0 To 2) As Double
    stPnt(0) = 1: stPnt(1) = 2: stPnt(2) = 0
    endPnt(0) = 2: stPnt(1) = 1: stPnt(2) = 0
    
    ' Create the lines
    Dim j As Integer
    For j = 0 To 3
        ThisDrawing.StartUndoMark
        Set line = ThisDrawing.ModelSpace.AddLine(stPnt, endPnt)
        stPnt(0) = stPnt(0) + 3
        endPnt(0) = endPnt(0) + 3
        ThisDrawing.EndUndoMark
    Next
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StartUndoMark()
    ;; This example creates a series of lines, each one with an undo marker
    ;; defined for it. After lines are created you can switch to AutoCAD and type
    ;; the Undo command, and only one line at a time will be undone. If StartUndoMark
    ;; call is not made, an undo in AutoCAD will undo all the lines at once.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq stPnt (vlax-3d-point 1 2 0)
          endPnt (vlax-3d-point 2 1 0))  
    ;; Create the lines
    (setq j 0)
    (while (>= 3 j)
        (vla-StartUndoMark doc)
        (setq line (vla-AddLine modelSpace stPnt endPnt))
        (vlax-safearray-put-element (vlax-variant-value stPnt) 0 (+ (vlax-safearray-get-element (vlax-variant-value stPnt) 0) 3))
        (vlax-safearray-put-element (vlax-variant-value endPnt) 0 (+ (vlax-safearray-get-element (vlax-variant-value endPnt) 0) 3))
        (setq j (1+ j))
        (vla-EndUndoMark doc)
    )
    (vla-ZoomAll acadObj)
)
")
("SwapObjects" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-422CB04D-A597-472F-B13B-72498DB8ECA3"
               "
CMDNAMES (системная переменная)
Отображение имен активных и прозрачных команд.
(Только чтение)
Тип:	Строка
Сохранен в:	Не сохранен
Начальное значение:	\"\"
Например, значение переменной LINE'ZOOM указывает на то, что команда ПОКАЗАТЬ используется в прозрачном режиме во время выполнения команды ОТРЕЗОК.
Переменная предназначена для использования с интерфейсами программирования, такими как AutoLISP, ActiveX Automation (недоступно в AutoCAD LT) и DIESEL.
Приведенный ниже несложный пример демонстрирует, как с помощью DIESEL можно индицировать имена выполняемых команд в строке состояния.
Команда: modemacro
Новое значение MODEMACRO, или . если нет <\"\">: $(getvar, cmdnames)
Понятия, связанные с данным
    Переключение между диалоговыми окнами и командной строкой
Ссылки, связанные с данной
    Команды для работы с окном приложения
")
("SyncModelView" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DED73F90-4A4A-4241-811C-691B5FE8FA1A"
                 "
SyncModelView Method (ActiveX)
Updates the viewport parameters with the parameters in the associated model view.
Supported platforms: Windows only
Signature
VBA:
object.SyncModelView
object
    Type: PViewport
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TransformBy" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2FAE4C13-06F2-47A2-B213-8A9A6958B799"
               "
TransformBy Method (ActiveX)
Moves, scales, or rotates an object given a 4x4 transformation matrix.
Supported platforms: Windows only
Signature
VBA:
object.TransformBy TransformationMatrix
object
    Type: All drawing objects, AttributeReference
    The object this method applies to.
TransformationMatrix
    Access: Input-only
    Type: Variant (4x4 array of doubles)
    A 4x4 matrix specifying the transformation to perform.
Return Value (RetVal)
No return value.
Remarks
The following table demonstrates the transformation matrix configuration, where R = Rotation, and T = Translation: R00
R00 	R01 	R02 	T0
R10 	R11 	R12 	T1
R20 	R21 	R22 	T2
0 	0 	0 	1
This method will return an error if the transformation matrix is not correct.
Sample transformation matrices are provided in the example code for this method.
Examples
VBA:
Sub Example_TransformBy()
    ' This example creates a line and rotates it 90 degrees
    ' using a transformation matrix.
    
    ' Create a line
    Dim lineObj As AcadLine
    Dim startPt(0 To 2) As Double
    Dim endPt(0 To 2) As Double
    startPt(0) = 2: startPt(1) = 1: startPt(2) = 0
    endPt(0) = 5: endPt(1) = 1: endPt(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPt, endPt)
    lineObj.Update
    
    ' Initialize the transMat variable with a transformation matrix
    ' that will rotate an object by 90 degrees about the point(0,0,0)
    ' (More examples of transformation matrices are listed below)
    Dim transMat(0 To 3, 0 To 3) As Double
    transMat(0, 0) = 0#: transMat(0, 1) = -1#: transMat(0, 2) = 0#: transMat(0, 3) = 0#
    transMat(1, 0) = 1#: transMat(1, 1) = 0#: transMat(1, 2) = 0#: transMat(1, 3) = 0#
    transMat(2, 0) = 0#: transMat(2, 1) = 0#: transMat(2, 2) = 1#: transMat(2, 3) = 0#
    transMat(3, 0) = 0#: transMat(3, 1) = 0#: transMat(3, 2) = 0#: transMat(3, 3) = 1#
    
    ' Transform the line using the defined transformation matrix
    MsgBox \"Transform the line.\", , \"TransformBy Example\"
    lineObj.TransformBy (transMat)
    ZoomAll
    MsgBox \"The line is transformed.\", , \"TransformBy Example\"
    
' More examples of transformation matrices:
' Rotation Matrix: 90 Degrees about point 0,0,0
        ' 0.000000  -1.000000  0.000000  0.000000
        ' 1.000000  0.000000  0.000000  0.000000
        ' 0.000000  0.000000  1.000000  0.000000
        ' 0.000000  0.000000  0.000000  1.000000
        
' Rotation Matrix: 45 Degrees about point 5,5,0
        ' 0.70710678118654  -0.70710678118654  0.000000  5.000000
        ' 0.70710678118654  0.70710678118654  0.000000  -2.071068
        ' 0.000000  0.000000  1.000000  0.000000
        ' 0.000000  0.000000  0.000000  1.000000
        
' Translation Matrix: move an object by 10,10,0
        ' 1.000000  0.000000  0.000000  10.000000
        ' 0.000000  1.000000  0.000000  10.000000
        ' 0.000000  0.000000  1.000000  0.000000
        ' 0.000000  0.000000  0.000000  1.000000
' Scaling Matrix: scale by 10,10 at point 0,0,0
        ' 10.000000  0.000000  0.000000  0.000000
        ' 0.000000  10.000000  0.000000  0.000000
        ' 0.000000  0.000000  10.000000  0.000000
        ' 0.000000  0.000000  0.000000  1.000000
        
' Scaling Matrix: scale by 10 at point 2,2
        ' 10.000000  0.000000  0.000000  -18.000000
        ' 0.000000  10.000000  0.000000  -18.000000
        ' 0.000000  0.000000  10.000000  0.000000
        ' 0.000000  0.000000  0.000000  1.000000
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TransformBy()
    ;; This example creates a line and rotates it 90 degrees
    ;; using a transformation matrix.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a line
    (setq startPt (vlax-3d-point 2 1 0)
          endPt (vlax-3d-point 5 1 0))
    
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPt endPt))
    (vla-Update lineObj)
    
    ;; Initialize the transMat variable with a transformation matrix
    ;; that will rotate an object by 90 degrees about the point(0,0,0)
    ;; (More examples of transformation matrices are listed below)
    (setq transMat (vlax-tmatrix '((0 -1 0 0)
                                   (1 0 0 0)
                                   (0 0 1 0)
                                   (0 0 0 1))))
    
    ;; Transform the line using the defined transformation matrix
    (alert \"Transform the line.\")
    (vla-TransformBy lineObj transMat)
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    (alert \"The line is transformed.\")
    
;; More examples of transformation matrices:
;; Rotation Matrix: 90 Degrees about point 0,0,0
;    (setq transMat (vlax-tmatrix '((0 -1 0 0)
;                                   (1 0 0 0)
;                                   (0 0 1 0)
;                                   (0 0 0 1))))
        
;; Rotation Matrix: 45 Degrees about point 5,5,0
;    (setq transMat (vlax-tmatrix '((0.70710678118654 -0.70710678118654 0 5)
;                                   (0.70710678118654 0.70710678118654 0 -2.071068)
;                                   (0 0 1 0)
;                                   (0 0 0 1))))
        
;; Translation Matrix: move an object by 10,10,0
;    (setq transMat (vlax-tmatrix '((1 0 0 10)
;                                   (0 1 0 10)
;                                   (0 0 1 0)
;                                   (0 0 0 1))))
;; Scaling Matrix: scale by 10,10 at point 0,0,0
;    (setq transMat (vlax-tmatrix '((10 0 0 0)
;                                   (0 10 0 0)
;                                   (0 0 10 0)
;                                   (0 0 0 1))))
        
;; Scaling Matrix: scale by 10 at point 2,2
;    (setq transMat (vlax-tmatrix '((10 0 0 -18)
;                                   (0 10 0 -18)
;                                   (0 0 10 0)
;                                   (0 0 0 1))))
)
")
("TranslateCoordinates" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9B897CC9-2AE8-4411-BDA9-E337CBFACF8B"
                        "
TranslateCoordinates Method (ActiveX)
Translates a point from one coordinate system to another.
Supported platforms: Windows only
Signature
VBA:
RetVal = object.TranslateCoordinates(Point, FromCoordSystem, ToCoordSystem, Displacement, [OCSNormal])
object
    Type: Utility
    The object this method applies to.
Point
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the original coordinates to be translated. This parameter can be treated as a point or a displacement vector depending on the value of Displacement.
FromCoordSystem
    Access: Input-only
    Type: AcCoordinateSystem enum
    The coordinate system from which the point originates.
        acWorld
        acUCS
        acOCS
        acDisplayDCS
        acPaperSpaceDCS
ToCoordSystem
    Access: Input-only
    Type: AcCoordinateSystem enum
    The coordinate system to which the point will be converted.
        acWorld
        acUCS
        acOCS
        acDisplayDCS
        acPaperSpaceDCS
Displacement
    Access: Input-only
    Type: Long
    A displacement vector flag.
        True: Point is treated as a displacement vector.
        False: Point is treated as a point.
OCSNormal
    Access: Input-only; optional
    Type: Variant (three-element array of doubles)
    The normal for the OCS.
Return Value (RetVal)
Type: Variant (three-element array of doubles)
The translated 3D coordinate.
Remarks
You cannot directly translate a coordinate from one OCS to another OCS. To do this, first translate the coordinate from one OCS to an intermediary coordinate system such as the WCS. Then translate that coordinate into the second OCS.
To translate a point on a Polyline or LWPolyline object from OCS to WCS:
    Get the X and Y coordinates of the OCS point from the Coordinate or Coordinates property.
    Get the Z coordinate of the OCS point from the Elevation property.
    Get the Normal for the polyline from the Normal property.
    Call TranslateCoordinates using the X, Y, Z coordinates and the Normal.
Examples
VBA:
Sub Example_TranslateCoordinates()
    ' This example creates a UCS with an origin at 2, 2, 2.
    ' Next, a point is entered by the user. The WCS and UCS
    ' coordinates of that point are output in a Msgbox.
    
    AppActivate ThisDrawing.Application.Caption
    
    ' Create a UCS named \"New_UCS\" in current drawing
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPnt(0 To 2) As Double
    Dim yAxisPnt(0 To 2) As Double
    
    ' Define the UCS
    origin(0) = 2#: origin(1) = 2#: origin(2) = 2#
    xAxisPnt(0) = 5#: xAxisPnt(1) = 2#: xAxisPnt(2) = 2#
    yAxisPnt(0) = 2#: yAxisPnt(1) = 6#: yAxisPnt(2) = 2#
    
    ' Add the UCS to the UserCoordinatesSystems collection
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPnt, yAxisPnt, \"New_UCS\")
    ThisDrawing.ActiveUCS = ucsObj
    
    ' Get the active viewport and make sure the UCS icon is on
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.ActiveViewport
    viewportObj.UCSIconOn = True
    viewportObj.UCSIconAtOrigin = True
    ThisDrawing.ActiveViewport = viewportObj
   
    ' Have the user enter a point
    Dim pointWCS As Variant
    pointWCS = ThisDrawing.Utility.GetPoint(, \"Enter a point to translate:\")
    
    ' Translate the point into UCS coordinates
    Dim pointUCS As Variant
    pointUCS = ThisDrawing.Utility.TranslateCoordinates(pointWCS, acWorld, acUCS, False)
    
    ' Display the coordinates of the point
    MsgBox \"The point has the following coordinates:\" & vbCrLf & _
           \"WCS: \" & pointWCS(0) & \", \" & pointWCS(1) & \", \" & pointWCS(2) & vbCrLf & _
           \"UCS: \" & pointUCS(0) & \", \" & pointUCS(1) & \", \" & pointUCS(2), , \"TranslateCoordinates Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TranslateCoordinates()
    ;; This example creates a UCS with an origin at 2, 2, 2.
    ;; Next, a point is entered by the user. The WCS and UCS
    ;; coordinates of that point are output in a Msgbox.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a UCS named \"New_UCS\" in current drawing
    ;; Define the UCS
    (setq origin (vlax-3d-point 2 2 2)
          xAxisPnt (vlax-3d-point 5 2 2)
          yAxisPnt (vlax-3d-point 2 6 2))
    
    ;; Add the UCS to the UserCoordinatesSystems collection
    (setq ucsObj (vla-Add (vla-get-UserCoordinateSystems doc) origin xAxisPnt yAxisPnt \"New_UCS\"))
    (vla-put-ActiveUCS doc ucsObj)
    
    ;; Get the active viewport and make sure the UCS icon is on
    (setq viewportObj (vla-get-ActiveViewport doc))
    (vla-put-UCSIconOn viewportObj :vlax-true)
    (vla-put-UCSIconAtOrigin viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
   
    ;; Have the user enter a point
    (setq pointWCS (vlax-variant-value (vla-GetPoint (vla-get-Utility doc) nil \"\nEnter a point to translate:\")))
    
    ;; Translate the point into UCS coordinates
    (setq pointUCS (vlax-variant-value (vla-TranslateCoordinates (vla-get-Utility doc) pointWCS acWorld acUCS :vlax-false)))
    
    ;; Display the coordinates of the point
    (alert (strcat \"The point has the following coordinates:\"
                   \"\nWCS: \" (rtos (vlax-safearray-get-element pointWCS 0) 2) \", \"
                             (rtos (vlax-safearray-get-element pointWCS 1) 2) \", \"
                             (rtos (vlax-safearray-get-element pointWCS 2) 2)
                   \"\nUCS: \" (rtos (vlax-safearray-get-element pointUCS 0) 2) \", \"
                             (rtos (vlax-safearray-get-element pointUCS 1) 2) \", \"
                             (rtos (vlax-safearray-get-element pointUCS 2) 2)))
)
")
("Unload" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2CFEFDD7-11E3-491B-8CCD-91F8893AE765"
          "
Unload Method (ActiveX)
Unloads the menu group or external reference.
Supported platforms: Windows only
Signature
VBA:
object.Unload
object
    Type: ExternalReference, MenuGroup
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
ExternalReference: When an ExternalReference object (xref) is unloaded from the drawing, the drawing opens faster and uses less memory. An unloaded xref is not displayed and the xref-dependent symbol table information does not appear in the drawing. However, all the information can be restored by reloading the xref using the Reload method.
To unload an external reference, you must unload the block that defines the external reference. For example, the following line of VBA code unloads an external reference that is stored in the xrefInserted variable:
ThisDrawing.Blocks.Item(xrefInserted.name).Unload
MenuGroup: When a menu group is unloaded from the drawing, any references to the menus and toolbars within that group become invalid. Always delete or set to NULL any references to toolbars and menus that are in the menu group to be unloaded before you unload the menu group.
Examples
VBA:
Sub Example_Unload()
    On Error GoTo ERRORHANDLER
                          
    ' Define external reference to be inserted
    Dim xrefHome As AcadBlock
    Dim xrefInserted As AcadExternalReference
    Dim insertionPnt(0 To 2) As Double
    Dim PathName As String
    insertionPnt(0) = 1
    insertionPnt(1) = 1
    insertionPnt(2) = 0
    PathName = \"c:/AutoCAD/sample/City map.dwg\"
    
    ' Add the external reference
    Set xrefInserted = ThisDrawing.ModelSpace. _
            AttachExternalReference(PathName, \"XREF_IMAGE\", _
            insertionPnt, 1, 1, 1, 0, False)
    ZoomAll
    MsgBox \"The external reference is attached.\"
    
    ' Unload the external reference definition
    ThisDrawing.Blocks.Item(xrefInserted.name).Unload
    MsgBox \"The external reference is unloaded.\"
    Exit Sub
ERRORHANDLER:
    MsgBox Err.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Unload()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
                         
    ;; Define external reference to be inserted
    (setq insertionPnt (vlax-3d-point 1 1 0)
          pathName (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg\"))
    
    ;; Add the external reference to the block
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq xrefInserted (vla-AttachExternalReference modelSpace pathName \"XREF_IMAGE\" insertionPnt 1 1 1 0 :vlax-false))
    (vla-ZoomAll acadObj)
    (alert \"The external reference is attached.\")
    
    ;; Unload the external reference definition
    (vla-Unload (vla-Item (vla-get-Blocks doc) \"XREF_IMAGE\"))
    (vla-Regen doc :vlax-true)
    (alert \"The external reference is unloaded.\")
    ;; Reload the external reference definition
    (vla-Reload (vla-Item (vla-get-Blocks doc) \"XREF_IMAGE\"))
    (alert \"The external reference is reloaded.\")
)
")
("UnloadArx" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1D232F28-917F-4148-89D4-2FCB42489970"
             "
UnloadARX Method (ActiveX)
Unloads the specified AutoCAD ARX application.
Supported platforms: Windows only
Signature
VBA:
object.UnloadARX Name
object
    Type: Application
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the application to unload.
Return Value (RetVal)
No return value.
Remarks
If the specified application is locked when this method is called, the method will fail.
Note: Do not attempt to unload the file acvba.arx.
Examples
VBA:
Sub Example_UnLoadARX()
    ' This example unloads an ObjectARX application from the AutoCAD session.
    
    ' Note: The application listed here does not exist and
    ' will cause an error when run. Change the application name
    ' to the name of your ObjectARX application.
    On Error GoTo ERRORHANDLER
    ThisDrawing.Application.UnloadArx \"MyARXApp.arx\"
        
ERRORHANDLER:
    MsgBox Err.Description, , \"UnloadARX\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UnloadARX()
    ;; This example unloads an ObjectARX application from the AutoCAD session.
    (setq acadObj (vlax-get-acad-object))
    ;; Note: The application listed here does not exist and
    ;; will cause an error when run. Change the application name
    ;; to the name of your ObjectARX application.
    (vla-UnloadArx acadObj \"MyARXApp.arx\")
)
")
("UnloadDvb" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A8AB63D9-AA04-4D51-BAA9-F78DD4C73A32"
             "
UnloadDVB Method (ActiveX)
Unloads the specified AutoCAD VBA project file.
Supported platforms: Windows only
Signature
VBA:
object.UnloadDVB Name
object
    Type: Application
    The object this method applies to.
Name
    Access: Input-only
    Type: String
    The name of the .dvb project to unload.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LoadDVB()
    ' This example loads a DVB file and runs a macro
    ' contained in the file using the RunMacro method.
    '
    ' This example uses a DVB file named drawline.dvb.
    ' You should change the example to use a file on your computer.
    '
    ' * Note: If you open a DVB file and then run the example to load it, there will be an error
    ' when the DVB file is unloaded.
    Dim FileName As String
    
    FileName = \"c:\drawline.dvb\"
    
    ' Load a sample VBA project DVB file
    LoadDVB FileName
    
    ' Run the drawline sample macro
    RunMacro \"Module1.Drawline\"
    
    ' Unload the drawline VBA project DVB file now.
    UnloadDVB FileName
    
    MsgBox \"The DVB file has been run!\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LoadDVB()
    ;; This example loads a DVB file and runs a macro
    ;; contained in the file using the RunMacro method.
    ;;
    ;; This example uses a DVB file named drawline.dvb.
    ;; You should change the example to use a file on your computer.
    ;;
    ;; * Note: If you open a DVB file and then run the example to load it, there will be an error
    ;; when the DVB file is unloaded.
    (setq FileName (findfile \".\\Sample\\VBA\\drawline.dvb\"))
    
    ;; Load a sample VBA project DVB file
    (vla-LoadDVB acadObj FileName)
    
    ;; Run the drawline sample macro
    (vla-RunMacro acadObj \"Module1.Drawline\")
    
    ;; Unload the drawline VBA project DVB file now.
    (vla-UnloadDVB acadObj FileName)
    
    (alert \"The DVB file has been run!\")
)
")
("UnmergeCells" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-61535978-8788-46E1-85D8-55CB7B824CEA"
                "
UnmergeCells Method (ActiveX)
Splits merged cells in a table.
Supported platforms: Windows only
Signature
VBA:
object.UnmergeCells minRow, maxRow, minCol, maxCol
object
    Type: Table
    The object this method applies to.
minRow
    Access: Input-only
    Type: Long
    The zero-based lower bound of a row index.
maxRow
    Access: Input-only
    Type: Long
    The zero-based upper bound of a row index.
minCol
    Access: Input-only
    Type: Long
    The zero-based lower bound of a column index.
maxCol
    Access: Input-only
    Type: Long
    The zero-based upper bound of a column index.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MergeCells()
    Dim MyModelSpace As AcadModelSpace
    Set MyModelSpace = ThisDrawing.ModelSpace
    Dim pt(2) As Double
    Dim MyTable As AcadTable
    Set MyTable = MyModelSpace.AddTable(pt, 5, 5, 10, 30)
    Call MyTable.MergeCells(2, 3, 2, 3)
    MsgBox \"The cells have been merged appropriately.\"
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MergeCells()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable modelSpace pt 5 5 10 30))
  
    (vla-MergeCells MyTable 2 3 2 3)
    (alert \"The cells have been merged appropriately.\")
    (vla-ZoomExtents acadObj)
)
")
("Update" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-021BAA1C-9374-442E-801B-CB4CC93D533F"
          "
    Быстрые ссылки
    Русский
AutoCAD 2022
    Новые возможности AutoCAD
        Новые возможности AutoCAD 2022
        Обзор новых возможностей AutoCAD 2022 (видеоролик)
        Обзор пользовательского интерфейса AutoCAD
        Новые возможности в более ранних версиях
    Начало работы
    А вы пробовали...
    Руководство пользователя AutoCAD
    Кросс-платформенное лицензирование
    Руководства по адаптации и управлению
    Преимущества подписки
    AutoLISP: Developer's Guide
    AutoLISP: Reference
    Установка One AutoCAD
    Основные сведения об установке программ Autodesk
    Руководство по установке для администраторов
    One AutoCAD: примечания к выпуску
Поделиться
Update Method (ActiveX)
Updates the object to the drawing screen.
Supported platforms: Windows only
Signature
VBA:
object.Update
object
    Type: All drawing objects, Application, AttributeReference, Dimension, SelectionSet
    The objects this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Update()
    ' This example creates a line in model space. It displays a
    ' Msgbox immediately before the call to update the line and
    ' again after the call.
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    ' Create a Line object in model space
    startPoint(0) = 2#: startPoint(1) = 2#: startPoint(2) = 0#
    endPoint(0) = 4#: endPoint(1) = 4#: endPoint(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    MsgBox \"Before the update.\", , \"Update Example\"
    ' The following code draws an object in AutoCAD window
    lineObj.Update
    MsgBox \"After the update.\", , \"Update Example\"
    
    ' The following call updates the entire drawing
    ThisDrawing.Application.Update
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Update()
    ;; This example creates a line in model space. It displays a
    ;; Msgbox immediately before the call to update the line and
    ;; again after the call.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a Line object in model space
    (setq startPoint (vlax-3d-point 2 2 0)
          endPoint (vlax-3d-point 4 4 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    (alert \"Before the update.\")
    ;; The following code draws an object in AutoCAD window
    (vla-Update lineObj)
    (alert \"After the update.\")
    
    ;; The following call updates the entire drawing
    (vla-Update acadObj)
)
"
)
          
("UpdateMTextAttribute" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-73942896-D842-4ED6-B205-39D3CA9E4076"
                        "
UpdateMTextAttribute Method (ActiveX)
Updates attribute from the multiline text and multiline text from an attribute.
Supported platforms: Windows only
Signature
VBA:
object.UpdateMTextAttribute
object
    Type: Attribute
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MTextAttribute()
    ' This example creates an attribute definition in model space.
    ' It then manipulates its MText properties
    
    Dim attributeObj As IAcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1.4
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5.2: insertionPoint(1) = 5.7: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    
    attributeObj.MTextAttribute = True
    attributeObj.MTextAttributeContent = \"test content\"
    attributeObj.MTextBoundaryWidth = 4.2
    attributeObj.UpdateMTextAttribute
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MTextAttribute()
    ;; This example creates an attribute definition in model space.
    ;; It then manipulates its MText properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5.2 5.7 0) 
          attHeight 1.4
          attMode (+ acAttributeModeVerify acAttributeModeMultipleLine)
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    
    (vla-put-MTextAttributeContent attributeObj \"test content\")
    (vla-put-MTextBoundaryWidth attributeObj 4.2)
    (vla-UpdateMTextAttribute attributeObj)
    (vla-ZoomAll acadObj)
)
")
("WBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4EEC4025-ACFC-41DA-899A-8264394D7691"
          "
WBlock Method (ActiveX)
Writes out the given selection set as a new drawing file.
Supported platforms: Windows only
Signature
VBA:
object.WBlock FileName, SelectionSet
object
    Type: Document
    The object this method applies to.
FileName
    Access: Input-only
    Type: String
    The file name to write the selection set to.
SelectionSet
    Access: Input-only
    Type: SelectionSet
    The name of the selection set.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_WBlock()
    ' This example creates several objects in model space and
    ' adds them to a selection set. This selection set is then
    ' output as a new drawing file.
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Create a selection set
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"WBLOCKSET\")
    
    ' Iterate through the model space collection and add
    ' each item found to an array of objects
    ReDim objsInModelSpace(0 To ThisDrawing.ModelSpace.count - 1) As AcadEntity
    Dim I As Integer
    For I = 0 To ThisDrawing.ModelSpace.count - 1
        Set objsInModelSpace(I) = ThisDrawing.ModelSpace.Item(I)
    Next
    
    ' Add the array of objects into the selection set
    ssetObj.AddItems objsInModelSpace
    
    ' Output the selection set to a new file
    ThisDrawing.Wblock \"C:\AutoCAD\WBlock_example.dwg\", ssetObj
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_WBlock()
    ;; This example creates several objects in model space and
    ;; adds them to a selection set. This selection set is then
    ;; output as a new drawing file.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Create a selection set
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"WBLOCKSET\"))
    
    ;; Iterate through the model space collection and add
    ;; each item found to an array of objects
    (setq objsInModelSpace (vlax-make-safearray vlax-vbObject (cons 0 (1- (vla-get-Count (vla-get-ModelSpace doc)))))
          cnt 0)
    (vlax-for entry (vla-get-ModelSpace doc)
        (vlax-safearray-put-element objsInModelSpace cnt entry)
        (setq cnt (1+ cnt))
    )
    
    ;; Add the array of objects into the selection set
    (vla-AddItems ssetObj objsInModelSpace)
    
    ;; Output the selection set to a new file
    (vla-Wblock doc \"C:\\AutoCAD\\WBlock_example.dwg\" ssetObj)
    (vla-Delete ssetObj)
)
")
("ZoomAll" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-30F0CB4F-A228-4FF3-B6BA-6F351E6CD0ED"
           "
ZoomAll Method (ActiveX)
Zooms the current viewport to display the entire drawing.
Supported platforms: Windows only
Signature
VBA:
object.ZoomAll
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
In a plan view, AutoCAD zooms to the drawing limits or current extents, whichever is greater. In a 3D view, ZoomAll is equivalent to the ZoomExtents method. The display shows all objects even if the drawing extends outside the drawing limits.
This method applies only to the current active viewport (paper space viewport or model space viewport).
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
("ZoomCenter" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16BDEA18-4555-4EA7-A426-9A9E5683AC9B"
              "
ZoomCenter Method (ActiveX)
Zooms the current viewport to a specified center point and magnification.
Supported platforms: Windows only
Signature
VBA:
object.ZoomCenter Center, Magnify
object
    Type: Application
    The object this method applies to.
Center
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the center of the zoom.
Magnify
    Access: Input-only
    Type: Double
    The magnification level of the window. A value smaller than the current value increases the magnification. A larger value decreases the magnification.
Return Value (RetVal)
No return value.
Remarks
This method applies only to the current active viewport (paper space viewport or model space viewport).
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
("ZoomExtents" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B204BFAA-B774-4C87-86D8-37007F390B5A"
               "
ZoomExtents Method (ActiveX)
Zooms the current viewport to the drawing extents.
Supported platforms: Windows only
Signature
VBA:
object.ZoomExtents
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method applies only to the current active viewport (paper space viewport or model space viewport).
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
("ZoomPickWindow" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-03C9B151-E828-4F2A-84C5-C935B1E8B81F"
                  "
ZoomPickWindow Method (ActiveX)
Zooms the current viewport to a window defined by points picked on the screen.
Supported platforms: Windows only
Signature
VBA:
object.ZoomPickWindow
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method applies only to the current active viewport (paper space viewport or model space viewport).
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
("ZoomPrevious" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EFF48BA7-6990-426B-A95D-95E0F5691254"
                "
ZoomPrevious Method (ActiveX)
Zooms the current viewport to its previous extents.
Supported platforms: Windows only
Signature
VBA:
object.ZoomPrevious
object
    Type: Application
    The object this method applies to.
Return Value (RetVal)
No return value.
Remarks
This method applies only to the current active viewport (paper space viewport or model space viewport).
This method zooms to display the previous view. You can restore up to 10 previous views.
Note: If you change the shading with the AutoCAD SHADEMODE command, the view is changed. If you perform a ZoomPrevious after changing the shading, it restores the previous view, which is shaded differently, but not zoomed differently.
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
("ZoomScaled" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E916D642-DBCE-4186-8574-7B8D002BB7E1"
              "
ZoomScaled Method (ActiveX)
Zooms the current viewport to given scale factor.
Supported platforms: Windows only
Signature
VBA:
object.ZoomScaled Scale, ScaleType
object
    Type: Application
    The object this method applies to.
Scale
    Access: Input-only
    Type: Double
    The zoom factor for the zoom.
ScaleType
    Access: Input-only; optional
    Type: AcZoomScaleType enum
        acZoomScaledAbsolute: Relative to the drawing limits.
        acZoomScaledRelative: Relative to the current view.
        acZoomScaledRelativePSpace: Relative to paper space units.
Return Value (RetVal)
No return value.
Remarks
This method applies to the current active viewport (paper space viewport or model space viewport).
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
("ZoomWindow" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-179C3EF0-4F3F-4555-AD74-3489A21FA035"
              "
ZoomWindow Method (ActiveX)
Zooms the current viewport to the area specified by two opposite corners of a rectangle.
Supported platforms: Windows only
Signature
VBA:
object.ZoomWindow LowerLeft, UpperRight
object
    Type: Application
    The object this method applies to.
LowerLeft
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the lower-left corner of the window to display.
UpperRight
    Access: Input-only
    Type: Variant (three-element array of doubles)
    The 3D WCS coordinates specifying the upper-right corner of the window to display.
Return Value (RetVal)
No return value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ZoomAll()
    ' This example creates several objects in model space and
    ' then performs a variety of zooms on the drawing.
    AppActivate ThisDrawing.Application.Caption
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
' ZoomAll
    MsgBox \"Perform a ZoomAll\", , \"ZoomWindow Example\"
    ZoomAll
    
' ZoomWindow
    MsgBox \"Perform a ZoomWindow using the following coordinates:\" & vbCrLf & _
           \"1.3, 7.8, 0\" & vbCrLf & _
           \"13.7, -2.6, 0\", , \"ZoomWindow Example\"
           
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    point1(0) = 1.3: point1(1) = 7.8: point1(2) = 0
    point2(0) = 13.7: point2(1) = -2.6: point2(2) = 0
    ZoomWindow point1, point2
    
' ZoomScaled
    MsgBox \"Perform a ZoomScaled using:\" & vbCrLf & _
           \"Scale Type: acZoomScaledRelative\" & vbCrLf & _
           \"Scale Factor: 2\", , \"ZoomWindow Example\"
    Dim scalefactor As Double
    Dim scaletype As Integer
    scalefactor = 2
    scaletype = acZoomScaledRelative
    ZoomScaled scalefactor, scaletype
    
' ZoomExtents
    MsgBox \"Perform a ZoomExtents\", , \"ZoomWindow Example\"
    ZoomExtents
    
' ZoomPickWindow
    MsgBox \"Perform a ZoomPickWindow\", , \"ZoomWindow Example\"
    ZoomPickWindow
    
' ZoomCenter
    MsgBox \"Perform a ZoomCenter using:\" & vbCrLf & _
           \"Center 3, 3, 0\" & vbCrLf & _
           \"Magnification: 10\", , \"ZoomWindow Example\"
    Dim zcenter(0 To 2) As Double
    Dim magnification As Double
    zcenter(0) = 3: zcenter(1) = 3: zcenter(2) = 0
    magnification = 10
    zoomcenter zcenter, magnification
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ZoomAll()
    ;; This example creates several objects in model space and
    ;; then performs a variety of zooms on the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint secondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
                                 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
;; ZoomAll
    (alert \"Perform a ZoomAll\")
    (vla-ZoomAll acadObj)
    
;; ZoomWindow
    (alert (Strcat \"Perform a ZoomWindow using the following coordinates:\"
                   \"\n1.3, 7.8, 0\"
                   \"\n13.7, -2.6, 0\"))
    (setq point1 (vlax-3d-point 1.3 7.8 0)
          point2 (vlax-3d-point 13.7 -2.6 0))
    (vla-ZoomWindow acadObj point1 point2)
    
;; ZoomScaled
    (alert (strcat \"Perform a ZoomScaled using:\"
                   \"\nScale Type: acZoomScaledRelative\"
                   \"\nScale Factor: 2\"))
    (setq scalefactor 2
          scaletype acZoomScaledRelative)
    (vla-ZoomScaled acadObj scalefactor scaletype)
    
;; ZoomExtents
    (alert \"Perform a ZoomExtents\")
    (vla-ZoomExtents acadObj)
    
;; ZoomPickWindow
    (alert \"Perform a ZoomPickWindow\")
    (vla-ZoomPickWindow acadObj)
;; ZoomPrevious
    (alert \"Perform a ZoomPrevious\")
    (vla-ZoomPrevious acadObj)
;; ZoomCenter
    (alert (strcat \"Perform a ZoomCenter using:\"
                   \"\nCenter 3, 3, 0\"
                   \"\nMagnification: 10\"))
    (setq zcenter (vlax-3d-point 3 3 0)
          magnification 10)
    (vla-ZoomCenter acadObj zcenter magnification)
)
")
;;;(defparameter *m-renaming* '(("ARX" "Arx") "DVB" "Dvb"))
