("Active" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C56733CC-704D-4F9D-9C78-7EA9DFC40799"
          "
Active Property (ActiveX)
Determines if the document is the active document for the session.
Supported platforms: Windows only
Signature
VBA:
object.Active
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
Determines if the document is the active document for the session.
    True: The document is the active document.
    False: The document is not the active document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Active()
    ' This example creates two new drawings and determines
    ' which of the drawings is the active drawing.
    
    Dim NewDrawing1 As AcadDocument
    Dim Newdrawing2 As AcadDocument
    Set NewDrawing1 = ThisDrawing.Application.Documents.Add(\"\")
    Set Newdrawing2 = ThisDrawing.Application.Documents.Add(\"\")
    
    Dim activeStatus As String
    Dim drawing As AcadDocument
    activeStatus = \"\"
    For Each drawing In ThisDrawing.Application.Documents
        If drawing.Active Then
                activeStatus = activeStatus & drawing.Name & \" is active.\" & vbCrLf
        Else
                activeStatus = activeStatus & drawing.Name & \" is not active.\" & vbCrLf
        End If
    Next drawing
    MsgBox activeStatus
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Active()
    ;; This example creates two new drawings and determines
    ;; which open drawing is the active drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq docs (vla-get-Documents acadObj))
    (setq NewDrawing1 (vla-Add docs \"\"))
    (setq NewDrawing2 (vla-Add docs \"\"))
    (setq activeStatus \"\")
  
    (vlax-for each-doc docs
      (princ (vla-get-Active each-doc))
        (if (= (vla-get-Active each-doc) :vlax-true)
           (setq activeStatus (strcat activeStatus (vla-get-name each-doc) \" is active.\n\"))
           (setq activeStatus (strcat activeStatus (vla-get-name each-doc) \" is not active.\n\"))
        )
    )
    (alert activeStatus)
)
")
("ActiveDimStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-06023FAF-A279-443F-88D5-04735E557D95"
                  "
ActiveDimStyle Property (ActiveX)
Specifies the active dimension style.
Supported platforms: Windows only
Signature
VBA:
object.ActiveDimStyle
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: DimStyle
A user-specified variable declared as an AcadDimStyle object type.
Remarks
This style will be applied to all newly created dimensions. To change the style on an existing dimension, use the StyleName property.
To control the settings of the current document overrides, use the dimensioning system variables. See \"System Variables\" in the AutoCAD documentation for a list of dimensioning system variables.
When you change a dimensioning system variable, you are actually setting a document override for the active dimension style. You are not changing the active dimension style itself. To change the settings of a given dimension style, use the CopyFrom method. This method copies a dimension style configuration, including overrides, from a document, dimension, or other dimension style.
Dimensions created via the AutoCAD user interface are created with the active dimension style plus all document overrides. Dimensions created via ActiveX are created with the active dimension style only. To have the dimensions created via ActiveX take on the document overrides, use the CopyFrom method to copy the dimension style from the document to the active dimension style. This process will copy all existing overrides into the active dimension style.
Examples
VBA:
Sub Example_ActiveDimStyle()
    ' This example returns the current dimension style
    ' and then sets a new style.
    ' Finally, it returns the style to the previous setting.
    Dim newDimStyle As AcadDimStyle
    Dim currDimStyle As AcadDimStyle
    
    ' Return current dimension style of active document
    Set currDimStyle = ThisDrawing.ActiveDimStyle
    MsgBox \"The current dimension style is \" & currDimStyle.name, vbInformation, \"ActiveDimStyle Example\"
    
    ' Create a dimension style and makes it current
    Set newDimStyle = ThisDrawing.DimStyles.Add(\"TestDimStyle\")
    ThisDrawing.ActiveDimStyle = newDimStyle    ' set current dimension style to newDimStyle
    MsgBox \"The new dimension style is \" & newDimStyle.name, vbInformation, \"ActiveDimStyle Example\"
    
    ' Reset the dimension style to its previous setting
    ThisDrawing.ActiveDimStyle = currDimStyle
    MsgBox \"The dimension style is reset to \" & currDimStyle.name, vbInformation, \"ActiveDimStyle Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveDimStyle()
    ;; This example returns the current dimension style
    ;; and then sets a new style.
    ;; Finally, it returns the style to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the current dimension style of the active document
    (setq currDimStyle (vla-get-ActiveDimStyle doc))
    (alert (strcat \"The current dimension style is \" (vla-get-Name currDimStyle)))
    
    ;; Create a dimension style and make it current
    (setq dimStyles (vla-get-DimStyles doc))
    (setq newDimStyle (vla-Add dimStyles \"TestDimStyle\"))
    (vla-put-ActiveDimStyle doc newDimStyle)    ;; set current dimension style to newDimStyle
    (alert (strcat \"The new dimension style is \" (vla-get-Name newDimStyle)))
    
    ;; Restore the previously active dimension style
    (vla-put-ActiveDimStyle doc currDimStyle)
    (alert (strcat \"The dimension style is restored to \" (vla-get-Name currDimStyle)))
)
")
("ActiveDocument" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-161FD7E5-B739-4E09-8430-BA04A6298703"
                  "
ActiveDocument Property (ActiveX)
Specifies the active document (drawing file).
Supported platforms: Windows only
Signature
VBA:
object.ActiveDocument
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: No
Type: Document
The default is drawing.dwg.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ActiveDocument()
    Dim activeDoc As AcadDocument
    ' Returns current document in AutoCAD
    Set activeDoc = ThisDrawing.Application.ActiveDocument
    MsgBox \"The active document is: \" & activeDoc.name, vbInformation, \"ActiveDocument Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveDocument()
    ;; Returns current document in AutoCAD
    (setq acadObj (vlax-get-acad-object))
    (setq activeDoc (vla-get-ActiveDocument acadObj))
    (alert (strcat \"The active document is: \" (vla-get-Name activeDoc)))
)
")
("ActiveLayer" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1ECB5739-A11D-4B19-9F2B-994A680D94BF"
               "
ActiveLayer Property (ActiveX)
Specifies the active layer.
Supported platforms: Windows only
Signature
VBA:
object.ActiveLayer
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: Layer
The layer that is currently active.
Remarks
New objects are placed on the active layer as they are created. To change the layer on which an existing object resides, use the Layer property for that object.
To create a new layer, use the Add method.
To change the visibility or another property of a layer, refer to the Layer object.
Examples
VBA:
Sub Example_ActiveLayer()
    ' This example returns the current layer
    ' and then adds a new layer.
    ' Finally, it returns the layer to the previous setting.
    Dim currLayer As AcadLayer
    Dim newLayer As AcadLayer
    
    ' Return the current layer of the active document
    Set currLayer = ThisDrawing.ActiveLayer
    MsgBox \"The current layer is \" & currLayer.name, vbInformation, \"ActiveLayer Example\"
    
    ' Create a Layer and make it the active layer
    Set newLayer = ThisDrawing.Layers.Add(\"TestLayer\")
    ThisDrawing.ActiveLayer = newLayer
    MsgBox \"The new layer is \" & newLayer.name, vbInformation, \"ActiveLayer Example\"
    ' Reset the layer to its previous setting
    ThisDrawing.ActiveLayer = currLayer
    MsgBox \"The active layer is reset to \" & currLayer.name, vbInformation, \"ActiveLayer Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveLayer()
    ;; This example returns the current layer
    ;; and then adds a new layer.
    ;; Finally, it returns the layer to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Return the current layer of the active document
    (setq currLayer (vla-get-ActiveLayer doc))
    (alert (strcat \"The current layer is \" (vla-get-Name currLayer)))
    
    ;; Create a Layer and make it the active layer
    (setq layers (vla-get-Layers doc))
    (setq newLayer (vla-Add layers \"TestLayer\"))
    (alert (strcat \"The new layer is \" (vla-get-Name newLayer)))
    ;; Restore the previous layer
    (setq currLayer (vla-get-ActiveLayer doc))
    (alert (strcat \"The active layer is restored to \" (vla-get-Name currLayer)))
)
")
("ActiveLayout" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-362525D2-1F6D-40BB-97FD-B83D668D7851"
                "
ActiveLayout Property (ActiveX)
Specifies the active layout.
Supported platforms: Windows only
Signature
VBA:
object.ActiveLayout
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: Layout
The layout that is currently active for the drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ActiveLayout()
    ' This example cycles through the documents collection
    ' and uses the ActiveLayout object to list the active layout
    ' for all open documents.
    Dim DOC As AcadDocument
    Dim msg As String
    
    ' If there are no open documents, then exit
    If Documents.Count = 0 Then
        MsgBox \"There are no open documents!\"
        Exit Sub
    End If
    
    msg = vbCrLf   ' Start with a space
    
    ' Cycle through documents and determine the active layout name using the
    ' ActiveLayout property of the document object
    For Each DOC In Documents
        msg = msg & DOC.WindowTitle & \": \" & DOC.ActiveLayout.Name & vbCrLf
    Next
    
    ' Display results
    MsgBox \"The active layouts for the open drawings are: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveLayout()
    ;; This example cycles through the documents collection
    ;; and uses the ActiveLayout object to list the active layout
    ;; for all open documents.
    (setq acadObj (vlax-get-acad-object))
    (setq docs (vla-get-Documents acadObj))  
    
    (setq msg \"\")
    
    ;; Cycle through the Documents collection and determine the active layout name using the
    ;; ActiveLayout property of the document object
    (vlax-for each-doc docs
        (setq msg (strcat msg (vla-get-WindowTitle each-doc) \": \" (vla-get-Name (vla-get-ActiveLayout each-doc)) \"\n\"))
    )
    
    ;; Display results
    (alert (strcat \"The active layouts for the open drawings are: \n\n\" msg))
)
")
("ActiveLinetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E93FD0AE-F63F-4655-B5A6-AAB30288D663"
                  "
ActiveLinetype Property (ActiveX)
Specifies the active linetype for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ActiveLinetype
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: Linetype
The active linetype for the drawing.
Remarks
The specified linetype must already exist in the drawing. To add a new linetype, use the Add method.
Examples
VBA:
Sub Example_ActiveLinetype()
    ' This example finds the current linetype. It then sets
    ' the new linetype to be the first entry in the linetype
    ' collection that is not equal to the current linetype.
    ' Finally, it resets the active linetype to the original
    ' setting.
    
    Dim currLineType As AcadLineType
    Dim newLineType As AcadLineType
    
    ' Find the current LineType of the active document
    Set currLineType = ThisDrawing.ActiveLinetype
    MsgBox \"The current linetype is \" & currLineType.name, vbInformation, \"ActiveLinetype Example\"
    
    ' Set the current Linetype to anything else in the collection
    Dim entry
    Dim found As Boolean
    For Each entry In ThisDrawing.Linetypes
        If StrComp(entry.name, currLineType.name, 1) <> 0 Then
            Set newLineType = entry
            found = True
            Exit For
        End If
    Next
    If found Then
        ThisDrawing.ActiveLinetype = newLineType
        MsgBox \"The new linetype is \" & newLineType.name, vbInformation, \"ActiveLinetype Example\"
        ' Reset the linetype to the previous setting
        ThisDrawing.ActiveLinetype = currLineType
        MsgBox \"The active linetype is reset to \" & currLineType.name, vbInformation, \"ActiveLinetype Example\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveLinetype()
    ;; This example finds the current linetype. It then sets
    ;; the new linetype to be the first entry in the linetype
    ;; collection that is not equal to the current linetype.
    ;; Finally, it resets the active linetype to the original
    ;; setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Find the current LineType of the active document
    (setq currLineType (vla-get-ActiveLinetype doc))
    (alert (strcat \"The current linetype is \" (vla-get-Name currLineType)))
    
    ;; Set the current Linetype to anything else in the collection
    (setq newLineType nil)
    (setq found :vlax-false)
    (vlax-for each-linetype (vla-get-Linetypes doc)
        (if (and (/= (vla-get-Name each-linetype) (vla-get-Name currLineType)) (/= found :vlax-true))
            (progn
                (setq newLineType each-linetype)
                (setq found :vlax-true)
            )
        )
    )
  
    (if (= found :vlax-true)
        (progn
            (vla-put-ActiveLinetype doc newLineType)
            (alert (strcat \"The new linetype is \" (vla-get-Name newLineType)))
            ;; Restore the previous linetype
            (vla-put-ActiveLinetype doc currLineType)
            (alert (strcat \"The active linetype is restored to \" (vla-get-Name currLineType)))
        )
    )
)
")
("ActiveMaterial" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5478BDCD-0B51-46AE-A51A-0DB42D1925FD"
                  "
ActiveMaterial Property (ActiveX)
Specifies the current default material for this document.
Supported platforms: Windows only
Signature
VBA:
object.ActiveMaterial
object
    Type: Document
    The object to which this property applies.
Property Value
Read-only: No
Type: Material
The material assigned to new objects.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ActivePViewport" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4ABA8345-CB2B-4F56-A4FF-4B221DB51B27"
                   "
ActivePViewport Property (ActiveX)
Specifies the active paper space viewport for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ActivePViewport
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: PViewport
The active paper space viewport.
Remarks
A viewport must be set active using this property before you can see any changes to it.
Examples
VBA:
Sub Example_ActivePViewport()
   
    Dim newPViewport As AcadPViewport
    Dim centerPoint(0 To 2) As Double
    Dim height As Double
    Dim width As Double
    height = 5#
    width = 5#
    centerPoint(0) = 5#: centerPoint(1) = 5#: centerPoint(2) = 0#
    
    ' Create a paper space Viewport object
    ThisDrawing.ActiveSpace = acPaperSpace
    Set newPViewport = ThisDrawing.PaperSpace.AddPViewport(centerPoint, width, height)
    ZoomAll
    newPViewport.DISPLAY (True)
    
    ' Before making a paper space Viewport active,
    ' the mspace property needs to be True
    ThisDrawing.mspace = True
    ThisDrawing.ActivePViewport = newPViewport
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActivePViewport()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq centerPoint (vlax-3d-point 5 5 0)
          height 5.0
          width 5.0)
    
    ;; Create a paper space Viewport object
    (vla-put-ActiveSpace doc acPaperSpace)
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq newPViewport (vla-AddPViewport paperSpace centerPoint width height))
    (vla-ZoomAll acadObj)
    (vla-Display newPViewport :vlax-true)
    
    ;; Before making a paper space Viewport active,
    ;; the mspace property needs to be True
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc newPViewport)
)
")
("ActiveSelectionSet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3F917B84-B086-4995-9577-E2C73051BF2C"
                      "
ActiveSelectionSet Property (ActiveX)
Gets the active selection set for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ActiveSelectionSet
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: SelectionSet
The active selection set for the drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ActiveSelectionSet()
    Dim sset As AcadSelectionSet
    ' The following example returns current selection set from current drawing
    Set sset = ThisDrawing.ActiveSelectionSet
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveSelectionSet()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; The following example returns the current selection set from the current drawing
    (setq sset (vla-get-ActiveSelectionSet doc))
)
")
("ActiveSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7CDD9455-21E1-42BB-ADA4-D39ABF2FB4A3"
               "
ActiveSpace Property (ActiveX)
Toggles the active space between paper space and model space.
Supported platforms: Windows only
Signature
VBA:
object.ActiveSpace
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: acActiveSpace enum
    acModelSpace
    acPaperSpace
Remarks
For model space floating viewports, this value is set to acPaperSpace. Even though you have the capability of editing the model, you are still technically in paper space.
For more information on this property, see the PViewport object.
Note: The value of this property is stored in the TILEMODE system variable.
Examples
VBA:
Sub Example_ActiveSpace()
    ' This example toggles the ActiveSpace property from
    ' paper space to model space.
    ' Display the current setting for TILEMODE
    MsgBox \"TILEMODE = \" & ThisDrawing.ActiveSpace, vbInformation, \"ActiveSpace Example\"
     
    ' Changes active document to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    MsgBox \"TILEMODE = \" & ThisDrawing.ActiveSpace, vbInformation, \"ActiveSpace Example\"
   
    ' Changes active document to model space
    ThisDrawing.ActiveSpace = acModelSpace
    MsgBox \"TILEMODE = \" & ThisDrawing.ActiveSpace, vbInformation, \"ActiveSpace Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveSpace()
    ;; This example toggles the ActiveSpace property from
    ;; paper space to model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Display the current setting for TILEMODE
    (alert (strcat \"TILEMODE = \" (itoa (vla-get-ActiveSpace doc))))
     
    ;; Changes active document to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    (alert (strcat \"TILEMODE = \" (itoa (vla-get-ActiveSpace doc))))
   
    ;; Changes active document to model space
    (vla-put-ActiveSpace doc acModelSpace)
    (alert (strcat \"TILEMODE = \" (itoa (vla-get-ActiveSpace doc))))
)
")
("ActiveTextStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1D9D9A7D-7429-402D-90B8-387903FD5D08"
                   "
ActiveTextStyle Property (ActiveX)
Specifies the active text style for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ActiveTextStyle
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: TextStyle
The active text style for the drawing.
Remarks
New text added to the drawing will adopt the active text style. Existing text that has no distinct text style specified will adopt the new active text style.
Changes made to the current active text style will become visible only after that text style is reset as the active text style. To reset the active text style, simply call this property with the updated text style object.
Note: A call to the Regen method is necessary to see this change.
To specify a distinct text style for an object so it will not change along with the active text style, use the StyleName property.
Examples
VBA:
Sub Example_ActiveTextStyle()
    ' This example returns the current text style
    ' and then sets a new style.
    ' Finally, it returns the style to the previous setting.
    Dim newTextStyle As AcadTextStyle
    Dim currTextStyle As AcadTextStyle
    
    ' Return current text style of active document
    Set currTextStyle = ThisDrawing.ActiveTextStyle
    MsgBox \"The current text style is \" & currTextStyle.name, vbInformation, \"ActiveTextStyle Example\"
    
    ' Create a text style and make it current
    Set newTextStyle = ThisDrawing.TextStyles.Add(\"TestTextStyle\")
    ThisDrawing.ActiveTextStyle = newTextStyle
    MsgBox \"The new text style is \" & newTextStyle.name, vbInformation, \"ActiveTextStyle Example\"
    
    ' Reset the text style to its previous setting
    ThisDrawing.ActiveTextStyle = currTextStyle
    MsgBox \"The text style is reset to \" & currTextStyle.name, vbInformation, \"ActiveTextStyle Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveTextStyle()
    ;; This example returns the current text style
    ;; and then sets a new style.
    ;; Finally, it returns the style to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Return current text style of active document
    (setq currTextStyle (vla-get-ActiveTextStyle doc))
    (alert (strcat \"The current text style is \" (vla-get-Name currTextStyle)))
    
    ;; Create a text style and make it current
    (setq textStyles (vla-get-TextStyles doc))
    (setq newTextStyle (vla-Add textStyles \"TestTextStyle\"))
    (vla-put-ActiveTextStyle doc newTextStyle)
    (alert (strcat \"The new text style is \" (vla-get-Name newTextStyle)))
    
    ;; Restore the previous text style
    (vla-put-ActiveTextStyle doc currTextStyle)
    (alert (strcat \"The text style is restored to \" (vla-get-Name currTextStyle)))
)
")
("ActiveUCS" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F806BFBE-6291-44B9-AE48-CD960B7CB8D1"
             "
ActiveUCS Property (ActiveX)
Specifies the active UCS for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ActiveUCS
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: UCS
The active UCS for the drawing.
Remarks
Changes made to the current active UCS will become visible only after that UCS is reset as the active UCS.
If you try to get the active UCS value when the current UCS is unsaved, an error will occur. It is recommended that you confirm that the value of the UCSNAME system variable is not empty before you get the active UCS value. Alternatively, you can add a new UCS object and set it to active before getting the active UCS value.
Examples
VBA:
Sub Example_ActiveUCS()
    ' This example returns the current saved UCS (or saves a new one dynamically)
    ' and then sets a new UCS.
    ' Finally, it returns the UCS to the previous setting.
    
    Dim newUCS As AcadUCS
    Dim currUCS As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxis(0 To 2) As Double
    Dim yAxis(0 To 2) As Double
    
    ' Get the current saved UCS of the active document. If the current UCS is
    ' not saved, then add a new UCS to the UserCoordinateSystems collection
    If ThisDrawing.GetVariable(\"UCSNAME\") = \"\" Then
        ' Current UCS is not saved so get the data and save it
        With ThisDrawing
            Set currUCS = .UserCoordinateSystems.Add( _
                            .GetVariable(\"UCSORG\"), _
                            .Utility.TranslateCoordinates(.GetVariable(\"UCSXDIR\"), acUCS, acWorld, 0), _
                            .Utility.TranslateCoordinates(.GetVariable(\"UCSYDIR\"), acUCS, acWorld, 0), _
                            \"OriginalUCS\")
        End With
    Else
        Set currUCS = ThisDrawing.ActiveUCS  'current UCS is saved
    End If
    
    MsgBox \"The current UCS is \" & currUCS.name, vbInformation, \"ActiveUCS Example\"
    
    ' Create a UCS and make it current
    origin(0) = 0: origin(1) = 0: origin(2) = 0
    xAxis(0) = 1: xAxis(1) = 1: xAxis(2) = 0
    yAxis(0) = -1: yAxis(1) = 1: yAxis(2) = 0
    Set newUCS = ThisDrawing.UserCoordinateSystems.Add(origin, xAxis, yAxis, \"TestUCS\")
    ThisDrawing.ActiveUCS = newUCS
    MsgBox \"The new UCS is \" & newUCS.name, vbInformation, \"ActiveUCS Example\"
    
    ' Reset the UCS to its previous setting
    ThisDrawing.ActiveUCS = currUCS
    MsgBox \"The UCS is reset to \" & currUCS.name, vbInformation, \"ActiveUCS Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveUCS()
    ;; This example returns the current saved UCS (or saves a new one dynamically)
    ;; and then sets a new UCS.
    ;; Finally, it returns the UCS to the previous setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq UCSs (vla-get-UserCoordinateSystems doc))
  
    ;; Get the current saved UCS of the active document. If the current UCS is
    ;; not saved, then add a new UCS to the UserCoordinateSystems collection
    (if (= (vlax-variant-value (vla-GetVariable doc \"UCSNAME\")) \"\")
        (progn
	           (setq utility (vla-get-Utility doc))
            (setq currUCS (vla-Add UCSs
	                                  (vla-GetVariable doc \"UCSORG\")
	                                  (vla-TranslateCoordinates utility (vla-GetVariable doc \"UCSXDIR\") acUCS acWorld :vlax-false)
	                                  (vla-TranslateCoordinates utility (vla-GetVariable doc \"UCSYDIR\") acUCS acWorld :vlax-false)
	                                  \"OriginalUCS\"
			                       )
            )
        )
        (setq currUCS (vla-get-ActiveUCS doc))  ;; current UCS is saved
    )
    
    (alert (strcat \"The current UCS is \" (vla-get-Name currUCS)))
    
    ;; Create a UCS and make it current
    (setq origin (vlax-3d-point 0 0 0)
          xAxis (vlax-3d-point 1 1 0)
          yAxis (vlax-3d-point -1 1 0))
    (setq newUCS (vla-Add UCSs origin xAxis yAxis \"TestUCS\"))
    (vla-put-ActiveUCS doc newUCS)
    (alert (strcat \"The new UCS is \" (vla-get-Name newUCS)))
    
    ;; Restore the previous UCS
    (vla-put-ActiveUCS doc currUCS)
    (alert (strcat \"The UCS is restored to \" (vla-get-Name currUCS)))
)
")
("ActiveViewport" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8EA574F1-AEB1-4940-BB9F-02AFE5B6C630"
                  "
ActiveViewport Property (ActiveX)
Specifies the active viewport for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ActiveViewport
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: Viewport
The active viewport for the drawing.
Remarks
Changes made to the current active viewport will become visible only after you reset the viewport as the active viewport. To reset the active viewport, simply call this property with the updated viewport object.
Use the StatusID property to determine if a viewport is currently active.
You can iterate through existing viewports to find a particular viewport. To do this, first identify the name of the viewport configuration on which the desired viewport resides using the Name property. Additionally, if the viewport configuration has been split, each individual viewport on the configuration can be identified through the LowerLeftCorner and UpperRightCorner properties.
The LowerLeftCorner and UpperRightCorner properties represent the graphic placement of the viewport on the display. These properties are defined as follows (using a four-way split as an example):
Viewport 1—LowerLeftCorner = (0, .5), UpperRightCorner = (.5, 1)
Viewport 2—LowerLeftCorner = (.5, .5), UpperRightCorner = (1, 1)
Viewport 3—LowerLeftCorner = (0, 0), UpperRightCorner = (.5, .5)
Viewport 4—LowerLeftCorner = (.5, 0), UpperRightCorner = (1, .5)
Examples
VBA:
Sub Example_ActiveViewport()
    ' This example returns the current viewport.
    ' It creates a new viewport and makes it active, and
    ' Then it splits the viewport into four windows.
    ' It then takes one of the four windows, and splits that
    ' window horizontally into half.
    Dim currViewport As AcadViewport
    Dim newViewport As AcadViewport
    
    ' Returns current viewport of active document
    Set currViewport = ThisDrawing.ActiveViewport
    MsgBox \"The current viewport is \" & currViewport.name, vbInformation, \"ActiveViewport Example\"
    
    ' Create a new viewport and make it active
    Set newViewport = ThisDrawing.Viewports.Add(\"TESTVIEWPORT\")
    ThisDrawing.ActiveViewport = newViewport
    MsgBox \"The new active viewport is \" & newViewport.name, vbInformation, \"ActiveViewport Example\"
    
    ' Split the viewport in four windows
    newViewport.Split acViewport4
    
    ' Make the newly split viewport active
    ThisDrawing.ActiveViewport = newViewport
    
    ' Note that current drawing layout will show four windows.
    ' However, only one of the windows will be active.
    ' The following code sets the lower-left corner window
    ' to be the active window and then splits that
    ' window into two horizontal windows.
    Dim entry
    For Each entry In ThisDrawing.Viewports
        If entry.name = \"TESTVIEWPORT\" Then
            Dim lowerLeft
            lowerLeft = entry.LowerLeftCorner
            If lowerLeft(0) = 0 And lowerLeft(1) = 0 Then
                Set newViewport = entry
                Exit For
            End If
        End If
    Next
    newViewport.Split acViewport2Horizontal
    ThisDrawing.ActiveViewport = newViewport
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ActiveViewport()
    ;; This example returns the current viewport.
    ;; It creates a new viewport and makes it active, and
    ;; Then it splits the viewport into four windows.
    ;; It then takes one of the four windows, and splits that
    ;; window horizontally into half.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Returns current viewport of active document
    (setq currViewport (vla-get-ActiveViewport doc))
    (alert (strcat \"The current viewport is \" (vla-get-Name currViewport)))
    
    ;; Create a new viewport and make it active
    (setq viewports (vla-get-Viewports doc))
    (setq newViewport (vla-Add viewports \"TESTVIEWPORT\"))
    (vla-put-ActiveViewport doc newViewport)
    (alert (strcat \"The new active viewport is \" (vla-get-Name newViewport)))
    
    ;; Split the viewport in four windows
    (vla-Split newViewport acViewport4)
    
    ;; Make the newly split viewport active
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Note that current drawing layout will show four windows.
    ;; However, only one of the windows will be active.
    ;; The following code sets the lower-left corner window
    ;; to be the active window and then splits that
    ;; window into two horizontal windows.
    (vlax-for each-viewport viewports
        (if (= (vla-get-Name each-viewport) \"TESTVIEWPORT\")
            (progn
                (setq lowerLeft (vla-get-LowerLeftCorner each-viewport))
                (if (and (= (vlax-safearray-get-element (vlax-variant-value lowerLeft) 0) 0)
                         (= (vlax-safearray-get-element (vlax-variant-value lowerLeft) 1) 0)
                    )
                    (setq newViewport each-viewport)
                )
            )
        )
    )
    (vla-Split newViewport acViewport2Horizontal)
    (vla-put-ActiveViewport doc newViewport)
)
")
("AdjustForBackground" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-04A4923A-7362-4651-9A37-2BD043ACCB15"
                       "
AdjustForBackground Property (ActiveX)
Determines whether the underlay colors are adjusted for the current background color.
Supported platforms: Windows only
Signature
VBA:
object.AdjustForBackground
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Colors in the underlay are adjusted.
    False: Colors in the underlay are not adjusted.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AlignSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F7817816-B54B-4E8C-A93D-86A8FE456F43"
              "
AlignSpace Property (ActiveX)
Specifies the AlignSpace of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.AlignSpace
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The alignment space value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Alignment" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-27030E1C-6480-4A64-BE0A-E72C1FFF2023"
             "
Alignment Property (ActiveX)
Specifies both the vertical and horizontal alignments for the attribute, attribute reference, or text.
Supported platforms: Windows only
Signature
VBA:
object.Alignment
object
    Type: Attribute, AttributeRef, Text
    The objects this property applies to.
Property Value
Read-only: No
Type: acAlignment enum
    acAlignmentLeft
    acAlignmentCenter
    acAlignmentRight
    acAlignmentAligned
    acAlignmentMiddle
    acAlignmentFit
    acAlignmentTopLeft
    acAlignmentTopCenter
    acAlignmentTopRight
    acAlignmentMiddleLeft
    acAlignmentMiddleCenter
    acAlignmentMiddleRight
    acAlignmentBottomLeft
    acAlignmentBottomCenter
    acAlignmentBottomRight
Remarks
Text aligned to acAlignmentLeft uses the InsertionPoint property to position the text.
Text aligned to acAlignmentAligned or acAlignmentFit uses both the InsertionPoint and TextAlignmentPoint properties to position the text.
Text aligned to any other position uses the TextAlignmentPoint property to position the text.
Examples
VBA:
Sub Example_Alignment()
   ' This example creates a text object in model space and
   ' demonstrates setting the alignment of the new text string
    
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double, alignmentPoint(0 To 2) As Double
    Dim height As Double
    Dim oldPDMODE As Integer
    Dim pointObj As AcadPoint
    
    ' Define the new Text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    alignmentPoint(0) = 3: alignmentPoint(1) = 3: alignmentPoint(2) = 0
    height = 0.5
    
    ' Create the Text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    
    oldPDMODE = ThisDrawing.GetVariable(\"PDMODE\")   ' Record existing point style
    
    ' Create a crosshair over the text alignment point
    ' to better visualize the alignment process
    Set pointObj = ThisDrawing.ModelSpace.AddPoint(alignmentPoint)
    
    ThisDrawing.SetVariable \"PDMODE\", 2             ' Set point style to crosshair
        
    ThisDrawing.Application.ZoomAll
    
    ' Set the text alignment to a value other than acAlignmentLeft, which is the default.
    ' Create a point that will act as an alignment reference point
    textObj.Alignment = acAlignmentRight
    
    ' Create the text alignment reference point and the text will automatically
    ' align to the right of this point, because the text
    ' alignment was set to acAlignmentRight
    textObj.TextAlignmentPoint = alignmentPoint
    ThisDrawing.Regen acActiveViewport
    MsgBox \"The Text object is now aligned to the right of the alignment point\"
    
    ' Center the text to the alignment point
    textObj.Alignment = acAlignmentCenter
    ThisDrawing.Regen acActiveViewport
    MsgBox \"The Text object is now centered to the alignment point\"
    
    ' Reset point style
    ThisDrawing.SetVariable \"PDMODE\", oldPDMODE
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Alignment()
   ;; This example creates a text object in model space and
   ;; demonstrates setting the alignment of the new text string
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Text object
    (setq insertionPoint (vlax-3d-point 3 3 0)  
          alignmentPoint (vlax-3d-point 3 3 0)  
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the Text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    
    (setq oldPDMODE (vlax-variant-value (vla-GetVariable doc \"PDMODE\")))   ;; Record existing point style
    
    ;; Create a crosshair over the text alignment point
    ;; to better visualize the alignment process
    (setq pointObj (vla-AddPoint modelSpace alignmentPoint))
    
    (vla-SetVariable doc \"PDMODE\" 2)             ;; Set point style to crosshair
        
    (vla-ZoomAll acadObj)
    
    ;; Set the text alignment to a value other than acAlignmentLeft, which is the default.
    ;; Create a point that will act as an alignment reference point
    (vla-put-Alignment textObj acAlignmentRight)
    
    ;; Create the text alignment reference point and the text will automatically
    ;; align to the right of this point, because the text
    ;; alignment was set to acAlignmentRight
    (vla-put-TextAlignmentPoint textObj alignmentPoint)
    (vla-Regen doc acActiveViewport)
    (alert \"The Text object is now aligned to the right of the alignment point.\")
    
    ;; Center the text to the alignment point
    (vla-put-Alignment textObj acAlignmentCenter)
    (vla-Regen doc acActiveViewport)
    (alert \"The Text object is now centered to the alignment point.\")
    
    ;; Reset point style
    (vla-SetVariable doc \"PDMODE\" oldPDMODE)
)
")
("AllowLongSymbolNames" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-798A8844-D55D-46D3-8528-19993F1B86B2"
                        "
AllowLongSymbolNames Property (ActiveX)
Determines if symbol names may include extended character sets, or more than 31 characters.
Supported platforms: Windows only
Signature
VBA:
object.AllowLongSymbolNames
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Use extended symbol names.
    False: Use restricted symbol names.
Remarks
The initial value of this property is True.
Extended symbol names may contain up to 255 characters and A-Z, 0-9, spaces, and any special character not used by Microsoft Windows and AutoCAD for other purposes.
Restricted symbol names may contain up to 31 characters and A-Z, 0-9, dollar sign ($), underscore (_), and hyphen (-).
This property applies to the names of non-graphical objects (such as linetypes and layers) that are stored in symbol tables.
Note: The value of this property is stored in the EXTNAMES system variable.
Examples
VBA:
Sub Example_AllowLongSymbolNames()
    ' This example reads and modifies the preference value that controls
    ' whether symbol names include extended character sets or more
    ' than 31 characters.
    '
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.AllowLongSymbolNames
    MsgBox \"The AllowLongSymbolNames preference is set to: \" & originalValue
    ' Modify the AllowLongSymbolNames preference by toggling the value
    ACADPref.AllowLongSymbolNames = Not (ACADPref.AllowLongSymbolNames)
    newValue = ACADPref.AllowLongSymbolNames
    MsgBox \"The AllowLongSymbolNames preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.AllowLongSymbolNames = originalValue
    MsgBox \"The AllowLongSymbolNames preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AllowLongSymbolNames()
    ;; This example reads and modifies the preference value that controls
    ;; whether symbol names include extended character sets or more
    ;; than 31 characters.
    ;;
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    ;; Get the drafting preferences object
    (setq ACADPref (vla-get-Preferences doc))
        
    ;; Read and display the original value
    (setq originalValue (vla-get-AllowLongSymbolNames ACADPref))
    (alert (strcat \"The AllowLongSymbolNames preference is set to: \" (if (= originalValue :vlax-true) \"1\" \"0\")))
    ;; Modify the AllowLongSymbolNames preference by toggling the value
    (vla-put-AllowLongSymbolNames ACADPref (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AllowLongSymbolNames ACADPref))
    (alert (strcat \"The AllowLongSymbolNames preference has been set to: \" (if (= newValue :vlax-true) \"1\" \"0\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-AllowLongSymbolNames ACADPref originalValue)
    (alert (strcat \"The AllowLongSymbolNames preference was reset back to: \" (if (= originalValue :vlax-true) \"1\" \"0\")))
)
")
("AllowManualHeights" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FB244E08-FA9D-4508-BFEC-1BA6B3CD0F05"
                      "
AllowManualHeights Property (ActiveX)
Toggles the manual heights in a table.
Supported platforms: Windows only
Signature
VBA:
object.AllowManualHeights
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Broken table parts to have their own breaking height.
    False: All table parts will break at the height of the initial table part.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AllowManualPositions" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9FF706F7-84B1-4391-B885-434316F41720"
                        "
AllowManualPositions Property (ActiveX)
Toggles the manual positions in a table.
Supported platforms: Windows only
Signature
VBA:
object.AllowManualPositions
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Each table part can be moved outside of the boundary.
    False: Table parts are contained within a rectangular boundary.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AllowedValues" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EB41B402-5E46-4D9B-9853-AF172AEF1A65"
                 "
AllowedValues Property (ActiveX)
Specifies the allowed values for the property.
Supported platforms: Windows only
Signature
VBA:
object.AllowedValues
object
    Type: DynamicBlockReferenceProperty
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant
Set of property values.
Remarks
Not all dynamic block properties have a restricted set of property values. Some properties are unrestricted, some specify a minimum or maximum value (or both), and some have a list of allowed values. This property supports only allowed property values that are defined by a list; minimum, maximum, and unrestricted property types are not supported.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AltRoundDistance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0D190983-C449-4B17-90D8-6CD3DC623780"
                    "
AltRoundDistance Property (ActiveX)
Specifies the rounding of alternate units.
Supported platforms: Windows only
Signature
VBA:
object.AltRoundDistance
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A positive real number representing the value to round distances to. The initial value is 0.00.
Remarks
If the AltUnits property is turned on, this property defines the number to round distances to.
Note: This property overrides the value of the DIMALTRND system variable for the given dimension.
Examples
VBA:
Sub Example_AltRoundDistance()
   ' This example creates an aligned dimension in model space and
   ' uses AltRoundDistance to set the alternate unit display
   ' of the dimension to rounded values
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 10.123: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"Press any key to round the alternate dimension unit display to .5\"
    
    ' Round the distance of the alternate dimension to 0.50 of a unit
    dimObj.AltRoundDistance = 0.5
    ThisDrawing.Regen acAllViewports
    
    MsgBox \"Alternate dimension units have been rounded to: \" & dimObj.AltRoundDistance
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltRoundDistance()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltRoundDistance to set the alternate unit display
    ;; of the dimension to rounded values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10.123 5 0)
          location (vlax-3d-point 5 7 0))
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable alternate unit display
    (vla-put-AltUnits dimObj :vlax-true)
    
    (vla-ZoomAll acadObj)
    
    (alert \"Round the alternate dimension unit display to .5\")
    
    ;; Round the distance of the alternate dimension to 0.50 of a unit
    (vla-put-AltRoundDistance dimObj 0.5)
    (vla-Regen doc acAllViewports)
    
    (alert (strcat \"Alternate dimension units have been rounded to: \" (rtos (vla-get-AltRoundDistance dimObj) 2 4)))
)
")
("AltSubUnitsFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A7A2C927-C2C5-42D6-AE87-BFC035EB94DD"
                     "
AltSubUnitsFactor Property (ActiveX)
Specifies the scale factor for the alternate dimension when unit changes to sub-unit.
Supported platforms: Windows only
Signature
VBA:
object.AltSubUnitsFactor
object
    Type: DimAligned, DimArcLength, DimOrdinate, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The scale factor for alternate sub-unit dimensions.
Remarks
The AltSubUnitsFactor property will only take affect when leading zeros are suppressed.
AltSubUnitsFactor affects all linear dimension types that allow a suffix. The alternate sub-unit scale factor replaces the alternate dimension scale factor when unit changes to sub-unit. When units are less than 1, the sub-units factor controls the location of the decimal separator.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AltSubUnitsSuffix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0818F2BD-DF70-457C-8606-48D0ECC23ED4"
                     "
AltSubUnitsSuffix Property (ActiveX)
Specifies the text suffix for the alternate dimension when unit changes to sub-unit.
Supported platforms: Windows only
Signature
VBA:
object.AltSubUnitsSuffix
object
    Type: DimAligned, DimArcLength, DimOrdinate, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: String
The suffix for alternate sub-unit dimensions.
Remarks
The AltSubUnitsSuffix property will only take affect when leading zeros are suppressed.
AltSubUnitsSuffix affects all linear dimension types that allow a suffix. The alternate dimension sub-suffix replaces the alternate dimension suffix when unit changes to sub-unit.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("AltSuppressLeadingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DBF1D57D-BBA5-4455-AF02-14805ECE8E66"
                           "
AltSuppressLeadingZeros Property (ActiveX)
Specifies the suppression of leading zeros in alternate dimension values.
Supported platforms: Windows only
Signature
VBA:
object.AltSuppressLeadingZeros
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress leading zeros in alternate dimensions. For example, 0.5000 becomes .5000.
    False: Do not suppress leading zeros in alternate dimensions.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltSuppressLeadingZeros()
   ' This example creates an aligned dimension in model space and
   ' uses AltSuppressLeadingZeros to toggle the display of leading zeros
   ' in the alternate dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of leading zeros in the alternate dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of leading zeros for the alternate dimension value
            dimObj.AltSuppressLeadingZeros = Not (dimObj.AltSuppressLeadingZeros)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltSuppressLeadingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltSuppressLeadingZeros to toggle the display of leading zeros
    ;; in the alternate dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.01 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Set up alternate unit tolerance display
    (setq originalValue (vla-get-AltSuppressLeadingZeros dimObj))
    (vla-put-AltUnits dimObj :vlax-true)
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    (alert \"Toggling the display of leading zeros in the alternate dimension.\")
    
    ;; Toggle the display of leading zeros for the alternate dimension tolerance value
    (vla-put-AltSuppressLeadingZeros dimObj (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AltSuppressLeadingZeros dimObj))
    (vla-Regen doc acAllViewports)
    
    (alert \"Toggling the display of leading zeros in the alternate dimension to original value.\")
    (vla-put-AltSuppressLeadingZeros dimObj (if (= newValue :vlax-true) :vlax-false :vlax-true))  
    (vla-Regen doc acAllViewports)
)
")
("AltSuppressTrailingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2723B235-FE67-4BE5-A223-237FFD061704"
                            "
AltSuppressTrailingZeros Property (ActiveX)
Specifies the suppression of trailing zeros in alternate dimension values.
Supported platforms: Windows only
Signature
VBA:
object.AltSuppressTrailingZeros
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress trailing zeros in alternate dimensions. For example, 12.5000 becomes 12.5.
    False: Do not suppress trailing zeros in alternate dimensions.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltSuppressTrailingZeros()
   ' This example creates an aligned dimension in model space and
   ' uses AltSuppressTrailingZeros to toggle the display of trailing zeros
   ' in the alternate dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 7: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of trailing zeros in the alternate dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of trailing zeros for the alternate dimension value
            dimObj.AltSuppressTrailingZeros = Not (dimObj.AltSuppressTrailingZeros)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltSuppressTrailingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltSuppressTrailingZeros to toggle the display of trailing zeros
    ;; in the alternate dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 7 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    ;; Enable alternate unit display
    (vla-put-AltUnits dimObj :vlax-true)
    ;; Set up alternate unit tolerance display
    (setq originalValue (vla-get-AltSuppressTrailingZeros dimObj))
    (vla-put-AltSuppressTrailingZeros dimObj :vlax-true)
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    (alert \"Toggling the display of trailing zeros in the alternate dimension.\")
    
    ;; Toggle the display of trailing zeros for the alternate dimension tolerance value
    (vla-put-AltSuppressTrailingZeros dimObj (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AltSuppressTrailingZeros dimObj))
    (vla-Regen doc acAllViewports)
    
    (alert \"Toggling the display of trailing zeros in the alternate dimension to original value.\")
    (vla-put-AltSuppressTrailingZeros dimObj (if (= newValue :vlax-true) :vlax-false :vlax-true))  
    (vla-Regen doc acAllViewports)
)
")
("AltSuppressZeroFeet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-14862177-5D19-45BF-A3AE-7B19B051F4A9"
                       "
AltSuppressZeroFeet Property (ActiveX)
Specifies the suppression of a zero foot measurement in alternate dimension values.
Supported platforms: Windows only
Signature
VBA:
object.AltSuppressZeroFeet
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero foot measurement.
    False: Do not suppress the display of a zero foot measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltSuppressZeroFeet()
   ' This example creates an aligned dimension in model space and
   ' uses AltSuppressZeroFeet to suppress or view the display of
   ' zero feet in the alternate dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ' Set the dimension display to a style that works with AltSuppressZeroFeet
    dimObj.AltUnitsFormat = acDimLArchitectural
    dimObj.AltUnitsScale = 2    ' Set the alternate unit scale to be a multiple of 2
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to suppress or view the display of zero feet in the alternate dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero feet for the alternate dimension value
            dimObj.AltSuppressZeroFeet = Not (dimObj.AltSuppressZeroFeet)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltSuppressZeroFeet()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltSuppressZeroFeet to suppress or view the display of
    ;; zero feet in the alternate dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable alternate unit display
    (setq originalValue (vla-get-AltSuppressZeroFeet dimObj))
    (vla-put-AltUnits dimObj :vlax-true)
    ;; Set the dimension display to a style that works with AltSuppressZeroFeet
    (vla-put-AltUnitsFormat dimObj acDimLArchitectural)
    (vla-put-AltUnitsScale dimObj 2)    ;; Set the alternate unit scale to be a multiple of 2
  
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    (alert \"Toggling the display of zero feet in the alternate tolerance.\")
    
    ;; Set the dimension display to a style that works with AltSuppressZeroFeet
    (vla-put-AltSuppressZeroFeet dimObj (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AltSuppressZeroFeet dimObj))
    (vla-Regen doc acAllViewports)
    
    (alert \"Toggling the display of zero feet in the alternate tolerance to original value.\")
    (vla-put-AltSuppressZeroFeet dimObj (if (= newValue :vlax-true) :vlax-false :vlax-true))  
    (vla-Regen doc acAllViewports)
)
")
("AltSuppressZeroInches" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-636A0E74-E4AD-4696-8EE2-4A1C5B5A0E12"
                         "
AltSuppressZeroInches Property (ActiveX)
Specifies the suppression of a zero inch measurement in alternate dimension values.
Supported platforms: Windows only
Signature
VBA:
object.AltSuppressZeroInches
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero inch measurement.
    False: Do not suppress the display of a zero inch measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltSuppressZeroInches()
   ' This example creates an aligned dimension in model space and
   ' uses AltSuppressZeroInches to suppress or view the display of
   ' zero inches in the alternate dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 12: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ' Set the dimension display to a style that works with AltSuppressZeroInches
    dimObj.AltUnitsFormat = acDimLArchitectural
    dimObj.AltUnitsScale = 2    ' Set the alternate unit scale to be a multiple of 2
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to suppress or view the display of zero inches in the alternate dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero inches for the alternate dimension value
            dimObj.AltSuppressZeroInches = Not (dimObj.AltSuppressZeroInches)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltSuppressZeroInches()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltSuppressZeroInches to suppress or view the display of
    ;; zero inches in the alternate dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable alternate unit display
    (setq originalValue (vla-get-AltSuppressZeroInches dimObj))
    (vla-put-AltUnits dimObj :vlax-true)
    ;; Set the dimension display to a style that works with AltSuppressZeroInches
    (vla-put-AltUnitsFormat dimObj acDimLArchitectural)
    (vla-put-AltUnitsScale dimObj 2)    ;; Set the alternate unit scale to be a multiple of 2
  
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    (alert \"Toggling the display of zero inches in the alternate tolerance.\")
    
    ;; Set the dimension display to a style that works with AltSuppressZeroInches
    (vla-put-AltSuppressZeroInches dimObj (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AltSuppressZeroInches dimObj))
    (vla-Regen doc acAllViewports)
    
    (alert \"Toggling the display of zero inches in the alternate tolerance to original value.\")
    (vla-put-AltSuppressZeroInches dimObj (if (= newValue :vlax-true) :vlax-false :vlax-true))  
    (vla-Regen doc acAllViewports)
)
")
("AltTextPrefix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9FE8AF87-AC1C-4F38-A02F-93295234E0AF"
                 "
AltTextPrefix Property (ActiveX)
Specifies a prefix for the alternate dimension measurement for all dimension types except angular.
Supported platforms: Windows only
Signature
VBA:
object.AltTextPrefix
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The prefix for the alternate dimensions.
Remarks
The initial value for this property is \"\".
To turn off an established prefix, set this property equal to a single period (.).
Note: This property overrides the value of the DIMAPOST system variable for the given dimension.
Examples
VBA:
Sub Example_AltTextPrefix()
   ' This example creates an aligned dimension in model space and
   ' uses AltTextPrefix to allow the user to change the text prefix for the
   ' alternate dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim prefix As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ThisDrawing.Application.ZoomAll
    ' Allow the user to change the text prefix for the alternate dimension
    prefix = InputBox(\"Enter a new text prefix for the alternate dimension\", \"Alternate Dimension Prefix\", \"PREFIX:\")
    dimObj.AltTextPrefix = prefix   ' Commit changes to prefix
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the alternate dimension text prefix
    prefix = dimObj.AltTextPrefix
    If prefix <> \"\" Then
        MsgBox \"The prefix of the alternate dimension has been changed to: \" & prefix
    Else
        MsgBox \"The prefix of the alternate dimension has been removed\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltTextPrefix()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltTextPrefix to allow the user to change the text prefix for the
    ;; alternate dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable alternate unit display
    (vla-put-AltUnits dimObj :vlax-true)
    
    (vla-ZoomAll acadObj)
    ;; Allow the user to change the text prefix for the alternate dimension
    (setq prefix (vla-GetString (vla-get-Utility doc) :vlax-false \"\nEnter a new text prefix for the alternate dimension: \"))
    (vla-put-AltTextPrefix dimObj prefix)   ;; Commit changes to prefix
    
    (vla-Regen doc acAllViewports)
    
    ;; Read back and display the alternate dimension text prefix
    (setq prefix (vla-get-AltTextPrefix dimObj))
    (if (/= prefix \"\")
        (alert (strcat \"The prefix of the alternate dimension has been changed to: \" prefix))
        (alert \"The prefix of the alternate dimension has been removed\")
    )
)
")
("AltTextSuffix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A0049F8D-207B-4631-A2A9-8BAAB3750D02"
                 "
AltTextSuffix Property (ActiveX)
Specifies a suffix for the alternate dimension measurement for all dimension types except angular.
Supported platforms: Windows only
Signature
VBA:
object.AltTextSuffix
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The suffix for the alternate dimensions.
Remarks
The initial value for this property is \"\".
To turn off an established suffix, set this property equal to a single period (.).
Note: This property overrides the value of the DIMAPOST system variable for the given dimension.
Examples
VBA:
Sub Example_AltTextSuffix()
   ' This example creates an aligned dimension in model space and
   ' uses AltTextSuffix to allow the user to change the text suffix for the
   ' alternate dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim suffix As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ThisDrawing.Application.ZoomAll
    ' Allow the user to change the text suffix for the alternate dimension
    suffix = InputBox(\"Enter a new text suffix for the alternate dimension\", \"Alternate Dimension Suffix\", \":SUFFIX\")
    dimObj.AltTextSuffix = suffix   ' Commit changes to suffix
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the alternate dimension text suffix
    suffix = dimObj.AltTextSuffix
    If suffix <> \"\" Then
        MsgBox \"The suffix of the alternate dimension has been changed to: \" & suffix
    Else
        MsgBox \"The suffix of the alternate dimension has been removed\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltTextSuffix()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltTextSuffix to allow the user to change the text suffix for the
    ;; alternate dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
       
    ;; Enable alternate unit display
    (vla-put-AltUnits dimObj :vlax-true)
    
    (vla-ZoomAll acadObj)
    ;; Allow the user to change the text suffix for the alternate dimension
    (setq suffix (vla-GetString (vla-get-Utility doc) :vlax-false \"\nEnter a new text suffix for the alternate dimension: \"))
    (vla-put-AltTextSuffix dimObj suffix)   ;; Commit changes to suffix
    
    (vla-Regen doc acAllViewports)
    
    ;; Read back and display the alternate dimension text suffix
    (setq suffix (vla-get-AltTextSuffix dimObj))
    (if (/= suffix \"\")
        (alert (strcat \"The suffix of the alternate dimension has been changed to: \" suffix))
        (alert \"The suffix of the alternate dimension has been removed\")
    )
)
")
("AltTolerancePrecision" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2C9CF879-F426-4608-A887-3D54C980D5B3"
                         "
AltTolerancePrecision Property (ActiveX)
Specifies the precision of tolerance values in alternate dimensions.
Supported platforms: Windows only
Signature
VBA:
object.AltTolerancePrecision
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimPrecision enum
    acDimPrecisionZero: 0.
    acDimPrecisionOne: 0.0
    acDimPrecisionTwo: 0.00
    acDimPrecisionThree: 0.000
    acDimPrecisionFour: 0.0000
    acDimPrecisionFive: 0.00000
    acDimPrecisionSix: 0.000000
    acDimPrecisionSeven: 0.0000000
    acDimPrecisionEight: 0.00000000
Remarks
The initial value for this property is acDimPrecisionTwo.
This property is available only when the ToleranceDisplay property is set to any value other than acTolNone.
Note: This property overrides the value of the DIMALTTD system variable for the given dimension.
Examples
VBA:
Sub Example_AltTolerancePrecision()
   ' This example creates an aligned dimension in model space and
   ' uses AltTolerancePrecision to allow the user to change the
   ' precision of the alternate dimension tolerance
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim oldTolerance As String, newTolerance As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5.12345678: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    dimObj.ToleranceDisplay = acTolLimits
    
    ThisDrawing.Application.ZoomAll
    ' Store old tolerance value as default for input box
    oldTolerance = dimObj.AltTolerancePrecision
    
    ' Allow the user to change the precision for the alternate dimension tolerance
    newTolerance = InputBox(\"Enter a new tolerance precision for the alternate dimension.  The value must range from 0 to 8.\", \"Alternate Dimension Tolerance Precision\", oldTolerance)
    
    Select Case newTolerance
        Case 0: newTolerance = acDimPrecisionZero
        Case 1: newTolerance = acDimPrecisionOne
        Case 2: newTolerance = acDimPrecisionTwo
        Case 3: newTolerance = acDimPrecisionThree
        Case 4: newTolerance = acDimPrecisionFour
        Case 5: newTolerance = acDimPrecisionFive
        Case 6: newTolerance = acDimPrecisionSix
        Case 7: newTolerance = acDimPrecisionSeven
        Case 8: newTolerance = acDimPrecisionEight
        Case Else
            MsgBox \"The alternate tolerance precision has not been changed.\"
            Exit Sub
    End Select
    
    dimObj.AltTolerancePrecision = newTolerance   ' Commit changes to tolerance precision
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the alternate dimension tolerance precision
    newTolerance = dimObj.AltTolerancePrecision
    MsgBox \"The tolerance precision has been set to \" & newTolerance & \" decimal places\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltTolerancePrecision()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltTolerancePrecision to allow the user to change the
    ;; precision of the alternate dimension tolerance
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5.12345678 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable alternate unit display
    (vla-put-AltUnits dimObj :vlax-true)
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    
    (vla-ZoomAll acadObj)
    ;; Store old tolerance value as default for input box
    (setq oldTolerance (vla-get-AltTolerancePrecision dimObj))
    
    ;; Allow the user to change the precision for the alternate dimension tolerance
    (setq newTolerance (vla-GetInteger (vla-get-Utility doc) (strcat \"\nEnter a new tolerance precision for the alternate dimension (0 to 8) <\" (itoa oldTolerance) \">: \")))
    (if (= newTolerance nil) (setq newTolerance oldTolerance))
    (setq newTolerance (cond
                           ((= newTolerance 0) acDimPrecisionZero)
                           ((= newTolerance 1) acDimPrecisionOne)
                           ((= newTolerance 2) acDimPrecisionTwo)
                           ((= newTolerance 3) acDimPrecisionThree)
                           ((= newTolerance 4) acDimPrecisionFour)
                           ((= newTolerance 5) acDimPrecisionFive)
                           ((= newTolerance 6) acDimPrecisionSix)
                           ((= newTolerance 7) acDimPrecisionSeven)
                           ((= newTolerance 8) acDimPrecisionEight)
                           (progn (setq newTolerance nil) (alert \"The alternate tolerance precision has not been changed.\"))
                       ))
    (if (/= newTolerance nil)
        (progn
            (vla-put-AltTolerancePrecision dimObj newTolerance)   ;; Commit changes to tolerance precision
	    
            (vla-Regen doc acAllViewports)
	    
            ;; Read back and display the alternate dimension tolerance precision
            (alert (strcat \"The tolerance precision has been set to \" (itoa (vla-get-AltTolerancePrecision dimObj)) \" decimal places\"))
        )
    )
)
")
("AltToleranceSuppressLeadingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9A4073D9-7F42-4C41-B4F3-FEFC5F5F1497"
                                    "
AltToleranceSuppressLeadingZeros Property (ActiveX)
Specifies the suppression of leading zeros in alternate dimension values.
Supported platforms: Windows only
Signature
VBA:
object.AltToleranceSuppressLeadingZeros
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress leading zeros in alternate dimensions. For example, 0.5000 becomes .5000.
    False: Do not suppress leading zeros in alternate dimensions.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltToleranceSuppressLeadingZeros()
   ' This example creates an aligned dimension in model space and
   ' uses AltToleranceSuppressLeadingZeros to toggle the display of leading zeros
   ' in the alternate dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Set up alternate unit tolerance display
    dimObj.AltUnits = True
    dimObj.ToleranceDisplay = acTolLimits
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of leading zeros in the alternate dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of leading zeros for the alternate dimension tolerance value
            dimObj.AltToleranceSuppressLeadingZeros = Not (dimObj.AltToleranceSuppressLeadingZeros)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltToleranceSuppressLeadingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltToleranceSuppressLeadingZeros to toggle the display of leading zeros
    ;; in the alternate dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.01 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Set up alternate unit tolerance display
    (vla-put-AltUnits dimObj :vlax-true)
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    
    (vla-ZoomAll acadObj)
    ;; Toggle the display of leading zeros for the alternate dimension tolerance value
    (vla-put-AltToleranceSuppressLeadingZeros dimObj (if (= (vla-get-AltToleranceSuppressLeadingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of leading zeros in the alternate dimension tolerance toggled.\")
    ;; Toggle the display of leading zeros for the alternate dimension tolerance value back to previous state
    (vla-put-AltToleranceSuppressLeadingZeros dimObj (if (= (vla-get-AltToleranceSuppressLeadingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of leading zeros in the alternate dimension tolerance toggled back.\")
)
")
("AltToleranceSuppressTrailingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-56577FF1-FD1B-40C3-A21F-A99BC931A956"
                                     "
AltToleranceSuppressTrailingZeros Property (ActiveX)
Specifies the suppression of trailing zeros in alternate tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.AltToleranceSuppressTrailingZeros
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress trailing zeros in alternate tolerance values. For example, 12.5000 becomes 12.5.
    False: Do not suppress trailing zeros in alternate tolerance values.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltToleranceSuppressTrailingZeros()
   ' This example creates an aligned dimension in model space and
   ' uses AltToleranceSuppressTrailingZeros to toggle the display of trailing zeros
   ' in the alternate dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 7: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Set up alternate unit tolerance display
    dimObj.AltUnits = True
    dimObj.ToleranceDisplay = acTolLimits
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of trailing zeros in the alternate dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of trailing zeros for the alternate dimension tolerance value
            dimObj.AltToleranceSuppressTrailingZeros = Not (dimObj.AltToleranceSuppressTrailingZeros)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltToleranceSuppressTrailingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltToleranceSuppressTrailingZeros to toggle the display of trailing zeros
    ;; in the alternate dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 7 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Set up alternate unit tolerance display
    (vla-put-AltUnits dimObj :vlax-true)
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    
    (vla-ZoomAll acadObj)
    ;; Toggle the display of trailing zeros for the alternate dimension tolerance value
    (vla-put-AltToleranceSuppressTrailingZeros dimObj (if (= (vla-get-AltToleranceSuppressTrailingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of trailing zeros in the alternate dimension tolerance toggled.\")
    ;; Toggle the display of trailing zeros for the alternate dimension tolerance value back to previous state
    (vla-put-AltToleranceSuppressTrailingZeros dimObj (if (= (vla-get-AltToleranceSuppressTrailingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of trailing zeros in the alternate dimension tolerance toggled back.\")
)
")
("AltToleranceSuppressZeroFeet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9A6A3AAE-EACC-46D0-9984-687660442CA6"
                                "
AltToleranceSuppressZeroFeet Property (ActiveX)
Specifies the suppression of a zero foot measurement in alternate tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.AltToleranceSuppressZeroFeet
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero foot measurement.
    False: Do not suppress the display of a zero foot measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltToleranceSuppressZeroFeet()
   ' This example creates an aligned dimension in model space and
   ' uses AltToleranceSuppressZeroFeet to suppress or view the display of
   ' zero feet in the alternate dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Set up alternate unit tolerance display
    dimObj.AltUnits = True
    dimObj.ToleranceDisplay = acTolLimits
    
    ' Set the dimension display to a style that works with AltToleranceSuppressZeroFeet
    dimObj.AltUnitsFormat = acDimLArchitectural
    dimObj.AltUnitsScale = 2    ' Set the alternate unit scale to be a multiple of 2
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to suppress or view the display of zero feet in the alternate dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero feet for the alternate dimension value
            dimObj.AltToleranceSuppressZeroFeet = Not (dimObj.AltToleranceSuppressZeroFeet)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltToleranceSuppressZeroFeet()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltToleranceSuppressZeroFeet to suppress or view the display of
    ;; zero feet in the alternate dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 6.01 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Set up alternate unit tolerance display
    (vla-put-AltUnits dimObj :vlax-true)
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    
    ;; Set the dimension display to a style that works with AltToleranceSuppressZeroFeet
    (vla-put-AltUnitsFormat dimObj acDimLArchitectural)
    (vla-put-AltUnitsScale dimObj 2)    ;; Set the alternate unit scale to be a multiple of 2
    
    (vla-ZoomAll acadObj)
    ;; Toggle the display of zero feet for the alternate dimension value
    (vla-put-AltToleranceSuppressZeroFeet dimObj (if (= (vla-get-AltToleranceSuppressZeroFeet dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero feet in the alternate dimension tolerance toggled.\")
    ;; Toggle the display of zero feet for the alternate dimension value back to previous state
    (vla-put-AltToleranceSuppressZeroFeet dimObj (if (= (vla-get-AltToleranceSuppressZeroFeet dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero feet in the alternate dimension tolerance toggled back.\")
)
")
("AltToleranceSuppressZeroInches" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ED8D6D59-0A55-4330-9AE7-CA221CF6784A"
                                  "
AltToleranceSuppressZeroInches Property (ActiveX)
Specifies the suppression of a zero inch measurement in alternate tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.AltToleranceSuppressZeroInches
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero inch measurement.
    False: Do not suppress the display of a zero inch measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMALTTZ system variable for the given dimension.
Examples
VBA:
Sub Example_AltToleranceSuppressZeroInches()
   ' This example creates an aligned dimension in model space and
   ' uses AltToleranceSuppressZeroInches to suppress or view the display of
   ' zero inches in the alternate dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 12: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Set up alternate unit tolerance display
    dimObj.AltUnits = True
    dimObj.ToleranceDisplay = acTolLimits
    
    ' Set the dimension display to a style that works with AltToleranceSuppressZeroInches
    dimObj.AltUnitsFormat = acDimLArchitectural
    dimObj.AltUnitsScale = 2    ' Set the alternate unit scale to be a multiple of 2
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to suppress or view the display of zero inches in the alternate dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero inches for the alternate dimension tolerance value
            dimObj.AltToleranceSuppressZeroInches = Not (dimObj.AltToleranceSuppressZeroInches)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltToleranceSuppressZeroInches()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltToleranceSuppressZeroInches to suppress or view the display of
    ;; zero inches in the alternate dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 12 5 0)
          location (vlax-3d-point 5 7 0))
    
    ; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Set up alternate unit tolerance display
    (vla-put-AltUnits dimObj :vlax-true)
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    
    ;; Set the dimension display to a style that works with AltToleranceSuppressZeroInches
    (vla-put-AltUnitsFormat dimObj acDimLArchitectural)
    (vla-put-AltUnitsScale dimObj 2)    ;; Set the alternate unit scale to be a multiple of 2
    
    (vla-ZoomAll acadObj)
    ;; Toggle the display of zero inches for the alternate dimension tolerance value
    (vla-put-AltToleranceSuppressZeroInches dimObj (if (= (vla-get-AltToleranceSuppressZeroInches dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero inches in the alternate dimension tolerance toggled.\")
    ;; Toggle the display of zero inches for the alternate dimension tolerance value back to previous state
    (vla-put-AltToleranceSuppressZeroInches dimObj (if (= (vla-get-AltToleranceSuppressZeroInches dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero inches in the alternate dimension tolerance toggled back.\")
)
")
("AltUnits" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D4FAE739-4C2F-4491-905C-2A702F0933E3"
            "
AltUnits Property (ActiveX)
Enables dimensioning in alternate units.
Supported platforms: Windows only
Signature
VBA:
object.AltUnits
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable dimensioning in alternate units.
    False: Disable dimensioning in alternate units.
Remarks
The initial value for this property is False.
Note: This property overrides the value of the DIMALT system variable for the given dimension.
Examples
VBA:
Sub Example_AltUnits()
   ' This example creates an aligned dimension in model space and
   ' uses AltUnits to toggle the alternate dimension units on and off
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
    ' Toggle alternate unit display
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of alternate dimensions\", vbOKCancel)
        Case vbOK
            ' Toggle the alternate dimension display
            dimObj.AltUnits = Not (dimObj.AltUnits)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    ' Display status of alternate units display
    If dimObj.AltUnits Then
        MsgBox \"Alternate units display is on.\"
    Else
        MsgBox \"Alternate units display is off.\"
    End If
    
    GoTo Toggle
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltUnits()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltUnits to toggle the alternate dimension units on and off
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Toggle alternate unit display
    (setq originalValue (vla-get-AltUnits dimObj))
    (vla-Regen doc acAllViewports)
    (alert \"Toggling the display of alternate units.\")
    
    ;; Toggle the display of trailing zeros for the alternate dimension tolerance value
    (vla-put-AltUnits dimObj (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AltUnits dimObj))
    (vla-Regen doc acAllViewports)
    
    (alert \"Toggling the display of alternate units to original value.\")
    (vla-put-AltUnits dimObj (if (= newValue :vlax-true) :vlax-false :vlax-true))  
    (vla-Regen doc acAllViewports)
)
")
("AltUnitsFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4F655505-CA53-4868-9612-87FC8E2A43E6"
                  "
AltUnits Property (ActiveX)
Enables dimensioning in alternate units.
Supported platforms: Windows only
Signature
VBA:
object.AltUnits
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable dimensioning in alternate units.
    False: Disable dimensioning in alternate units.
Remarks
The initial value for this property is False.
Note: This property overrides the value of the DIMALT system variable for the given dimension.
Examples
VBA:
Sub Example_AltUnits()
   ' This example creates an aligned dimension in model space and
   ' uses AltUnits to toggle the alternate dimension units on and off
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
    ' Toggle alternate unit display
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of alternate dimensions\", vbOKCancel)
        Case vbOK
            ' Toggle the alternate dimension display
            dimObj.AltUnits = Not (dimObj.AltUnits)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    ' Display status of alternate units display
    If dimObj.AltUnits Then
        MsgBox \"Alternate units display is on.\"
    Else
        MsgBox \"Alternate units display is off.\"
    End If
    
    GoTo Toggle
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltUnits()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltUnits to toggle the alternate dimension units on and off
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Toggle alternate unit display
    (setq originalValue (vla-get-AltUnits dimObj))
    (vla-Regen doc acAllViewports)
    (alert \"Toggling the display of alternate units.\")
    
    ;; Toggle the display of trailing zeros for the alternate dimension tolerance value
    (vla-put-AltUnits dimObj (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-AltUnits dimObj))
    (vla-Regen doc acAllViewports)
    
    (alert \"Toggling the display of alternate units to original value.\")
    (vla-put-AltUnits dimObj (if (= newValue :vlax-true) :vlax-false :vlax-true))  
    (vla-Regen doc acAllViewports)
)
")
("AltUnitsPrecision" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FE5B4AF5-4D25-410A-83AB-914B81ED9133"
                     "
AltUnitsPrecision Property (ActiveX)
Specifies the number of decimal places in alternate units.
Supported platforms: Windows only
Signature
VBA:
object.AltUnitsPrecision
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimPrecision enum
Use one of the following constants to specify precision:
    acDimPrecisionZero: 0.
    acDimPrecisionOne: 0.0
    acDimPrecisionTwo: 0.00
    acDimPrecisionThree: 0.000
    acDimPrecisionFour: 0.0000
    acDimPrecisionFive: 0.00000
    acDimPrecisionSix: 0.000000
    acDimPrecisionSeven: 0.0000000
    acDimPrecisionEight: 0.00000000
Remarks
The initial value for this property is acDimPrecisionTwo.
Note: This property overrides the value of the DIMALTD system variable for the given dimension.
Examples
VBA:
Sub Example_AltUnitsPrecision()
    ' This example creates an aligned dimension in model space and
    ' uses AltUnitsPrecision to allow the user to change the
    ' precision of the alternate dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim oldPrecision As String, newPrecision As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5.12345678: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable alternate unit display
    dimObj.AltUnits = True
    
    ThisDrawing.Application.ZoomAll
    ' Store old Precision value as default for input box
    oldPrecision = dimObj.AltUnitsPrecision
    
    ' Allow the user to change the precision for the alternate dimension
    newPrecision = InputBox(\"Enter a new precision for the alternate dimension.  The value must range from 0 to 8.\", \"Alternate Dimension Precision\", oldPrecision)
    
    Select Case newPrecision
        Case 0: newPrecision = acDimPrecisionZero
        Case 1: newPrecision = acDimPrecisionOne
        Case 2: newPrecision = acDimPrecisionTwo
        Case 3: newPrecision = acDimPrecisionThree
        Case 4: newPrecision = acDimPrecisionFour
        Case 5: newPrecision = acDimPrecisionFive
        Case 6: newPrecision = acDimPrecisionSix
        Case 7: newPrecision = acDimPrecisionSeven
        Case 8: newPrecision = acDimPrecisionEight
        Case Else
            MsgBox \"The alternate precision has not been changed.\"
            Exit Sub
    End Select
    
    dimObj.AltUnitsPrecision = newPrecision   ' Commit changes to precision
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the alternate dimension precision
    newPrecision = dimObj.AltUnitsPrecision
    MsgBox \"The alternate dimension precision has been set to \" & newPrecision & \" decimal places\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltUnitsPrecision()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltUnitsPrecision to allow the user to change the
    ;; precision of the alternate dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5.12345678 5 0)
          location (vlax-3d-point 5 7 0))
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable alternate unit display
    (vla-put-AltUnits dimObj :vlax-true)
    
    (vla-ZoomAll acadObj)
    ;; Store old Precision value as default for input box
    (setq oldPrecision (vla-get-AltUnitsPrecision dimObj))
    
    ;; Allow the user to change the precision for the alternate dimension
    (if (= (setq newPrecision (getint \"\nEnter a new precision for the alternate dimension (0-8): \")) nil) (setq newPrecision oldPrecision))
    
    (cond
      ((= newPrecision 0)(setq newPrecision acDimPrecisionZero))
      ((= newPrecision 1)(setq newPrecision acDimPrecisionOne))
      ((= newPrecision 2)(setq newPrecision acDimPrecisionTwo))
      ((= newPrecision 3)(setq newPrecision acDimPrecisionThree))
      ((= newPrecision 4)(setq newPrecision acDimPrecisionFour))
      ((= newPrecision 5)(setq newPrecision acDimPrecisionFive))
      ((= newPrecision 6)(setq newPrecision acDimPrecisionSix))
      ((= newPrecision 7)(setq newPrecision acDimPrecisionSeven))
      ((= newPrecision 8)(setq newPrecision acDimPrecisionEight))
      ((progn (alert \"The alternate precision has not been changed.\")(setq newPrecision oldPrecision)))
    )
    
    (vla-put-AltUnitsPrecision dimObj newPrecision)   ;; Commit changes to precision
    
    (vla-Regen doc acAllViewports)
    
    ;; Read back and display the alternate dimension precision
    (setq newPrecision (vla-get-AltUnitsPrecision dimObj))
    (alert (strcat \"The alternate dimension precision has been set to \" (itoa newPrecision) \" decimal places.\"))
)
")
("AltUnitsScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2D0F9913-E6E1-46DE-B30D-414C6C11E8C4"
                 "
AltUnitsScale Property (ActiveX)
Specifies the scale factor for alternate units.
Supported platforms: Windows only
Signature
VBA:
object.AltUnitsScale
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The scale factor that is applied to alternate units.
Remarks
If the AltUnits property is turned on, this property multiplies linear dimensions by a factor to produce a value in an alternate system of measurement. The initial value represents the number of millimeters in an inch.
Initial value of the property is 25.4000.
Note: This property overrides the value of the DIMALTF system variable for the given dimension.
Examples
VBA:
Sub Example_AltUnitsScale()
    ' This example creates an aligned dimension in model space and
    ' uses AltUnitsScale to cycle through some common scales
    ' for the alternate dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
    ' Enable display of alternate units
    dimObj.AltUnits = True
      
    ' Cycle through some common dimension scales
    
    dimObj.AltUnitsScale = 1         ' Change scale to Inches
    ThisDrawing.Regen acAllViewports
    MsgBox \"The alternate dimension units are now set to inches\"
    
    dimObj.AltUnitsScale = 25.4     ' Change scale to Millimeters (default)
    ThisDrawing.Regen acAllViewports
    MsgBox \"The alternate dimension units are now set to millimeters\"
    
    dimObj.AltUnitsScale = 2.54      ' Change scale to Centimeters
    ThisDrawing.Regen acAllViewports
    MsgBox \"The alternate dimension units are now set to centimeters\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AltUnitsScale()
    ;; This example creates an aligned dimension in model space and
    ;; uses AltUnitsScale to cycle through some common scales
    ;; for the alternate dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Enable display of alternate units
    (vla-put-AltUnits dimObj :vlax-true)
      
    ;; Cycle through some common dimension scales
    (vla-put-AltUnitsScale dimObj 1)         ;; Change scale to Inches
    (vla-Regen doc acAllViewports)
    (alert \"The alternate dimension units are now set to inches.\")
    
    (vla-put-AltUnitsScale dimObj 25.4)     ;; Change scale to Millimeters (default)
    (vla-Regen doc acAllViewports)
    (alert \"The alternate dimension units are now set to millimeters.\")
    
    (vla-put-AltUnitsScale dimObj 2.54)      ;; Change scale to Centimeters
    (vla-Regen doc acAllViewports)
    (alert \"The alternate dimension units are now set to centimeters.\")
)
")
("Altitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6E8127B7-7A45-4DD9-8DA6-427DDC5498B0"
            "
Altitude Property (ActiveX)
Specifies the elevation of the position marker.
Supported platforms: Windows only
Signature
VBA:
object.Altitude
object
    Type: GeoPositionMarker
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The current elevation of the position marker.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Angle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-75AE46A8-6B5D-427D-A5FE-56B593664DDB"
         "
Angle Property (ActiveX)
Gets the angle of a line.
Supported platforms: Windows only
Signature
VBA:
object.Angle
object
    Type: Line
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The angle of the line in radians. The angle measurement begins at the X axis and proceeds in a counterclockwise direction.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Angle()
    ' This example adds a line in model space and returns the angle of the new line
   
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double, endPoint(0 To 2)  As Double
    
    ' Define the start and end points for the line
    startPoint(0) = 1: startPoint(1) = 1: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 5: endPoint(2) = 0
    
    ' Create the line in model space
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The angle of the new Line is: \" & lineObj.angle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Angle()
    ;; This example adds a line in model space and returns the angle of the new line
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the start and end points for the line
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    
    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The angle of the new Line is: \" (rtos (vla-get-Angle lineObj) 2)))
)
")
("AngleFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8DBD1F10-2BA5-4AAA-8105-3D0E71557CEF"
               "
AngleFormat Property (ActiveX)
Specifies the unit format for angular dimensions.
Supported platforms: Windows only
Signature
VBA:
object.AngleFormat
object
    Type: Dim3PointAngular, DimAngular
    The objects this property applies to.
Property Value
Read-only: No
Type: acAngleUnits enum
    acDegrees
    acDegreeMinuteSeconds
    acGrads
    acRadians
Remarks
The initial value for this property is acDegrees.
Note: This property overrides the value of the DIMAUNIT system variable for the given dimension.
Examples
VBA:
Sub Example_AngleFormat()
    ' This example creates a Dim3PointAngular object in model space
    ' and sets its Angle Format to some common values
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Cycle through some common angle formats
    
    DimPointAngularObj.AngleFormat = acDegreeMinuteSeconds
    ThisDrawing.Regen acAllViewports
    MsgBox \"The angle format of the new Dim3PointAngular object is now set to degree/minute/second\"
    
    DimPointAngularObj.AngleFormat = acGrads
    ThisDrawing.Regen acAllViewports
    MsgBox \"The angle format of the new Dim3PointAngular object is now set to grads\"
    DimPointAngularObj.AngleFormat = acRadians
    ThisDrawing.Regen acAllViewports
    MsgBox \"The angle format of the new Dim3PointAngular object is now set to radians\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AngleFormat()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and sets its Angle Format to some common values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Cycle through some common angle formats
    
    (vla-put-AngleFormat DimPointAngularObj acDegreeMinuteSeconds)
    (vla-Regen doc acAllViewports)
    (alert \"The angle format of the new Dim3PointAngular object is now set to degree/minute/second.\")
    
    (vla-put-AngleFormat DimPointAngularObj acGrads)
    (vla-Regen doc acAllViewports)
    (alert \"The angle format of the new Dim3PointAngular object is now set to grads.\")
    (vla-put-AngleFormat DimPointAngularObj acRadians)
    (vla-Regen doc acAllViewports)
    (alert \"The angle format of the new Dim3PointAngular object is now set to radians.\")
)
")
("AngleVertex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EBB45237-23AF-4A35-B97F-89B3FE43ECF4"
               "
AngleVertex Property (ActiveX)
Specifies the angle vertex for the three-point angular dimension.
Supported platforms: Windows only
Signature
VBA:
object.AngleVertex 
object
    Type: Dim3PointAngular
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the angle vertex.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AngleVertex()
    ' This example creates a Dim3PointAngular object in model space
    ' and then alters its angle vertex
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double, NewAngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim CurrentVertex As Variant
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    NewAngleVertex(0) = 1: NewAngleVertex(1) = 1: NewAngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Display current vertex
    CurrentVertex = DimPointAngularObj.AngleVertex
    MsgBox \"The angle vertex of the new object is set to:\" & vbCrLf & _
            CurrentVertex(0) & vbCrLf & _
            CurrentVertex(1) & vbCrLf & _
            CurrentVertex(2)
    ' Alter vertex setting for this object
    DimPointAngularObj.AngleVertex = NewAngleVertex
    ThisDrawing.Regen acAllViewports
    
    ' Display new vertex settings
    CurrentVertex = DimPointAngularObj.AngleVertex
    MsgBox \"The angle vertex of the object has been reset to:\" & vbCrLf & _
            CurrentVertex(0) & vbCrLf & _
            CurrentVertex(1) & vbCrLf & _
            CurrentVertex(2)
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AngleVertex()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and then alters its angle vertex
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 2 5 0)
          NewAngleVertex (vlax-3d-point 1 1 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Display current vertex
    (setq CurrentVertex (vla-get-AngleVertex DimPointAngularObj))
    (alert (strcat \"The angle vertex of the new object is set to:\n\"
                   (rtos (vlax-safearray-get-element (vlax-variant-value CurrentVertex) 0) 2) \"\n\"
                   (rtos (vlax-safearray-get-element (vlax-variant-value CurrentVertex) 1) 2) \"\n\"
                   (rtos (vlax-safearray-get-element (vlax-variant-value CurrentVertex) 2) 2)))
    ;; Alter vertex setting for this object
    (vla-put-AngleVertex DimPointAngularObj NewAngleVertex)
    (vla-Regen doc acAllViewports)
    
    ;; Display new vertex settings
    (setq CurrentVertex (vla-get-AngleVertex DimPointAngularObj))
    (alert (strcat \"The angle vertex of the object has been reset to:\n\"
                   (rtos (vlax-safearray-get-element (vlax-variant-value CurrentVertex) 0) 2) \"\n\"
                   (rtos (vlax-safearray-get-element (vlax-variant-value CurrentVertex) 1) 2) \"\n\"
                   (rtos (vlax-safearray-get-element (vlax-variant-value CurrentVertex) 2) 2)))
)
")
("Annotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7144167A-1C3D-41F8-9B49-8A107F06AFD3"
              "
Annotation Property (ActiveX)
Specifies the annotation object for a leader.
Supported platforms: Windows only
Signature
VBA:
object.Annotation
object
    Type: Leader
    The object this property applies to.
Property Value
Read-only: No
Type: BlockReference, MText, Tolerance
The annotation object for the leader. Leader annotations can be a tolerance object, multiline text object, or a block reference.
Remarks
Not all leaders have annotation objects. If a leader has no annotation, this property will return Nothing (logical False). To test for a logical False value in VB or VBA, use the Nothing keyword.
Examples
VBA:
Sub Example_Annotation()
    ' This example creates a leader in model space with an associated
    ' annotation and then checks for the existence of an
    ' Annotation object for the new Leader
   
    Dim leaderObj As AcadLeader, MTextObj As AcadMText
    Dim points(0 To 8) As Double, insertionPoint(0 To 2) As Double, width As Double
    Dim leaderType As Integer
    Dim annotationObject As Object
    Dim textString As String, msg As String
    
    ' Define the new MText object
    textString = \"Hello, World.\"
    insertionPoint(0) = 5: insertionPoint(1) = 5: insertionPoint(2) = 0
    width = 2
    
    ' Create the MText object in model space
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(insertionPoint, width, textString)
    
    ' Data for Leader
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    points(6) = 4: points(7) = 5: points(8) = 0
    leaderType = acLineWithArrow
       
    ' Create the Leader object in model space and Associate new MText object
    ' with new Leader by making the MText object the annotation for the Leader
    Set annotationObject = MTextObj
    Set leaderObj = ThisDrawing.ModelSpace.AddLeader(points, annotationObject, leaderType)
    ThisDrawing.Application.ZoomAll
    ' Display whether or not this particular Leader has an associated Annotation
    msg = IIf(leaderObj.Annotation Is Nothing, \"does not have\", \"has\")
    MsgBox \"The new Leader object \" & msg & \" an associated Annotation object.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Annotation()
    ;; This example creates a leader in model space with an associated
    ;; annotation and then checks for the existence of an
    ;; Annotation object for the new Leader
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the new MText object
    (setq insertionPoint (vlax-3d-point 5 5 0)
          textString \"Hello, World.\"
          width 2)
    
    ;; Create the MText object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace insertionPoint width textString))
    
    ;; Data for Leader
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 0 0
				  4 4 0
				  4 5 0
				 ))
    (setq leaderType acLineWithArrow)
       
    ;; Create the Leader object in model space and Associate new MText object
    ;; with new Leader by making the MText object the annotation for the Leader
    (setq annotationObject MTextObj)
    (setq leaderObj (vla-AddLeader modelSpace points annotationObject leaderType))
    (vla-ZoomAll acadObj)
    (alert \"The new Leader object has an associated Annotation object.\")
)
")
("Annotative" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-02B58681-4887-418A-8E39-01EB1CF9C2D5"
              "
Annotative Property (ActiveX)
Specifies the Annotative of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.Annotative
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
The annotative status of the object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Application" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-41478919-F833-4273-9EBC-B57C5FF792D4"
               "
Application Property (ActiveX)
Gets the Application object.
Supported platforms: Windows only
Signature
VBA:
object.Application
object
    Type: All objects
    The object this property applies to.
Property Value
Read-only: Yes
Type: Application
The Application object that is the owner of the object.
Remarks
The Application object represents the application's frame controls and path settings, and provides the means to navigate down the object hierarchy.
Release Information
Releases: AutoCAD 2000 through AutoCAD 2017
    This property is no longer supported for use with the FileDependency and FileDependencies objects.
Examples
VBA:
Sub Example_Application()
    ' This example creates a line and then uses the
    ' Application property of the line to return the
    ' application name.
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    Dim myApp As AcadApplication
    
    ' Create a new line reference
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Update
    ' Return the application for the object
    Set myApp = lineObj.Application
    
    ' Display the name of the application
    MsgBox \"The application name is: \" & myApp.name, vbInformation, \"Application Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Application()
    ;; This example creates a line and then uses the
    ;; Application property of the line to return the
    ;; application name.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create a new line reference
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-Update lineObj)
    ;; Return the application for the object
    (setq myApp (vla-get-Application lineObj))
    
    ;; Display the name of the application
    (alert (strcat \"The application name is: \" (vla-get-Name myApp)))
)
")
("ArcEndParam" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5310BAA3-35B2-40D5-8CC1-266788576A2F"
               "
ArcEndParam Property (ActiveX)
Specifies the end parameter of the arc.
Supported platforms: Windows only
Signature
VBA:
object.ArcEndParam
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The current end parameter of the arc.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ArcLength" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-444A8412-5B88-4EB1-8B8D-FDC0D84626C6"
             "
ArcLength Property (ActiveX)
Gets the length of the arc.
Supported platforms: Windows only
Signature
VBA:
object.ArcLength
object
    Type: Arc
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The length of the arc.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ArcLength()
    ' This example creates an Arc in model space and returns the length of the new Arc
    Dim arcObj As AcadArc
    Dim centerPoint(0 To 2)  As Double
    Dim radius As Double
    Dim startAngleInDegree As Double, endAngleInDegree As Double
    Dim startAngleInRadian As Double, endAngleInRadian As Double
    
    ' Define the Arc
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius = 5#
    startAngleInDegree = 10#: endAngleInDegree = 230#
    ' Convert the angles in degrees to angles in radians
    startAngleInRadian = startAngleInDegree * 3.141592 / 180#
    endAngleInRadian = endAngleInDegree * 3.141592 / 180#
    
    ' Create the arc object in model space
    Set arcObj = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngleInRadian, endAngleInRadian)
    ThisDrawing.Application.ZoomAll
    
    ' Return length of new arc
    MsgBox \"The length of the new Arc is: \" & arcObj.ArcLength
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArcLength()
    ;; This example creates an Arc in model space and returns the length of the new Arc
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the Arc
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5
          startAngleInDegree 10
          endAngleInDegree 230)
    ;; Convert the angles in degrees to angles in radians
    (setq startAngleInRadian (/ (* startAngleInDegree 3.141592) 180))
    (setq endAngleInRadian (/ (* endAngleInDegree 3.141592) 180))
    
    ;; Create the arc object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq arcObj (vla-AddArc modelSpace centerPoint radius startAngleInRadian endAngleInRadian))
    (vla-ZoomAll acadObj)
    
    ;; Return length of new arc
    (alert (strcat \"The length of the new Arc is: \" (rtos (vla-get-ArcLength arcObj) 2)))
)
")
("ArcPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4AB7D3DF-062A-433F-874A-342B4912719F"
            "
ArcPoint Property (ActiveX)
Specifies a point on the arc.
Supported platforms: Windows only
Signature
VBA:
object.ArcPoint
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant
Point on the arc.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ArcSmoothness" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C628A113-F50C-43C0-B205-4C5FC49EBFEF"
                 "
ArcSmoothness Property (ActiveX)
Specifies the smoothness of circles, arcs, and ellipses.
Supported platforms: Windows only
Signature
VBA:
object.ArcSmoothness
object
    Type: PViewport, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Integer
A positive integer from 1 to 20,000.
Remarks
The initial value for this property is 100.
A higher number produces smoother objects, but AutoCAD requires more time to regenerate them. You can improve performance by setting this property to a low value for drawing and increasing the value for rendering. The valid range is 1 through 20,000.
Examples
VBA:
Sub Example_ArcSmoothness()
    ' This example returns the current setting of
    ' ArcSmoothness. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currArcSmoothness As Integer
    Dim newArcSmoothness As Integer
        
    ' Retrieve the current ArcSmoothness value
    currArcSmoothness = ThisDrawing.ActiveViewport.ArcSmoothness
    MsgBox \"The current value for ArcSmoothness is \" & currArcSmoothness, vbInformation, \"ArcSmoothness Example\"
    
    ' Change the value for ArcSmoothness
    newArcSmoothness = 2001
    ThisDrawing.ActiveViewport.ArcSmoothness = newArcSmoothness
    MsgBox \"The new value for ArcSmoothness is \" & newArcSmoothness, vbInformation, \"ArcSmoothness Example\"
    
    ' Reset ArcSmoothness to its original value
    ThisDrawing.ActiveViewport.ArcSmoothness = currArcSmoothness
    MsgBox \"The ArcSmoothness value is reset to \" & currArcSmoothness, vbInformation, \"ArcSmoothness Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArcSmoothness()
    ;; This example returns the current setting of
    ;; ArcSmoothness. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Retrieve the current ArcSmoothness value
    (setq currArcSmoothness (vla-get-ArcSmoothness (vla-get-ActiveViewport doc)))
    (alert (strcat \"The current value for ArcSmoothness is \" (itoa currArcSmoothness)))
    
    ;; Change the value for ArcSmoothness
    (setq newArcSmoothness 2001)
    (vla-put-ArcSmoothness (vla-get-ActiveViewport doc) newArcSmoothness)
    (alert (strcat \"The new value for ArcSmoothness is \" (itoa newArcSmoothness)))
    
    ;; Reset ArcSmoothness to its original value
    (vla-put-ArcSmoothness (vla-get-ActiveViewport doc) currArcSmoothness)
    (alert (strcat \"The ArcSmoothness value is reset to \" (itoa currArcSmoothness)))
)
")
("ArcStartParam" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6BE4CDC3-AA75-4842-986A-F33BC513CE93"
                 "
ArcStartParam Property (ActiveX)
Specifies the start parameter of the arc.
Supported platforms: Windows only
Signature
VBA:
object.ArcStartParam
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The current start parameter of the arc.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Area" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2D31D8C1-9BEC-48CF-8B73-E2AD38A08D74"
        "
Area Property (ActiveX)
Specifies the enclosed area of an arc, circle, ellipse, hatch, lightweight polyline, polyline, region, or planar-closed spline.
Supported platforms: Windows only
Signature
VBA:
object.Area
object
    Type: Arc, Circle, Ellipse, Hatch, LWPolyline, Polyline, Region, Spline
    The objects this property applies to.
Property Value
Read-only: No, for Circle objects; Yes, for all other objects
Type: Double
The area of the object specified in square drawing units.
Remarks
Hatch objects:
    The total area of the combined areas for the fill.
Wide polylines:
    The area is defined by the center of the width.
Regions:
    The area equals the combined area for all the objects in the region.
Open objects such as arcs, spline curves, and open polylines:
    The area is computed as though a straight line connects the start point and endpoint.
Examples
VBA:
Sub Example_Area()
    ' This example creates a polyline object and
    ' then uses the area property to find the
    ' area of that polyline.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    Dim plineArea As Double
    ' Establish the points for the Polyline
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    
    ' Create the polyline in model space
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    
    ' Close the polyline and update display of it
    plineObj.Closed = True
    plineObj.Update
    ZoomAll
    
    ' Get the area of the polyline
    plineArea = plineObj.Area
    
    MsgBox \"The area of the new Polyline is: \" & plineArea, vbInformation, \"Area Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Area()
    ;; This example creates a polyline object and
    ;; then uses the area property to find the
    ;; area of that polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    ;; Establish the points for the Polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
				  9 2
				  3 5
				 )
    )
    
    ;; Create the polyline in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    
    ;; Close the polyline and update display of it
    (vla-put-Closed plineObj :vlax-true)
    (vla-Update plineObj)
    (vla-ZoomAll acadObj)
    
    ;; Get the area of the polyline
    (setq plineArea (vla-get-Area plineObj))
    
    (alert (strcat \"The area of the new Polyline is: \" (rtos plineArea 2)))
)
")
("ArrowSize" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-74147445-89D8-47DD-9ADC-DA1D136A1F12"
             "
ArrowSize Property (ActiveX)
Specifies the arrow size of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.ArrowSize
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Long
Size of the arrow.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ArrowSymbol" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D70DEB9A-71B3-4576-932B-331ECB1FC6CC"
               "
ArrowSymbol Property (ActiveX)
Specifies the arrow symbol of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.ArrowSymbol
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: String
Block name of the arrow symbol.
Remarks
The following block names for standard arrowhead types can be specified for ArrowSymbol:
    \"\"
    \"_ClosedBlank\"
    \"_Closed\"
    \"_Dot\"
    \"_ArchTick\"
    \"_Oblique\"
    \"_Open\"
    \"_Origin\"
    \"_Origin2\"
    \"_Open30\"
    \"_Open90\"
    \"_DotSmall\"
    \"_DotBlank\"
    \"_Small\"
    \"_BoxBlank\"
    \"_BoxFilled\"
    \"_DatumBlank\"
    \"_DatumFilled\"
    \"_Integral\"
    \"_None\"
    \"_User\"
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Arrowhead1Block" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4723AF0C-6C05-4062-A4E7-5ECEC3B87128"
                   "
Arrowhead1Block Property (ActiveX)
Specifies the block to use as the custom arrowhead for the first end of the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.Arrowhead1Block
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the block to use as the arrowhead for the first end of the dimension line.
Remarks
Note: This property overrides the value of the DIMBLK1 system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHead1Block()
    ' This example creates an aligned dimension object in model space
    ' and then alters the visible appearance (shape) of the arrowhead
    ' using the ArrowHeadBlock property.
    ' Use the ArrowHeadBlock property to set the arrowhead to an existing
    ' block object containing a custom Circle object
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim BlockName As String
   
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    
    ' Set arrowhead type to user-defined to allow
    ' the use of a block as the new arrowhead
    'dimObj.ArrowheadType = acArrowUserDefined
    DimPointAngularObj.Arrowhead1Block = \"CBlock\"
    DimPointAngularObj.Arrowhead2Block = \"CBlock\"
    ZoomAll
    
    ' Read and display current arrowhead block name
    BlockName = DimPointAngularObj.Arrowhead1Block
    
    MsgBox \"The arrowhead block name for this object is: \" & BlockName
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHead1Block()
    ;; This example creates an aligned dimension object in model space
    ;; and then alters the visible appearance (shape) of the arrowhead
    ;; using the ArrowHeadBlock property.
    ;; Use the ArrowHeadBlock property to set the arrowhead to an existing
    ;; block object containing a custom Circle object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    
    ;; Use the custom block as the new arrowhead, the block must exist in the drawing
    (vla-put-Arrowhead1Block DimPointAngularObj \"CBlock\")
    (vla-put-Arrowhead2Block DimPointAngularObj \"CBlock\")
    (vla-ZoomAll acadObj)
    
    ;; Read and display current arrowhead block name
    (setq BlockName (vla-get-Arrowhead1Block DimPointAngularObj))
    
    (alert (strcat \"The arrowhead block name for this object is: \" BlockName))
)
")
("Arrowhead1Type" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-951D8691-B849-4C68-A95A-F2048B67CC17"
                  "
Arrowhead1Type Property (ActiveX)
Specifies the type of arrowhead for the first end of the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.Arrowhead1Type
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimArrowheadType enum
    acArrowDefault
    acArrowDot
    acArrowDotSmall
    acArrowDotBlank
    acArrowOrigin
    acArrowOrigin2
    acArrowOpen
    acArrowOpen90
    acArrowOpen30
    acArrowClosed
    acArrowSmall
    acArrowNone
    acArrowOblique
    acArrowBoxFilled
    acArrowBoxBlank
    acArrowClosedBlank
    acArrowDatumFilled
    acArrowDatumBlank
    acArrowIntegral
    acArrowArchTick
    acArrowUserDefined Read-only
Remarks
The initial value for this property is acArrowDefault.
When you use the Arrowhead1Block property to specify a block to use as a custom arrowhead, this property will be set to acArrowUserDefined.
Note: This property overrides the value of the DIMBLK1 system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHead1Type()
    ' This example creates a Dim3PointAngular object in model space
    ' and then alters the visible appearance (shape) of its arrowheads
    ' using the ArrowHead1Type and ArrowHead2Type properties
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current arrowhead type
    MsgBox \"The arrowhead type for the first arrow of this object is: \" & DimPointAngularObj.Arrowhead1Type & vbCrLf & _
           \"The arrowhead type for the second arrow of this object is: \" & DimPointAngularObj.Arrowhead2Type
    ' Alter the arrowhead type property for both arrows of this object
    DimPointAngularObj.Arrowhead1Type = acArrowBoxBlank
    DimPointAngularObj.Arrowhead2Type = acArrowBoxBlank
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current arrowhead type
    MsgBox \"The arrowhead type for the first arrow of this object is now set to: \" & DimPointAngularObj.Arrowhead1Type & vbCrLf & _
           \"The arrowhead type for the second arrow of this object is now set to: \" & DimPointAngularObj.Arrowhead2Type
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHead1Type()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and then alters the visible appearance (shape) of its arrowheads
    ;; using the ArrowHead1Type and ArrowHead2Type properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current arrowhead type
    (alert (strcat \"The arrowhead type for the first arrow of this object is: \" (itoa (vla-get-Arrowhead1Type DimPointAngularObj))
                   \"\nThe arrowhead type for the second arrow of this object is: \" (itoa (vla-get-Arrowhead2Type DimPointAngularObj))))
    ;; Alter the arrowhead type property for both arrows of this object
    (vla-put-Arrowhead1Type DimPointAngularObj acArrowBoxBlank)
    (vla-put-Arrowhead2Type DimPointAngularObj acArrowBoxBlank)
    (vla-Regen doc acAllViewports)
    ;; Read and display current arrowhead type
    (alert (strcat \"The arrowhead type for the first arrow of this object is now set to: \" (itoa (vla-get-Arrowhead1Type DimPointAngularObj))
                   \"\nThe arrowhead type for the second arrow of this object is now set to: \" (itoa (vla-get-Arrowhead2Type DimPointAngularObj))))
)
")
("Arrowhead2Block" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4742FC6A-19B6-48C6-A30C-398046CBE89B"
                   "
Arrowhead2Block Property (ActiveX)
Specifies the block to use as the custom arrowhead for the second end of the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.Arrowhead2Block
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the block to use as the arrowhead for the first end of the dimension line.
Remarks
Note: This property overrides the value of the DIMBLK2 system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHead2Block()
    ' This example creates an aligned dimension object in model space
    ' and then alters the visible appearance (shape) of the arrowhead
    ' using the ArrowHeadBlock property.
    ' Use the ArrowHeadBlock property to set the arrowhead to an existing
    ' block object containing a custom Circle object
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim BlockName As String
   
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    
    ' Set arrowhead type to user-defined to allow
    ' the use of a block as the new arrowhead
    'dimObj.ArrowheadType = acArrowUserDefined
    DimPointAngularObj.Arrowhead1Block = \"CBlock\"
    DimPointAngularObj.Arrowhead2Block = \"CBlock\"
    ZoomAll
    
    ' Read and display current arrowhead block name
    BlockName = DimPointAngularObj.Arrowhead2Block
    
    MsgBox \"The arrowhead block name for this object is: \" & BlockName
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHead2Block()
    ;; This example creates an aligned dimension object in model space
    ;; and then alters the visible appearance (shape) of the arrowhead
    ;; using the ArrowHeadBlock property.
    ;; Use the ArrowHeadBlock property to set the arrowhead to an existing
    ;; block object containing a custom Circle object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    
    ;; Use the custom block as the new arrowhead, the block must exist in the drawing
    (vla-put-Arrowhead1Block DimPointAngularObj \"CBlock\")
    (vla-put-Arrowhead2Block DimPointAngularObj \"CBlock\")
    (vla-ZoomAll acadObj)
    
    ;; Read and display current arrowhead block name
    (setq BlockName (vla-get-Arrowhead2Block DimPointAngularObj))
    
    (alert (strcat \"The arrowhead block name for this object is: \" BlockName))
)
")
("Arrowhead2Type" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-62EE0F7D-4748-4706-A5E5-2635268C18BB"
                  "
Arrowhead2Type Property (ActiveX)
Specifies the type of arrowhead for the second end of the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.Arrowhead2Type
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimArrowheadType enum
    acArrowDefault
    acArrowDot
    acArrowDotSmall
    acArrowDotBlank
    acArrowOrigin
    acArrowOrigin2
    acArrowOpen
    acArrowOpen90
    acArrowOpen30
    acArrowClosed
    acArrowSmall
    acArrowNone
    acArrowOblique
    acArrowBoxFilled
    acArrowBoxBlank
    acArrowClosedBlank
    acArrowDatumFilled
    acArrowDatumBlank
    acArrowIntegral
    acArrowArchTick
    acArrowUserDefined Read-only
Remarks
The initial value for this property is acArrowDefault.
When you use the Arrowhead2Block property to specify a block to use as a custom arrowhead, this property will be set to acArrowUserDefined.
Note: This property overrides the value of the DIMBLK2 system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHead2Type()
    ' This example creates a Dim3PointAngular object in model space
    ' and then alters the visible appearance (shape) of its arrowheads
    ' using the ArrowHead1Type and ArrowHead2Type properties
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current arrowhead type
    MsgBox \"The arrowhead type for the first arrow of this object is: \" & DimPointAngularObj.Arrowhead1Type & vbCrLf & _
           \"The arrowhead type for the second arrow of this object is: \" & DimPointAngularObj.Arrowhead2Type
    ' Alter the arrowhead type property for both arrows of this object
    DimPointAngularObj.Arrowhead1Type = acArrowBoxBlank
    DimPointAngularObj.Arrowhead2Type = acArrowBoxBlank
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current arrowhead type
    MsgBox \"The arrowhead type for the first arrow of this object is now set to: \" & DimPointAngularObj.Arrowhead1Type & vbCrLf & _
           \"The arrowhead type for the second arrow of this object is now set to: \" & DimPointAngularObj.Arrowhead2Type
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHead2Type()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and then alters the visible appearance (shape) of its arrowheads
    ;; using the ArrowHead1Type and ArrowHead2Type properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current arrowhead type
    (alert (strcat \"The arrowhead type for the first arrow of this object is: \" (itoa (vla-get-Arrowhead1Type DimPointAngularObj))
                   \"\nThe arrowhead type for the second arrow of this object is: \" (itoa (vla-get-Arrowhead2Type DimPointAngularObj))))
    ;; Alter the arrowhead type property for both arrows of this object
    (vla-put-Arrowhead1Type DimPointAngularObj acArrowBoxBlank)
    (vla-put-Arrowhead2Type DimPointAngularObj acArrowBoxBlank)
    (vla-Regen doc acAllViewports)
    ;; Read and display current arrowhead type
    (alert (strcat \"The arrowhead type for the first arrow of this object is now set to: \" (itoa (vla-get-Arrowhead1Type DimPointAngularObj))
                   \"\nThe arrowhead type for the second arrow of this object is now set to: \" (itoa (vla-get-Arrowhead2Type DimPointAngularObj))))
)
")
("ArrowheadBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C11EF6F6-43F8-4A57-97B2-B8EF5BD7192B"
                  "
ArrowheadBlock Property (ActiveX)
Specifies the block to use as the custom arrowhead for a radial dimension or leader line.
Supported platforms: Windows only
Signature
VBA:
object.ArrowheadBlock
object
    Type: DimRadial, DimRadialLarge, Leader, MLeader, MLeaderLeader
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the block to use as the arrowhead for the leader.
Remarks
Note: This property overrides the value of the DIMLDRBLK system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHeadBlock()
    ' This example creates a radial dimension object in model space
    ' and then alters the visible appearance (shape) of the arrowhead
    ' using the ArrowHeadBlock property.
    ' Use the ArrowHeadBlock property to set the arrowhead to an existing
    ' block object containing a custom Circle object
    Dim dimObj As AcadDimRadial
    Dim center(0 To 2) As Double
    Dim chordPoint(0 To 2) As Double
    Dim leaderLen As Integer
    Dim BlockName As String
    
    ' Define the dimension
    center(0) = 0#: center(1) = 0#: center(2) = 0#
    chordPoint(0) = 5#: chordPoint(1) = 5#: chordPoint(2) = 0#
    leaderLen = 5
    
    ' Create the radial dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimRadial(center, chordPoint, leaderLen)
    ZoomAll
    
    ' Set arrowhead type to user-defined to allow
    ' the use of a block as the new arrowhead
    'dimObj.ArrowheadType = acArrowUserDefined
    dimObj.ArrowheadBlock = \"CBlock\"
    ZoomAll
    
    ' Read and display current arrowhead block name
    BlockName = dimObj.ArrowheadBlock
    
    MsgBox \"The arrowhead block name for this object is: \" & BlockName
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHeadBlock()
    ;; This example creates a radial dimension object in model space
    ;; and then alters the visible appearance (shape) of the arrowhead
    ;; using the ArrowHeadBlock property.
    ;; Use the ArrowHeadBlock property to set the arrowhead to an existing
    ;; block object containing a custom Circle object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq center (vlax-3d-point 0 0 0)
          chordPoint (vlax-3d-point 5 5 0)
          leaderLen 5)
    
    ;; Create the radial dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimRadial modelSpace center chordPoint leaderLen))
    (vla-ZoomAll acadObj)
    
    ;; Use the custom block as the new arrowhead, the block must exist in the drawing
    (vla-put-ArrowheadBlock dimObj \"CBlock\")
    (vla-ZoomAll acadObj)
    
    ;; Read and display current arrowhead block name
    (setq BlockName (vla-get-ArrowheadBlock dimObj))
    
    (alert (strcat \"The arrowhead block name for this object is: \" BlockName))
)
")
("ArrowheadSize" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6101462A-9A07-4D6D-81E5-9284FA05D413"
                 "
ArrowheadSize Property (ActiveX)
Specifies the size of dimension line arrowheads, leader and mleader line arrowheads, and hook lines.
Supported platforms: Windows only
Signature
VBA:
object.ArrowheadSize
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Leader, MLeader, MLeaderLeader
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The size of the arrowhead must be specified as a positive real >= 0.0.
Remarks
The initial value for this property is 0.1800.
Multiples of the arrowhead size determine if dimension lines and text should fit between the extension lines. This property is also used to scale arrowhead blocks if set by DIMBLK. This property has no effect when DIMTSZ is other than zero.
Note: This property overrides the value of the DIMASZ system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHeadSize()
    ' This example creates a Dim3PointAngular object in model space
    ' and then alters the visible appearance (size) of its arrowheads
    ' using the ArrowHeadSize property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current arrowhead size
    MsgBox \"The arrowhead size for this object is currently set to: \" & DimPointAngularObj.ArrowheadSize
    ' Alter the arrowhead size property for this object
    DimPointAngularObj.ArrowheadSize = 0.5
    ThisDrawing.Regen acAllViewports
    
    ' Read and display new arrowhead size setting
    MsgBox \"The arrowhead size for this object is now set to: \" & DimPointAngularObj.ArrowheadSize
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHeadSize()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and then alters the visible appearance (size) of its arrowheads
    ;; using the ArrowHeadSize property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current arrowhead size
    (alert (strcat \"The arrowhead size for this object is currently set to: \" (rtos (vla-get-ArrowheadSize DimPointAngularObj) 2)))
    ;; Alter the arrowhead size property for this object
    (vla-put-ArrowheadSize DimPointAngularObj 0.5)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display new arrowhead size setting
    (alert (strcat \"The arrowhead size for this object is now set to: \" (rtos (vla-get-ArrowheadSize DimPointAngularObj) 2)))
)
")
("ArrowheadType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E1D2668D-435F-4B5E-94EA-EB91AB7BD52A"
                 "
ArrowheadType Property (ActiveX)
Specifies the type of arrowhead for the radial dimension, leader, or mleader.
Supported platforms: Windows only
Signature
VBA:
object.ArrowheadType
object
    Type: DimRadial, DimRadialLarge, Leader, MLeader, MLeaderLeader
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimArrowheadType enum
    acArrowDefault
    acArrowDot
    acArrowDotSmall
    acArrowDotBlank
    acArrowOrigin
    acArrowOrigin2
    acArrowOpen
    acArrowOpen90
    acArrowOpen30
    acArrowClosed
    acArrowSmall
    acArrowNone
    acArrowOblique
    acArrowBoxFilled
    acArrowBoxBlank
    acArrowClosedBlank
    acArrowDatumFilled
    acArrowDatumBlank
    acArrowIntegral
    acArrowArchTick
    acArrowUserDefined Read-only
Remarks
The initial value for this property is acArrowDefault.
When you use the ArrowheadBlock property to specify a block to use as a custom arrowhead, this property will be set to acArrowUserDefined.
Note: This property overrides the value of the DIMLDRBLK system variable for the given dimension.
Examples
VBA:
Sub Example_ArrowHeadType()
    ' This example creates a Leader object in model space with an associated Annotation
    ' and then alters the visible appearance (shape) of its arrowhead
    ' using the ArrowHeadType property
    Dim leaderObj As AcadLeader, MTextObj As AcadMText
    Dim points(0 To 8) As Double, insertionPoint(0 To 2) As Double, iTextWidth As Double
    Dim leaderType As Integer
    Dim annotationObject As Object
    Dim textString As String
    
    ' Define the new MText object
    textString = \"Hello, World.\"
    insertionPoint(0) = 5: insertionPoint(1) = 5: insertionPoint(2) = 0
    iTextWidth = 2
    
    ' Create the MText object in model space
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(insertionPoint, iTextWidth, textString)
    
    ' Data for Leader
    points(0) = 0: points(1) = 0: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    points(6) = 4: points(7) = 5: points(8) = 0
    leaderType = acLineWithArrow
       
    ' Create the Leader object in model space and Associate new MText object
    ' with new Leader by making the MText object the annotation for the Leader
    Set annotationObject = MTextObj
    Set leaderObj = ThisDrawing.ModelSpace.AddLeader(points, annotationObject, leaderType)
    ThisDrawing.Application.ZoomAll
    ' Read and display current arrowhead type
    MsgBox \"The arrowhead type for this object is: \" & leaderObj.ArrowheadType
    ' Alter the arrowhead type property for this object
    leaderObj.ArrowheadType = acArrowBoxBlank
    ThisDrawing.Application.ZoomAll
    
    ' Read and display current arrowhead type
    MsgBox \"The arrowhead type for this object is now set to: \" & leaderObj.ArrowheadType
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ArrowHeadType()
    ;; This example creates a Leader object in model space with an associated Annotation
    ;; and then alters the visible appearance (shape) of its arrowhead
    ;; using the ArrowHeadType property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new MText object
    (setq insertionPoint (vlax-3d-point 5 5 0)
          textString \"Hello, World.\"
	  iTextWidth 2)
    
    ;; Create the MText object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq MTextObj (vla-AddMText modelSpace insertionPoint iTextWidth textString))
    
    ;; Data for Leader
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 0 0
				  4 4 0
				  4 5 0
				 )
    )
    (setq leaderType acLineWithArrow)
       
    ;; Create the Leader object in model space and Associate new MText object
    ;; with new Leader by making the MText object the annotation for the Leader
    (setq annotationObject MTextObj)
    (setq leaderObj (vla-AddLeader modelSpace points annotationObject leaderType))
    (vla-ZoomAll acadObj)
    ;; Read and display current arrowhead type
    (alert (strcat \"The arrowhead type for this object is: \" (itoa (vla-get-ArrowheadType leaderObj))))
    ;; Alter the arrowhead type property for this object
    (vla-put-ArrowheadType leaderObj acArrowBoxBlank)
    (vla-ZoomAll acadObj)
    
    ;; Read and display current arrowhead type
    (alert (strcat \"The arrowhead type for this object is now set to: \" (itoa (vla-get-ArrowheadType leaderObj))))
)
")
("AssociativeHatch" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-02D66CBD-C490-4AE1-B18E-531AE970AF3E"
                    "
AssociativeHatch Property (ActiveX)
Specifies whether the hatch is associative.
Supported platforms: Windows only
Signature
VBA:
object.AssociativeHatch
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The hatch is associative.
    False: The hatch is not associative.
Remarks
An associative hatch is updated when its boundaries are modified. A nonassociative hatch is not updated when its boundaries are modified.
Associativity can only be set when a hatch is created. See the AddHatch method for more information on creating a hatch.
Examples
VBA:
Sub Example_AssociativeHatch()
    ' This example creates a hatch in model space.
    ' It then reports whether the hatch is associative.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Return whether the hatch is associative.
    Dim hatchAssoc As Boolean
    hatchAssoc = hatchObj.AssociativeHatch
    MsgBox \"The HatchStyle is \" & IIf(hatchObj.AssociativeHatch, \"associative.\", \"not associative.\"), , \"AssociativeHatch Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AssociativeHatch()
    ;; This example creates a hatch in model space.
    ;; It then reports whether the hatch is associative.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Return whether the hatch is associative.
    (setq hatchAssoc (vla-get-AssociativeHatch hatchObj))
    (alert (strcat \"The HatchStyle is \" (if (= hatchAssoc :vlax-true) \"associative.\" \"not associative.\")))
)
")
("AttachmentPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FD7EDA56-7FA0-4616-A746-9B97AE0C6456"
                   "
AttachmentPoint Property (ActiveX)
Specifies the attachment point for an MText object.
Supported platforms: Windows only
Signature
VBA:
object.AttachmentPoint
object
    Type: MText
    The object this property applies to.
Property Value
Read-only: No
Type: acAttachmentPoint enum
    acAttachmentPointTopLeft
    acAttachmentPointTopCenter
    acAttachmentPointTopRight
    acAttachmentPointMiddleLeft
    acAttachmentPointMiddleCenter
    acAttachmentPointMiddleRight
    acAttachmentPointBottomLeft
    acAttachmentPointBottomCenter
    acAttachmentPointBottomRight
Remarks
The attachment point specifies where the insertion point aligns with the text boundary. The option you select determines both the text justification and text spill in relation to the text boundary. The options for text justification are Left, Right, and Center. The options for text spill are Top, Mid (middle), and Bottom.
Top Left
left-justified, spills down
	
Top Center
center-justified, spills down
	
Top Right
right-justified, spills down
Mid Left
left-justified, spills up and down
	
Mid Center
center-justified, spills up and down
	
Mid Right
right-justified, spills up and down
Bottom Left
left-justified, spills up
	
Bottom Center
center-justified, spills up
	
Bottom Right
right-justified, spills up
When the AttachmentPoint property is changed, the position of the existing bounding box does not change; the text is simply rejustified within the bounding box. However, the InsertionPoint property reflects the coordinates of the attachment point being used, so the value of the InsertionPoint property will change to reflect the change in justification.
Examples
VBA:
Sub Example_AttachmentPoint()
    Dim MTextObj As AcadMText
    Dim width As Double
    Dim text As String
    Dim count As Integer
    Dim attachPoint As String
    Dim corner(0 To 2) As Double
        
    corner(0) = 3#: corner(1) = 3#: corner(2) = 0#
    width = 10
    text = \"Hello, World.\"
    ' Creates a MText object in model space
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    For count = 1 To 9
        MTextObj.AttachmentPoint = count
    
        ' Gets the attachment point of an MText object
        attachPoint = Choose(MTextObj.AttachmentPoint, \"TopLeft\", \"TopCenter\", \"TopRight\", \"MiddleLeft\", \"MiddleCenter\", \"MiddleRight\", \"BottomLeft\", \"BottomCenter\", \"BottomRight\")
    
        ThisDrawing.Regen True
        MsgBox \"The attachment point of the MText is now: \" & attachPoint, vbInformation, \"AttachmentPoint Example\"
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AttachmentPoint()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq corner (vlax-3d-point 3 3 0)  
          width 10
          text \"Hello, World.\")
  
    ;; Creates a MText object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq MTextObj (vla-AddMText modelSpace corner width text))
  
    (setq count 1)
    (repeat 9
        (vla-put-AttachmentPoint MTextObj count)
        ;; Gets the attachment point of an MText object
        (cond
            ((= (vla-get-AttachmentPoint MTextObj) 1)(setq attachPoint \"TopLeft\"))
            ((= (vla-get-AttachmentPoint MTextObj) 2)(setq attachPoint \"TopCenter\"))
            ((= (vla-get-AttachmentPoint MTextObj) 3)(setq attachPoint \"TopRight\"))
            ((= (vla-get-AttachmentPoint MTextObj) 4)(setq attachPoint \"MiddleLeft\"))
            ((= (vla-get-AttachmentPoint MTextObj) 5)(setq attachPoint \"MiddleCenter\"))
            ((= (vla-get-AttachmentPoint MTextObj) 6)(setq attachPoint \"MiddleRight\"))
            ((= (vla-get-AttachmentPoint MTextObj) 7)(setq attachPoint \"BottomLeft\"))
            ((= (vla-get-AttachmentPoint MTextObj) 8)(setq attachPoint \"BottomCenter\"))
            ((= (vla-get-AttachmentPoint MTextObj) 9)(setq attachPoint \"BottomRight\"))
	)
    
        (vla-Regen doc :vlax-true)
        (alert (strcat \"The attachment point of the MText is now: \" attachPoint))
      
        (setq count (1+ count))
    )
)
")
("Author" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E3FA500F-D9EB-41A9-B49C-F0BAD0FD5A23"
          "
Author Property (ActiveX)
Specifies the author of the drawing.
Supported platforms: Windows only
Signature
VBA:
object.Author
object
    Type: SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The Author property of a drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Author()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Author()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("AxisDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8B3F9239-9C7B-4983-B600-336270BFF6CB"
                 "
AxisDirection Property (ActiveX)
Displays the direction of the axis of revolution.
Supported platforms: Windows only
Signature
VBA:
object.AxisDirection
object
    Type: RevolvedSurface
    The object to which this property applies.
Property Value
Read-only: Yes
Type: Variant
Direction of the axis for the revolved surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("AxisPosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0DDC4DD6-EC92-4B77-A16D-ACC33AC715CD"
                "
AxisPosition Property (ActiveX)
Specifies the start point of the axis of revolution.
Supported platforms: Windows only
Signature
VBA:
object.AxisPosition
object
    Type: RevolvedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Variant
Position of the axis for the revolved surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("BackgroundColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B15015C7-D6C1-41E8-B58C-ECC2511A1E2C"
                   "
AxisPosition Property (ActiveX)
Specifies the start point of the axis of revolution.
Supported platforms: Windows only
Signature
VBA:
object.AxisPosition
object
    Type: RevolvedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Variant
Position of the axis for the revolved surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("BackgroundFill" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AE6714F4-3095-4797-AC69-48EC9D99C5F4"
                  "
BackgroundFill Property (ActiveX)
Specifies whether multiline text has a background fill.
Supported platforms: Windows only
Signature
VBA:
object.BackgroundFill
object
    Type: GeoPositionMarker, MText
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Background fill is enabled.
    False: Background fill is disabled.
Remarks
MText: The value contained in this property is the Background Mask property in the Properties palette.
Examples
VBA:
Sub Example_BackgroundFill()
    ' This example creates a circle and an MText object, and masks part of the 
    ' circle with the MText object
    'Draw a circle
    Dim circleObj As AcadCircle
    Dim CircleReference(0 To 2) As Double
    Dim radius As Double
    CircleReference(0) = 0
    CircleReference(1) = 0
    CircleReference(2) = 0
    radius = 5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(CircleReference, radius)
    ZoomAll
    MsgBox \"A circle has been drawn.\"
    
    'Create an MText object with the BackgroundFill property set to True
    Dim MTextObj As AcadMText
    Dim width As Double
    Dim text As String
    width = 10
    text = \"This is the text for the MText object\"
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(CircleReference, width, text)
    MTextObj.BackgroundFill = True
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BackgroundFill()
    ;; This example creates a circle and an MText object, and masks part of the 
    ;; circle with the MText object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Draw a circle
    (setq CircleReference (vlax-3d-point 0 0 0)
          radius 0.5)
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace CircleReference radius))
    (vla-ZoomAll acadObj)
    (alert \"A circle has been drawn.\")
    
    ;; Create an MText object with the BackgroundFill property set to True
    (setq width 5
          text \"This is the text for the MText object\")
    (setq MTextObj (vla-AddMText modelSpace CircleReference width text))
    (vla-put-AttachmentPoint MTextObj 5)
    (vla-put-InsertionPoint MTextObj CircleReference)
    (vla-put-BackgroundFill MTextObj :vlax-true)
    (vla-ZoomAll acadObj)
)
")
("Backward" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A594237B-925A-4F5A-BF0E-3447DCA55456"
            "
Backward Property (ActiveX)
Specifies the direction of text.
Supported platforms: Windows only
Signature
VBA:
object.Backward
object
    Type: Attribute, AttributeReference, Text
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The text is backward.
    False: The text is forward.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Backward()
    ' This example creates a text object in model space and
    ' uses the Backward property to flip the text horizontally
   
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the new Text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the Text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The Text oject is now forward\"
    
    textObj.Backward = True
    ThisDrawing.Regen acActiveViewport
    
    MsgBox \"The Text object is now backward\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Backward()
    ;; This example creates a text object in model space and
    ;; uses the Backward property to flip the text horizontally
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the new Text object
    (setq insertionPoint (vlax-3d-point 3 3 0)
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the Text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    
    (vla-ZoomAll acadObj)
    
    (alert \"The Text oject is now forward.\")
    
    (vla-put-Backward textObj :vlax-true)
    (vla-Regen doc acActiveViewport)
    
    (alert \"The Text object is now backward.\")
)
")
("Bank" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BF74EEA7-20E5-4B51-BE10-D4C26D6C1098"
        "
Bank Property (ActiveX)
Specifies whether or not the profile curve twists and rotates along a 3D path.
Supported platforms: Windows only
Signature
VBA:
object.Bank
object
    Type: SweptSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Profile curve can twist and rotate.
    False: Profile curve cannot twist and rotate.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("BasePoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4A31CEF8-992D-40BC-998C-33A3EE66E859"
             "
BasePoint Property (ActiveX)
Specifies the point through which the ray or construction line passes.
Supported platforms: Windows only
Signature
VBA:
object.BasePoint
object
    Type: Ray, XLine
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
The 3D coordinate representing the point through which the ray or construction line passes.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BasePoint()
    ' This example creates a ray object. It then finds the
    ' base point of the ray, changes the base point, and
    ' queries the new base point.
    Dim basePoint(0 To 2) As Double
    Dim directionVec(0 To 2) As Double
    Dim rayObj As AcadRay
    
    ' Establish the base point and directional vector for the ray
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    directionVec(0) = 1#: directionVec(1) = 1#: directionVec(2) = 0#
    
    ' Create a Ray object in model space
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, directionVec)
    
    ThisDrawing.Regen True
    MsgBox \"A new Ray has been added.\", vbInformation
    
    ' Define a new base point
    Dim newBase(0 To 2) As Double
    newBase(0) = 4#: newBase(1) = 2#: newBase(2) = 0#
    
    ' Update the ray using the new base point
    rayObj.basePoint = newBase
            
    ' Query the new basepoint for the Ray
    Dim currBase As Variant      ' Note that return from basepoint property is Variant and not a SafeArray
    Dim msg As String
    currBase = rayObj.basePoint
    msg = currBase(0) & \", \" & currBase(1) & \", \" & currBase(2)
    
    ThisDrawing.Regen True
    MsgBox \"We've just changed the basepoint of the new Ray to: \" & msg, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BasePoint()
    ;; This example creates a ray object. It then finds the
    ;; base point of the ray, changes the base point, and
    ;; queries the new base point.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Establish the base point and directional vector for the ray
    (setq basePoint (vlax-3d-point 3 3 0)
          directionVec (vlax-3d-point 1 1 0))
    
    ;; Create a Ray object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq rayObj (vla-AddRay modelSpace basePoint directionVec))
    
    (vla-Regen doc :vlax-true)
    (alert \"A new Ray has been added.\")
    
    ;; Define a new base point
    (setq newBase (vlax-3d-point 4 2 0))
    
    ;; Update the ray using the new base point
    (vla-put-basePoint rayObj newBase)
            
    ;; Query the new basepoint for the Ray
    (setq currBase (vlax-safearray->list (vlax-variant-value (vla-get-BasePoint rayObj))))
    (setq msg (strcat (rtos (nth 0 currBase) 2) \", \"
		      (rtos (nth 1 currBase) 2) \", \"
		      (rtos (nth 2 currBase) 2)))
    
    (vla-Regen doc :vlax-true)
    (alert (strcat \"We've just changed the basepoint of the new Ray to: \" msg))
)
")
("BaseRadius" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-926627BF-D114-4468-983B-8C82D0F58ABF"
              "
BaseRadius Property (ActiveX)
Specifies the base radius of the helix.
Supported platforms: Windows only
Signature
VBA:
object.BaseRadius
object
    Type: Helix
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
Radius of the helix object's base.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
")
("BatchPlotProgress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A4E73393-7EC3-4D70-8FBE-62F2DD08B2F6"
                     "
BatchPlotProgress Property (ActiveX)
Gets the current status of the batch plot, or terminates the batch plot.
Supported platforms: Windows only
Signature
VBA:
object.BatchPlotProgress
object
    Type: Plot
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The batch plot is in progress.
    False: The batch plot has been cancelled or aborted. Setting BatchPlotProgress to False will terminate the batch plot.
Remarks
This property is obsolete and may be removed in a future version of AutoCAD.
Examples
VBA:
Sub Example_BatchPlotProgress()
' This property is obsolete and may be removed
' in a future (post-AutoCAD 2005) version.
End Sub
Visual LISP:
Not available
")
("BigFontFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6351C267-2821-4156-ACDB-603B22310872"
               "
BigFontFile Property (ActiveX)
Specifies the name of the Big Font file associated with the text or attribute.
Supported platforms: Windows only
Signature
VBA:
object.BigFontFile
object
    Type: TextStyle
    The object this property applies to.
Property Value
Read-only: No
Type: String
The name of the Big Font file.
Remarks
This property is similar to the FontFile property, except that it is used to specify an Asian-language Big Font file. The only valid file type is SHX.
This property cannot be set to NULL or an empty string.
Examples
VBA:
Sub Example_BigFontFile()
    ' This example returns the current setting of
    ' BigFontFile. It then changes the value.
    
    Dim textStyle1 As AcadTextStyle
    Dim currBigFontFile As String
    Dim newBigFontFile As String
    
    Set textStyle1 = ThisDrawing.ActiveTextStyle
    
    ' Retrieve the current BigFontFile value
    currBigFontFile = textStyle1.BigFontFile
    MsgBox \"The current value for BigFontFile is \" & currBigFontFile, vbInformation, \"BigFontFile Example\"
    
    ' Change the value for BigFontFile
    newBigFontFile = \"C:/AutoCAD/Fonts/bigfont.shx\"
    textStyle1.BigFontFile = newBigFontFile
    MsgBox \"The new value for BigFontFile is \" & newBigFontFile, vbInformation, \"BigFontFile Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BigFontFile()
    ;; This example returns the current setting of
    ;; BigFontFile. It then changes the value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq textStyle1 (vla-get-ActiveTextStyle doc))
    
    ;; Retrieve the current BigFontFile value
    (setq currBigFontFile (vla-get-BigFontFile textStyle1))
    (alert (if (= currBigFontFile \"\")
	       (strcat \"There is not big font file assigned to this font.\")
	       (strcat \"The current value for BigFontFile is \" currBigFontFile))
    )
    ;; Change the value for BigFontFile
    (setq newBigFontFile (findfile \"./Fonts/bigfont.shx\"))
    (vla-put-BigFontFile textStyle1 newBigFontFile)
    (alert (strcat \"The new value for BigFontFile is \" newBigFontFile))
)
")
("BitFlags" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-67A4E4C6-17A5-405C-8544-DE5D17B72AF7"
            "
BitFlags Property (ActiveX)
Specifies the bit flag values of a style.
Supported platforms: Windows only
Signature
VBA:
object.BitFlags
object
    Type: TableStyle, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: Long
Style bit flag values.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BitFlags()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BitFlags()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	           \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	   )
    )
    (vlax-release-object col)  
)
")
("Block" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-29A6C18B-6D8F-43FF-A587-4E72FA7C3884"
         "
Block Property (ActiveX)
Specifies the block associated with the layout or multileader style.
Supported platforms: Windows only
Signature
VBA:
object.Block
object
    Type: Layout, MLeaderStyle
    The objects this property applies to.
Property Value - Layout
Read-only: Yes
Type: Block
The block associated with the layout.
Property Value - MLeaderStyle
Read-only: No
Type: String
The MLeaderStyle block ID.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LayoutBlock()
    ' This example finds the name of the block associated with a layout.
    
    Dim xBlock As AcadBlock
    Set xBlock = ThisDrawing.ActiveLayout.Block
    
    MsgBox \"The active layout corresponds to block: \" & xBlock.name
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LayoutBlock()
    ;; This example finds the name of the block associated with a layout.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq xBlock (vla-get-Block (vla-get-ActiveLayout doc)))
    
    (alert (strcat \"The active layout corresponds to block: \" (vla-get-Name xBlock)))
)
")
("BlockColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E42F4533-DEB9-45A6-8170-CAB8CC26E0FC"
              "
BlockColor Property (ActiveX)
Specifies the block color of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.BlockColor
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcCmColor
The block color.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("BlockConnectionType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6E719B8F-3283-46A8-B474-F73CEC854D08"
                       "
BlockConnectionType Property (ActiveX)
The types of block connection a multileader can have.
Supported platforms: Windows only
Signature
VBA:
object.BlockConnectionType
object
    Type: MLeader, MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: acBlockConnectionType enum
    acConnectBase
    acConnectExtents
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("BlockRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5319A7B4-C266-48CA-8A5D-BD90FF225662"
                 "
BlockRotation Property (ActiveX)
Specifies the block rotation value of an mleader style.
Supported platforms: Windows only
Signature
VBA:
object.BlockRotation
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The value of the block rotation.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("BlockScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9373481F-83B1-4A52-95D5-D8FE5665E2A6"
              "
BlockScale Property (ActiveX)
Specifies the BlockScale of the mleader style.
Supported platforms: Windows only
Signature
VBA:
object.BlockScale
object
    Type: MLeader, MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The block scale factor.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("BlockScaling" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F8A1C955-9669-4132-BBF3-6F7BE4710471"
                "
BlockScaling Property (ActiveX)
Specifies the scaling allowed for the block.
Supported platforms: Windows only
Signature
VBA:
object.BlockScaling
object
    Type: Block
    The object this property applies to.
Property Value
Read-only: No
Type: acBlockScaling enum
    acAny
    acUniform
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Blocks" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4E432456-907D-467E-A060-3F5AFCCBCCDD"
          "
Blocks Property (ActiveX)
Gets the Blocks collection for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.Blocks
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Blocks
The Blocks collection for the drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Blocks()
    ' This example first finds the Blocks collection
    ' using the Blocks property. It then adds a new
    ' block to the Blocks collection.
    
    Dim blkColl As AcadBlocks
    Dim newBlock As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    
    ' Get the Blocks collection
    Set blkColl = ThisDrawing.Blocks
    
    ' Define the insertion point for the new block
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    
    ' Add the new block into the Blocks collection
    Set newBlock = blkColl.Add(insertionPnt, \"TEST\")
    MsgBox \"A block called \" & newBlock.name & \" has been added to the blocks collection\", vbInformation, \"Blocks Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Blocks()
    ;; This example first finds the Blocks collection
    ;; using the Blocks property. It then adds a new
    ;; block to the Blocks collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Get the Blocks collection
    (setq blkColl (vla-get-Blocks doc))
    
    ;; Define the insertion point for the new block
    (setq insertionPnt (vlax-3d-point 0 0 0))
    
    ;; Add the new block into the Blocks collection
    (setq newBlock (vla-Add blkColl insertionPnt \"TEST\"))
    (alert (strcat \"A block called \" (vla-get-Name newBlock) \" has been added to the blocks collection.\"))
)
")
("Blue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7BF5BBF0-3795-496B-9ECC-4391FF5D29C5"
        "
Blue Property (ActiveX)
Specifies the blue component of the True Color.
Supported platforms: Windows only
Signature
VBA:
object.Blue
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
The blue component, from 0-255, of AcCmColor.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Blue()
    ' This example draws a line and returns the RGB values
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    Dim line As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
        
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
        
    Set line = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    line.TrueColor = color
    Dim retcolor As AcadAcCmColor
    Set retcolor = line.TrueColor
    
    MsgBox \"Red = \" & retcolor.Red & vbLf & _
           \"Green = \" & retcolor.Green & vbLf & _
           \"Blue = \" & retcolor.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Blue()
    ;; This example draws a line and returns the RGB values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
        
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq line (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (vla-put-TrueColor line color)
    (setq retcolor (vla-get-TrueColor line))
    
    (alert (strcat \"Red = \" (itoa (vla-get-Red retcolor))
                   \"\nGreen = \" (itoa (vla-get-Green retcolor))
                   \"\nBlue = \" (itoa (vla-get-Blue retcolor))
           )
    )
    (vlax-release-object color)
)
")
("BookName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6CF39563-E33A-4097-BCE6-04DD8CA198E4"
            "
BookName Property (ActiveX)
Specifies the book name (if any) of the color.
Supported platforms: Windows only
Signature
VBA:
object.BookName
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
The name of the color book that the color came from.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BookName()
    'This example draws a circle and
    'returns the color name and color book name of the color.
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 125, 175, 235
    col.SetNames \"MyColor\", \"MyColorBook\"
    
    Dim cir As AcadCircle
    Dim pt(0 To 2) As Double
    Set cir = ThisDrawing.ModelSpace.AddCircle(pt, 2)
    cir.TrueColor = col
    ZoomAll
    
    Dim retCol As AcadAcCmColor
    Set retCol = cir.TrueColor
    MsgBox \"BookName=\" & col.BookName & vbLf & _
           \"ColorName=\" & col.ColorName
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BookName()
    ;; This example draws a circle and
    ;; returns the color name and color book name of the color.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 125 175 235)
    (vla-SetNames col \"MyColor\" \"MyColorBook\")
      
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq cir (vla-AddCircle modelSpace pt 2))
    (vla-put-TrueColor cir col)
    (vla-ZoomAll acadObj)
    
    (setq retCol (vla-get-TrueColor cir))
    (alert (strcat \"BookName=\" (vla-get-BookName col)
                   \"\nColorName=\" (vla-get-ColorName col)
	   )
    )
    (vlax-release-object col)  
)
")
("BottomHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-46B3C877-51D2-4402-91C0-F5407A9145B7"
                "
BottomHeight Property (ActiveX)
Specifies elevation of section plane bottom extents relative to the object’s elevation.
Supported platforms: Windows only
Signature
VBA:
object.BottomHeight
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
Height of the section plane's bottom.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("BreakSize" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BF8CE2B2-366B-420C-8DBC-61638045705A"
             "
BreakSize Property (ActiveX)
Specifies the BreakSize of the mleader style.
Supported platforms: Windows only
Signature
VBA:
object.BreakSize
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The size of the gap used for breaking leader lines.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("BreakSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AE05B22D-FD4E-4447-9674-19D38E5349C1"
                "
BreakSpacing Property (ActiveX)
Specifies the break spacing for a table.
Supported platforms: Windows only
Signature
VBA:
object.BreakSpacing
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Controls the spacing between the broken table parts. Depending on the break direction this will be a horizontal or vertical spacing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BreakHeight()
    ' This example creates a table object and then breaks it into
    ' two tables.
    
    ' Create a new table object in model space
    Dim pt(2) As Double
    
    Dim modelSpace As AcadModelSpace
    Set modelSpace = ThisDrawing.modelSpace
    
    Dim table As AcadTable
    Set table = modelSpace.AddTable(pt, 5, 5, 10, 30)
    
    table.EnableBreak = True
    table.BreakSpacing = 3.5
    table.TableBreakHeight = 35#
    table.AllowManualHeights = True
    table.SetBreakHeight 0, 20#
    table.SetBreakHeight 1, 35#
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BreakHeight()
    ;; This example creates a table object and then breaks it into
    ;; two tables.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new table object in model space
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq table (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-put-EnableBreak table :vlax-true)
    (vla-put-BreakSpacing table 3.5)
    (vla-put-TableBreakHeight table 35.0)
    (vla-put-AllowManualHeights table :vlax-true)
    (vla-SetBreakHeight table 0 20.0)
    (vla-SetBreakHeight table 1 35.0)
    (vla-ZoomExtents acadObj)
)
")
("BreaksEnabled" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-36E9A430-F097-4EF3-9779-271331E1D931"
                 "
BreaksEnabled Property (ActiveX)
Specifies if table breaks are enabled.
Supported platforms: Windows only
Signature
VBA:
object.BreaksEnabled
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
Determines whether table breaking is in use. When enabled, the table will break automatically at the current specified height.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BreakHeight()
    ' This example creates a table object and then breaks it into
    ' two tables.
    
    ' Create a new table objetc in model space
    Dim pt(2) As Double
    
    Dim modelSpace As AcadModelSpace
    Set modelSpace = ThisDrawing.modelSpace
    
    Dim table As AcadTable
    Set table = modelSpace.AddTable(pt, 5, 5, 10, 30)
    
    table.EnableBreak = True
    table.BreakSpacing = 3.5
    table.TableBreakHeight = 35#
    table.AllowManualHeights = True
    table.SetBreakHeight 0, 20#
    table.SetBreakHeight 1, 35#
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BreakHeight()
    ;; This example creates a table object and then breaks it into
    ;; two tables.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new table objetc in model space
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq table (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-put-EnableBreak table :vlax-true)
    (vla-put-BreakSpacing table 3.5)
    (vla-put-TableBreakHeight table 35.0)
    (vla-put-AllowManualHeights table :vlax-true)
    (vla-SetBreakHeight table 0 20.0)
    (vla-SetBreakHeight table 1 35.0)
    (vla-ZoomExtents acadObj)
)
")
("Brightness" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A273EB24-D107-4933-ADC3-76ACACCC3C81"
              "
Brightness Property (ActiveX)
Specifies the current brightness value of an image.
Supported platforms: Windows only
Signature
VBA:
object.Brightness
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Integer
The brightness value is a positive integer between 0 and 100 inclusive. The default value is 50.
Remarks
You can adjust the image brightness, contrast, and fade to the display of the image as well as to the plotted output without affecting the original raster image file. Adjust brightness to darken or lighten an image. Adjust contrast to make images that have poor quality easier to read. Adjust fade to make vectors easier to see over images and to create a watermark effect in your plotted output.
Bitonal images cannot be adjusted for brightness, contrast, or fade.
Examples
VBA:
Sub Example_Brightness()
    ' This example inserts a raster image and finds the current
    ' brightness of the image. It then changes the brightness
    ' of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg.\" found in the Sample
    ' directory. If you do not have this image, or if it is located
    ' in a different directory, insert a valid path and file name
    ' for the imageName variable below.
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotAngleInDegree As Double, rotAngle As Double
    Dim imageName As String
    Dim raster As AcadRasterImage
    imageName = \"C:/AutoCAD/sample/2d Projected Polylines.jpg\"
    
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotAngleInDegree = 0#
    rotAngle = rotAngleInDegree * 3.141592 / 180#
    
    On Error Resume Next
    
    ' Creates a raster image in model space
    Set raster = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotAngle)
    If Err.Description = \"File error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ' Find the current brightness
    ThisDrawing.Regen True
    MsgBox \"The brightness is currently set to: \" & raster.Brightness, vbInformation
    
    ' Change the brightness to 5
    raster.Brightness = 5
    ThisDrawing.Regen True
    MsgBox \"The brightness is now set to: \" & raster.Brightness, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Brightness()
    ;; This example inserts a raster image and finds the current
    ;; brightness of the image. It then changes the brightness
    ;; of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have this image, or if it is located
    ;; in a different directory, insert a valid path and file name
    ;; for the imageName variable below.
    (setq insertionPoint (vlax-3d-point 2 2 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotAngleInDegree 0
          rotAngle (/ (* rotAngleInDegree 3.141592) 180))
    (if (/= (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") nil)
        (progn
            ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq raster (vla-AddRaster modelSpace (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") insertionPoint scalefactor rotAngle))
            (vla-ZoomExtents acadObj)
            ;; Find the current brightness
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The brightness is currently set to: \" (rtos (vla-get-Brightness raster) 2)))
    
            ;; Change the brightness to 5
            (vla-put-Brightness raster 5)
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The brightness is now set to: \" (rtos (vla-get-Brightness raster) 2)))	  
	)
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("CanonicalMediaName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-51318BED-855E-4176-8FA1-7C63A4DB4CBB"
                      "
CanonicalMediaName Property (ActiveX)
Specifies the paper size by name.
Supported platforms: Windows only
Signature
VBA:
object.CanonicalMediaName
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the paper size.
Remarks
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
Examples
VBA:
Sub Example_CanonicalMediaName()
    ' This example finds the name of the media for the active layout
    
    Dim MediaName As String
    MediaName = ThisDrawing.ActiveLayout.CanonicalMediaName
    
    If MediaName = \"\" Then
        MsgBox \"There is no media set for the active layout.\"
    Else
        MsgBox \"The media for the active layout is: \" & MediaName
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CanonicalMediaName()
    ;; This example finds the name of the media for the active layout
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq MediaName (vla-get-CanonicalMediaName (vla-get-ActiveLayout doc)))
    
    (if (/= MediaName \"\")
        (alert \"There is no media set for the active layout.\")
        (alert (strcat \"The media for the active layout is: \" MediaName))
    )
)
")
("Caption" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C1877617-CCF5-4352-B0D0-38B0F015D20D"
           "
Caption Property (ActiveX)
Gets the text that the user sees displayed for the application or a menu item.
Supported platforms: Windows only
Signature
VBA:
object.Caption
object
    Type: Application, PopupMenuItem
    The objects this property applies to.
Property Value
Read-only: No (except for PopupMenuItem objects)
Type: String
Title displayed in the AutoCAD application window or for a menu item on a popup menu.
Remarks
For a menu item, this property is read-only and is derived from the Label property by removing any DIESEL string expressions.
Examples
VBA:
Sub Example_Caption()
    ' This example returns the caption for the current
    ' AutoCAD session.
    
    ' Get the Caption property
    Dim strCaption As String
    strCaption = ThisDrawing.Application.Caption
    MsgBox \"The caption for this session is \" & ThisDrawing.Application.Caption, , \"Caption Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Caption()
    ;; This example returns the caption for the current
    ;; AutoCAD session.
    (setq acadObj (vlax-get-acad-object))
    
    ;; Get the Caption property
    (setq strCaption (vla-get-Caption acadObj))
    (alert (strcat \"The caption for this session is \" strCaption))
)
")
("CategoryName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F00EF8C2-17E9-472F-9053-291479124537"
                "
CategoryName Property (ActiveX)
Specifies the category name of a view.
Supported platforms: Windows only
Signature
VBA:
object.CategoryName
object
    Type: View
    The object this property applies to.
Property Value
Read-only: No
Type: String
The category name of the view.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CategoryName()
    ' This example demonstrates the
    ' CategoryName, LayoutId, LayerState,
    ' and HasVpAssociation properties of the View object
    
    Dim oLSM As AcadLayerStateManager
    ' Access the LayerStateManager object
    Set oLSM = ThisDrawing.Application. _
       GetInterfaceObject(\"AutoCAD.AcadLayerStateManager.\" & Left(AcadApplication.Version, 2))
    ' Associate the current drawing database with LayerStateManager
    oLSM.SetDatabase ThisDrawing.Database
    oLSM.Save \"ColorLinetype\", acLsColor + acLsLineType
    
    ' Create a view named \"New_View\" in current drawing
    Dim viewObj As AcadView
   
    ' Add the view to the views collection
    Set viewObj = ThisDrawing.Views.Add(\"New_View\")
    MsgBox viewObj.Name & \" has been added.\" & vbCrLf & _
           \"Height: \" & viewObj.Height & vbCrLf & _
           \"Width: \" & viewObj.Width, , \"Example\"
    
    viewObj.CategoryName = \"My View Category\"
    viewObj.LayerState = \"My Layer State\"
    
    viewObj.LayoutId = ThisDrawing.Layouts(1).ObjectID
        
    MsgBox viewObj.CategoryName & \" is the Category name.\" & vbCrLf & _
            viewObj.LayoutId & \" is the Layout ID.\" & vbCrLf & _
            viewObj.LayerState & \" is the Layer state.\"
   
    If viewObj.HasVpAssociation = True Then
        MsgBox \"The view is associated with a paper space viewport.\"
    Else
        MsgBox \"The view is not associated with a paper space viewport.\"
    
   End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CategoryName()
    ;; This example demonstrates the
    ;; CategoryName, LayoutId, LayerState,
    ;; and HasVpAssociation properties of the View object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Access the LayerStateManager object
    (setq oLSM (vla-GetInterfaceObject acadObj (strcat \"AutoCAD.AcadLayerStateManager.\" (substr (getvar \"ACADVER\") 1 2))))
    ;; Associate the current drawing database with LayerStateManager
    (vla-SetDatabase oLSM (vla-get-Database doc))
    (vla-Save oLSM \"ColorLinetype\" (+ acLsColor acLsLineType))
    
    ;; Add the view to the views collection
    (setq viewObj (vla-Add (vla-get-Views doc) \"New_View\"))
    (alert (strcat (vla-get-Name viewObj) \" has been added.\"
                   \"\nHeight: \" (rtos (vla-get-Height viewObj) 2)
                   \"\nWidth: \" (rtos (vla-get-Width viewObj) 2)
           )
    )
    
    (vla-put-CategoryName viewObj \"My View Category\")
    (vla-put-LayerState viewObj \"My Layer State\")
    
    (vla-put-LayoutId viewObj (vla-get-ObjectID (vla-Item (vla-get-Layouts doc) 1)))
        
    (alert (strcat (vla-get-CategoryName viewObj) \" is the Category name.\"
                   \"\n\" (itoa (vla-get-LayoutId viewObj)) \" is the Layout ID.\"
                   \"\n\" (vla-get-LayerState viewObj) \" is the Layer state.\"
           )
    )
   
    (if (= (vla-get-HasVpAssociation viewObj) :vlax-true)
        (alert \"The view is associated with a paper space viewport.\")
        (alert \"The view is not associated with a paper space viewport.\")
    )
    (vlax-release-object oLSM)
)
")
("Center" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5EFC87E1-5A1E-4B2C-8552-67A6F367617A"
          "
Center Property (ActiveX)
Specifies the center of an arc, circle, ellipse, view, or viewport.
Supported platforms: Windows only
Signature
VBA:
object.Center
object
    Type: Arc, Circle, DimRadialLarge, Ellipse, PViewport, View, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
The 3D coordinate representing the center of the object. The default center is (0,0,0).
Viewport, View: The center for the viewport and view objects is a 2D coordinate.
Remarks
Examples
VBA:
Sub Example_Center()
    
    Dim circObj As AcadCircle
    Dim currCenterPt(0 To 2) As Double
    Dim newCenterPt(0 To 2) As Double
    Dim radius As Double
    
    ' Define the initial center point and radius for the circle
    currCenterPt(0) = 20: currCenterPt(1) = 30: currCenterPt(2) = 0
    radius = 3
    
    ' Create the circle in model space
    Set circObj = ThisDrawing.ModelSpace.AddCircle(currCenterPt, radius)
    ZoomAll
    MsgBox \"The center point of the circle is \" & currCenterPt(0) & \", \" & currCenterPt(1) & \", \" & currCenterPt(2), vbInformation, \"Center Example\"
    ' Change the center point of the circle
    newCenterPt(0) = 25: newCenterPt(1) = 25: newCenterPt(2) = 0
    circObj.center = newCenterPt
    circObj.Update
    
    ' Query the results of the new center position
    ' Notice the output from the center property is a variant
    Dim centerPoint As Variant
    centerPoint = circObj.center
    MsgBox \"The center point of the circle is \" & centerPoint(0) & \", \" & centerPoint(1) & \", \" & centerPoint(2), vbInformation, \"Center Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Center()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the initial center point and radius for the circle
    (setq currCenterPt (vlax-3d-point 20 30 0)
          radius 3)
    
    ;; Create the circle in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circObj (vla-AddCircle modelSpace currCenterPt radius))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The center point of the circle is\"
		   \"\n\" (rtos (nth 0 (vlax-safearray->list (vlax-variant-value currCenterPt)))) \", \"
		   (rtos (nth 1 (vlax-safearray->list (vlax-variant-value currCenterPt)))) \", \"
		   (rtos (nth 2 (vlax-safearray->list (vlax-variant-value currCenterPt))))
           )
    )
    ;; Change the center point of the circle
    (setq newCenterPt (vlax-3d-point 25 25 0))
    (vla-put-Center circObj newCenterPt)
    (vla-Update circObj)
    
    ;; Query the results of the new center position
    ;; Notice the output from the center property is a variant
    (setq centerPoint (vlax-variant-value (vla-get-Center circObj)))
    (alert (strcat \"The center point of the circle is\"
		   \"\n\" (rtos (nth 0 (vlax-safearray->list centerPoint))) \", \"
		   (rtos (nth 1 (vlax-safearray->list centerPoint))) \", \"
		   (rtos (nth 2 (vlax-safearray->list centerPoint)))
           )
    )
)
")
("CenterMarkSize" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-37F49603-FCA8-4913-B0AF-D90DFF5290DE"
                  "
CenterMarkSize Property (ActiveX)
Specifies the size of the center mark for radial and diameter dimensions.
Supported platforms: Windows only
Signature
VBA:
object.CenterMarkSize
object
    Type: DimDiametric, DimRadial, DimRadialLarge
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A positive real number specifying the size of the center mark or lines.
Remarks
The initial value for this property is 0.0900.
This property is not available if the CenterType property is set to acCenterNone.
Note: This property overrides the value of the DIMCEN system variable for the given dimension.
Examples
VBA:
Sub Example_CenterMarkSize()
    ' This example creates a diametric dimension in model space.
    ' It then changes the type of center for the dimension to
    ' center mark, and adjusts the size of the center mark.
    
    Dim dimObj As AcadDimDiametric
    Dim chordPoint(0 To 2) As Double
    Dim farChordPoint(0 To 2) As Double
    Dim leaderLength As Double
    
    ' Define the dimension
    chordPoint(0) = 5#: chordPoint(1) = 3#: chordPoint(2) = 0#
    farChordPoint(0) = 5#: farChordPoint(1) = 5#: farChordPoint(2) = 0#
    leaderLength = 1#
    
    ' Create the diametric dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimDiametric(chordPoint, farChordPoint, leaderLength)
    ZoomAll
        
    ' Change the center type to center mark and set the size of the center mark
    dimObj.CenterType = acCenterMark
    dimObj.CenterMarkSize = 0.1
    dimObj.Update
    MsgBox \"The center mark size is: \" & dimObj.CenterMarkSize
    
    dimObj.CenterMarkSize = dimObj.CenterMarkSize * 2
    dimObj.Update
    MsgBox \"The center mark size is: \" & dimObj.CenterMarkSize
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CenterMarkSize()
    ;; This example creates a diametric dimension in model space.
    ;; It then changes the type of center for the dimension to
    ;; center mark, and adjusts the size of the center mark.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq chordPoint (vlax-3d-point 5 3 0)
          farChordPoint (vlax-3d-point 5 5 0)
          leaderLength 1)
    
    ;; Create the diametric dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimDiametric modelSpace chordPoint farChordPoint leaderLength))
    (vla-ZoomAll acadObj)
        
    ;; Change the center type to center mark and set the size of the center mark
    (vla-put-CenterType dimObj acCenterMark)
    (vla-put-CenterMarkSize dimObj 0.1)
    (vla-Update dimObj)
    (alert (strcat \"The center mark size is: \" (rtos (vla-get-CenterMarkSize dimObj) 2)))
    
    (vla-put-CenterMarkSize dimObj (* (vla-get-CenterMarkSize dimObj) 2))
    (vla-Update dimObj)
    (alert (strcat \"The center mark size is: \" (rtos (vla-get-CenterMarkSize dimObj) 2)))
)
")
("CenterPlot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6EF7CA15-1F94-4279-A6B2-CA072A71F388"
              "
CenterPlot Property (ActiveX)
Specifies the centering of the plot on the media.
Supported platforms: Windows only
Signature
VBA:
object.CenterPlot
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Center the plot on the media.
    False: Do not center the plot on the media.
Remarks
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
This property cannot be set to True on a layout object whose PlotType property is set to acLayout.
Examples
VBA:
Sub Example_CenterPlot()
    ' This example will access the Layouts collection for the current drawing
    ' and display whether the plot for this layout is to be centered on the media.
    ' It will then toggle the state of CenterPlot for \"Layout1\" and re-display the
    ' CenterPlot state for each Layout.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim IsCentered As String
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    ' Display current layout information
    GoSub DISPLAY
    
    ' Toggle centered state for Layout1
    Layouts(\"Layout1\").PlotType = acDisplay
    Layouts(\"Layout1\").CenterPlot = Not (Layouts(\"Layout1\").CenterPlot)
    ThisDrawing.Regen acAllViewports
    
    ' Display new layout information
    GoSub DISPLAY
    
    Exit Sub
    
DISPLAY:
    msg = \"\"    ' Clear message
    
    ' Determine whether this layout is centered on the media during a plot
    For Each Layout In Layouts
        IsCentered = IIf(Layout.CenterPlot, \" are centered \", \" are not centered \")
        
        ' Format for display
        msg = msg & \"Objects for \" & Layout.name & IsCentered & \"on the media during a plot.\" & vbCrLf
    Next
    
    ' Display layout information
    MsgBox msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CenterPlot()
    ;; This example will access the Layouts collection for the current drawing
    ;; and display whether the plot for this layout is to be centered on the media.
    ;; It will then toggle the state of CenterPlot for \"Layout1\" and re-display the
    ;; CenterPlot state for each Layout.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc))
    
    ;; Display current layout information
    (setq msg \"\")    ;; Clear message
    
    ;; Determine whether this layout is centered on the media during a plot
    (vlax-for Layout Layouts
        (setq IsCentered (if (= (vla-get-CenterPlot Layout) :vlax-true) \" are centered \" \" are not centered \"))
        
        ;; Format for display
        (setq msg (strcat msg \"Objects for \" (vla-get-Name Layout) IsCentered \"on the media during a plot.\n\"))
    )
    
    ;; Display layout information
    (alert msg)
  
    ;; Toggle centered state for Layout1
    (vla-put-PlotType (vla-Item Layouts \"Layout1\") acDisplay)
    (vla-put-CenterPlot (vla-Item Layouts \"Layout1\") (if (= (vla-get-CenterPlot (vla-Item Layouts \"Layout1\")) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (setq msg \"\")    ;; Clear message
    ;; Display new layout information
    (vlax-for Layout Layouts
        (setq IsCentered (if (= (vla-get-CenterPlot Layout) :vlax-true) \" are centered \" \" are not centered \"))
        
        ;; Format for display
        (setq msg (strcat msg \"Objects for \" (vla-get-Name Layout) IsCentered \"on the media during a plot.\n\"))
    )
    
    ;; Display layout information
    (alert msg)
)
")
("CenterPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1A434213-C41C-44E5-96CD-124D4AE22AF5"
               "
CenterPoint Property (ActiveX)
Specifies the center of the arc.
Supported platforms: Windows only
Signature
VBA:
object.CenterPoint
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Variant
Center point for the arc.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("CenterType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F83E4570-3987-4658-BF9C-85A473E0755E"
              "
CenterType Property (ActiveX)
Specifies the type of center mark for radial and diameter dimensions.
Supported platforms: Windows only
Signature
VBA:
object.CenterType
object
    Type: DimDiametric, DimRadial, DimRadialLarge
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimCenterType enum
    acCenterMark
    acCenterLine
    acCenterNone
Remarks
The center mark is visible only if you place the dimension line outside the circle or arc.
Note: This property overrides the value of the DIMCEN system variable for the given dimension.
Examples
VBA:
Sub Example_CenterType()
    ' This example creates a diametric dimension in model space.
    ' It then changes the type of center for the dimension.
    
    Dim dimObj As AcadDimDiametric
    Dim chordPoint(0 To 2) As Double
    Dim farChordPoint(0 To 2) As Double
    Dim leaderLength As Double
    
    ' Define the dimension
    chordPoint(0) = 5#: chordPoint(1) = 3#: chordPoint(2) = 0#
    farChordPoint(0) = 5#: farChordPoint(1) = 5#: farChordPoint(2) = 0#
    leaderLength = 1#
    
    ' Create the diametric dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimDiametric(chordPoint, farChordPoint, leaderLength)
    ZoomAll
    
    ' Set the center to be none
    dimObj.CenterType = acCenterNone
    dimObj.Update
    MsgBox \"The dimension center type is set to none.\"
    
    ' Change the center type to center mark
    dimObj.CenterType = acCenterMark
    dimObj.Update
    MsgBox \"The dimension center type is set to center mark.\"
    
    ' Change the center type to center line
    dimObj.CenterType = acCenterLine
    dimObj.Update
    MsgBox \"The dimension center type is set to center line.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CenterType()
    ;; This example creates a diametric dimension in model space.
    ;; It then changes the type of center for the dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq chordPoint (vlax-3d-point 5 3 0)
          farChordPoint (vlax-3d-point 5 5 0)
          leaderLength 1)
    
    ;; Create the diametric dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimDiametric modelSpace chordPoint farChordPoint leaderLength))
    (vla-ZoomAll acadObj)
    
    ;; Set the center to be none
    (vla-put-CenterType dimObj acCenterNone)
    (vla-Update dimObj)
    (alert \"The dimension center type is set to none.\")
    
    ;; Change the center type to center mark
    (vla-put-CenterType dimObj acCenterMark)
    (vla-Update dimObj)
    (alert \"The dimension center type is set to center mark.\")
    
    ;; Change the center type to center line
    (vla-put-CenterType dimObj acCenterLine)
    (vla-Update dimObj)
    (alert \"The dimension center type is set to center line.\")
)
")
("Centroid" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4B2E3A74-A84C-4060-976C-90FE7977D635"
            "
Centroid Property (ActiveX)
Gets the center of area or mass for a region or solid.
Supported platforms: Windows only
Signature
VBA:
object.Centroid
object
    Type: 3DSolid, Region
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Variant (two-element array of doubles)
The 2D coordinate representing the centroid.
Remarks
The centroid is returned as X and Y coordinates defined as a variant.
Examples
VBA:
Sub Example_Centroid()
    ' This example creates a box in model space.
    ' It then returns the Centroid for that box.
    
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the Centroid for the box
    Dim Centroid As Variant
    Centroid = boxObj.Centroid
    MsgBox \"The Centroid for the box is \" & Centroid(0) & \", \" & Centroid(1), , \"Centroid Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Centroid()
    ;; This example creates a box in model space.
    ;; It then returns the Centroid for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the Centroid for the box
    (setq Centroid (vlax-safearray->list (vlax-variant-value (vla-get-Centroid boxObj))))
    (alert (strcat \"The Centroid for the box is \" (rtos (nth 0 Centroid) 2) \", \" (rtos (nth 1 Centroid) 2)))
)
")
("ChordPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-71DFE652-72D5-4AF8-8986-BB82EABB9A3B"
              "
ChordPoint Property (ActiveX)
Specifies the chord point for the arc.
Supported platforms: Windows only
Signature
VBA:
object.ChordPoint
object
    Type: DimRadialLarge
    The object this property applies to.
Property Value
Read-only: No
Type: Variant
Chord point for the arc.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Circumference" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B9019FFA-F0FB-46BA-957E-D1F104354D86"
                 "
Circumference Property (ActiveX)
Specifies the circumference of a circle.
Supported platforms: Windows only
Signature
VBA:
object.Circumference
object
    Type: Circle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The circumference of the circle.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Circumference()
    ' This example creates a Circle object in model space and
    ' returns the circumference of the Circle
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the new Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The circumference of the new Circle is: \" & circleObj.Circumference
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Circumference()
    ;; This example creates a Circle object in model space and
    ;; returns the circumference of the Circle
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))   
    
    ;; Define the new Circle object
    (setq centerPoint (vlax-3d-point 5 5 0)
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The circumference of the new Circle is: \" (rtos (vla-get-Circumference circleObj) 2)))
)
")
("Clipped" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-52D82C2D-B76B-4A9A-B563-D6022763DB2D"
           "
Clipped Property (ActiveX)
Determines if the viewport has been clipped.
Supported platforms: Windows only
Signature
VBA:
object.Clipped
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The viewport has been clipped.
    False: The viewport has not been clipped.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Clipped()
    ' This example scans the current drawing paper space Viewports
    ' and displays whether or not any of them are clipped.
    
    Dim pviewportObj As Object
    Dim msg As String, ClippedState As String
    
    ' Make sure this drawing contains paper space viewports before continuing
    If ThisDrawing.PaperSpace.Count = 0 Then
        MsgBox \"There are no paper space viewports in the current drawing.\"
        Exit Sub
    End If
    
    ' Go through each PViewport object in the drawing paper space
    ' and determine whether the paper space viewport is clipped or not
    For Each pviewportObj In ThisDrawing.PaperSpace
        ' Determine if this is a paper space viewport
        If pviewportObj.ObjectName = \"AcDbViewport\" Then
            ' Determine if this paper space viewport is clipped
            ClippedState = IIf(pviewportObj.Clipped, \" is clipped\", \" is not clipped\")
            msg = msg & \"PViewport ID \" & pviewportObj.ObjectID & ClippedState & vbCrLf
        End If
    Next
    ' Display clipped state of paper space Viewports
    MsgBox msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Clipped()
    ;; This example scans the current drawing paper space Viewports
    ;; and displays whether or not any of them are clipped.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Make sure this drawing contains paper space viewports before continuing
    (if (= (vla-get-Count (vla-get-PaperSpace doc)) 0)
        (alert \"There are no paper space viewports in the current drawing.\")
        (progn
	    ;; Go through each PViewport object in the drawing paper space
	    ;; and determine whether the paper space viewport is clipped or not
    	    (setq msg \"\")
    
	    (vlax-for pviewportObj (vla-get-PaperSpace doc)
	        ;; Determine if this is a paper space viewport
	        (if (= (vla-get-ObjectName pviewportObj) \"AcDbViewport\")
	            (progn
	                ;; Determine if this paper space viewport is clipped
	                (setq ClippedState (if (= (vla-get-Clipped pviewportObj) :vlax-true) \" is clipped\" \" is not clipped\"))
	                (setq msg (strcat msg \"PViewport ID \" (itoa (vla-get-ObjectID pviewportObj)) ClippedState \"\n\"))
		    )
	        )
	    )
	    ;; Display clipped state of paper space Viewports
	    (alert msg)
	)
    )
)
")
("ClippingEnabled" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DF876CD6-C606-45D3-BF4E-2D6ECE01950B"
                   "
ClippingEnabled Property (ActiveX)
Enables or disables the clipping boundary.
Supported platforms: Windows only
Signature
VBA:
object.ClippingEnabled
object
    Type: DgnUnderlay, DwfUnderlay, GeomapImage, PdfUnderlay, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The clipping boundary is enabled.
    False: The clipping boundary is not enabled.
Remarks
You can display a clipped image or underlay using the clipping boundary, or you can hide the clipping boundary and display the original image or underlay boundaries. To set the clipping boundary, use the ClipBoundary method.
Examples
VBA:
Sub Example_ClippingEnabled()
    ' This example adds a raster image in model space.
    ' It then clips the image based on a clip boundary,
    ' and toggles the display of the clipping.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 2#
    rotationAngle = 0
    
    On Error Resume Next
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    If Err.Description = \"Filer error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    
    ZoomAll
    MsgBox \"Clip the image?\", , \"ClipBoundary Example\"
    
    ' Establish the clip boundary with an array of points
    Dim clipPoints(0 To 9) As Double
    clipPoints(0) = 6: clipPoints(1) = 6.75
    clipPoints(2) = 7: clipPoints(3) = 6
    clipPoints(4) = 6: clipPoints(5) = 5
    clipPoints(6) = 5: clipPoints(7) = 6
    clipPoints(8) = 6: clipPoints(9) = 6.75
    
    ' Clip the image
    rasterObj.clipBoundary clipPoints
    
    ' Enable the display of the clip
    rasterObj.ClippingEnabled = True
    ThisDrawing.Regen acActiveViewport
    MsgBox \"Turn off the display of the clipped image.\", , \"ClippingEnabled Example\"
    
    ' Disable the display of the clip
    rasterObj.ClippingEnabled = False
    ThisDrawing.Regen acActiveViewport
    MsgBox \"Display off.\", , \"ClippingEnabled Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ClippingEnabled()
    ;; This example adds a raster image in model space.
    ;; It then clips the image based on a clip boundary.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; This example uses the \"downtown.jpg\" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 2
          rotationAngle 0)
    (if (/= (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") nil)
        (progn  
	    ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") insertionPoint scalefactor rotationAngle))
    
	    (vla-ZoomAll acadObj)
	    (alert \"Clip the image?\")
	    
	    ;; Establish the clip boundary with an array of points
	    (setq clipPoints (vlax-make-safearray vlax-vbDouble '(0 . 9)))
	    (vlax-safearray-fill clipPoints '(6 6.75
					      7 6
					      6 5
					      5 6
					      6 6.75
					     )
	    )
	    
	    ;; Clip the image
	    (vla-ClipBoundary rasterObj clipPoints)
	    
            ;; Enable the display of the clip
            (vla-put-ClippingEnabled rasterObj :vlax-true)
            (vla-Regen doc acActiveViewport)
            (alert \"Turn off the display of the clipped image.\")
            ;; Disable the display of the clip
            (vla-put-ClippingEnabled rasterObj :vlax-false)
            (vla-Regen doc acActiveViewport)
            (alert \"Clip boundary off.\")
	  
	)
        (alert (strcat imageName \" could not be found.\"))
    )    
)
")
("Closed" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-139FAA7F-D679-4C04-B0AB-0299730C1A34"
          "
Closed Property (ActiveX)
Specifies whether the 3D polyline, lightweight polyline, lofted surface, polyline, or spline is open or closed.
Supported platforms: Windows only
Signature
VBA:
object.Closed
object
    Type: 3DPolyline, LoftedSurface, LWPolyline, Polyline, Spline
    The objects this property applies to.
Property Value
Read-only: No (except for Spline objects)
Type: Boolean
    True: The object is closed.
    False: The object is open (default).
Remarks
An open 3D polyline
A closed 3D polyline
A lofted surface is closed if the cross-section curves that determine its profile are closed. For instance, if an arc is used in the lofting profile, the resulting surface is open. If closed curves such as circles are used for lofting, the resulting surface is closed.
Examples
VBA:
Sub Example_Closed()
    ' This example creates a polyline and then toggles the
    ' setting to Closed.
    Dim plineObj As AcadPolyline
    Dim closedState As String
    ' Create the polyline
    Dim points(8) As Double
    points(0) = 3: points(1) = 7: points(2) = 0
    points(3) = 9: points(4) = 2: points(5) = 0
    points(6) = 3: points(7) = 5: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ' Set the closed property to True
    plineObj.Closed = True      ' Close Polyline
    ThisDrawing.Regen (True)
    GoSub DISPLAY
    ' Open the PolyLine by setting the closed property to False
    plineObj.Closed = False      ' Open Polyline
    ThisDrawing.Regen (True)
    GoSub DISPLAY
    Exit Sub
DISPLAY:
    ' Retrieve and display the Closed property
    closedState = IIf(plineObj.Closed, \"Closed\", \"Open\")
    MsgBox \"The new Polyline is: \" & closedState, vbInformation, \"Closed Example\"
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Closed()
    ;; This example creates a polyline and then toggles the
    ;; setting to Closed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(3 7 0
				  9 2 0
				  3 5 0
				 )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    ;; Set the closed property to True
    (vla-put-Closed plineObj :vlax-true)      ;; Close Polyline
    (vla-Regen doc :vlax-true)
    ;; Retrieve and display the Closed property
    (setq closedState (if (= (vla-get-Closed plineObj) :vlax-true) \"Closed\" \"Open\"))
    (alert (strcat \"The new Polyline is: \" closedState))
    ;; Open the PolyLine by setting the closed property to False
    (vla-put-Closed plineObj :vlax-false)      ;; Open Polyline
    (vla-Regen doc :vlax-true)
    ;; Retrieve and display the Closed property
    (setq closedState (if (= (vla-get-Closed plineObj) :vlax-true) \"Closed\" \"Open\"))
    (alert (strcat \"The new Polyline is: \" closedState))
)
")
("Closed2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A1E58834-ADDA-42D0-85AF-9ED2E6303CB9"
           "
Closed2 Property (ActiveX)
Specifies whether the spline is open or closed.
Supported platforms: Windows only
Signature
VBA:
object.Closed2
object
    Type: Spline
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The object is closed.
    False: The object is open (default).
Remarks
When you close a spline, you make it tangent-continuous at both ends. If the spline's start point and endpoint are already the same, closing the spline makes it tangent-continuous at both points.
When you open a closed spline, if the spline's start point and endpoint were the same before the close, this property returns the spline to its original state. The start point and endpoint remain the same, but lose their tangent continuity.
When you open a closed spline, if the spline's start point and endpoint were not the same before the close, this property returns the spline to its original state and removes tangent continuity.
Examples
VBA:
Sub Example_Closed()
    ' This example creates a polyline and then toggles the
    ' setting to Closed.
    Dim plineObj As AcadPolyline
    Dim closedState As String
    ' Create the polyline
    Dim points(8) As Double
    points(0) = 3: points(1) = 7: points(2) = 0
    points(3) = 9: points(4) = 2: points(5) = 0
    points(6) = 3: points(7) = 5: points(8) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ' Set the closed property to True
    plineObj.Closed = True      ' Close Polyline
    ThisDrawing.Regen (True)
    GoSub DISPLAY
    ' Open the PolyLine by setting the closed property to False
    plineObj.Closed = False      ' Open Polyline
    ThisDrawing.Regen (True)
    GoSub DISPLAY
    Exit Sub
DISPLAY:
    ' Retrieve and display the Closed property
    closedState = IIf(plineObj.Closed, \"Closed\", \"Open\")
    MsgBox \"The new Polyline is: \" & closedState, vbInformation, \"Closed Example\"
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Closed()
    ;; This example creates a polyline and then toggles the
    ;; setting to Closed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(3 7 0
				  9 2 0
				  3 5 0
				 )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    ;; Set the closed property to True
    (vla-put-Closed plineObj :vlax-true)      ;; Close Polyline
    (vla-Regen doc :vlax-true)
    ;; Retrieve and display the Closed property
    (setq closedState (if (= (vla-get-Closed plineObj) :vlax-true) \"Closed\" \"Open\"))
    (alert (strcat \"The new Polyline is: \" closedState))
    ;; Open the PolyLine by setting the closed property to False
    (vla-put-Closed plineObj :vlax-false)      ;; Open Polyline
    (vla-Regen doc :vlax-true)
    ;; Retrieve and display the Closed property
    (setq closedState (if (= (vla-get-Closed plineObj) :vlax-true) \"Closed\" \"Open\"))
    (alert (strcat \"The new Polyline is: \" closedState))
)
")
("ColorIndex" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0C23C1B5-DA04-4A27-9EDD-26D5615C71D5"
              "
ColorIndex Property (ActiveX)
Specifies the color index.
Supported platforms: Windows only
Signature
VBA:
object.ColorIndex
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: No
Type: acColor enum
The default color designation is acByLayer. Use a color index number from 0 to 256, or one of the constants listed here:
    acByBlock
    acByLayer (not valid for Layer object)
    acRed
    acYellow
    acGreen
    acCyan
    acBlue
    acMagenta
    acWhite
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ColorIndex()
    'This example draws a circle and
    'returns the closest color index.
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 125, 175, 235
    
    Dim cir As AcadCircle
    Dim pt(0 To 2) As Double
    Set cir = ThisDrawing.modelSpace.AddCircle(pt, 2)
    cir.TrueColor = col
    ZoomAll
    
    Dim retCol As AcadAcCmColor
    Set retCol = cir.TrueColor
    
    If col.ColorMethod = AutoCAD.acColorMethodByRGB Then
    MsgBox \"Closest ColorIndex=\" & col.ColorIndex
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ColorIndex()
    ;;This example draws a circle and
    ;;returns the closest color index.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 125 175 235)
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq cir (vla-AddCircle modelSpace pt 2))
    (vla-put-TrueColor cir col)
    (vla-ZoomAll acadObj)
    
    (setq retCol (vla-get-TrueColor cir))
    
    (if (= (vla-get-ColorMethod col) acColorMethodByRGB)
        (alert (strcat \"Closest ColorIndex=\" (itoa (vla-get-ColorIndex col))))
    )
    (vlax-release-object col)
)
")
("ColorMethod" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C555F5A1-A3AE-42F6-B45D-930B42AD5F9A"
               "
ColorMethod Property (ActiveX)
Specifies the color method.
Supported platforms: Windows only
Signature
VBA:
object.ColorMethod
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: No
Type: acColorMethod enum
The default color method is acColorMethodByLayer. To directly determine how a color is set, use the constants listed here:
    acColorMethodByACI
    acColorMethodByBlock
    acColorMethodByLayer
    acColorMethodByRGB
    acColorMethodForeground
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ColorMethod()
    ' This example shows how to change the
    ' ColorMethod property
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.ColorMethod = AutoCAD.acColorMethodForeground
            
    ' Circle number one
    Dim cir1 As AcadCircle
    Dim pt(0 To 2) As Double
    Set cir1 = ThisDrawing.modelSpace.AddCircle(pt, 2)
    cir1.TrueColor = col
    ZoomAll
        
    Dim retCol As AcadAcCmColor
    Set retCol = cir1.TrueColor
        
    ' Message box with method and index
    Dim MethodText As String
    MethodText = col.ColorMethod
    MsgBox \"ColorMethod=\" & MethodText & vbCrLf & \"Index=\" & col.ColorIndex
        
    ' Circle number two
    Dim cir2 As AcadCircle
    Set cir2 = ThisDrawing.modelSpace.AddCircle(pt, 6)
    ZoomAll
       
    col.ColorMethod = AutoCAD.acColorMethodByBlock
       
    ' Message box with method and index
    MethodText = col.ColorMethod
    MsgBox \"ColorMethod=\" & MethodText & vbCrLf & \"Index=\" & col.ColorIndex
       
    ' Circle number three
    Dim cir3 As AcadCircle
    Set cir3 = ThisDrawing.modelSpace.AddCircle(pt, 10)
    ZoomAll
    
    Dim layColor As AcadAcCmColor
    Set layColor = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    layColor.SetRGB 122, 199, 25
    ThisDrawing.ActiveLayer.TrueColor = layColor
        
    col.ColorMethod = AutoCAD.acColorMethodByLayer
      
    Set retCol = cir3.TrueColor
                
    ' Message box with method and index
    MethodText = col.ColorMethod
    MsgBox \"ColorMethod=\" & MethodText & vbCrLf & \"Index=\" & col.ColorIndex
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ColorMethod()
    ;; This example shows how to change the
    ;; ColorMethod property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))  
  
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-put-ColorMethod col acColorMethodForeground)
            
    ;; Circle number one
    (setq pt (vlax-3d-point 0 0 0))
    (setq cir1 (vla-AddCircle modelSpace pt 2))
    (vla-put-TrueColor cir1 col)
    (vla-ZoomAll acadObj)
    (vla-Regen doc :vlax-true)
        
    (setq retCol (vla-get-TrueColor cir1))
        
    ;; Message box with method and index
    (setq MethodText (vla-get-ColorMethod col))
    (alert (strcat \"ColorMethod=\" (itoa MethodText) \"\nIndex=\" (itoa (vla-get-ColorIndex col))))
        
    ;; Circle number two
    (setq cir2 (vla-AddCircle modelSpace pt 6))
    (vla-ZoomAll acadObj)
    (vla-Regen doc :vlax-true)
  
    (vla-put-ColorMethod col acColorMethodByBlock)
       
    ;; Message box with method and index
    (setq MethodText (vla-get-ColorMethod col))
    (alert (strcat \"ColorMethod=\" (itoa MethodText) \"\nIndex=\" (itoa (vla-get-ColorIndex col))))
        
    ;; Circle number three
    (setq cir3 (vla-AddCircle modelSpace pt 10))
    (vla-ZoomAll acadObj)
    (vla-Regen doc :vlax-true)
    
    (setq layColor (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB layColor 122 199 25)
    (vla-put-TrueColor (vla-get-ActiveLayer doc) layColor)
        
    (vla-put-ColorMethod col acColorMethodByLayer)
      
    (setq retCol (vla-get-TrueColor cir3))
    (vla-Regen doc :vlax-true)
                
    ;;Message box with method and index
    (setq MethodText (vla-get-ColorMethod col))
    (alert (strcat \"ColorMethod=\" (itoa MethodText) \"\nIndex=\" (itoa (vla-get-ColorIndex col))))
    (vlax-release-object col)
)
")
("ColorName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-896DBFE1-388E-4CAF-92A0-ECB7AC95AAA3"
             "
ColorName Property (ActiveX)
Specifies the name (if any) of the color.
Supported platforms: Windows only
Signature
VBA:
object.ColorName
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
The color name.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ColorName()
    'This example draws a circle and
    'returns the color name and color book name of the color.
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    
    col.SetRGB 125, 175, 235
    col.SetNames \"MyColor\", \"MyColorBook\"
    
    Dim cir As AcadCircle
    Dim pt(0 To 2) As Double
    Set cir = ThisDrawing.modelSpace.AddCircle(pt, 2)
    cir.TrueColor = col
    ZoomAll
    
    Dim retCol As AcadAcCmColor
    Set retCol = cir.TrueColor
    MsgBox \"BookName=\" & col.BookName & vbLf & _
           \"ColorName=\" & col.ColorName
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ColorName()
    ;; This example draws a circle and
    ;; returns the color name and color book name of the color.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 125 175 235)
    (vla-SetNames col \"MyColor\" \"MyColorBook\")
    
    (setq pt (vlax-3d-point 0 0 0))
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq cir (vla-AddCircle modelSpace pt 2))
    (vla-put-TrueColor cir col)
    (vla-ZoomAll acadObj)
    
    (setq retCol (vla-get-TrueColor cir))
    (alert (strcat \"BookName=\" (vla-get-BookName retCol)
                   \"\nColorName=\" (vla-get-ColorName retCol)))
  
    (vlax-release-object col)
)
")
("ColorScheme" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6D58DBAE-6C75-4D2B-9CA8-610C18B01676"
               "
ColorScheme Property (ActiveX)
Specifies the color scheme to display point cloud.
Supported platforms: Windows only
Signature
VBA:
object.ColorScheme
object
    Type: PointCloudEx
    The object this property applies to.
Property Value
Read-only: No
Type: String
The name of the color scheme to use for the point cloud.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ColumnSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E1B0C3DC-ECF3-41CC-81E8-E8179C08E6C8"
                 "
ColumnSpacing Property (ActiveX)
Specifies the spacing of the columns in a block array.
Supported platforms: Windows only
Signature
VBA:
object.ColumnSpacing
object
    Type: MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The spacing of the columns in the block array.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ColumnSpacing()
    ' This example creates a new MInsertBlock in the current drawing and
    ' displays the column and row information for the new MInsertBlock
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newMBlock As AcadMInsertBlock
    Dim newBlock As AcadBlock
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Create a rectangular array of Circles using the new block containing the Circle
    ' and the AddMInsertBlock method
    Set newMBlock = ThisDrawing.ModelSpace.AddMInsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 1, 2, 2, 1, 1)
        
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the Columns and Rows defined by the MInsertBlock
    MsgBox \"The new rectangular array comprises: \" & vbCrLf & _
            newMBlock.Columns & \" columns with a spacing of \" & newMBlock.ColumnSpacing & \" and\" & vbCrLf & _
            newMBlock.Rows & \" rows with a spacing of \" & newMBlock.RowSpacing
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ColumnSpacing()
    ;; This example creates a new MInsertBlock in the current drawing and
    ;; displays the column and row information for the new MInsertBlock
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)
          InsertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle
    (setq newBlock (vla-Add (vla-get-Blocks doc) centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block
    (setq circleObj (vla-AddCircle newBlock centerPoint radius))
    
    ;; Create a rectangular array of Circles using the new block containing the Circle
    ;; and the AddMInsertBlock method
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq newMBlock (vla-AddMInsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 1 2 2 1 1))
        
    (vla-ZoomAll acadObj)
    
    ;; Display information about the Columns and Rows defined by the MInsertBlock
    (alert (strcat \"The new rectangular array comprises: \n\"
                   (itoa (vla-get-Columns newMBlock)) \" columns with a spacing of \" (rtos (vla-get-ColumnSpacing newMBlock) 2) \" and\n\"
                   (itoa (vla-get-Rows newMBlock)) \" rows with a spacing of \" (rtos (vla-get-RowSpacing newMBlock) 2) \".\"))
)
")
("ColumnWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EA043036-6A20-49D0-A7BC-E3E3D2C64812"
               "
ColumnWidth Property (ActiveX)
Specifies the uniform width of all columns in the table.
Supported platforms: Windows only
Signature
VBA:
object.ColumnWidth
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Uniform width of all columns.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Columns" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-75B2C8F3-BA20-4A32-A7A3-5D7340708F04"
           "
Columns Property (ActiveX)
Specifies the number of columns in a block array or table.
Supported platforms: Windows only
Signature
VBA:
object.Columns
object
    Type: MInsertBlock, Table
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The number of columns in the block array or table.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Columns()
    ' This example creates a new MInsertBlock in the current drawing and
    ' displays the column and row information for the new MInsertBlock
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newMBlock As AcadMInsertBlock
    Dim newBlock As AcadBlock
        
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Create a rectangular array of Circles using the new block containing the Circle
    ' and the AddMInsertBlock method
    Set newMBlock = ThisDrawing.ModelSpace.AddMInsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 1, 2, 2, 1, 1)
        
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the Columns and Rows defined by the MInsertBlock
    MsgBox \"The new rectangular array comprises: \" & vbCrLf & _
            newMBlock.Columns & \" columns with a spacing of \" & newMBlock.ColumnSpacing & \" and\" & vbCrLf & _
            newMBlock.Rows & \" rows with a spacing of \" & newMBlock.RowSpacing
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Columns()
    ;; This example creates a new MInsertBlock in the current drawing and
    ;; displays the column and row information for the new MInsertBlock
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)
          InsertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle
    (setq newBlock (vla-Add (vla-get-Blocks doc) centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block
    (setq circleObj (vla-AddCircle newBlock centerPoint radius))
    
    ;; Create a rectangular array of Circles using the new block containing the Circle
    ;; and the AddMInsertBlock method
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq newMBlock (vla-AddMInsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 1 2 2 1 1))
        
    (vla-ZoomAll acadObj)
    
    ;; Display information about the Columns and Rows defined by the MInsertBlock
    (alert (strcat \"The new rectangular array comprises: \n\"
                   (itoa (vla-get-Columns newMBlock)) \" columns with a spacing of \" (rtos (vla-get-ColumnSpacing newMBlock) 2) \" and\n\"
                   (itoa (vla-get-Rows newMBlock)) \" rows with a spacing of \" (rtos (vla-get-RowSpacing newMBlock) 2) \".\"))
)
")
("Comments" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-528FC215-ADD5-4FFC-B928-E2CC2C267967"
            "
Comments Property (ActiveX)
Specifies the comments for the block or drawing.
Supported platforms: Windows only
Signature
VBA:
object.Comments
object
    Type: Block, SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The comment of a block or drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Comments()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
            \"Author = \" & Author & vbCrLf & _
            \"Comments = \" & Comments & vbCrLf & _
            \"HyperlinkBase = \" & HLB & vbCrLf & _
            \"Keywords = \" & KW & vbCrLf & _
            \"LastSavedBy = \" & LSB & vbCrLf & _
            \"RevisionNumber = \" & RN & vbCrLf & _
            \"Subject = \" & Subject & vbCrLf & _
            \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
            \"First property name = \" & Key0 & vbCrLf & _
            \"First property value = \" & Value0 & vbCrLf & _
            \"Second property name = \" & Key1 & vbCrLf & _
            \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Comments()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("ConfigName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-65434AAB-F1EC-44ED-9568-8F68757F4485"
              "
ConfigName Property (ActiveX)
Specifies the plotter configuration name.
Supported platforms: Windows only
Signature
VBA:
object.ConfigName
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the PC3 file or print device to be used by the layout or plot configuration.
Remarks
This property does not take a fully qualified path, only the file name for the configuration file. Use the PrinterConfigPath property to specify the path for printer configuration files.
Use the RefreshPlotDeviceInfo method before trying to change the ConfigName property.
Do not assign the ConfigName property a value of \"None.\" Attempting to do so results in unexpected behavior.
Examples
VBA:
Sub Example_ConfigName()
    ' This example will add a new plot configuration to the current drawing.
    ' It will then list the plotter configuration file name for each Layout
    ' in the current drawing, change the configuration for Layout1 to \"DWF Classic.pc3\"
    ' and re-display the configuration information for the drawing.
    '
    ' * Note: File names may differ on your system, so be prepared to change
    ' the configuration file name used in the example to a file that exists
    ' on your system.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim ACADPref As AcadPreferencesFiles
    Dim originalValue As Variant
    
    ' Get the files preferences object
    Set ACADPref = ThisDrawing.Application.preferences.Files
    ' Read and display the original value
    originalValue = ACADPref.PrinterConfigPath
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    ' Display current plotter configuration information
    GoSub DISPLAY_CONFIG
    
    ' Change plotter configuration file for \"Layout1\"
    Layouts(\"Layout1\").ConfigName = \"DWF6 ePlot.pc3\"
    
    ' Display new plotter configuration information
    GoSub DISPLAY_CONFIG
    
    Exit Sub
        
DISPLAY_CONFIG:
    msg = vbCrLf & vbCrLf   ' Start with a space
    
    ' Format and display current directory for configuration files
    msg = msg & vbTab & \"Directories that will be scanned for the plotter configuration files are: \" _
                & vbCrLf & vbTab & vbTab & originalValue & vbCrLf & vbCrLf
    
    ' Get the plotter configuration name of every layout in this drawing
    For Each Layout In Layouts
        ' Format for display
        msg = msg & vbTab & Layout.name & \" is using configuration: \" & Layout.ConfigName & vbCrLf
    Next
    
    ' Display paper units information
    MsgBox \"The plotter configuration information used in the current drawing is listed below.\" & msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ConfigName()
    ;; This example will add a new plot configuration to the current drawing.
    ;; It will then list the plotter configuration file name for each Layout
    ;; in the current drawing, change the configuration for Layout1 to \"DWF Classic.pc3\"
    ;; and re-display the configuration information for the drawing.
    ;;
    ;; * Note: File names may differ on your system, so be prepared to change
    ;; the configuration file name used in the example to a file that exists
    ;; on your system.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Get the files preferences object
    (setq ACADPref (vla-get-Files (vla-get-Preferences acadObj)))
    ;; Read and display the original value
    (setq originalValue (vla-get-PrinterConfigPath ACADPref))
    
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc))
    ;; Format and display current directory for configuration files
    (setq msg \"\")
    (setq msg (strcat msg \"Directories that will be scanned for the plotter configuration files are: \n\"
                          originalValue \"\n\"))
    
    ;; Get the plotter configuration name of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg \"\n\" (vla-get-Name Layout) \" is using configuration: \" (vla-get-ConfigName Layout)))
    )
    
    ;; Display paper units information
    (alert (strcat \"The plotter configuration information used in the current drawing is listed below.\n\n\" msg))
    
    ;; Change plotter configuration file for \"Layout1\"
    (vla-put-ConfigName (vla-Item Layouts \"Layout1\") \"DWF6 ePlot.pc3\")
    
    ;; Display new plotter configuration information
    ;; Format and display current directory for configuration files
    (setq msg \"\")
    (setq msg (strcat msg \"Directories that will be scanned for the plotter configuration files are: \n\"
                          originalValue \"\n\"))
    
    ;; Get the plotter configuration name of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg \"\n\" (vla-get-Name Layout) \" is using configuration: \" (vla-get-ConfigName Layout)))
    )
    
    ;; Display paper units information
    (alert (strcat \"The plotter configuration information used in the current drawing is listed below.\n\n\" msg))
)
")
("Constant" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-899D51E7-5CB6-4109-9840-3CD4D823033F"
            "
Constant Property (ActiveX)
Specifies whether the attribute or attribute reference is constant or not.
Supported platforms: Windows only
Signature
VBA:
object.Constant
object
    Type: Attribute, AttributeReference
    The objects this property applies to.
Property Value
Read-only: No, Attribute objects; Yes, AttributeReference objects
Type: Boolean
    True: The attribute is a constant attribute.
    False: The attribute is not a constant attribute.
Remarks
A constant attribute is one that maintains the same value in every occurrence. AutoCAD does not prompt for a value of constant attributes. An attribute can exist as only one of four optional modes: constant, preset, invisible, or verify.
Note: The AFLAGS system variable stores the current mode settings. You can query the current mode using the Mode property.
Examples
VBA:
Sub Example_Constant()
    ' This example creates an attribute definition in model space.
    ' It then queries the attribute to see if it is a constant attribute.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"New_Tag\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
            
    ' Query the attribute
    GoSub QUERYSTATUS
    
    ' Change the attribute
    attributeObj.constant = Not attributeObj.constant
    GoSub QUERYSTATUS
    
    Exit Sub
    
QUERYSTATUS:
    If attributeObj.constant Then
        MsgBox \"The attribute is a constant attribute.\"
    Else
        MsgBox \"The attribute is not a constant attribute.\"
    End If
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Constant()
    ;; This example creates an attribute definition in model space.
    ;; It then queries the attribute to see if it is a constant attribute.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0)  
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"New_Tag\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
            
    ;; Query the attribute
    (if (= (vla-get-Constant attributeObj) :vlax-true)
        (alert \"The attribute is a constant attribute.\")
        (alert \"The attribute is not a constant attribute.\")
    )
  
    ;; Change the attribute
    (vla-put-Constant attributeObj (if (= (vla-get-Constant attributeObj) :vlax-true) :vlax-false :vlax-true))
  
    (if (= (vla-get-Constant attributeObj) :vlax-true)
        (alert \"The attribute is a constant attribute.\")
        (alert \"The attribute is not a constant attribute.\")
    )
)
")
("ConstantWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5632AA9B-0225-4D6A-84F1-3677E220779B"
                 "
ConstantWidth Property (ActiveX)
Specifies a global width for all segments in a polyline.
Supported platforms: Windows only
Signature
VBA:
object.ConstantWidth
object
    Type: LWPolyline, Polyline
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The global width for all segments in the object.
Remarks
This property sets the start and end widths for all segments in a polyline to a uniform value. This property will return a constant width only if all the segments are set to a uniform width.
Use the SetWidth and GetWidth methods to specify the width of an individual segment.
Examples
VBA:
Sub Example_ConstantWidth()
    ' This example creates a lightweight polyline in model space and
    ' uses the ConstantWidth property to determine if the polyline comprises
    ' equal width segments.  If the segments are not equal,
    ' use the ConstantWidth property to set all the segments to the same
    ' width.
    
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 9) As Double
    Dim msg As String, CWidth As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1
    points(2) = 1: points(3) = 2
    points(4) = 2: points(5) = 2
    points(6) = 3: points(7) = 2
    points(8) = 4: points(9) = 4
        
    ' Create a lightweight Polyline object in model space
    '
    ' * Note: Return the new PolyLine object into a Module
    ' level variable, which allows events associated
    ' with that particular object to be intercepted.
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    ThisDrawing.Application.ZoomAll
    
    ' Display segment information before altering the width of segment 1
    GoSub DISPLAYSEGMENTS
    
    ' Set the first segment width
    plineObj.SetWidth 1, 0.1, 0.3
    ThisDrawing.Regen acAllViewports
    
    ' Display segment information after altering the width of segment 1
    GoSub DISPLAYSEGMENTS
    
    ' Make all segments uniform in width
    plineObj.ConstantWidth = 0.1
    ThisDrawing.Regen acAllViewports
    
    ' Display segment information after making the segments uniform
    GoSub DISPLAYSEGMENTS
    
    Exit Sub
    
DISPLAYSEGMENTS:
    On Error Resume Next
    
    ' Check to see if the segment widths are uniform
    CWidth = plineObj.ConstantWidth
    
    ' If ConstantWidth returns an error, the
    ' segments are not all the same width
    If Err.Description = \"Invalid input\" Then
        msg = \" are not equal.\"
    Else
        msg = \" are all equal.\"
    End If
    On Error GoTo 0
    
    MsgBox \"The segments of the new polyline\" & msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ConstantWidth()
    ;; This example creates a lightweight polyline in model space and
    ;; uses the ConstantWidth property to determine if the polyline comprises
    ;; equal width segments.  If the segments are not equal,
    ;; use the ConstantWidth property to set all the segments to the same
    ;; width.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 9)))
    (vlax-safearray-fill points '(1 1
				  1 2
				  2 2
				  3 2
				  4 4
				 )
    )
        
    ;; Create a lightweight Polyline object in model space
    ;;
    ;; * Note: Return the new PolyLine object into a Module
    ;; level variable, which allows events associated
    ;; with that particular object to be intercepted.
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    
    ;; Display segment information before altering the width of segment 1
    ;; Check to see if the segment widths are uniform
    (setq err (vl-catch-all-apply 'vla-get-ConstantWidth (list plineObj)))
    (if (vl-catch-all-error-p err)
        (setq msg \" are not equal.\")
        (setq msg \" are all equal.\"
	      CWidth err)
    )
    
    (alert (strcat \"The segments of the new polyline\" msg))    
    ;; Set the first segment width
    (vla-SetWidth plineObj 1 0.1 0.3)
    (vla-Regen doc acAllViewports)
    
    ;; Display segment information after altering the width of segment 1
    ;; Check to see if the segment widths are uniform
    (setq err (vl-catch-all-apply 'vla-get-ConstantWidth (list plineObj)))
    (if (vl-catch-all-error-p err)
        (setq msg \" are not equal.\")
        (setq msg \" are all equal.\"
	      CWidth err)
    )
    
    (alert (strcat \"The segments of the new polyline\" msg))    
    ;; Make all segments uniform in width
    (vla-put-ConstantWidth plineObj 0.1)
    (vla-Regen doc acAllViewports)
    
    ;; Display segment information after making the segments uniform
    ;; Check to see if the segment widths are uniform
    (setq err (vl-catch-all-apply 'vla-get-ConstantWidth (list plineObj)))
    (if (vl-catch-all-error-p err)
        (setq msg \" are not equal.\")
        (setq msg \" are all equal.\"
	      CWidth err)
    )
    
    (alert (strcat \"The segments of the new polyline\" msg))
)
")
("Constrain" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-94A6A390-FBCE-4DEB-908F-2F557B245F64"
             "
Constrain Property (ActiveX)
Controls which property is constrained when editing other property values.
Supported platforms: Windows only
Signature
VBA:
object.Constrain
object
    Type: Helix
    The object to which this property applies.
Property Value
Read-only: No
Type: acHelixConstrainType enum
    acHeight
    acTurnHeight
    acTurns
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
")
("ContentBlockName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-53B787B0-9D47-419B-BA02-93704B51B59C"
                    "
ContentBlockName Property (ActiveX)
The name of the content block.
Supported platforms: Windows only
Signature
VBA:
object.ContentBlockName
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: String
A string which contains the name of the content block.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("ContentBlockType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CACCA248-66ED-40F9-AD42-D4E2D64600C7"
                    "
ContentBlockType Property (ActiveX)
The type of the content block.
Supported platforms: Windows only
Signature
VBA:
object.ContentBlockType
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: acPredefBlockType enum
    acBlockBox
    acBlockCircle
    acBlockHexagon
    acBlockImperial
    acBlockSlot
    acBlockTriangle
    acBlockUserDefined
A type of content block.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("ContentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A003F944-BC86-43FD-BFD0-3204C8F29DC7"
               "
ContentType Property (ActiveX)
Specifies the content type.
Supported platforms: Windows only
Signature
VBA:
object.ContentType
object
    Type: MLeader, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: acMLeaderContentType enum
    acBlockContent
    acMTextContent
    acNoneContent
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ContourlinesPerSurface" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8C8C347D-1FC8-4618-A4C2-86636856B2AA"
                          "
ContourLinesPerSurface Property (ActiveX)
Specifies the number of contour lines (isolines) per surface on objects.
Supported platforms: Windows only
Signature
VBA:
object.ContourLinesPerSurface
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Integer
The valid range is 0 to 2047.
Remarks
The initial value for this property is 4.
A torus with ContourLinesPerSurface set to 4
A torus with ContourLinesPerSurface set to 20
Note: The value of this property is stored in the ISOLINES system variable.
Examples
VBA:
Sub Example_ContourLinesPerSurface()
    ' This example returns the current setting of
    ' ContourLinesPerSurface. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currContourLinesPerSurface As Integer
    Dim newContourLinesPerSurface As Integer
        
    ' Retrieve the current ContourLinesPerSurface value
    currContourLinesPerSurface = ThisDrawing.preferences.ContourLinesPerSurface
    MsgBox \"The current value for ContourLinesPerSurface is \" & currContourLinesPerSurface, vbInformation, \"ContourLinesPerSurface Example\"
    
    ' Change the value for ContourLinesPerSurface
    newContourLinesPerSurface = 2001
    ThisDrawing.preferences.ContourLinesPerSurface = newContourLinesPerSurface
    MsgBox \"The new value for ContourLinesPerSurface is \" & newContourLinesPerSurface, vbInformation, \"ContourLinesPerSurface Example\"
    
    ' Reset ContourLinesPerSurface to its original value
    ThisDrawing.preferences.ContourLinesPerSurface = currContourLinesPerSurface
    MsgBox \"The ContourLinesPerSurface value is reset to \" & currContourLinesPerSurface, vbInformation, \"ContourLinesPerSurface Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ContourLinesPerSurface()
    ;; This example returns the current setting of
    ;; ContourLinesPerSurface. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
  
    ;; Retrieve the current ContourLinesPerSurface value
    (setq currContourLinesPerSurface (vla-get-ContourLinesPerSurface preferences))
    (alert (strcat \"The current value for ContourLinesPerSurface is \" (itoa currContourLinesPerSurface)))
    
    ;; Change the value for ContourLinesPerSurface
    (setq newContourLinesPerSurface 2001)
    (vla-put-ContourLinesPerSurface preferences newContourLinesPerSurface)
    (alert (strcat \"The new value for ContourLinesPerSurface is \" (itoa newContourLinesPerSurface)))
    
    ;; Reset ContourLinesPerSurface to its original value
    (vla-put-ContourLinesPerSurface preferences currContourLinesPerSurface)
    (alert (strcat \"The ContourLinesPerSurface value is reset to \" (itoa currContourLinesPerSurface)))
)
")
("Contrast" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DDDBF69A-D7CF-41B6-BEB4-261FF31763EC"
            "
Contrast Property (ActiveX)
Specifies the current contrast value of an image or underlay.
Supported platforms: Windows only
Signature
VBA:
object.Contrast
object
    Type: DgnUnderlay, DwfUnderlay, GeomapImage, PdfUnderlay, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Integer
The valid range is 0 to 100 inclusive. The default is 50.
Remarks
You can adjust the image brightness, contrast, and fade to the display of the image as well as to the plotted output without affecting the original raster image or underlay file. Adjust brightness to darken or lighten an image. Adjust contrast to make images that have poor quality easier to read. Adjust fade to make vectors easier to see over images, and to create a watermark effect in your plotted output.
Note: Bitonal images cannot be adjusted for brightness, contrast, or fade.
Examples
VBA:
Sub Example_Contrast()
    ' This example inserts a raster image and finds the current
    ' Contrast of the image. It then changes the Contrast
    ' of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have the image, or if it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotAngleInDegree As Double
    Dim rotAngle As Double
    Dim imageName As String
    Dim raster As AcadRasterImage
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotAngleInDegree = 0#
    rotAngle = rotAngleInDegree * 3.141592 / 180#
    
    On Error Resume Next
    
    ' Creates a raster image in model space
    Set raster = ThisDrawing.modelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotAngle)
    If Err.Description = \"File error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ' Find the current Contrast
    ThisDrawing.Regen True
    MsgBox \"The Contrast is currently set to: \" & raster.Contrast, vbInformation
    
    ' Change the Contrast to 5
    raster.Contrast = 5
    ThisDrawing.Regen True
    MsgBox \"The Contrast is now set to: \" & raster.Contrast, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Contrast()
    ;; This example inserts a raster image and finds the current
    ;; Contrast of the image. It then changes the Contrast
    ;; of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 2 2 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotAngleInDegree 0
          rotAngle (/ (* rotAngleInDegree 3.141592) 180))
    (if (/= (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") nil)
        (progn
            ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq raster (vla-AddRaster modelSpace (findfile \".\\Sample\\VBA\\2d Projected Polylines.jpg\") insertionPoint scalefactor rotAngle))
            (vla-ZoomExtents acadObj)
            ;; Find the current contrast
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The Contrast is currently set to: \" (rtos (vla-get-Contrast raster) 2)))
    
            ;; Change the contrast to 5
            (vla-put-Contrast raster 5)
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The Contrast is now set to: \" (rtos (vla-get-Contrast raster) 2)))	  
	)
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("ControlPoints" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F3265A1E-C1FA-47E9-B87C-4C3DDB064772"
                 "
ControlPoints Property (ActiveX)
Specifies the control points of a spline.
Supported platforms: Windows only
Signature
VBA:
object.ControlPoints
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (array of doubles)
An array of 3D WCS control points for the spline.
Remarks
You can find out how many control points a spline has by using the NumberOfControlPoints property.
Examples
VBA:
Sub Example_ControlPoints()
    ' This example creates a Spline object in model space, reads the control points
    ' of the Spline and then modifies the control points of the Spline.
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double, endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim UserMessage As String
    Dim ControlPoints As Variant
    Dim iCount As Long, iPoint As Integer
    
    ' Define the Spline object
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0
    fitPoints(3) = 5:   fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create new Spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ThisDrawing.Application.ZoomAll
    
    ' Display control points for this Spline
    GoSub DISPLAYPOINTS
    
    ' Modify control points for this Spline
    ControlPoints(0) = 3
    splineObj.ControlPoints = ControlPoints
    ThisDrawing.Application.ZoomAll
        
    ' Display new control points for this Spline
    GoSub DISPLAYPOINTS
        
    Exit Sub
    
DISPLAYPOINTS:
    ControlPoints = splineObj.ControlPoints
    
    ' Display in groups of three
    UserMessage = \"\"
    iPoint = 0
    For iCount = 0 To UBound(ControlPoints) Step 3
        iPoint = iPoint + 1
        UserMessage = UserMessage & iPoint & \")\" & vbTab
        UserMessage = UserMessage & ControlPoints(iCount)
        UserMessage = UserMessage & \", \" & ControlPoints(iCount + 1)
        UserMessage = UserMessage & \", \" & ControlPoints(iCount + 2)
        UserMessage = UserMessage & vbCrLf
    Next
    
    MsgBox \"The \" & splineObj.NumberOfControlPoints & \" Spline control points are: \" & vbCrLf & vbCrLf & UserMessage
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ControlPoints()
    ;; This example creates a Spline object in model space, reads the control points
    ;; of the Spline and then modifies the control points of the Spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display control points for this Spline
    (setq ControlPoints (vlax-variant-value (vla-get-ControlPoints splineObj)))
    
    ;; Display in groups of three
    (setq UserMessage \"\"
          iPoint 0
	  iCount 0)
  
    (while (>= (vlax-safearray-get-u-bound ControlPoints 1) iCount)
        (setq iPoint (1+ iPoint))
        (setq UserMessage (strcat UserMessage (itoa iPoint) \")  \"
                                  (rtos (nth iCount (vlax-safearray->list ControlPoints)) 2) \", \"
                                  (rtos (nth (+ iCount 1) (vlax-safearray->list ControlPoints)) 2) \", \"
                                  (rtos (nth (+ iCount 2) (vlax-safearray->list ControlPoints)) 2) \"\n\"
		          )
	)
        (setq iCount (+ iCount 3))
    )
    
    (alert (strcat \"The \" (itoa (vla-get-NumberOfControlPoints splineObj)) \" Spline control points are: \" \"\n\n\" UserMessage))
  
    ;; Modify control points for this Spline
    (setq newFitPoint (vlax-3d-point 8 2 0))
  
    (vla-AddFitPoint splineObj 3 newFitPoint)
    (setq ControlPoints (vlax-variant-value (vla-get-ControlPoints splineObj)))
    (vla-ZoomAll acadObj)
        
    ;; Display new control points for this Spline
    (setq UserMessage \"\"
          iPoint 0
	  iCount 0)
  
    (while (>= (vlax-safearray-get-u-bound ControlPoints 1) iCount)
        (setq iPoint (1+ iPoint))
        (setq UserMessage (strcat UserMessage (itoa iPoint) \")  \"
                                  (rtos (nth iCount (vlax-safearray->list ControlPoints)) 2) \", \"
                                  (rtos (nth (+ iCount 1) (vlax-safearray->list ControlPoints)) 2) \", \"
                                  (rtos (nth (+ iCount 2) (vlax-safearray->list ControlPoints)) 2) \"\n\"
		          )
	)
        (setq iCount (+ iCount 3))
    )
    (alert (strcat \"The \" (itoa (vla-get-NumberOfControlPoints splineObj)) \" Spline control points are: \" \"\n\n\" UserMessage))
)
")
("Coordinate" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-906EA0F9-D64D-472E-97A3-FD04B07E8890"
"
Coordinate Property (ActiveX)
Specifies the coordinate of a single vertex in the object.
Supported platforms: Windows only
Signature
VBA:
object.Coordinate(index)
object
    Type: 3DFace, 3DPoly, Leader, LWPolyline, PolyfaceMesh, PolygonMesh, Polyline, Section, Solid, SubDMesh, Trace
    The objects this property applies to.
index
    Type: Integer
    The index in the array of vertices for the vertex you want to set or query. The vertex arrays are 0 based.
Property Value
Read-only: No
Type: Variant (three-element or two-element array of doubles)
The array of X, Y, and Z coordinates for the specified vertex.
LightweightPolyline object: The variant has two elements representing the X and Y coordinates in OCS.
Polyline object: The variant has three elements, representing the X and Y coordinates in OCS. The Z coordinate is present in the variant but ignored.
All other objects: The variant has three elements, representing the X and Y coordinates in WCS; the Z coordinate will default to 0 on the active UCS.
Remarks
This property will replace any existing vertices for the specified object. Use standard array-handling techniques to process the values contained in this property.
3DPolyline, Polyline, PolygonMesh: For simple polylines (not splined or curve fit), this property specifies simple vertices. For splined or curve-fit polylines, this property specifies control point vertices.
The OCS coordinates for the Polyline and LightweightPolyline objects can be converted to and from other coordinate systems using the TranslateCoordinates method.
Examples
VBA:
Sub Example_Coordinate()
    ' This example creates a polyline in model space and
    ' queries and changes the coordinate in the first index position.
        
    Dim plineObj As AcadPolyline
    Dim points(0 To 14) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ZoomAll
    
    ' Find the coordinate in the first index position
    Dim coord As Variant
    coord = plineObj.Coordinate(0)
    MsgBox \"The coordinate in the first index position of the polyline is: \" & coord(0) & \", \" _
        & coord(1) & \", \" & coord(2)
    
    ' Change the coordinate
    coord(0) = coord(0) + 1
    plineObj.Coordinate(0) = coord
    plineObj.Update
    
    ' Query the new coordinate
    coord = plineObj.Coordinate(0)
    MsgBox \"The coordinate in the first index position of the polyline is now: \" & coord(0) & \", \" _
        & coord(1) & \", \" & coord(2)
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Coordinate()
    ;; This example creates a polyline in model space and
    ;; queries and changes the coordinate in the first index position.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
     
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
				  1 2 0
				  2 2 0
				  3 2 0
				  4 4 0
				 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    
    ;; Find the coordinate in the first index position
    (setq coord (vlax-safearray->list (vlax-variant-value (vla-get-Coordinate plineObj 0))))
    (alert (strcat \"The coordinate in the first index position of the polyline is: \"
		   (rtos (nth 0 coord) 2) \", \" (rtos (nth 1 coord) 2) \", \" (rtos (nth 2 coord) 2)))
    
    ;; Change the coordinate
    (setq newCoord (vlax-make-safearray vlax-vbDouble '(0 . 2)))
    (vlax-safearray-fill newCoord (list (+ (nth 0 coord) 1)
				        (nth 1 coord)
				        (nth 2 coord)))
    (vla-put-Coordinate plineObj 0 newCoord)
    (vla-Update plineObj)
    
    ; Query the new coordinate
    (setq coord (vlax-safearray->list (vlax-variant-value (vla-get-Coordinate plineObj 0))))
    (alert (strcat \"The coordinate in the first index position of the polyline is now: \"
		   (rtos (nth 0 coord) 2) \", \" (rtos (nth 1 coord) 2) \", \" (rtos (nth 2 coord) 2)))
)
")
("Coordinates" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-11CAC0D6-DFCF-4653-8403-CF5AFD689773"
"
Coordinates Property (ActiveX)
Specifies the coordinates for each vertex in the object.
Supported platforms: Windows only
Signature
VBA:
object.Coordinates
object
    Type: 3DFace, 3DPolyline, Leader, LWPolyline, MLine, Point, PolyfaceMesh, PolygonMesh, Polyline, Solid, SubDMesh, SubDMeshVertex, Trace
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (array of doubles)
The array of points.
3DFace object: The variant is an array of three or four 3D points in WCS.
3DPolyline object: The variant is an array of 3D points in WCS.
Leader object: The variant is an array of 3D points in WCS.
LightweightPolyline object: The variant is an array of 2D points in OCS.
Mline object: The variant is an array of 3D points in WCS.
Point object: The variant is an array of a 3D point in WCS.
PolyfaceMesh object: The variant is an array of 3D points in WCS.
PolygonMesh object: The variant is an array of 3D points in WCS.
Polyline object: The variant is an array of 3D points: the X and Y coordinates are in OCS; the Z coordinate is ignored.
Solid object: The variant is an array of three or four 3D points in WCS.
Trace object: The variant is an array of four 3D points in WCS.
All other objects: The variant is an array of 3D points in WCS.
Remarks
This property will update the coordinates for the specified object. Use standard array-handling techniques to process the coordinates contained in this property.
PolyfaceMesh, PolygonMesh, and Trace: You cannot change the number of coordinates in the object by using this property. You can change only the locations of the existing coordinates.
3DPolyline, Polyline, and PolygonMesh: For simple polylines (not splined or curve fit), this property specifies simple vertices. For splined or curve-fit polylines, this property specifies control point vertices.
When setting the coordinates for a polyline, if you supply fewer coordinates than the object currently possesses, the polyline will be truncated. Any fit points applying to the truncated vertices will also be truncated. If you supply more coordinates than the object currently possesses, the extra vertices will be appended to the polyline.
The OCS coordinates for the Polyline and LightweightPolyline objects can be converted to and from other coordinate systems using the TranslateCoordinates method.
Examples
VBA:
Sub Example_Coordinates()
    ' This example creates a polyline. It then uses the Coordinates
    ' property to return all the coordinates  in the polyline. It then
    ' resets one of the vertices using the Coordinates property.
    
    Dim plineObj As AcadPolyline
    ' Create Polyline
    Dim points(5) As Double
    points(0) = 3: points(1) = 7: points(2) = 0
    points(3) = 9: points(4) = 2: points(5) = 0
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ThisDrawing.Regen True
    ' Return all the coordinates of the polyline
    Dim retCoord As Variant
    retCoord = plineObj.Coordinates
    ' Display current coordinates for the second vertex
    MsgBox \"The current coordinates of the second vertex are: \" & points(3) & \", \" & points(4) & \", \" & points(5), vbInformation, \"Coordinates Example\"
    ' Modify the coordinate of the second vertex to (5,5,0). Note that in
    ' case of a lightweight Polyline, indices will be different because the points are 2D only.
    points(3) = 5
    points(4) = 5
    points(5) = 0
    plineObj.Coordinates = points
    ' Update display
    ThisDrawing.Regen True
    MsgBox \"The new coordinates have been set to \" & points(3) & \", \" & points(4) & \", \" & points(5), vbInformation, \"Coordinates Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Coordinates()
    ;; This example creates a polyline. It then uses the Coordinates
    ;; property to return all the coordinates  in the polyline. It then
    ;; resets one of the vertices using the Coordinates property.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    ;; Create Polyline
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7 0
				  9 2 0
				 )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    ;; Return all the coordinates of the polyline
    (setq retCoord (vla-get-Coordinates plineObj))
    ;; Display current coordinates for the second vertex
    (alert (strcat \"The current coordinates of the second vertex are: \" (rtos (vlax-safearray-get-element points 3) 2) \", \"
		                                                        (rtos (vlax-safearray-get-element points 4) 2) \", \"
		                                                        (rtos (vlax-safearray-get-element points 5) 2)))
    ;; Modify the coordinate of the second vertex to (5,5,0). Note that in
    ;; case of a lightweight Polyline, indices will be different because the points are 2D only.
    (vlax-safearray-put-element points 3 5)
    (vlax-safearray-put-element points 4 5)
    (vlax-safearray-put-element points 5 0)
    (vla-put-Coordinates plineObj points)
    ;; Update display
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The new coordinates have been set to: \" (rtos (vlax-safearray-get-element points 3) 2) \", \"
		                                            (rtos (vlax-safearray-get-element points 4) 2) \", \"
		                                            (rtos (vlax-safearray-get-element points 5) 2)))
)
")
("Count" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EF9D55CA-77EB-4EAC-9DD3-FEA6D077D9A1"
         "
Count Property (ActiveX)
Gets the number of items in the object.
Supported platforms: Windows only
Signature
VBA:
object.Count
object
    Type: All Collections, Block, Dictionary, Group, Materials, SectionManager, SelectionSet
    The object this property applies to.
Property Value
Read-only: Yes
Type: Integer
The number of items in the object.
Remarks
No additional remarks.
Release Information
Releases: AutoCAD 2000 through AutoCAD 2017
    This property is no longer supported for use with the FileDependencies object.
Examples
VBA:
Sub Example_Count()
    ' Use count to retrieve the number of objects in a collection
    ' You might use this value in a loop structure to iterate through the collection
    
    MsgBox \"There are \" & ThisDrawing.Layers.Count & \" layer(s) in the drawing.\"
    MsgBox \"There are \" & ThisDrawing.ModelSpace.Count & \" object(s) in ModelSpace.\"
    Dim objCount As Integer
    Dim I As Integer
    objCount = ThisDrawing.ModelSpace.Count
    
    Dim mspaceObj As AcadObject
    For I = 0 To objCount - 1
        Set mspaceObj = ThisDrawing.modelSpace.Item(I)
        MsgBox \"The objects in ModelSpace include: \" & mspaceObj.ObjectName, vbInformation, \"Count Example\"
    Next
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Count()
    ;; Use count to retrieve the number of objects in a collection
    ;; You might use this value in a loop structure to iterate through the collection
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (alert (strcat \"There are \" (itoa (vla-get-Count (vla-get-Layers doc))) \" layer(s) in the drawing.\"))
    (alert (strcat \"There are \" (itoa (vla-get-Count (vla-get-ModelSpace doc))) \" object(s) in ModelSpace.\"))
    (setq I 0
	  objCount (vla-get-Count (vla-get-ModelSpace doc)))
    
    (while (>= (- objCount 1) I)
        (setq mspaceObj (vla-Item (vla-get-ModelSpace doc) I)
	      I (1+ I))
        (alert (strcat \"The objects in ModelSpace include: \" (vla-get-ObjectName mspaceObj)))
    )
)
")
("CurrentSectionType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5F653FD4-4DDF-4DBF-AFB7-3D76CC32705F"
"
CurrentSectionType Property (ActiveX)
Specifies the current section type.
Supported platforms: Windows only
Signature
VBA:
object.CurrentSectionType
object
    Type: SectionSettings
    The object to which this property applies.
Property Value
Read-only: No
Type: AcSectionType enum
    acSectionType2dSection
    acSectionType3dSection
    acSectionTypeLiveSection
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("CustomScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B2267102-5970-49A4-AA7E-A9D0362D2CF6"
               "
CustomScale Property (ActiveX)
Specifies the custom scale factor for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.CustomScale
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The custom scale factor for the viewport.
Remarks
To set the viewport to a custom scale, first set the StandardScale property to acVpCustomScale, then use this property to define the custom scale value.
Examples
VBA:
Sub Example_CustomScale()
    ' This example adds a line in paper space, creates a new paper space viewport, and cycles through some common paper space custom scale sizes
    ' for the new paper space viewport
   
    Dim lineObj As AcadLine
    Dim PViewPort As AcadPViewport
    Dim startPoint(0 To 2) As Double, endPoint(0 To 2)  As Double
    Dim center(0 To 2) As Double
    Dim width As Double, height As Double
    
    ' Define the start and end points for the line
    startPoint(0) = 1: startPoint(1) = 1: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 5: endPoint(2) = 0
    
    ' Define the paper space viewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40: height = 40
    
    ' Create the line in paper space
    Set lineObj = ThisDrawing.PaperSpace.AddLine(startPoint, endPoint)
       
    ' Create the paper space viewport
    Set PViewPort = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
   
    ' Set the paper space viewport scale to custom 
    PViewPort.StandardScale = acVpCustomScale
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    
    ' Read and display the existing paper space viewport scale setting
    MsgBox \"The scale of the new PViewport is: \" & PViewPort.CustomScale
    
    ' Change the custom scale setting to 1:10 scale
    PViewPort.CustomScale = 0.1
   
    ' Read and display the new paper space viewport scale setting
    MsgBox \"The scale of the new PViewport has been changed to: \" & PViewPort.CustomScale
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CustomScale()
    ;; This example adds a line in paper space, creates a new paper space viewport, and cycles through some common paper space custom scale sizes
    ;; for the new paper space viewport
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the start and end points for the line
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0)) 
    
    ;; Define the paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
          height 40)
    
    ;; Create the line in paper space
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq lineObj (vla-AddLine paperSpace startPoint endPoint))
       
    ;; Create the paper space viewport
    (setq PViewPort (vla-AddPViewport paperSpace center width height))
   
    ;; Set the paper space viewport scale to custom 
    (vla-put-StandardScale PViewPort acVpCustomScale)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    (vla-Regen doc acAllViewports)
    (vla-ZoomAll acadObj)
    
    ;; Read and display the existing paper space viewport scale setting
    (alert (strcat \"The scale of the new PViewport is: \" (rtos (vla-get-CustomScale PViewPort) 2)))
    
    ;; Change the custom scale setting to 1:10 scale
    (vla-put-CustomScale PViewPort 0.1)
   
    ;; Read and display the new paper space viewport scale setting
    (alert (strcat \"The scale of the new PViewport has been changed to: \" (rtos (vla-get-CustomScale PViewPort) 2)))
)
")
("CvHullDisplay" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-50F871F1-B6D9-45D2-9623-16738FE69762"
"
CvHullDisplay Property (ActiveX)
Specifies if the control vertices (CV) Hull is displayed for the NURBS surface.
Supported platforms: Windows only
Signature
VBA:
object.CvHullDisplay
object
    Type: NurbSurface
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: CV Hull is displayed
    False: CV Hull is hidden
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("Database" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6FC179C1-EBE2-4F13-91B3-760B6D2AB7A5"
            "
Database Property (ActiveX)
Gets the database in which the object belongs.
Supported platforms: Windows only
Signature
VBA:
object.Database
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Database
The Database object that contains the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Database()
    ' This example references the Database object obtained from model space.
    ' Information from the Database object is then displayed
    
    Dim Database As AcadDatabase
    
    ' Attach to Database object
    Set Database = ThisDrawing.ModelSpace.Database
    MsgBox \"We now have access to the properties and methods of the Database object!\"
    
    ' Retrieve the number of Blocks in this database
    MsgBox \"The number of Blocks in this database is: \" & Database.Blocks.Count
    ' Release object
    Set Database = Nothing
    MsgBox \"The Database object has been released!\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Database()
    ;; This example references the Database object obtained from model space.
    ;; Information from the Database object is then displayed
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Attach to Database object
    (setq database (vla-get-Database (vla-get-ModelSpace doc)))
    (alert \"We now have access to the properties and methods of the Database object!\")
    
    ;; Retrieve the number of Blocks in this database
    (alert (strcat \"The number of Blocks in this database is: \" (itoa (vla-get-Count (vla-get-Blocks database)))))
    ;; Release object
    (vlax-release-object database)
    (alert \"The Database object has been released!\")
)
")
("DecimalSeparator" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5F74354B-DEF5-486D-BD2B-7767F23009AC"
"
DecimalSeparator Property (ActiveX)
Specifies the character to be used as the decimal separator in decimal dimension and tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.DecimalSeparator
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
A single character used as the separator in decimal values.
Remarks
The initial value for this property is \".\".
Any character will be accepted as a valid value for this property.
This property will be used only when the UnitsFormat property is set to acDimDecimal.
Note: This property overrides the value of the DIMDSEP system variable for the given dimension.
Examples
VBA:
Sub Example_DecimalSeparator()
    ' This example creates a Dim3PointAngular object in model space
    ' and allows the user to change the decimal separator appearance
    ' using the DecimalSeparator property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim oldSeparator As String, newSeparator As String
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    
    ' Set precision so that degrees are visible
    DimPointAngularObj.TextPrecision = acDimPrecisionFour
    
    ThisDrawing.Application.ZoomAll
    ' Read and display current decimal separator
    MsgBox \"The decimal separator for this object is currently set to: [\" & DimPointAngularObj.DecimalSeparator & \"]\"
    ' Alter the decimal separator property for this object
    oldSeparator = DimPointAngularObj.DecimalSeparator
    newSeparator = InputBox(\"Enter a new decimal separator\", \"Change Decimal Separator\", oldSeparator)
    
    If newSeparator = \"\" Then
        Exit Sub
    Else
        ' Set new decimal separator, making sure to use only one character
        DimPointAngularObj.DecimalSeparator = Left(newSeparator, 1)
    End If
    
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current decimal separator
    MsgBox \"The decimal separator for this object is now set to: [\" & DimPointAngularObj.DecimalSeparator & \"]\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DecimalSeparator()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and allows the user to change the decimal separator appearance
    ;; using the DecimalSeparator property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    
    ;; Set precision so that degrees are visible
    (vla-put-TextPrecision DimPointAngularObj acDimPrecisionFour)
    
    (vla-ZoomAll acadObj)
    ;; Read and display current decimal separator
    (alert (strcat \"The decimal separator for this object is currently set to: [\" (vla-get-DecimalSeparator DimPointAngularObj) \"]\"))
    ;; Alter the decimal separator property for this object
    (setq oldSeparator (vla-get-DecimalSeparator DimPointAngularObj))
    (setq newSeparator (getstring \"\nEnter a new decimal separator: \"))
    
    (if (/= newSeparator \"\")
        ;; Set new decimal separator, making sure to use only one character
        (vla-put-DecimalSeparator DimPointAngularObj newSeparator)
    )
    
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current decimal separator
    (alert (strcat \"The decimal separator for this object is now set to: [\" (vla-get-DecimalSeparator DimPointAngularObj) \"]\"))
)
")
("Degree" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6794BD00-A121-47DF-87E9-C8659E58D29D"
          "
Degree Property (ActiveX)
Gets the degree of the spline's polynomial representation.
Supported platforms: Windows only
Signature
VBA:
object.Degree
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: Yes
Type: Integer
An integer between 1 and 25 inclusive.
Remarks
The order of the spline is equal to the degree of the spline plus one (+1).
Examples
VBA:
Sub Example_Degree()
    ' This example creates a spline and returns the degree
    ' of the spline's polynomial representation.
    
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ThisDrawing.Regen True
    MsgBox \"The degree of this Spline's polynomial representation is: \" & splineObj.Degree, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Degree()
    ;; This example creates a spline and returns the degree
    ;; of the spline's polynomial representation.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomExtents acadObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The degree of this Spline's polynomial representation is: \" (itoa (vla-get-Degree splineObj))))
)
")
("Degree2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-46FCC8A7-1250-404F-82EB-6E344F0F40E0"
           "
Degree2 Property (ActiveX)
Specifies the degree of the spline's polynomial representation.
Supported platforms: Windows only
Signature
VBA:
object.Degree2
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Integer
An integer between 1 and 25 inclusive.
Remarks
The order of the spline is equal to the degree of the spline plus one (+1).
Examples
VBA:
Sub Example_Degree()
    ' This example creates a spline and returns the degree
    ' of the spline's polynomial representation.
    
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ThisDrawing.Regen True
    MsgBox \"The degree of this Spline's polynomial representation is: \" & splineObj.Degree, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Degree()
    ;; This example creates a spline and returns the degree
    ;; of the spline's polynomial representation.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomExtents acadObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The degree of this Spline's polynomial representation is: \" (itoa (vla-get-Degree splineObj))))
)
")
("Delta" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-29CF9F06-A975-4D33-AA0F-ED2E644109E2"
         "
Delta Property (ActiveX)
Gets the delta of a line.
Supported platforms: Windows only
Signature
VBA:
object.Delta
object
    Type: Line
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
A three-element array representing the deltaX, deltaY, and deltaZ values for the line.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Delta()
    ' This example adds a line in model space and returns the delta of the new line
    Dim lineObj As AcadLine
    Dim lineDelta As Variant
    Dim startPoint(0 To 2) As Double, endPoint(0 To 2) As Double
    
    ' Define the start and end points for the line
    startPoint(0) = 1: startPoint(1) = 1: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 5: endPoint(2) = 0
    
    ' Create the line in model space
    Set lineObj = ThisDrawing.modelSpace.AddLine(startPoint, endPoint)
    ThisDrawing.Application.ZoomAll
    
    ' Display the delta of the new line
    lineDelta = lineObj.Delta
    MsgBox \"The delta of the new Line is: \" & vbCrLf & _
           \"DeltaX: \" & lineDelta(0) & vbCrLf & _
           \"DeltaY: \" & lineDelta(1) & vbCrLf & _
           \"DeltaZ: \" & lineDelta(2)
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Delta()
    ;; This example adds a line in model space and returns the delta of the new line
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the start and end points for the line
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    
    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    ;; Display the delta of the new line
    (setq lineDelta (vlax-safearray->list (vlax-variant-value (vla-get-Delta lineObj))))
    (alert (strcat \"The delta of the new Line is: \"
                   \"\nDeltaX: \" (rtos (nth 0 lineDelta) 2)
                   \"\nDeltaY: \" (rtos (nth 1 lineDelta) 2)
                   \"\nDeltaZ: \" (rtos (nth 2 lineDelta) 2)
	   )
    )
)
")
("Description" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8426981B-58B7-465E-94C5-AEFDCA0D1CC7"
               "
Description Property (ActiveX)
Specifies the description of an object.
Supported platforms: Windows only
Signature
VBA:
object.Description
object
    Type: DynamicBlockReferenceProperty, Layer, Linetype, Material, MLeaderStyle, TableStyle
    The objects this property applies to.
Property Value
Read-only: No; except for DynamicBlockReferenceProperty objects
Type: String
The description assigned to the object.
Remarks
The description for a dynamic block reference property is set by the block author and cannot be edited.
A linetype description can have up to 47 characters. The description can be a comment or a series of underscores, dots, dashes, and spaces to show a simple representation of the linetype pattern.
Examples
VBA:
Sub Example_Description()
    ' This example returns the description of the active linetype.
    ' It then changes the description of the active linetype.
    
    Dim currDescription As String
    
    ' This example modifies the description of a linetype
    currDescription = ThisDrawing.ActiveLinetype.Description
    MsgBox \"The description of the active LineType is: \" & currDescription, vbInformation, \"Description Example\"
    ' Change the description of the active linetype
    ThisDrawing.ActiveLinetype.Description = \"My favorite LineType\"
    MsgBox \"The new description of the active LineType is: \" & ThisDrawing.ActiveLinetype.Description, vbInformation, \"Description Example\"
    
    ' Reset the description of the active linetype
    ThisDrawing.ActiveLinetype.Description = currDescription
    MsgBox \"The description of the active LineType is reset to: \" & ThisDrawing.ActiveLinetype.Description, vbInformation, \"Description Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Description()
    ;; This example returns the description of the active linetype.
    ;; It then changes the description of the active linetype.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; This example modifies the description of a linetype
    (setq currDescription (vla-get-Description (vla-get-ActiveLinetype doc)))
    (alert (strcat \"The description of the active Linetype is: \" currDescription))
    ;; Change the description of the active linetype
    (vla-put-Description (vla-get-ActiveLinetype doc) \"My favorite LineType\")
    (alert (strcat \"The new description of the active Linetype is: \" (vla-get-Description (vla-get-ActiveLinetype doc))))
    
    ;; Reset the description of the active linetype
    (vla-put-Description (vla-get-ActiveLinetype doc) currDescription)
    (alert (strcat \"The description of the active Linetype is reset to: \" currDescription))
)
")
("Diameter" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-506F4B7E-78B3-4C94-954E-F986DB0EF26F"
            "
Diameter Property (ActiveX)
Specifies the diameter of a circle.
Supported platforms: Windows only
Signature
VBA:
object.Diameter
object
    Type: Circle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The diameter of the circle.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Diameter()
    ' This example creates a Circle object in model space and
    ' returns the diameter of the new Circle
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the new Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The diameter of the new Circle is: \" & circleObj.Diameter
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Diameter()
    ;; This example creates a Circle object in model space and
    ;; returns the diameter of the new Circle
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The diameter of the new Circle is: \" (rtos (vla-get-Diameter circleObj) 2)))
)
")
("Dictionaries" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5E577FF6-F939-4798-9700-3A3278EA84F4"
"
Dictionaries Property (ActiveX)
Gets the Dictionaries collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Dictionaries
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Dictionaries
The Dictionaries collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Dictionaries()
    ' This example finds the current dictionary collection and
    ' adds a new dictionary to that collection.
    
    Dim dict As AcadDictionary
    Set dict = ThisDrawing.Dictionaries.Add(\"TEST\")
    MsgBox \"A new dictionary called \" & dict.name & \" has been added to the dictionaries collection.\", vbInformation, \"Dictionaries Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Dictionaries()
    ;; This example finds the current dictionary collection and
    ;; adds a new dictionary to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    (setq dict (vla-Add (vla-get-Dictionaries doc) \"TEST\"))
    (alert (strcat \"A new dictionary called \" (vla-get-Name dict) \" has been added to the dictionaries collection.\"))
)
")
("DimConstrDesc" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5AE70927-73F6-4C1D-9936-038CFAB358A4"
"
DimConstrDesc Property (ActiveX)
Specifies a description for the constraint.
Supported platforms: Windows only
Signature
VBA:
object.DimConstrDesc
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimDiametric, DimRadial, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: String
The description for the constraint.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimConstrExpression" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AFB4E484-221F-4B00-AA61-17412554ADEB"
                       "
DimConstrExpression Property (ActiveX)
Specifies the expression or value of the constraint.
Supported platforms: Windows only
Signature
VBA:
object.DimConstrExpression
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimDiametric, DimRadial, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: String
The expression or value of the constraint.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimConstrForm" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3BA78692-AC13-4649-8C21-2BE7C4ECED62"
"
DimConstrForm Property (ActiveX)
Specifies the type of constraint.
Supported platforms: Windows only
Signature
VBA:
object.DimConstrForm
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimDiametric, DimRadial, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Dynamic
    False: Annotational
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimConstrName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6A08ECE1-1F4D-4AD4-8127-39F0B78C45ED"
"
DimConstrName Property (ActiveX)
Specifies a name for the constraint.
Supported platforms: Windows only
Signature
VBA:
object.DimConstrName
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimDiametric, DimRadial, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: String
The name for the constraint.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimConstrReference" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D06A8297-0390-42AF-ACAD-1F2CA996EB80"
"
DimConstrReference Property (ActiveX)
Specifies the parameter is a reference constraint.
Supported platforms: Windows only
Signature
VBA:
object.DimConstrReference
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimDiametric, DimRadial, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: A reference dimension
    False: Not a reference dimension
Remarks
Reference dimensions can be used in expressions, but cannot control geometry.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimConstrValue" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D1BE3F09-1491-46DE-A426-C1BB38368068"
"
DimConstrValue Property (ActiveX)
Specifies the value of the constraint.
Supported platforms: Windows only
Signature
VBA:
object.DimConstrValue
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimDiametric, DimRadial, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: String
The value of the constraint.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimLine1Suppress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EC6704BE-D000-45C4-AAAE-CDA79D06A076"
"
DimLine1Suppress Property (ActiveX)
Specifies the suppression of the first dimension line.
Supported platforms: Windows only
Signature
VBA:
object.DimLine1Suppress
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the first dimension line.
    False: Do not suppress the first dimension line.
Remarks
The initial value for this property is False.
When this property is set to True, the display of the dimension line and arrowhead between the first extension line and the text is suppressed.
Note: This property overrides the value of the DIMSD1 system variable for the given dimension.
Examples
VBA:
Sub Example_DimensionLine1Suppress()
    ' This example creates a Dim3PointAngular object in model space
    ' and suppresses the dimension lines using the DimensionLine1Suppress
    ' and DimensionLine2Suppress properties
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim Line1Suppressed As String, Line2Suppressed As String
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current line suppression information
    Line1Suppressed = IIf(DimPointAngularObj.DimLine1Suppress, \"is suppressed\", \"is not suppressed\")
    Line2Suppressed = IIf(DimPointAngularObj.DimLine2Suppress, \"is suppressed\", \"is not suppressed\")
    
    MsgBox \"Line one of the dimension \" & Line1Suppressed & vbCrLf & _
           \"Line two of the dimension \" & Line2Suppressed
    ' Suppress line one of the dimension
    DimPointAngularObj.DimLine1Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line one of the dimension is now suppressed\"
    
    ' Suppress line two of the dimension
    DimPointAngularObj.DimLine2Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line two of the dimension is now suppressed\"
   
    ' Turn both dimension lines back on
    DimPointAngularObj.DimLine1Suppress = False
    DimPointAngularObj.DimLine2Suppress = False
    ThisDrawing.Regen acAllViewports
    MsgBox \"Both dimension lines are now visible again\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimensionLine1Suppress()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and suppresses the dimension lines using the DimensionLine1Suppress
    ;; and DimensionLine2Suppress properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current line suppression information
    (setq Line1Suppressed (if (= (vla-get-DimLine1Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    (setq Line2Suppressed (if (= (vla-get-DimLine2Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    
    (alert (strcat \"Line one of the dimension \" Line1Suppressed
                   \"\nLine two of the dimension \" Line2Suppressed))
    ;; Suppress line one of the dimension
    (vla-put-DimLine1Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line one of the dimension is now suppressed\")
    
    ;; Suppress line two of the dimension
    (vla-put-DimLine2Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line two of the dimension is now suppressed\")
   
    ;; Turn both dimension lines back on
    (vla-put-DimLine1Suppress DimPointAngularObj :vlax-false)
    (vla-put-DimLine2Suppress DimPointAngularObj :vlax-false)
    (vla-Regen doc acAllViewports)
    (alert \"Both dimension lines are now visible again\")
)
")
("DimLine2Suppress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-186F2D21-99F0-4431-9AD7-48E6C41E8FAF"
"
DimLine2Suppress Property (ActiveX)
Specifies the suppression of the second dimension line.
Supported platforms: Windows only
Signature
VBA:
object.DimLine2Suppress
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the second dimension line.
    False: Do not suppress the second dimension line.
Remarks
The initial value for this property is False.
When this property is set to True, the display of the dimension line and arrowhead between the second extension line and the text is suppressed.
Note: This property overrides the value of the DIMSD2 system variable for the given dimension.
Examples
VBA:
Sub Example_DimensionLine2Suppress()
    ' This example creates a Dim3PointAngular object in model space
    ' and suppresses the dimension lines using the DimensionLine1Suppress
    ' and DimensionLine2Suppress properties
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim Line1Suppressed As String, Line2Suppressed As String
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current line suppression information
    Line1Suppressed = IIf(DimPointAngularObj.DimLine1Suppress, \"is suppressed\", \"is not suppressed\")
    Line2Suppressed = IIf(DimPointAngularObj.DimLine2Suppress, \"is suppressed\", \"is not suppressed\")
    
    MsgBox \"Line one of the dimension \" & Line1Suppressed & vbCrLf & _
           \"Line two of the dimension \" & Line2Suppressed
    ' Suppress line one of the dimension
    DimPointAngularObj.DimLine1Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line one of the dimension is now suppressed\"
    
    ' Suppress line two of the dimension
    DimPointAngularObj.DimLine2Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line two of the dimension is now suppressed\"
   
    ' Turn both dimension lines back on
    DimPointAngularObj.DimLine1Suppress = False
    DimPointAngularObj.DimLine2Suppress = False
    ThisDrawing.Regen acAllViewports
    MsgBox \"Both dimension lines are now visible again\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimensionLine2Suppress()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and suppresses the dimension lines using the DimensionLine1Suppress
    ;; and DimensionLine2Suppress properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current line suppression information
    (setq Line1Suppressed (if (= (vla-get-DimLine1Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    (setq Line2Suppressed (if (= (vla-get-DimLine2Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    
    (alert (strcat \"Line one of the dimension \" Line1Suppressed
                   \"\nLine two of the dimension \" Line2Suppressed))
    ;; Suppress line one of the dimension
    (vla-put-DimLine1Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line one of the dimension is now suppressed\")
    
    ;; Suppress line two of the dimension
    (vla-put-DimLine2Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line two of the dimension is now suppressed\")
   
    ;; Turn both dimension lines back on
    (vla-put-DimLine1Suppress DimPointAngularObj :vlax-false)
    (vla-put-DimLine2Suppress DimPointAngularObj :vlax-false)
    (vla-Regen doc acAllViewports)
    (alert \"Both dimension lines are now visible again\")
)
")
("DimLineInside" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8381A44F-4BE4-49FD-B4D3-FCAF50D759E0"
"
DimLineInside Property (ActiveX)
Specifies the display of dimension lines inside the extension lines only.
Supported platforms: Windows only
Signature
VBA:
object.DimLineInside
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of dimension lines outside the extension lines.
    False: Display dimension lines outside the extension lines.
Remarks
The initial value for this property is False.
Note: This property overrides the value of the DIMSOXD system variable for the given dimension.
Examples
VBA:
Sub Example_DimLineInside()
    ' This example creates a DimAligned object in model space
    ' and toggles the dimension lines to be both allowed and disallowed
    ' outside the extension lines
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentValue As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 6: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current line suppression information
    CurrentValue = IIf(dimObj.DimLineInside, \"are not\", \"are\")
    MsgBox \"Dimension lines \" & CurrentValue & \" allowed outside the extension lines\"
    ' Suppress the display of dimension lines outside the extension lines
    dimObj.DimLineInside = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension lines are not allowed outside the extension lines\"
   
    ' Allow the display of dimension lines outside the extension lines (default)
    dimObj.DimLineInside = False
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension lines are allowed outside the extension lines\"
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimLineInside()
    ;; This example creates a DimAligned object in model space
    ;; and toggles the dimension lines to be both allowed and disallowed
    ;; outside the extension lines
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 6 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current line suppression information
    (setq CurrentValue (if (= (vla-get-DimLineInside dimObj) :vlax-true) \"are not\" \"are\"))
    (alert (strcat \"Dimension lines \" CurrentValue \" allowed outside the extension lines\"))
    ;; Suppress the display of dimension lines outside the extension lines
    (vla-put-DimLineInside dimObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension lines are not allowed outside the extension lines\")
   
    ;; Allow the display of dimension lines outside the extension lines (default)
    (vla-put-DimLineInside dimObj :vlax-false)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension lines are allowed outside the extension lines\")
)
")
("DimLineSuppress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-389DC9CF-52B6-4882-9D02-85E7FE6FA43E"
                   "
DimLineSuppress Property (ActiveX)
Specifies the suppression of the dimension line for radial dimensions.
Supported platforms: Windows only
Signature
VBA:
object.DimLineSuppress
object
    Type: DimRadial, DimRadialLarge
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the dimension line.
    False: Do not suppress the dimension line.
Remarks
The initial value for this property is False.
When this property is set to True, the display of the dimension line and arrowhead between the extension line and the text is suppressed.
Note: This property overrides the value of the DIMSD2 system variable.
Examples
VBA:
Sub Example_DimLineSuppress()
   ' This example creates a Radial Dimension in model space and
   ' uses the DimLineSuppress property to toggle the display
   ' of the dimension lines
    Dim dimObj As AcadDimRadial
    Dim center(0 To 2) As Double
    Dim chordPoint(0 To 2) As Double
    Dim leaderLen As Integer
    
    ' Define the dimension
    center(0) = 0: center(1) = 0: center(2) = 0
    chordPoint(0) = 5: chordPoint(1) = 5: chordPoint(2) = 0
    leaderLen = 5
    
    ' Create the radial dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimRadial(center, chordPoint, leaderLen)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The radial dimension has been created.\", vbInformation
    
    dimObj.DimLineSuppress = Not (dimObj.DimLineSuppress)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The radial dimension appearance has been modified.\", vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimLineSuppress()
    ;; This example creates a Radial Dimension in model space and
    ;; uses the DimLineSuppress property to toggle the display
    ;; of the dimension lines
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq center (vlax-3d-point 0 0 0)
          chordPoint (vlax-3d-point 5 5 0)
          leaderLen 5)
    
    ;; Create the radial dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimRadial modelSpace center chordPoint leaderLen))
    (vla-ZoomAll acadObj)
    (alert \"The radial dimension has been created.\")
    
    (vla-put-DimLineSuppress dimObj (if (= (vla-get-DimLineSuppress dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-ZoomAll acadObj)
    
    (alert \"The radial dimension appearance has been modified.\")
)
")
("DimStyles" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9CEE2A14-EF1C-484C-A930-3B8040981FAA"
             "
DimStyles Property (ActiveX)
Gets the DimStyles collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.DimStyles
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: DimStyles
The DimStyles collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DimStyles()
    ' This example adds a new dimension style.
    Dim dimStyle As AcadDimStyle
    Set dimStyle = ThisDrawing.DimStyles.Add(\"TEST\")
    MsgBox \"A new dimension style called \" & dimStyle.name & \" has been added to the Dimstyles collection.\", vbInformation, \"Dimstyles Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimStyles()
    ;; This example adds a new dimension style.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dimStyle (vla-Add (vla-get-DimStyles doc) \"TEST\"))
    (alert (strcat \"A new dimension style called \" (vla-get-Name dimStyle) \" has been added to the Dimstyles collection.\"))
)
")
("DimTxtDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DC17E960-4FA7-4793-A75B-6D09510A518A"
                   "
DimTxtDirection Property (ActiveX)
Specifies the direction of the dimension text.
Supported platforms: Windows only
Signature
VBA:
object.DimTxtDirection
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    False: Displays dimension text in a Left-to-Right reading style
    True: Displays dimension text in a Right-to-Left reading style
Remarks
Note: This property overrides the value of the DIMTXTDIRECTION system variable for the given dimension.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DimensionLineColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AEE75290-EE61-4235-8E1C-655D2AABCDF1"
                      "
DimensionLineColor Property (ActiveX)
Specifies the color of the dimension line for a dimension, leader, or tolerance object.
Supported platforms: Windows only
Signature
VBA:
object.DimensionLineColor
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated, Leader, Tolerance
    The objects this property applies to.
Property Value
Read-only: No
Type: acColor enum
Use a color index number from 0 to 256, or one of the constants listed here:
    acByBlock
    acByLayer
    acRed
    acYellow
    acGreen
    acCyan
    acBlue
    acMagenta
    acWhite
Remarks
Colors can be set and read as numeric index values ranging from 0 to 256. Constants have been provided for the standard seven colors, as well as the BYBLOCK and BYLAYER designations.
If you use acByBlock, AutoCAD draws new objects in the default color (white or black, depending on your configuration) until they are grouped into the block. When the block is inserted in the drawing, the objects in the block inherit the current setting of the color property.
If you use acByLayer, new objects assume the color of the layer upon which they are drawn.
When you assign color to a dimension object, the color applies to the dimension lines, arrowheads, and dimension leader lines.
Note: This property overrides the value of the DIMCLRD system variable for the given dimension, leader, or tolerance object.
Examples
VBA:
Sub Example_DimensionLineColor()
    ' This example creates a Dim3PointAngular object in model space
    ' and changes the dimension line color to red using the DimensionLineColor property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current dimension line color
    MsgBox \"The dimension line color for this object is currently set to: \" & DimPointAngularObj.DimensionLineColor
    ' Change the dimension line color
    DimPointAngularObj.DimensionLineColor = acRed
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current dimension line color
    MsgBox \"The dimension line color for this object is now set to: \" & DimPointAngularObj.DimensionLineColor & \" (Red)\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimensionLineColor()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and changes the dimension line color to red using the DimensionLineColor property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current dimension line color
    (alert (strcat \"The dimension line color for this object is currently set to: \" (itoa (vla-get-DimensionLineColor DimPointAngularObj))))
    ;; Change the dimension line color
    (vla-put-DimensionLineColor DimPointAngularObj acRed)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current dimension line color
    (alert (strcat \"The dimension line color for this object is now set to: \" (itoa (vla-get-DimensionLineColor DimPointAngularObj)) \" (Red)\"))
)
")
("DimensionLineExtend" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-328247F8-7B1E-4DAD-9B25-F2F5ADB8B818"
"
DimensionLineExtend Property (ActiveX)
Specifies the distance the dimension line extends beyond the extension line when oblique strokes are drawn instead of arrowheads.
Supported platforms: Windows only
Signature
VBA:
object.DimensionLineExtend
object
    Type: DimAligned, DimArcLength, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A positive real number specifying the distance to extend the dimension line beyond the extension line.
Remarks
The initial value for this property is 0.0000.
Note: This property overrides the value of the DIMDLE system variable for the given dimension.
Examples
VBA:
Sub Example_DimensionLineExtend()
   ' This example creates an aligned dimension in model space and
   ' uses DimensionLineExtend to specify the distance the dimension
   ' line extends beyond the extension line when oblique strokes are
   ' drawn instead of arrowheads
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 10.123: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    dimObj.Arrowhead1Type = acArrowOblique
    dimObj.Arrowhead2Type = acArrowOblique
    
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"A new Dimension has been created.  Press any key to extend the dimension lines.\"
    
    ' Round the distance of the alternate dimension to 0.50 of a unit
    dimObj.DimensionLineExtend = 2
    ThisDrawing.Regen acAllViewports
    
    MsgBox \"The dimension lines have been extended to: \" & dimObj.DimensionLineExtend
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimensionLineExtend()
    ;; This example creates an aligned dimension in model space and
    ;; uses DimensionLineExtend to specify the distance the dimension
    ;; line extends beyond the extension line when oblique strokes are
    ;; drawn instead of arrowheads
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10.123 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-put-Arrowhead1Type dimObj acArrowOblique)
    (vla-put-Arrowhead2Type dimObj acArrowOblique)
    
    (vla-ZoomAll acadObj)
    
    (alert \"A new Dimension has been created.\")
    
    ;; Round the distance of the alternate dimension to 0.50 of a unit
    (vla-put-DimensionLineExtend dimObj 2)
    (vla-Regen doc acAllViewports)
    
    (alert (strcat \"The dimension lines have been extended to: \" (rtos (vla-get-DimensionLineExtend dimObj) 2)))
)
")
("DimensionLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B47D9FC6-D1F7-4292-B986-EC8E378B247D"
"
DimensionLineWeight Property (ActiveX)
Specifies the lineweight for the dimension lines.
Supported platforms: Windows only
Signature
VBA:
object.DimensionLineWeight
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated, Leader
    The objects this property applies to.
Property Value
Read-only: No
Type: acLineWeight enum
    acLnWtByLayer
    acLnWtByBlock
    acLnWtByLwDefault
    acLnWt000
    acLnWt005
    acLnWt009
    acLnWt013
    acLnWt015
    acLnWt018
    acLnWt020
    acLnWt025
    acLnWt030
    acLnWt035
    acLnWt040
    acLnWt050
    acLnWt053
    acLnWt060
    acLnWt070
    acLnWt080
    acLnWt090
    acLnWt100
    acLnWt106
    acLnWt120
    acLnWt140
    acLnWt158
    acLnWt200
    acLnWt211
Remarks
The initial value for this property is acLnWtByBlock.
Lineweight settings are only visible when the LineweightDisplay property is set to True.
Examples
VBA:
Sub Example_DimensionLineWeight()
    ' This example creates a Dim3PointAngular object in model space
    ' and changes the dimension lineweight to a thicker value
    ' using the DimensionLineWeight property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim oldLWSetting As Boolean
    Dim CurrentSetting As String
        
    ' Turn on lineweight display so the changes can be seen
    oldLWSetting = ThisDrawing.preferences.LineWeightDisplay
    ThisDrawing.preferences.LineWeightDisplay = True
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current dimension lineweight
    CurrentSetting = DimPointAngularObj.DimensionLineWeight
    Select Case CurrentSetting
        Case acLnWtByLayer: CurrentSetting = \"ByLayer\"
        Case acLnWtByBlock: CurrentSetting = \"ByBlock\"
        Case acLnWtByLwDefault: CurrentSetting = \"ByDefault\"
        Case Else
    End Select
    MsgBox \"The dimension lineweight setting for this object is currently set to: \" & CurrentSetting
    ' Change the dimension lineweight
    DimPointAngularObj.DimensionLineWeight = acLnWt100
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current dimension lineweight
    MsgBox \"The dimension lineweight setting for this object is now set to: \" & DimPointAngularObj.DimensionLineWeight
    
    ' Return previous lineweight setting
    ThisDrawing.preferences.LineWeightDisplay = oldLWSetting
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DimensionLineWeight()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and changes the dimension lineweight to a thicker value
    ;; using the DimensionLineWeight property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
  
    ;; Turn on lineweight display so the changes can be seen
    (setq oldLWSetting (vla-get-LineWeightDisplay preferences))
    (vla-put-LineWeightDisplay preferences :vlax-true)
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current dimension lineweight
    (setq CurrentSetting (vla-get-DimensionLineWeight DimPointAngularObj))
    (cond
        ((= acLnWtByLayer CurrentSetting)(setq CurrentSetting \"ByLayer\"))
        ((= acLnWtByBlock CurrentSetting)(setq CurrentSetting \"ByBlock\"))
        ((= acLnWtByLwDefault CurrentSetting)(setq CurrentSetting \"ByDefault\"))
	(setq CurrentSetting (itoa CurrentSetting))
    )
  
    (alert (strcat \"The dimension lineweight setting for this object is currently set to: \" CurrentSetting))
    ;; Change the dimension lineweight
    (vla-put-DimensionLineWeight DimPointAngularObj acLnWt100)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current dimension lineweight
    (alert (strcat \"The dimension lineweight setting for this object is now set to: \" (itoa (vla-get-DimensionLineWeight DimPointAngularObj))))
    
    ;; Return previous lineweight setting
    (vla-put-DimensionLineWeight DimPointAngularObj oldLWSetting)
)
")
("DimensionLinetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9B674B1C-F3A0-46B2-B53F-D149076E08D2"
                     "
DimensionLinetype Property (ActiveX)
Specifies the linetype of the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.DimensionLinetype
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the linetype assigned to the dimension line.
Remarks
Note: This property overrides the value of the DIMLTYPE system variable for the given dimension.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Direction" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F7DEFBDB-796C-4D7A-802C-872EE09A941C"
             "
Direction Property (ActiveX)
Specifies the viewing direction for a 3D visualization of the drawing, or the direction vector of the table.
Supported platforms: Windows only
Signature
VBA:
object.Direction
object
    Type: ExtrudedSurface, PViewport, Table, View, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant
Table objects: The vector (X axis, in WCS coordinates) defines the horizontal plane containing the table.
All other objects: The vector is a three-element array of doubles that defines a direction from which the drawing can be viewed.
Remarks
This property puts the viewer in a position to look at the drawing as if looking back at the origin (0, 0, 0) from a specified point in space. This property is similar to the VPOINT command in AutoCAD.
Examples
VBA:
Sub Example_Direction()
    ' This example creates a circle in model space
    ' and changes the thickness of the circle. Once
    ' the thickness has been changed, the direction
    ' of the active viewport is changed so that the
    ' new thickness setting is visible.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
        
    ' Change the thickness of the circle
    circleObj.Thickness = 3
    
    ' Change the direction of the viewport so that you can
    ' view the change made to the thickness. Once you change
    ' the direction, you must reset the active viewport.
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    
End Sub
Sub example_tableDirection()
    Dim oMS As AcadModelSpace
    Set oMS = ThisDrawing.ModelSpace
    Dim oT As AcadTable
    Dim pt(2) As Double
    Set oT = oMS.AddTable(pt, 4, 5, 5, 20)
    ZoomExtents
    Dim vDirection As Variant
    vDirection = oT.Direction
    MsgBox \"Table Direction vector is \" & vbCrLf & vDirection(0) & \",\" & vDirection(1) & \",\" & vDirection(2)
    Dim vNewDirection(2) As Double
    vNewDirection(0) = 0
    vNewDirection(1) = 1
    vNewDirection(2) = 0
    oT.Direction = vNewDirection
    
    Dim vRetDirection As Variant
    vRetDirection = oT.Direction
    MsgBox \"New Table Direction vector is \" & vbCrLf & vRetDirection(0) & \",\" & vRetDirection(1) & \",\" & vRetDirection(2)
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Direction()
    ;; This example creates a circle in model space
    ;; and changes the thickness of the circle. Once
    ;; the thickness has been changed, the direction
    ;; of the active viewport is changed so that the
    ;; new thickness setting is visible.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)
          radius 5)
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
        
    ;; Change the thickness of the circle
    (vla-put-Thickness circleObj 3)
    
    ;; Change the direction of the viewport so that you can
    ;; view the change made to the thickness. Once you change
    ;; the direction, you must reset the active viewport.
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
)
(defun c:Example_TableDirection()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    (setq pt (vlax-3d-point 0 0 0)
          oT (vla-AddTable modelSpace pt 4 5 5 20))
    (vla-ZoomExtents acadObj)
    (setq vDirection (vlax-safearray->list (vlax-variant-value (vla-get-Direction oT))))
    (alert (strcat \"Table Direction vector is \"
	           \"\n\" (rtos (nth 0 vDirection) 2) \",\" (rtos (nth 1 vDirection) 2) \",\" (rtos (nth 2 vDirection) 2)))
    (setq vNewDirection (vlax-3d-point 0 1 0))
    (vla-put-Direction oT vNewDirection)
    
    (setq vRetDirection (vlax-safearray->list (vlax-variant-value (vla-get-Direction oT))))
    (alert (strcat \"New Table Direction vector is \"
	           \"\n\" (rtos (nth 0 vRetDirection) 2) \",\" (rtos (nth 1 vRetDirection) 2) \",\" (rtos (nth 2 vRetDirection) 2)))
)
")
("DirectionVector" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-90ADA39F-3AD4-404C-88E4-2BD57F9B4CB4"
"
DirectionVector Property (ActiveX)
Specifies the direction for the ray, tolerance, or xline through a vector.
Supported platforms: Windows only
Signature
VBA:
object.DirectionVector
object
    Type: Ray, Tolerance, XLine
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
The direction for the ray, tolerance, or construction line (XLine).
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DirectionVector()
    ' This example creates a ray and then changes the direction vector
    ' for the ray.
    
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim newDirectionVec(0 To 2) As Double
    
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    
    ' Create a Ray object in model space
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    ZoomAll
    MsgBox \"The ray has a direction vector of \" & rayObj.DirectionVector(0) & \", \" & rayObj.DirectionVector(1) & \", \" & rayObj.DirectionVector(2), vbInformation, \"DirectionVector Example\"
    
    ' Change the direction vector
    newDirectionVec(0) = 3#: newDirectionVec(1) = 1#: newDirectionVec(2) = 0#
    rayObj.DirectionVector = newDirectionVec
            
    ' Query the new direction vector for the Ray
    Dim retDir As Variant            ' Note that return from DirectionVector property is Variant and not a SafeArray
    retDir = rayObj.DirectionVector
    
    ThisDrawing.Regen True
    MsgBox \"The direction vector of the ray has been changed to \" & rayObj.DirectionVector(0) & \", \" & rayObj.DirectionVector(1) & \", \" & rayObj.DirectionVector(2), vbInformation, \"DirectionVector Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DirectionVector()
    ;; This example creates a ray and then changes the direction vector
    ;; for the ray.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq basePoint (vlax-3d-point 3 3 0)
          SecondPoint (vlax-3d-point 1 3 0))
    
    ;; Create a Ray object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    (vla-ZoomAll acadObj)
  
    (setq vDirection (vlax-safearray->list (vlax-variant-value (vla-get-DirectionVector rayObj))))
    (alert (strcat \"The ray has a direction vector of \"
	           \"\n\" (rtos (nth 0 vDirection) 2) \",\" (rtos (nth 1 vDirection) 2) \",\" (rtos (nth 2 vDirection) 2)))
    
    ;; Change the direction vector
    (setq newDirectionVec (vlax-3d-point 3 1 0))
    (vla-put-DirectionVector rayObj newDirectionVec)
            
    ;; Query the new direction vector for the Ray
    (setq retDir (vlax-safearray->list (vlax-variant-value (vla-get-DirectionVector rayObj))))
    
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The direction vector of the ray has been changed to \"
	           \"\n\" (rtos (nth 0 retDir) 2) \",\" (rtos (nth 1 retDir) 2) \",\" (rtos (nth 2 retDir) 2)))
)
")
("DisplayLocked" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-08A9604A-6637-42FE-BF24-1B8D591A97CC"
                 "
DisplayLocked Property (ActiveX)
Specifies whether the viewport is locked.
Supported platforms: Windows only
Signature
VBA:
object.DisplayLocked
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The viewport is locked.
    False: The viewport is not locked.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DisplayLocked()
    ' This example scans the current drawing paper space Viewports
    ' and displays whether or not any of them are locked.
    
    Dim pviewportObj As Object
    Dim msg As String, DisplayState As String
    
    ' Make sure this drawing contains paper space viewports before continuing
    If ThisDrawing.PaperSpace.Count = 0 Then
        MsgBox \"There are no paper space viewports in the current drawing.\"
        Exit Sub
    End If
    
    ' Go through each PViewport object in the drawing paper space
    ' and determine whether the paper space viewport is locked or not
    For Each pviewportObj In ThisDrawing.PaperSpace
        ' Determine if this is a paper space viewport
        If pviewportObj.ObjectName = \"AcDbViewport\" Then
            ' Determine if this paper space viewport is clipped
            DisplayState = IIf(pviewportObj.DisplayLocked, \" is locked\", \" is not locked\")
            msg = msg & \"PViewport ID \" & pviewportObj.ObjectID & DisplayState & vbCrLf
        End If
    Next
    ' Display locked state of paper space Viewports
    MsgBox msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DisplayLocked()
    ;; This example scans the current drawing paper space Viewports
    ;; and displays whether or not any of them are locked.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq paperSpace (vla-get-PaperSpace doc))
  
    ;; Make sure this drawing contains paper space viewports before continuing
    (if (= (vla-get-count paperSpace) 0)
        (alert \"There are no paper space viewports in the current drawing.\")
        (progn
	           (setq msg \"\")
	           ;; Go through each paper space viewport object in the drawing paper space
	           ;; and determine whether or not it is locked
	           (vlax-for pviewportObj paperSpace
	               ;; Determine whether this is a paper space viewport
	               (if (= (vla-get-ObjectName pviewportObj) \"AcDbViewport\")
	                   (progn
	                       ;; Determine whether this paper space viewport is locked
	                       (setq DisplayState (if (= (vla-get-DisplayLocked pviewportObj) :vlax-true) \" is locked\" \" is not locked\"))
		                      (setq ID (itoa (vla-get-ObjectID pviewportObj)))
	                       (setq msg (strcat msg \"PViewport ID \" ID DisplayState \"\n\"))
	                   )
	               )
	           )
	           ;; Display locked state of paper space Viewports
	           (alert msg)
	       )
    )
)
")
("DisplaySilhouette" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B83C7164-05D6-4799-8888-2AF89E214D5B"
"
DisplaySilhouette Property (ActiveX)
Controls whether silhouette curves of solid objects are displayed in Wireframe mode.
Supported platforms: Windows only
Signature
VBA:
object.DisplaySilhouette
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Display only silhouette lines for solid objects.
    False: Display isolines for solid objects.
Remarks
The initial value for this property is False.
Note: The value of this property is stored in the DISPSILH system variable.
Examples
VBA:
Sub Example_DisplaySilhouette()
    ' This example returns the current setting of
    ' DisplaySilhouette. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currDisplaySilhouette As Boolean
    
    ' Retrieve the current DisplaySilhouette value
    currDisplaySilhouette = ThisDrawing.Preferences.DisplaySilhouette
    MsgBox \"The current value for DisplaySilhouette is \" & preferences.DisplaySilhouette, vbInformation, \"DisplaySilhouette Example\"
    
    ' Change the value for DisplaySilhouette
    ThisDrawing.Preferences.DisplaySilhouette = Not (currDisplaySilhouette)
    MsgBox \"The new value for DisplaySilhouette is \" & preferences.DisplaySilhouette, vbInformation, \"DisplaySilhouette Example\"
    
    ' Reset DisplaySilhouette to its original value
    ThisDrawing.Preferences.DisplaySilhouette = currDisplaySilhouette
    MsgBox \"The DisplaySilhouette value is reset to \" & preferences.DisplaySilhouette, vbInformation, \"DisplaySilhouette Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DisplaySilhouette()
    ;; This example returns the current setting of
    ;; DisplaySilhouette. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
    
    ;; Retrieve the current DisplaySilhouette value
    (setq currDisplaySilhouette (vla-get-DisplaySilhouette preferences))
    (alert (strcat \"The current value for DisplaySilhouette is \" (if (= currDisplaySilhouette :vlax-true) \"True\" \"False\")))
    
    ;; Change the value for DisplaySilhouette
    (setq newValue (if (= currDisplaySilhouette :vlax-true) :vlax-false :vlax-true))
    (vla-put-DisplaySilhouette preferences newValue)
    (alert (strcat \"The new value for DisplaySilhouette is \" (if (= newValue :vlax-true) \"True\" \"False\")))
    
    ;; Reset DisplaySilhouette to its original value
    (vla-put-DisplaySilhouette preferences currDisplaySilhouette)
    (alert (strcat \"The DisplaySilhouette value is reset to \" (if (= currDisplaySilhouette :vlax-true) \"True\" \"False\")))
)
")
("Document" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0F0245B6-29E9-4B68-AF77-5B46D5341ADA"
            "
Document Property (ActiveX)
Gets the document (drawing) in which the object belongs.
Supported platforms: Windows only
Signature
VBA:
object.Document
object
    Type: All drawing objects, Block, Blocks, Dictionary, Dictionaries, DimStyle, DimStyles, Group, Groups, Layer, Layers, Layout, Layouts, Linetype, Linetypes, ModelSpace, PaperSpace, PlotConfiguration, PlotConfigurations, RegisteredApplication, RegisteredApplications, SectionManager, SectionSettings, SortentsTable, SubDMesh, TableStyle, TextStyle, TextStyles, UCS, UCSs, View, Views, Viewport, Viewports, XRecord
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Document
The document (drawing) that contains the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Document()
    ' This example creates a circle in model space and then
    ' finds the name of the document that the circle resides in.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ZoomAll
    
    ' Find the document name for the circle
    Dim currDoc As AcadDocument
    Set currDoc = circleObj.Document
    
    MsgBox \"The circle resides in: \" & currDoc.name
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Document()
    ;; This example creates a circle in model space and then
    ;; finds the name of the document that the circle resides in.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    ;; Find the document name for the circle
    (setq currDoc (vla-get-Document circleObj))
    
    (alert (strcat \"The circle resides in: \" (vla-get-Name currDoc)))
)
")
("Documents" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2AD2E393-4725-4957-8D1A-90202A25DA03"
             "
Documents Property (ActiveX)
Gets the Documents collection.
Supported platforms: Windows only
Signature
VBA:
object.Documents
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: Yes
Type: Documents
The Documents collection for the current AutoCAD session.
Remarks
The Documents collection allows you to access all the documents, or drawings, in the current AutoCAD session.
Examples
VBA:
Sub Example_Documents()
    ' This example obtains a reference to the Documents collection
    ' and displays information about the loaded documents.
    Dim Document As AcadDocument
    Dim msg As String
    msg = vbCrLf
    
    ' Cycle through the Documents collection and retrieve the names
    ' of the loaded documents
    For Each Document In Documents
        msg = msg & Document.Name & vbCrLf
    Next
    
    ' Display loaded document information
    If Documents.Count > 0 Then
        MsgBox \"The loaded documents are: \" & msg
    Else
        MsgBox \"There are no loaded documents!\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Documents()
    ;; This example obtains a reference to the Documents collection
    ;; and displays information about the loaded documents.
    (setq acadObj (vlax-get-acad-object))
 
    ;; Cycle through the Documents collection and retrieve the names
    ;; of the loaded documents
    (setq msg \"\")
    (vlax-for Document (vla-get-Documents acadObj)
        (setq msg (strcat msg \"\n\" (vla-get-Name Document)))
    )
    
    ;; Display loaded document information
    (if (> (vla-get-Count (vla-get-Documents acadObj)))
        (alert (strcat \"The loaded documents are: \" msg))
        (alert \"There are no loaded documents!\")
    )
)
")
("DogLegged" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D178C870-993B-4A19-8906-9A0CAFF3373E"
             "
DogLegged Property (ActiveX)
The status of the dog-leg.
Supported platforms: Windows only
Signature
VBA:
object.DogLegged
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The horizontal landing is enabled.
    False: The horizontal landing is disabled.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DogLeg()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.DogLegged = True
    oML.DoglegLength = 1.3
    MsgBox \"The dog-leg length is  \" & oML.DoglegLength
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DogLeg()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
				                              1 2 0
				                              2 2 0
				                              3 2 0
				                              4 4 0
				                             )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-DogLegged oML :vlax-true)
    (vla-put-DoglegLength oML 1.3)
    (alert (strcat \"The dog-leg length is \" (rtos (vla-get-DoglegLength oML) 2)))
    (vla-ZoomAll acadObj)
)
")
("DoglegLength" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-23E79ABC-73DF-4377-8BBC-5CEFC1B16B18"
                "
DoglegLength Property (ActiveX)
The length of the dog-leg.
Supported platforms: Windows only
Signature
VBA:
object.DoglegLength
object
    Type: MLeader, MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Specifies the landing distance.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_DogLeg()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.DogLegged = True
    oML.DoglegLength = 1.3
    MsgBox \"The dog-leg length is  \" & oML.DoglegLength
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DogLeg()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
				                              1 2 0
				                              2 2 0
				                              3 2 0
				                              4 4 0
				                             )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-DogLegged oML :vlax-true)
    (vla-put-DoglegLength oML 1.3)
    (alert (strcat \"The dog-leg length is \" (rtos (vla-get-DoglegLength oML) 2)))
    (vla-ZoomAll acadObj)
)
")
("DrawLeaderOrderType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C256D322-FE3F-45FF-A4F1-4CF9C2E7AEEF"
                       "
DrawLeaderOrderType Property (ActiveX)
Specifies the drawLeaderOrderType of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.DrawLeaderOrderType
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcDrawLeaderOrderType enum
    acDrawLeaderHeadFirst
    acDrawLeaderTailFirst
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DrawMLeaderOrderType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-75190D46-F4A0-4D92-950E-846A37934F24"
                        "
DrawMLeaderOrderType Property (ActiveX)
Specifies the drawMLeaderOrderType of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.DrawMLeaderOrderType
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcDrawLeaderOrderType enum
    acDrawLeaderHeadFirst
    acDrawLeaderTailFirst
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("DrawingDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0185B012-9C5B-45BC-8559-83618790A2FE"
"
DrawingDirection Property (ActiveX)
Specifies the direction in which the mtext paragraph is to be read.
Supported platforms: Windows only
Signature
VBA:
object.DrawingDirection
object
    Type: GeoPositionMarker, MText
    The object this property applies to.
Property Value
Read-only: No
Type: acDrawingDirection enum
    acLeftToRight
    acTopToBottom
    acRightToLeft (Reserved for future use)
    acBottomToTop (Reserved for future use)
    acByStyle (Reserved for future use)
Remarks
For languages such as English or Spanish, text is read horizontally, left to right. For languages such as Chinese or Japanese, sometimes text is read vertically, top to bottom. AutoCAD will draw the text according to this property setting.
Left to right
Top to bottom
The settings acRightToLeft, acBottomToTop, and acByStyle are reserved for future use and cannot be used in this release.
Examples
VBA:
Sub Example_DrawingDirection()
    ' This example changes the drawing direction for an MText object
    ' in model space.
    
    Dim MTextObj As AcadMText
    Dim corner1(0 To 2) As Double
    Dim width As Double
    Dim text As String
    
    ' Define the MText object
    corner1(0) = 0#: corner1(1) = 6#: corner1(2) = 0#
    width = 7
    text = \"This is a text String.\"
    ' Create the MText object in model space
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner1, width, text)
    ZoomAll
    
    'Change the drawing direction of the MText object
    MTextObj.DrawingDirection = acLeftToRight
    ZoomAll
    MsgBox \"The DrawingDirection of the text is left to right.\", vbInformation, \"DrawingDirection Example\"
        
    MTextObj.DrawingDirection = acTopToBottom
    ZoomAll
    MsgBox \"The DrawingDirection of the text is top to bottom.\", vbInformation, \"DrawingDirection Example\"
        
    ' Return the drawing direction
    Dim retDirection As Integer
    retDirection = MTextObj.DrawingDirection
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_DrawingDirection()
    ;; This example changes the drawing direction for an MText object
    ;; in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the MText object
    (setq corner1 (vlax-3d-point 0 6 0)  
          width 7
          text \"This is a text String.\")
    ;; Create the MText object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner1 width text))
    (vla-ZoomAll acadObj)
    
    ;; Change the drawing direction of the MText object
    (vla-put-DrawingDirection MTextObj acLeftToRight)
    (vla-ZoomAll acadObj)
    (alert \"The DrawingDirection of the text is left to right.\")
        
    (vla-put-DrawingDirection MTextObj acTopToBottom)
    (vla-ZoomAll acadObj)
    (alert \"The DrawingDirection of the text is top to bottom.\")
        
    ;; Return the drawing direction
    (setq retDirection (vla-get-DrawingDirection MTextObj))
    (alert (strcat \"The current value of DrawingDirection: \" (itoa retDirection)))
)
")
("EdgeExtensionDistances" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-551E3867-8123-4406-9747-E9829033CF10"
"
EdgeExtensionDistances Property (ActiveX)
Specifies the distance by which the edges of surface are extended to merge to an existing surface.
Supported platforms: Windows only
Signature
VBA:
object.EdgeExtensionDistances
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant
The distance by which the edges of surface are extended.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("EffectiveName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A87607A4-D7F9-40B3-94B5-B9D88011DEB5"
                 "
EffectiveName Property (ActiveX)
Specifies the original block name.
Supported platforms: Windows only
Signature
VBA:
object.EffectiveName
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this property applies to.
Property Value
Read-only: Yes
Type: String
The effective name is the name of the block as the user would see it in the user interface. Dynamic blocks may draw themselves with an anonymous block whose name is different than the block name the user sees for the block in the user interface. The Name property returns the name of the block used to draw the reference, while the EffectiveName is the name the user sees for the reference.
Remarks
The ComparedReference and ExternalReference objects inherit this property from BlockReference, but this property doesn't affect either of the object types when used.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Elevation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6A6D826B-9826-436F-877B-B3BC095F6AB3"
             "
Elevation Property (ActiveX)
Specifies the current elevation of the hatch, polyline, or section.
Supported platforms: Windows only
Signature
VBA:
object.Elevation
object
    Type: Hatch, LWPolyline, Polyline, Section
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The current elevation of the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Elevation()
    ' This example creates an associative hatch in model space.
    ' The elevation for that hatch is then changed.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim arcObj As AcadArc
    Dim lineObj As AcadLine
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set arcObj = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set lineObj = ThisDrawing.ModelSpace.AddLine(arcObj.startPoint, arcObj.endPoint)
    
    Set outerLoop(0) = arcObj
    Set outerLoop(1) = lineObj
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Change the viewing direction of the viewport to better see the elevation
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Find the current elevation for the hatch
    Dim currElevation As Double
    currElevation = hatchObj.Elevation
    MsgBox \"The current elevation is \" & hatchObj.Elevation, , \"Elevation Example\"
    
    ' Set the hatch elevation to 3
    hatchObj.Elevation = 3#
    hatchObj.Evaluate
    ZoomAll
    MsgBox \"The elevation is now \" & hatchObj.Elevation, , \"Elevation Example\"
                 
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Elevation()
    ;; This example creates an associative hatch in model space.
    ;; The elevation for that hatch is then changed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType acHatchPatternTypePreDefined
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    ;; Add the arc and line to Model space
    (setq arcObj (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq lineObj (vla-AddLine modelSpace (vla-get-StartPoint arcObj) (vla-get-EndPoint arcObj)))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arcObj)
    (vlax-safearray-put-element outerLoop 1 lineObj)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 (vla-AddCircle modelSpace center radius))
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop2 0 (vla-AddCircle modelSpace center radius))
    (vla-AppendInnerLoop hatchObj innerLoop2)
  
    ;; Change the viewing direction of the viewport to better see the elevation
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)  
    (vla-ZoomAll acadObj)
    
    ;; Find the current elevation for the hatch
    (setq currElevation (vla-get-Elevation hatchObj))
    (alert (strcat \"The current elevation is \" (rtos currElevation 2)))
    
    ;; Set the hatch elevation to 3
    (vla-put-Elevation hatchObj 3)
    (vla-Evaluate hatchObj)
    (vla-ZoomAll acadObj)
    (alert (strcat \"The elevation is now \" (rtos (vla-get-Elevation hatchObj) 2)))
)
")
("ElevationModelSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0CD217EF-B8A0-4338-965C-FDD4DF51F505"
"
ElevationModelSpace Property (ActiveX)
Specifies the elevation setting in model space.
Supported platforms: Windows only
Signature
VBA:
object.ElevationModelSpace
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The elevation setting for model space.
Remarks
The current elevation is the Z value that is used whenever a 3D point is expected but only the X and Y values are supplied. The current elevation is maintained separately in model space and paper space.
Examples
VBA:
Sub Example_ElevationModelSpace()
    ' This example changes the model space elevation of the current drawing
    ' and then resets it to the original value again.
    
    Dim currElevation As Double
    
    currElevation = ThisDrawing.ElevationModelSpace
    MsgBox \"The current model space elevation is \" & ThisDrawing.ElevationModelSpace, vbInformation, \"ElevationModelSpace Example\"
    
    ' Change the elevation
    ThisDrawing.ElevationModelSpace = currElevation + 2
    MsgBox \"The new model space elevation is \" & ThisDrawing.ElevationModelSpace, vbInformation, \"ElevationModelSpace Example\"
    
    ' Reset the elevation to its original value
    ThisDrawing.ElevationModelSpace = currElevation
    MsgBox \"The model space elevation is reset to \" & ThisDrawing.ElevationModelSpace, vbInformation, \"ElevationModelSpace Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ElevationModelSpace()
    ;; This example changes the model space elevation of the current drawing
    ;; and then resets it to the original value again.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq currElevation (vla-get-ElevationModelSpace doc))
    (alert (strcat \"The current model space elevation is \" (rtos currElevation 2)))
    
    ;; Change the elevation
    (vla-put-ElevationModelSpace doc (+ currElevation 2))
    (alert (strcat \"The new model space elevation is \" (rtos (vla-get-ElevationModelSpace doc) 2)))
    
    ;; Reset the elevation to its original value
    (vla-put-ElevationModelSpace doc currElevation)
    (alert (strcat \"The model space elevation is reset to \" (rtos (vla-get-ElevationModelSpace doc) 2)))
)
")
("ElevationPaperSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-58391345-3F39-43E4-90F5-A0F3ADF51F6E"
                       "
ElevationPaperSpace Property (ActiveX)
Specifies the elevation setting in paper space.
Supported platforms: Windows only
Signature
VBA:
object.ElevationPaperSpace
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The elevation for paper space.
Remarks
The current elevation is the Z value that is used whenever a 3D point is expected but only the X and Y values are supplied. The current elevation is maintained separately in model space and paper space.
Examples
VBA:
Sub Example_ElevationPaperSpace()
    ' This example changes the paper space elevation of the current drawing
    ' and then resets it to the original value.
    
    Dim currElevation As Double
    
    currElevation = ThisDrawing.ElevationPaperSpace
    MsgBox \"The current paper space elevation is \" & ThisDrawing.ElevationPaperSpace, vbInformation, \"ElevationpaperSpace Example\"
    
    ' Change the elevation
    ThisDrawing.ElevationPaperSpace = currElevation + 2
    MsgBox \"The new paper space elevation is \" & ThisDrawing.ElevationPaperSpace, vbInformation, \"ElevationpaperSpace Example\"
    
    ' Reset the elevation to its original value
    ThisDrawing.ElevationPaperSpace = currElevation
    MsgBox \"The paper space elevation is reset to \" & ThisDrawing.ElevationPaperSpace, vbInformation, \"ElevationPaperSpace Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ElevationPaperSpace()
    ;; This example changes the paper space elevation of the current drawing
    ;; and then resets it to the original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq currElevation (vla-get-ElevationPaperSpace doc))
    (alert (strcat \"The current paper space elevation is \" (rtos currElevation 2)))
    
    ;; Change the elevation
    (vla-put-ElevationPaperSpace doc (+ currElevation 2))
    (alert (strcat \"The new paper space elevation is \" (rtos (vla-get-ElevationPaperSpace doc) 2)))
    
    ;; Reset the elevation to its original value
    (vla-put-ElevationPaperSpace doc currElevation)
    (alert (strcat \"The paper space elevation is reset to \" (rtos (vla-get-ElevationPaperSpace doc) 2)))
)
")
("EnableBlockRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-43CDB42D-5372-40A3-806D-DFEB5F7E22CD"
                       "
EnableBlockRotation Property (ActiveX)
Specifies the EnableBlockRotation of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.EnableBlockRotation
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Block rotation is enabled.
    False: Block rotation is disabled.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("EnableBlockScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A8B031A1-22A8-4EDC-BAD3-E87A19C053B3"
                    "
EnableBlockScale Property (ActiveX)
Specifies the EnableBlockScale of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.EnableBlockScale
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Block scales are enabled.
    False: Block scales are disabled.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("EnableBreak" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E07F26E8-9B4A-4CC6-8542-04F069FE9554"
"
EnableBreak Property (ActiveX)
Toggles table breaking.
Supported platforms: Windows only
Signature
VBA:
object.EnableBreak
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Table breaks are enabled.
    False: Table breaks are disabled.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BreakHeight()
    ' This example creates a table object and then breaks it into
    ' two tables.
    
    ' Create a new table object in model space
    Dim pt(2) As Double
    
    Dim modelSpace As AcadModelSpace
    Set modelSpace = ThisDrawing.modelSpace
    
    Dim table As AcadTable
    Set table = modelSpace.AddTable(pt, 5, 5, 10, 30)
    
    table.EnableBreak = True
    table.BreakSpacing = 3.5
    table.TableBreakHeight = 35#
    table.AllowManualHeights = True
    table.SetBreakHeight 0, 20#
    table.SetBreakHeight 1, 35#
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BreakHeight()
    ;; This example creates a table object and then breaks it into
    ;; two tables.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new table object in model space
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq table (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-put-EnableBreak table :vlax-true)
    (vla-put-BreakSpacing table 3.5)
    (vla-put-TableBreakHeight table 35.0)
    (vla-put-AllowManualHeights table :vlax-true)
    (vla-SetBreakHeight table 0 20.0)
    (vla-SetBreakHeight table 1 35.0)
    (vla-ZoomExtents acadObj)
)
")
("EnableDogleg" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DD55662D-A0EB-4526-802F-F8CE7950EA13"
"
EnableDogleg Property (ActiveX)
Specifies the enableDogleg of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.EnableDogleg
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Dog legs for the leader line are enabled.
    False: Dog legs for the leader line are disabled.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("EnableFrameText" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-34076F40-C315-4AA6-B14C-89DDC82B47A3"
                   "
EnableFrameText Property (ActiveX)
Specifies the EnableFrameText of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.EnableFrameText
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Text frame is enabled.
    False: Text frame is disabled.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("EnableLanding" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DAACAF20-1BFF-4FE6-9066-4B15C390FE33"
"
EnableLanding Property (ActiveX)
Specifies the enableLanding of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.EnableLanding
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Leader line landings enabled.
    False: Leader line landings disabled.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("EndAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5F2762C5-A24D-4A35-92F3-AC31311BE503"
"
EndAngle Property (ActiveX)
Specifies the end angle of an arc or ellipse.
Supported platforms: Windows only
Signature
VBA:
object.EndAngle
object
    Type: Arc, Ellipse
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The end angle in radians. Use 6.28 radians to specify a closed circle or ellipse.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_EndAngle()
    ' This example creates an ellipse and enters the start and
    ' end angles to create an elliptical arc.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    
    'Enter a start angle of 45 degrees, and an end angle of 270 degrees
    ellObj.startAngle = 45 * (3.14 / 180)
    ellObj.endAngle = 270 * (3.14 / 180)
    ZoomAll
    MsgBox \"This ellipse has a start angle of \" & ellObj.startAngle * (180 / 3.14) & \" and the end angle of \" & ellObj.endAngle * (180 / 3.14) & \" degrees.\", vbInformation, \"EndAngle Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EndAngle()
    ;; This example creates an ellipse and enters the start and
    ;; end angles to create an elliptical arc.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    
    ;; Enter a start angle of 45 degrees, and an end angle of 270 degrees
    (vla-put-StartAngle ellObj (* 45 (/ 3.14 180)))
    (vla-put-EndAngle ellObj (* 270 (/ 3.14 180)))
    (vla-ZoomAll acadObj)
    (alert (strcat \"This ellipse has a start angle of \" (rtos (* (vla-get-StartAngle ellObj) (/ 180 3.14)) 2) \" and the end angle of \" (rtos (* (vla-get-EndAngle ellObj) (/ 180 3.14)) 2) \" degrees.\"))
)
")
("EndDraftAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-84B11D1A-9294-470E-9857-838A8D0B8401"
"
EndDraftAngle Property (ActiveX)
Specifies the draft angle of the surface for the last cross section.
Supported platforms: Windows only
Signature
VBA:
object.EndDraftAngle
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The draft angle of the last cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("EndDraftMagnitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9DB72185-6CB3-4071-81C2-C9D56C7488F5"
                     "
EndDraftMagnitude Property (ActiveX)
Specifies the draft magnitude of the surface for the last cross section.
Supported platforms: Windows only
Signature
VBA:
object.EndDraftMagnitude
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The draft magnitude of the last cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("EndParameter" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2FAAB29B-1BA4-447B-9D52-0FFDE585511C"
"
EndParameter Property (ActiveX)
Specifies the end parameter for an ellipse.
Supported platforms: Windows only
Signature
VBA:
object.EndParameter
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The valid range is 0 to 2*PI.
Remarks
The start and end parameters of the ellipse are calculated based on the following equation:
P(Theta) = A * cos(Theta) + B * sin(Theta)
where A and B are the semimajor and semiminor axes respectively.
For example, if your start angle is Theta1, the corresponding start parameter is P(Theta1) calculated based on the above formula. Similarly, if your end angle is Theta2, the corresponding end parameter is P(Theta2) calculated based on the above formula.
You can use either an angle or a parameter to create the ellipse.
Examples
VBA:
Sub Example_EndParameter()
    ' This example creates an ellipse and enters the start and
    ' end parameters to create an elliptical arc.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    
    ' Enter a start parameter of 1.57, and an end parameter of 6.28
    ellObj.StartParameter = 1.57
    ellObj.EndParameter = 6.28
    ZoomAll
    
    ' Find the start and end parameters for the ellipse
    MsgBox \"The ellipse has a start parameter of \" & ellObj.StartParameter & \" and an end parameter of \" & ellObj.EndParameter, vbInformation, \"EndParameter Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EndParameter()
    ;; This example creates an ellipse and enters the start and
    ;; end parameters to create an elliptical arc.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    
    ;; Enter a start parameter of 1.57, and an end parameter of 6.28
    (vla-put-StartParameter ellObj 1.57)
    (vla-put-EndParameter ellObj 6.28)
    (vla-ZoomAll acadObj)
    
    ;; Find the start and end parameters for the ellipse
    (alert (strcat \"The ellipse has a start parameter of \" (rtos (vla-get-StartParameter ellObj) 2) \" and an end parameter of \" (rtos (vla-get-EndParameter ellObj) 2)))
)
")
("EndPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-76ADF16D-0D2F-47C5-8EBA-DFC449334045"
            "
EndPoint Property (ActiveX)
Specifies the endpoint for the arc, line, or ellipse.
Supported platforms: Windows only
Signature
VBA:
object.EndPoint
object
    Type: Arc, Ellipse, Line
    The objects this property applies to.
Property Value
Read-only: Yes, except the Line object which is read-write
Type: Variant (three-element array of doubles)
A 3D coordinate representing the endpoint of the object.
Remarks
The endpoint for an arc, ellipse, and line
Note: You cannot change the endpoint of an arc or an ellipse. To edit an arc, use the EndAngle and Radius properties. To edit an ellipse, use the EndAngle, MajorAxis, and RadiusRatio properties.
Examples
VBA:
Sub Example_EndPoint()
    ' This example creates an elliptical arc and then
    ' finds the coordinates of its start and end points.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    Dim startPoint As Variant
    Dim endPoint As Variant
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    
    ' Enter a start angle of 45 degrees, and an end angle of 270 degrees
    ellObj.startAngle = 45 * (3.14 / 180)
    ellObj.endAngle = 270 * (3.14 / 180)
    ZoomAll
    
    ' Find the start and endpoints for the ellipse
    startPoint = ellObj.startPoint
    endPoint = ellObj.endPoint
    MsgBox \"This ellipse has a start point of \" & startPoint(0) & \", \" & startPoint(1) & \", \" & startPoint(2) & \" and an endpoint of \" & endPoint(0) & \", \" & endPoint(1) & \", \" & endPoint(2), vbInformation, \"EndPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EndPoint()
    ;; This example creates an elliptical arc and then
    ;; finds the coordinates of its start and end points.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    
    ;; Enter a start angle of 45 degrees, and an end angle of 270 degrees
    (vla-put-StartAngle ellObj (* 45 (/ 3.14 180)))
    (vla-put-EndAngle ellObj (* 270 (/ 3.14 180)))
    (vla-ZoomAll acadObj)
    
    ;; Find the start and endpoints for the ellipse
    (setq startPoint (vlax-safearray->list (vlax-variant-value (vla-get-StartPoint ellObj))))
    (setq endPoint (vlax-safearray->list (vlax-variant-value (vla-get-EndPoint ellObj))))
    (alert (strcat \"This ellipse has a start point of \" (rtos (nth 0 startPoint) 2) \", \"
		                                        (rtos (nth 1 startPoint) 2) \", \"
		                                        (rtos (nth 2 startPoint) 2) \" and an endpoint of \"
		                                        (rtos (nth 0 endPoint) 2) \", \"
		                                        (rtos (nth 1 endPoint) 2) \", \"
		                                        (rtos (nth 2 endPoint) 2)))
)
")
("EndSmoothContinuity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1338397E-742A-499E-8A21-9C92B2286049"
"
EndSmoothContinuity Property (ActiveX)
Specifies the tangency and curvature of the last cross section.
Supported platforms: Windows only
Signature
VBA:
object.EndSmoothContinuity
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The tangency and curvature of the last cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("EndSmoothMagnitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DD7CC060-95A2-432D-BD53-026A177B5485"
                      "
EndSmoothMagnitude Property (ActiveX)
Specifies the size of the curve of the last cross section.
Supported platforms: Windows only
Signature
VBA:
object.EndSmoothMagnitude
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
The size of the curve of the last cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("EndTangent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CAB1F069-A8AB-441D-8D15-98E562DE0677"
"
EndTangent Property (ActiveX)
Specifies the end tangent of the spline as a directional vector.
Supported platforms: Windows only
Signature
VBA:
object.EndTangent
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A directional vector representing the end tangent of the spline.
Remarks
When a spline is elevated, it is converted from an interpolated (fit) spline to a control point spline. This means that after elevation, the spline no longer has fit tangents and the StartTangent and EndTangent properties for the spline are no longer accessible. The only way to edit a control point spline is through the ControlPoints property, or the SetControlPoint or GetControlPoint methods.
Examples
VBA:
Sub Example_EndTangent()
    ' This example creates a spline. It then queries the current setting for
    ' the EndTangent, and then changes the EndTangent to a new value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim msg As String
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ZoomAll
    GoSub GETPOINTS
    MsgBox \"The EndTangent for the spline is \" & msg, vbInformation, \"EndTangent Example\"
    ' Change the end tangent of Spline to (1.5,0.707,2)
    Dim newTan(0 To 2) As Double
    newTan(0) = 1.5: newTan(1) = 0.707: newTan(2) = 2
    splineObj.EndTangent = newTan
    ThisDrawing.Regen True
    GoSub GETPOINTS
    MsgBox \"The EndTangent has been changed to \" & msg, vbInformation, \"EndTangent Example\"
    Exit Sub
GETPOINTS:
    msg = \"\"
    ' Get the coordinates from the end tangent
    Dim count As Integer
    For count = 0 To 2
        msg = msg & Format(splineObj.EndTangent(count), \"0.###\") & \", \"
    Next
    msg = VBA.Left(msg, Len(msg) - 2)
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_EndTangent()
    ;; This example creates a spline. It then queries the current setting for
    ;; the EndTangent, and then changes the EndTangent to a new value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    (setq msg \"\")
    ;; Get the coordinates from the end tangent
    (setq endTangent (vlax-safearray->list (vlax-variant-value (vla-get-EndTangent splineObj))))
    (setq msg (strcat msg (rtos (nth 0 endTangent) 2 3) \",\"
		          (rtos (nth 1 endTangent) 2 3) \",\"
		          (rtos (nth 2 endTangent) 2 3)))
    (alert (strcat \"The EndTangent for the spline is \" msg))
    ;; Change the end tangent of Spline to (1.5,0.707,2)
    (setq newTan (vlax-3d-point 1.5 0.707 2))
    (vla-put-EndTangent splineObj newTan)
    (vla-Regen doc :vlax-true)
    (setq msg \"\")
    (setq endTangent (vlax-safearray->list (vlax-variant-value (vla-get-EndTangent splineObj))))
    (setq msg (strcat msg (rtos (nth 0 endTangent) 2 3) \",\"
		          (rtos (nth 1 endTangent) 2 3) \",\"
		          (rtos (nth 2 endTangent) 2 3)))
    (alert (strcat \"The EndTangent has been changed to \" msg))
)
")
("EntityColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3AAFA129-2543-49B3-B649-A62EB4975FEC"
               "
EntityColor Property (ActiveX)
Specifies the color value of the true color.
Supported platforms: Windows only
Signature
VBA:
object.EntityColor
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The color value of the true color.
Remarks
This property specifies the 32-bit AcCmEntityColor portion of the color.
Examples
VBA:
Sub Example_EntityColor()
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Dim y As Long
    y = MakeLong(MakeWord(194, 122), MakeWord(133, 144))
    color.EntityColor = y
    Dim line As AcadLine
    Set line = CreateLine
    line.TrueColor = color
    Dim retcolor As AcadAcCmColor
    Set retcolor = line.TrueColor
    
    Dim x As Long
    x = retcolor.EntityColor
    
    Dim BreakLong(3) As Byte
    BreakLong(0) = x And &HFF&
    BreakLong(1) = (x And &HFF00&) \ &H100&
    BreakLong(2) = (x And &HFF0000) \ &H10000
    BreakLong(3) = (x And &H7F000000) \ &H1000000
    If x < 0 Then BreakLong(3) = BreakLong(3) Or &H80
    
    MsgBox \"ColorMethod = \" & BreakLong(3) & vbCrLf & _
     \"Red = \" & BreakLong(2) & vbCrLf & _
     \"Green = \" & BreakLong(1) & vbCrLf & _
     \"Blue = \" & BreakLong(0)
End Sub
Private Function CreateLine() As AcadLine
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
    
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    Set CreateLine = lineObj
    ZoomAll
End Function
Private Function MakeLong(WordHi As Variant, WordLo As Integer) As Long
   ' High word is coerced to a variant on the call, to allow
   ' it to overflow the limits of multiplication, which shifts
   ' it left.
   MakeLong = (WordHi * &H10000) + (WordLo And &HFFFF&)
End Function
Private Function MakeWord(ByteHi As Byte, ByteLo As Byte) As Integer
   ' If the high byte would push the final result out of the
   ' signed integer range, it must be slid back.
   If ByteHi > &H7F Then
      MakeWord = ((ByteHi * &H100&) + ByteLo) - &H10000
   Else
      MakeWord = (ByteHi * &H100&) + ByteLo
   End If
End Function
Visual LISP:
(vl-load-com)
(defun c:Example_EntityColor()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
  
    (setq y (MakeLong (MakeWord 194 122) (MakeWord 133 144)))
    (vla-put-EntityColor color y)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq line (CreateLine))
    (vla-put-TrueColor line color)
    (setq retcolor (vla-get-TrueColor line))
    
    (setq x (vla-get-EntityColor retcolor))
    
    (setq BreakLong (vlax-make-safearray vlax-vbDouble '(0 . 3)))
    (vlax-safearray-put-element BreakLong 0 (logand x 255))
    (vlax-safearray-put-element BreakLong 1 (/ (logand x 65280) 256))
    (vlax-safearray-put-element BreakLong 2 (/ (logand x 16711680) 65536))
    (vlax-safearray-put-element BreakLong 3 (/ (logand x 2130706432) 16777216))
    (if (< x 0)
        (vlax-safearray-put-element BreakLong 3 (logior (fix (vlax-safearray-get-element BreakLong 3)) 128))
    )
    
    (alert (strcat \"ColorMethod = \" (itoa (fix (vlax-safearray-get-element BreakLong 3))) \"\n\"
                   \"Red = \" (itoa (fix (vlax-safearray-get-element BreakLong 2))) \"\n\"
                   \"Green = \" (itoa (fix (vlax-safearray-get-element BreakLong 1))) \"\n\"
                   \"Blue = \" (itoa (fix (vlax-safearray-get-element BreakLong 0)))))
    (vlax-release-object color)
)
(defun CreateLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0)) 
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    lineObj
)
(defun MakeLong (WordHi WordLo)
   ;; High word is coerced to a variant on the call, to allow
   ;; it to overflow the limits of multiplication, which shifts
   ;; it left.
   (+ (* WordHi 65536) (logand WordLo 65535))
)
(defun MakeWord(ByteHi ByteLo)
   ;; If the high byte would push the final result out of the
   ;; signed integer range, it must be slid back.
   (if (> ByteHi 127)
      (- (+ (* ByteHi 256) ByteLo) 65536)
      (+ (* ByteHi 256) ByteLo)
   )
)
")
("EntityTransparency" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2D91A428-3C88-42D3-AB77-9B578EEF7F2F"
"
EntityTransparency Property (ActiveX)
Specifies the transparency value for the entity.
Supported platforms: Windows only
Signature
VBA:
object.EntityTransparency
object
    Type: All drawing objects
    The object this property applies to.
Property Value
Read-only: No
Type: String
Use one of the following values:
    ByLayer: Transparency value determined by layer
    ByBlock: Transparency value determined by block
    0: Fully opaque (not transparent)
    1-90: Transparency value defined as a percentage
Remarks
When representing a percentage of transparency for an entity, the string value is of an integer and not a double.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Explodable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FF5DD779-77B1-4CC6-9573-A3BA3ABCEBFA"
              "
Explodable Property (ActiveX)
Specifies whether the block can be exploded.
Supported platforms: Windows only
Signature
VBA:
object.Explodable
object
    Type: Block
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The block can be exploded.
    False: The block cannot be exploded.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ExtLine1EndPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1271F0E6-8032-48BD-A0CF-9E0B2E902F28"
"
ExtLine1EndPoint Property (ActiveX)
Specifies the endpoint of the first extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine1EndPoint
object
    Type: Dim3PointAngular, DimAngular
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the endpoint of the first extension line.
Remarks
The ExtLine1EndPoint and ExtLine2EndPoint properties contain the endpoints of the extension lines. If no extension lines exist for a given dimension, these points will equal ExtLine1StartPoint and ExtLine2StartPoint.
Examples
VBA:
Sub Example_ExtLine1EndPoint()
    ' This example creates an angular dimension. It then changes
    ' the location of the ExtLine1EndPoint.
    
    Dim dimObj As AcadDimAngular
    Dim angVert(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the dimension
    angVert(0) = 0#: angVert(1) = 5#: angVert(2) = 0#
    FirstPoint(0) = 1#: FirstPoint(1) = 7#: FirstPoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    TextPoint(0) = 3#: TextPoint(1) = 5#: TextPoint(2) = 0#
    
    ' Create the angular dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAngular(angVert, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    MsgBox \"The current value of ExtLine1EndPoint is \" & dimObj.ExtLine1EndPoint(0) & \", \" & dimObj.ExtLine1EndPoint(1) & \", \" & dimObj.ExtLine1EndPoint(2), vbInformation, \"ExtLine1EndPoint Example\"
    
    ' Change the endpoint of the first extension line
    SecondPoint(0) = 0: SecondPoint(1) = 3: SecondPoint(2) = 0
    dimObj.ExtLine1EndPoint = SecondPoint
    dimObj.Update
    
    ' Return the endpoint of the first extension line
    ' Note that the return value is a Variant
    Dim retPnt As Variant
    retPnt = dimObj.ExtLine1EndPoint
    MsgBox \"The new value of ExtLine1EndPoint is \" & dimObj.ExtLine1EndPoint(0) & \", \" & dimObj.ExtLine1EndPoint(1) & \", \" & dimObj.ExtLine1EndPoint(2), vbInformation, \"ExtLine1EndPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine1EndPoint()
    ;; This example creates an angular dimension. It then changes
    ;; the location of the ExtLine1EndPoint.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq AngleVertex (vlax-3d-point 0 5 0)
          FirstPoint (vlax-3d-point 1 7 0)
          SecondPoint (vlax-3d-point 1 3 0)
          TextPoint (vlax-3d-point 3 5 0))
    ;; Create the angular dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    (setq extLineEndPoint (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine1EndPoint dimObj))))
    (alert (strcat \"The current value of ExtLine1EndPoint is \" (rtos (nth 0 extLineEndPoint) 2) \", \"
		                                               (rtos (nth 1 extLineEndPoint) 2) \", \"
		                                               (rtos (nth 2 extLineEndPoint) 2)))
    
    ;; Change the endpoint of the first extension line
    (setq SecondPoint (vlax-3d-point 0 3 0))
    (vla-put-ExtLine1EndPoint dimObj SecondPoint)
    (vla-Update dimObj)
    
    ;; Return the endpoint of the first extension line
    ;; Note that the return value is a Variant
    (setq retPnt (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine1EndPoint dimObj))))
    (alert (strcat \"The new value of ExtLine1EndPoint is \" (rtos (nth 0 retPnt) 2) \", \"
		                                           (rtos (nth 1 retPnt) 2) \", \"
		                                           (rtos (nth 2 retPnt) 2)))
)
")
("ExtLine1Linetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-249DB279-AD2A-4A4C-AEB0-85CB5B8FB111"
"
ExtLine1Linetype Property (ActiveX)
Specifies the linetype of the first extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine1Linetype
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: String
The linetype of the first extension line.
Remarks
Note: This property overrides the value of the DIMLTEX1 system variable for the given dimension.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ExtLine1Point" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A141951B-45D4-4085-8AB8-D79434194577"
                 "
ExtLine1Point Property (ActiveX)
Specifies the origin of extension line 1.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine1Point
object
    Type: DimAligned, DimArcLength
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the origin of the first extension line.
Remarks
The dimension line of an aligned dimension will be parallel to the line joining the origins of extension lines 1 and 2.
Line to be dimensioned
Dimension created
Examples
VBA:
Sub Example_ExtLine1Point()
    ' This example creates an aligned dimension and then changes the
    ' ExtLine1Point property for that dimension.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 5#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 5#: point2(2) = 0#
    location(0) = 5#: location(1) = 7#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
    MsgBox \"The current value for ExtLine1Point is \" & dimObj.ExtLine1Point(0) & \", \" & dimObj.ExtLine1Point(1) & \", \" & dimObj.ExtLine1Point(2), vbInformation, \"ExtLine1Point Example\"
    
    ' Change the endpoint of the first extension line
    point1(0) = 2: point1(1) = 5: point1(2) = 0
    dimObj.ExtLine1Point = point1
    dimObj.Update
    
    ' Return the endpoint of the first extension line
    ' Note that the return value is a Variant
    Dim retPnt As Variant
    retPnt = dimObj.ExtLine1Point
    
    MsgBox \"The new value for ExtLine1Point is \" & dimObj.ExtLine1Point(0) & \", \" & dimObj.ExtLine1Point(1) & \", \" & dimObj.ExtLine1Point(2), vbInformation, \"ExtLine1Point Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine1Point()
    ;; This example creates an aligned dimension and then changes the
    ;; ExtLine1Point property for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    (setq extLinePoint (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine1Point dimObj))))
    (alert (strcat \"The current value for ExtLine1Point is \" (rtos (nth 0 extLinePoint) 2) \", \"
		                                             (rtos (nth 1 extLinePoint) 2) \", \"
		                                             (rtos (nth 2 extLinePoint) 2)))
  
    ;; Change the endpoint of the first extension line
    (setq point1 (vlax-3d-point 2 5 0))
    (vla-put-ExtLine1Point dimObj point1)
    (vla-Update dimObj)
    
    ;; Return the endpoint of the first extension line
    ;; Note that the return value is a Variant
    (setq retPnt (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine1Point dimObj))))
    (alert (strcat \"The new value for ExtLine1Point is \" (rtos (nth 0 retPnt) 2) \", \"
		                                         (rtos (nth 1 retPnt) 2) \", \"
		                                         (rtos (nth 2 retPnt) 2)))
)
")
("ExtLine1StartPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1B665189-04A4-47D8-BCE7-8E70E3CE6A14"
"
ExtLine1StartPoint Property (ActiveX)
Specifies the start point of the first extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine1StartPoint
object
    Type: DimAngular
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the start point of the first extension line.
Remarks
The ExtLine1StartPoint and ExtLine2StartPoint properties are equal to the FirstEndPoint and SecondEndPoint parameters from the AddDimAngular method. The extension lines are originally drawn from the FirstEndPoint and SecondEndPoint locations to the intersection of the dimension line. AutoCAD draws the dimension line as an arc between the extension lines.
Examples
VBA:
Sub Example_ExtLine1StartPoint()
    ' This example creates an angular dimension. It then changes
    ' the location of the ExtLine1StartPoint.
    
    Dim dimObj As AcadDimAngular
    Dim angVert(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the dimension
    angVert(0) = 0#: angVert(1) = 5#: angVert(2) = 0#
    FirstPoint(0) = 1#: FirstPoint(1) = 7#: FirstPoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    TextPoint(0) = 3#: TextPoint(1) = 5#: TextPoint(2) = 0#
    
    ' Create the angular dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAngular(angVert, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    MsgBox \"The current value of ExtLine1StartPoint is \" & dimObj.ExtLine1StartPoint(0) & \", \" & dimObj.ExtLine1StartPoint(1) & \", \" & dimObj.ExtLine1StartPoint(2), vbInformation, \"ExtLine1StartPoint Example\"
    
    ' Change the start point of the first extension line
    FirstPoint(0) = 0: FirstPoint(1) = 3: FirstPoint(2) = 0
    dimObj.ExtLine1StartPoint = FirstPoint
    dimObj.Update
    
    ' Return the start point of the first extension line
    ' Note that the return value is a Variant
    Dim retPnt As Variant
    retPnt = dimObj.ExtLine1StartPoint
    MsgBox \"The new value of ExtLine1StartPoint is \" & dimObj.ExtLine1StartPoint(0) & \", \" & dimObj.ExtLine1StartPoint(1) & \", \" & dimObj.ExtLine1StartPoint(2), vbInformation, \"ExtLine1StartPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine1StartPoint()
    ;; This example creates an angular dimension. It then changes
    ;; the location of the ExtLine1StartPoint.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq AngleVertex (vlax-3d-point 0 5 0)
          FirstPoint (vlax-3d-point 1 7 0)
          SecondPoint (vlax-3d-point 1 3 0)
          TextPoint (vlax-3d-point 3 5 0))
    ;; Create the angular dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    (setq extLineStartPoint (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine1StartPoint dimObj))))
    (alert (strcat \"The current value of ExtLine1StartPoint is \" (rtos (nth 0 extLineStartPoint) 2) \", \"
		                                                 (rtos (nth 1 extLineStartPoint) 2) \", \"
		                                                 (rtos (nth 2 extLineStartPoint) 2)))
    
    ;; Change the start point of the first extension line
    (setq FirstPoint (vlax-3d-point 0 3 0))
    (vla-put-ExtLine1StartPoint dimObj FirstPoint)
    (vla-Update dimObj)
    
    ;; Return the start point of the first extension line
    ;; Note that the return value is a Variant
    (setq retPnt (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine1StartPoint dimObj))))
    (alert (strcat \"The new value of ExtLine1StartPoint is \" (rtos (nth 0 retPnt) 2) \", \"
		                                             (rtos (nth 1 retPnt) 2) \", \"
		                                             (rtos (nth 2 retPnt) 2)))
)
")
("ExtLine1Suppress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4611E161-14B1-44A3-88C2-6563E9E557D2"
"
ExtLine1Suppress Property (ActiveX)
Specifies the suppression of the first extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine1Suppress
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the first extension line.
    False: Do not suppress the first extension line.
Remarks
The initial value for this property is False.
Note: This property overrides the value of the DIMSE1 system variable for the given dimension.
Examples
VBA:
Sub Example_ExtLine1Suppress()
    ' This example creates a Dim3PointAngular object in model space
    ' and suppresses the extension lines using the ExtLine1Suppress
    ' and ExtLine2Suppress properties
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim Line1Suppressed As String, Line2Suppressed As String
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current extension line suppression information
    Line1Suppressed = IIf(DimPointAngularObj.ExtLine1Suppress, \"is suppressed\", \"is not suppressed\")
    Line2Suppressed = IIf(DimPointAngularObj.ExtLine2Suppress, \"is suppressed\", \"is not suppressed\")
    
    MsgBox \"Line one of the extension \" & Line1Suppressed & vbCrLf & _
           \"Line two of the extension \" & Line2Suppressed
    ' Suppress line one of the extension
    DimPointAngularObj.ExtLine1Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line one of the extension is now suppressed\"
    
    ' Suppress line two of the extension
    DimPointAngularObj.ExtLine2Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line two of the extension is now suppressed\"
   
    ' Turn both extension lines back on
    DimPointAngularObj.ExtLine1Suppress = False
    DimPointAngularObj.ExtLine2Suppress = False
    ThisDrawing.Regen acAllViewports
    MsgBox \"Both extension lines are now visible again\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine1Suppress()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and suppresses the extension lines using the ExtLine1Suppress
    ;; and ExtLine2Suppress properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current extension line suppression information
    (setq Line1Suppressed (if (= (vla-get-ExtLine1Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    (setq Line2Suppressed (if (= (vla-get-ExtLine2Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    
    (alert (strcat \"Line one of the extension \" Line1Suppressed \"\n\"
                   \"Line two of the extension \" Line2Suppressed))
    ;; Suppress line one of the extension
    (vla-put-ExtLine1Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line one of the extension is now suppressed\")
    
    ;; Suppress line two of the extension
    (vla-put-ExtLine2Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line two of the extension is now suppressed\")
   
    ;; Turn both extension lines back on
    (vla-put-ExtLine1Suppress DimPointAngularObj :vlax-false)
    (vla-put-ExtLine2Suppress DimPointAngularObj :vlax-false)
    (vla-Regen doc acAllViewports)
    (alert \"Both extension lines are now visible again\")
)
")
("ExtLine2EndPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8B2F838F-56E5-430C-98DE-6AF1B7B929FD"
                    "
ExtLine2EndPoint Property (ActiveX)
Specifies the endpoint of the second extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine2EndPoint
object
    Type: Dim3PointAngular, DimAngular
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the endpoint of the second extension line.
Remarks
The ExtLine1EndPoint and ExtLine2EndPoint properties contain the endpoints of the extension lines. If no extension lines exist for a given dimension, these points will equal ExtLine1StartPoint and ExtLine2StartPoint.
Examples
VBA:
Sub Example_ExtLine2EndPoint()
    ' This example creates an angular dimension. It then changes
    ' the location of the ExtLine2EndPoint.
    
    Dim dimObj As AcadDimAngular
    Dim angVert(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the dimension
    angVert(0) = 0#: angVert(1) = 5#: angVert(2) = 0#
    FirstPoint(0) = 1#: FirstPoint(1) = 7#: FirstPoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    TextPoint(0) = 3#: TextPoint(1) = 5#: TextPoint(2) = 0#
    
    ' Create the angular dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAngular(angVert, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    MsgBox \"The current value of ExtLine2EndPoint is \" & dimObj.ExtLine2EndPoint(0) & \", \" & dimObj.ExtLine2EndPoint(1) & \", \" & dimObj.ExtLine2EndPoint(2), vbInformation, \"ExtLine2EndPoint Example\"
    
    ' Change the endpoint of the second extension line
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    dimObj.ExtLine2EndPoint = SecondPoint
    dimObj.Update
    
    ' Return the endpoint of the second extension line
    ' Note that the return value is a Variant
    Dim retPnt As Variant
    retPnt = dimObj.ExtLine2EndPoint
    MsgBox \"The new value of ExtLine2EndPoint is \" & dimObj.ExtLine2EndPoint(0) & \", \" & dimObj.ExtLine2EndPoint(1) & \", \" & dimObj.ExtLine2EndPoint(2), vbInformation, \"ExtLine2EndPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine2EndPoint()
    ;; This example creates an angular dimension. It then changes
    ;; the location of the ExtLine2EndPoint.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq AngleVertex (vlax-3d-point 0 5 0)
          FirstPoint (vlax-3d-point 1 7 0)
          SecondPoint (vlax-3d-point 1 3 0)
          TextPoint (vlax-3d-point 3 5 0))
    ;; Create the angular dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    (setq extLineEndPoint (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine2EndPoint dimObj))))
    (alert (strcat \"The current value of ExtLine2EndPoint is \" (rtos (nth 0 extLineEndPoint) 2) \", \"
		                                               (rtos (nth 1 extLineEndPoint) 2) \", \"
		                                               (rtos (nth 2 extLineEndPoint) 2)))
    
    ;; Change the endpoint of the second extension line
    (setq SecondPoint (vlax-3d-point 1 4 0))
    (vla-put-ExtLine2EndPoint dimObj SecondPoint)
    (vla-Update dimObj)
    
    ;; Return the endpoint of the second extension line
    ;; Note that the return value is a Variant
    (setq retPnt (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine2EndPoint dimObj))))
    (alert (strcat \"The new value of ExtLine2EndPoint is \" (rtos (nth 0 retPnt) 2) \", \"
		                                           (rtos (nth 1 retPnt) 2) \", \"
		                                           (rtos (nth 2 retPnt) 2)))
)
")
("ExtLine2Linetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0DC1F9E2-3CDE-4303-8D18-10E18818F6AF"
                    "
ExtLine2Linetype Property (ActiveX)
Specifies the linetype of the second extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine2Linetype
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: String
The linetype of the second extension line.
Remarks
Note: This property overrides the value of the DIMLTEX2 system variable for the given dimension.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ExtLine2Point" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A63F1BA4-E105-42C7-951D-043672E61891"
                 "
ExtLine2Point Property (ActiveX)
Specifies the origin of extension line 2.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine2Point
object
    Type: DimAligned, DimArcLength
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the origin of the second extension line.
Remarks
The dimension line of an aligned dimension will be parallel to the origins of extension lines 1 and 2.
Line to be dimensioned
Dimension created
Examples
VBA:
Sub Example_ExtLine2Point()
    ' This example creates an aligned dimension and then changes the
    ' ExtLine2Point property for that dimension.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 5#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 5#: point2(2) = 0#
    location(0) = 5#: location(1) = 7#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
    MsgBox \"The current value for ExtLine2Point is \" & dimObj.ExtLine2Point(0) & \", \" & dimObj.ExtLine2Point(1) & \", \" & dimObj.ExtLine2Point(2), vbInformation, \"ExtLine2Point Example\"
    
    ' Change the endpoint of the second extension line
    point1(0) = 12: point1(1) = 5: point1(2) = 0
    dimObj.ExtLine2Point = point1
    dimObj.Update
    
    ' Return the endpoint of the second extension line
    ' Note that the return value is a Variant
    Dim retPoint As Variant
    retPoint = dimObj.ExtLine2Point
    
    MsgBox \"The new value for ExtLine2Point is \" & dimObj.ExtLine2Point(0) & \", \" & dimObj.ExtLine2Point(1) & \", \" & dimObj.ExtLine2Point(2), vbInformation, \"ExtLine2Point Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine2Point()
    ;; This example creates an aligned dimension and then changes the
    ;; ExtLine2Point property for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    (setq extLinePoint (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine2Point dimObj))))
    (alert (strcat \"The current value for ExtLine2Point is \" (rtos (nth 0 extLinePoint) 2) \", \"
		                                             (rtos (nth 1 extLinePoint) 2) \", \"
		                                             (rtos (nth 2 extLinePoint) 2)))
      
    ;; Change the endpoint of the second extension line
    (setq point2 (vlax-3d-point 12 5 0))
    (vla-put-ExtLine2Point dimObj point2)
    (vla-Update dimObj)
    
    ;; Return the endpoint of the second extension line
    ;; Note that the return value is a Variant
    (setq retPnt (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine2Point dimObj))))
    (alert (strcat \"The new value for ExtLine2Point is \" (rtos (nth 0 retPnt) 2) \", \"
		                                         (rtos (nth 1 retPnt) 2) \", \"
		                                         (rtos (nth 2 retPnt) 2)))
)
")
("ExtLine2StartPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-929C0F0E-1F05-4FDC-BADB-37B24EE5A221"
"
ExtLine2StartPoint Property (ActiveX)
Specifies the start point of the second extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine2StartPoint
object
    Type: DimAngular
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D coordinate representing the start point of the second extension line.
Remarks
The ExtLine1StartPoint and ExtLine2StartPoint properties are equal to the FirstEndPoint and SecondEndPoint parameters from the AddDimAngular method. The extension lines are originally drawn from the FirstEndPoint and SecondEndPoint locations to the intersection of the dimension line. AutoCAD draws the dimension line as an arc between the extension lines.
Examples
VBA:
Sub Example_ExtLine2StartPoint()
    ' This example creates an angular dimension. It then changes
    ' the location of the ExtLine2StartPoint.
    
    Dim dimObj As AcadDimAngular
    Dim angVert(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the dimension
    angVert(0) = 0#: angVert(1) = 5#: angVert(2) = 0#
    FirstPoint(0) = 1#: FirstPoint(1) = 7#: FirstPoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    TextPoint(0) = 3#: TextPoint(1) = 5#: TextPoint(2) = 0#
    
    ' Create the angular dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAngular(angVert, FirstPoint, SecondPoint, TextPoint)
    ZoomAll
    MsgBox \"The current value of ExtLine2StartPoint is \" & dimObj.ExtLine2StartPoint(0) & \", \" & dimObj.ExtLine2StartPoint(1) & \", \" & dimObj.ExtLine2StartPoint(2), vbInformation, \"ExtLine2StartPoint Example\"
    
    ' Change the start point of the second extension line
    FirstPoint(0) = 1: FirstPoint(1) = 4: FirstPoint(2) = 0
    dimObj.ExtLine2StartPoint = FirstPoint
    dimObj.Update
    
    ' Return the start point of the second extension line
    ' Note that the return value is a Variant
    Dim retPnt As Variant
    retPnt = dimObj.ExtLine2StartPoint
    MsgBox \"The new value of ExtLine2StartPoint is \" & dimObj.ExtLine2StartPoint(0) & \", \" & dimObj.ExtLine2StartPoint(1) & \", \" & dimObj.ExtLine2StartPoint(2), vbInformation, \"ExtLine2StartPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine2StartPoint()
    ;; This example creates an angular dimension. It then changes
    ;; the location of the ExtLine2StartPoint.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq AngleVertex (vlax-3d-point 0 5 0)
          FirstPoint (vlax-3d-point 1 7 0)
          SecondPoint (vlax-3d-point 1 3 0)
          TextPoint (vlax-3d-point 3 5 0))
    
    ;; Create the angular dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
  
    (setq extLineStartPoint (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine2StartPoint dimObj))))
    (alert (strcat \"The current value of ExtLine2StartPoint is \" (rtos (nth 0 extLineStartPoint) 2) \", \"
		                                                 (rtos (nth 1 extLineStartPoint) 2) \", \"
		                                                 (rtos (nth 2 extLineStartPoint) 2)))
    
    ;; Change the start point of the second extension line
    (setq FirstPoint (vlax-3d-point 1 4 0))
    (vla-put-ExtLine2StartPoint dimObj FirstPoint)
    (vla-Update dimObj)
    
    ;; Return the start point of the second extension line
    ;; Note that the return value is a Variant
    (setq retPnt (vlax-safearray->list (vlax-variant-value (vla-get-ExtLine2StartPoint dimObj))))
    (alert (strcat \"The new value of ExtLine2StartPoint is \" (rtos (nth 0 retPnt) 2) \", \"
		                                             (rtos (nth 1 retPnt) 2) \", \"
		                                             (rtos (nth 2 retPnt) 2)))
)
")
("ExtLine2Suppress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C9AD1C32-CBFB-4B56-8674-EB3DA1C014DB"
"
ExtLine2Suppress Property (ActiveX)
Specifies the suppression of the second extension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtLine2Suppress
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the second extension line.
    False: Do not suppress the second extension line.
Remarks
The initial value for this property is False.
Note: This property overrides the value of the DIMSE2 system variable for the given dimension.
Examples
VBA:
Sub Example_ExtLine2Suppress()
    ' This example creates a Dim3PointAngular object in model space
    ' and suppresses the extension lines using the ExtLine1Suppress
    ' and ExtLine2Suppress properties
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim Line1Suppressed As String, Line2Suppressed As String
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current extension line suppression information
    Line1Suppressed = IIf(DimPointAngularObj.ExtLine1Suppress, \"is suppressed\", \"is not suppressed\")
    Line2Suppressed = IIf(DimPointAngularObj.ExtLine2Suppress, \"is suppressed\", \"is not suppressed\")
    
    MsgBox \"Line one of the extension \" & Line1Suppressed & vbCrLf & _
           \"Line two of the extension \" & Line2Suppressed
    ' Suppress line one of the extension
    DimPointAngularObj.ExtLine1Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line one of the extension is now suppressed\"
    
    ' Suppress line two of the extension
    DimPointAngularObj.ExtLine2Suppress = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Line two of the extension is now suppressed\"
   
    ' Turn both extension lines back on
    DimPointAngularObj.ExtLine1Suppress = False
    DimPointAngularObj.ExtLine2Suppress = False
    ThisDrawing.Regen acAllViewports
    MsgBox \"Both extension lines are now visible again\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtLine2Suppress()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and suppresses the extension lines using the ExtLine1Suppress
    ;; and ExtLine2Suppress properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current extension line suppression information
    (setq Line1Suppressed (if (= (vla-get-ExtLine1Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    (setq Line2Suppressed (if (= (vla-get-ExtLine2Suppress DimPointAngularObj) :vlax-true) \"is suppressed\" \"is not suppressed\"))
    
    (alert (strcat \"Line one of the extension \" Line1Suppressed \"\n\"
                   \"Line two of the extension \" Line2Suppressed))
    ;; Suppress line one of the extension
    (vla-put-ExtLine1Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line one of the extension is now suppressed\")
    
    ;; Suppress line two of the extension
    (vla-put-ExtLine2Suppress DimPointAngularObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Line two of the extension is now suppressed\")
   
    ;; Turn both extension lines back on
    (vla-put-ExtLine1Suppress DimPointAngularObj :vlax-false)
    (vla-put-ExtLine2Suppress DimPointAngularObj :vlax-false)
    (vla-Regen doc acAllViewports)
    (alert \"Both extension lines are now visible again\")
)
")
("ExtLineFixedLen" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7BA97EAE-5A53-42CF-B405-28272D2BA5BF"
                   "
ExtLineFixedLen Property (ActiveX)
Set extension line fixed length.
Supported platforms: Windows only
Signature
VBA:
object.ExtLineFixedLen
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimOrdinate, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: Double
The fixed length of the extension line.
Remarks
Note: This property overrides the value of the DIMFXL system variable for the given dimension.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ExtLineFixedLenSuppress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-33060046-AACD-474D-9FC6-419A8EAC22BE"
                           "
ExtLineFixedLenSuppress Property (ActiveX)
Sets suppression of extension line fixed length On or Off.
Supported platforms: Windows only
Signature
VBA:
object.ExtLineFixedLenSuppress
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimOrdinate, DimRotated
    The objects to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Extension line fixed length enabled.
    False: Extension line fixed length disabled.
Remarks
Note: This property overrides the value of the DIMFXLON system variable for the given dimension.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ExtLineFixedLenSupress" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-422CB04D-A597-472F-B13B-72498DB8ECA3"
"
CMDNAMES (системная переменная)
Отображение имен активных и прозрачных команд.
(Только чтение)
Тип:	Строка
Сохранен в:	Не сохранен
Начальное значение:	\"\"
Например, значение переменной LINE'ZOOM указывает на то, что команда ПОКАЗАТЬ используется в прозрачном режиме во время выполнения команды ОТРЕЗОК.
Переменная предназначена для использования с интерфейсами программирования, такими как AutoLISP, ActiveX Automation (недоступно в AutoCAD LT) и DIESEL.
Приведенный ниже несложный пример демонстрирует, как с помощью DIESEL можно индицировать имена выполняемых команд в строке состояния.
Команда: modemacro
Новое значение MODEMACRO, или . если нет <\"\">: $(getvar, cmdnames)
Понятия, связанные с данным
    Переключение между диалоговыми окнами и командной строкой
Ссылки, связанные с данной
    Команды для работы с окном приложения
")
("ExtensionLineColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C93DB94D-B3D0-46A3-8B81-F3B92D4CB345"
"
ExtensionLineColor Property (ActiveX)
Specifies the color for dimension extension lines.
Supported platforms: Windows only
Signature
VBA:
object.ExtensionLineColor
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimOrdinate, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acColor enum
Use a color index number from 0 to 256, or one of the constants listed here:
    acByBlock
    acByLayer
    acRed
    acYellow
    acGreen
    acCyan
    acBlue
    acMagenta
    acWhite
Remarks
Colors can be set and read as numeric index values ranging from 0 to 256. Constants have been provided for the standard seven colors, as well as the BYBLOCK and BYLAYER designations.
If you use acByBlock, AutoCAD draws new objects in the default color (white or black, depending on your configuration) until they are grouped into the block. When the block is inserted in the drawing, the objects in the block inherit the current setting of the color property.
If you use acByLayer, new objects assume the color of the layer upon which they are drawn.
Note: This property overrides the value of the DIMCLRE system variable for the given dimension object.
Examples
VBA:
Sub Example_ExtensionLineColor()
    ' This example creates a Dim3PointAngular object in model space
    ' and changes the extension line color to red using the ExtensionLineColor property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current dimension line color
    MsgBox \"The extension line color for this object is currently set to: \" & DimPointAngularObj.ExtensionLineColor
    ' Change the extension line color
    DimPointAngularObj.ExtensionLineColor = acRed
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current extension line color
    MsgBox \"The extension line color for this object is now set to: \" & DimPointAngularObj.ExtensionLineColor & \" (Red)\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtensionLineColor()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and changes the extension line color to red using the ExtensionLineColor property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current dimension line color
    (alert (strcat \"The extension line color for this object is currently set to: \" (itoa (vla-get-ExtensionLineColor DimPointAngularObj))))
    ;; Change the extension line color
    (vla-put-ExtensionLineColor DimPointAngularObj acRed)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current extension line color
    (alert (strcat \"The extension line color for this object is now set to: \" (itoa (vla-get-ExtensionLineColor DimPointAngularObj)) \" (Red)\"))
)
")
("ExtensionLineExtend" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-15B9259B-0F39-4FB9-9DB0-8B61116102AC"
                       "
ExtensionLineExtend Property (ActiveX)
Specifies the distance the extension line extends beyond the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.ExtensionLineExtend
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A positive real number specifying the distance to extend the extension line beyond the dimension line.
Remarks
The initial value for this property is 0.1800.
Note: This property overrides the value of the DIMEXE system variable for the given dimension.
Examples
VBA:
Sub Example_ExtensionLineExtend()
    ' This example creates a Dim3PointAngular object in model space
    ' and changes the length of the extension line to extend 1.5 units past
    ' the dimension using the ExtensionLineExtend property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current extension line extend length
    MsgBox \"The extension line currently extends \" & DimPointAngularObj.ExtensionLineExtend & \" units past the dimension\"
    ' Change the extension line extend length to extend 1.5
    ' units past the dimension
    DimPointAngularObj.ExtensionLineExtend = 1.5
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current extension line extend length
    MsgBox \"The extension line now extends \" & DimPointAngularObj.ExtensionLineExtend & \" units past the dimension\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtensionLineExtend()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and changes the length of the extension line to extend 1.5 units past
    ;; the dimension using the ExtensionLineExtend property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current extension line extend length
    (alert (strcat \"The extension line currently extends \" (rtos (vla-get-ExtensionLineExtend DimPointAngularObj) 2) \" units past the dimension\"))
    ;; Change the extension line extend length to extend 1.5
    ;; units past the dimension
    (vla-put-ExtensionLineExtend DimPointAngularObj 1.5)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current extension line extend length
    (alert (strcat \"The extension line now extends \" (rtos (vla-get-ExtensionLineExtend DimPointAngularObj) 2) \" units past the dimension\"))
)
")
("ExtensionLineOffset" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C179EEAD-D390-474D-9D1C-7181C0797512"
"
ExtensionLineOffset Property (ActiveX)
Specifies the distance the extension lines are offset from the origin points.
Supported platforms: Windows only
Signature
VBA:
object.ExtensionLineOffset
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A positive real number specifying the distance to offset the extension line beyond the origin points.
Remarks
The initial value for this property is 0.0625.
Note: This property overrides the value of the DIMEXO system variable for the given dimension.
Examples
VBA:
Sub Example_ExtensionLineOffset()
    ' This example creates a Dim3PointAngular object in model space
    ' and changes the offset of the extension lines using the
    ' ExtensionLineOffset property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current offset of the extension lines from the control points
    MsgBox \"The extension lines are currently offset \" & DimPointAngularObj.ExtensionLineOffset & \" units\"
    ' Change the extension lines offset distance from the control points
    DimPointAngularObj.ExtensionLineOffset = 1.5
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current offset of the extension lines from the control points
    MsgBox \"The extension lines are now offset \" & DimPointAngularObj.ExtensionLineOffset & \" units\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtensionLineOffset()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and changes the offset of the extension lines using the
    ;; ExtensionLineOffset property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current offset of the extension lines from the control points
    (alert (strcat \"The extension lines are currently offset \" (rtos (vla-get-ExtensionLineOffset DimPointAngularObj) 2) \" units\"))
    ;; Change the extension lines offset distance from the control points
    (vla-put-ExtensionLineOffset DimPointAngularObj 1.5)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current offset of the extension lines from the control points
    (alert (strcat \"The extension lines are now offset \" (rtos (vla-get-ExtensionLineOffset DimPointAngularObj) 2) \" units\"))
)
")
("ExtensionLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FCC4B614-561B-434A-BAFB-5BA68C39FFAB"
                       "
ExtensionLineWeight Property (ActiveX)
Specifies the lineweight for the extension lines.
Supported platforms: Windows only
Signature
VBA:
object.ExtensionLineWeight
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimOrdinate, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acLineWeight enum
    acLnWtByLayer
    acLnWtByBlock
    acLnWtByLwDefault
    acLnWt000
    acLnWt005
    acLnWt009
    acLnWt013
    acLnWt015
    acLnWt018
    acLnWt020
    acLnWt025
    acLnWt030
    acLnWt035
    acLnWt040
    acLnWt050
    acLnWt053
    acLnWt060
    acLnWt070
    acLnWt080
    acLnWt090
    acLnWt100
    acLnWt106
    acLnWt120
    acLnWt140
    acLnWt158
    acLnWt200
    acLnWt211
Remarks
The initial value for this property is acLnWtByBlock.
Lineweight settings are only visible when the LineweightDisplay property is set to True.
Note: This property overrides the value of the DIMLWE system variable for the given dimension.
Examples
VBA:
Sub Example_ExtensionLineWeight()
    ' This example creates a Dim3PointAngular object in model space
    ' and changes the extension lineweight to a thicker value
    ' using the ExtensionLineWeight property
    
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    Dim oldLWSetting As Boolean
    Dim CurrentSetting As String
    
    ' Turn on lineweight display to see the changes
    oldLWSetting = ThisDrawing.preferences.LineWeightDisplay
    ThisDrawing.preferences.LineWeightDisplay = True
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current extension lineweight
    CurrentSetting = DimPointAngularObj.ExtensionLineWeight
    Select Case CurrentSetting
        Case acLnWtByLayer: CurrentSetting = \"ByLayer\"
        Case acLnWtByBlock: CurrentSetting = \"ByBlock\"
        Case acLnWtByLwDefault: CurrentSetting = \"ByDefault\"
        Case Else
    End Select
    
    MsgBox \"The extension lineweight for this object is currently set to: \" & CurrentSetting
    ' Change the extension lineweight
    DimPointAngularObj.ExtensionLineWeight = acLnWt100
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current extension lineweight
    MsgBox \"The extension line weight for this object is now set to: \" & DimPointAngularObj.ExtensionLineWeight
    
    ' Return previous lineweight setting
    ThisDrawing.preferences.LineWeightDisplay = oldLWSetting
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ExtensionLineWeight()
    ;; This example creates a Dim3PointAngular object in model space
    ;; and changes the extension lineweight to a thicker value
    ;; using the ExtensionLineWeight property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
  
    ;; Turn on lineweight display to see the changes
    (setq oldLWSetting (vla-get-LineWeightDisplay preferences))
    (vla-put-LineWeightDisplay preferences :vlax-true)
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq DimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current extension lineweight
    (setq CurrentSetting (vla-get-ExtensionLineWeight DimPointAngularObj))
    (cond
        ((= acLnWtByLayer CurrentSetting)(setq CurrentSetting \"ByLayer\"))
        ((= acLnWtByBlock CurrentSetting)(setq CurrentSetting \"ByBlock\"))
        ((= acLnWtByLwDefault CurrentSetting)(setq CurrentSetting \"ByDefault\"))
	                                            (setq CurrentSetting (itoa CurrentSetting))
    )
    
    (alert (strcat \"The extension lineweight for this object is currently set to: \" CurrentSetting))
    ;; Change the extension lineweight
    (vla-put-ExtensionLineWeight DimPointAngularObj acLnWt100)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current extension lineweight
    (alert (strcat \"The extension line weight for this object is now set to: \" (itoa (vla-get-ExtensionLineWeight DimPointAngularObj))))
    
    ;; Return previous lineweight setting
    (vla-put-ExtensionLineWeight DimPointAngularObj oldLWSetting)
)
")
("Fade" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C7B05F48-5D90-42E9-805E-326F4767E7B9"
        "
Fade Property (ActiveX)
Specifies the current fade value of a raster or underlay image.
Supported platforms: Windows only
Signature
VBA:
object.Fade
object
    Type: DgnUnderlay, DwfUnderlay, GeomapImage, PdfUnderlay, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Long
The value is between 0 and 100 inclusive.
Remarks
You can adjust the raster or underlay image brightness, contrast, and fade to the display of the image as well as to the plotted output without affecting the original raster or underlay file. Adjust brightness to darken or lighten an image. Adjust contrast to make images with poor quality easier to read. Adjust fade to make vectors easier to see over images and to create a watermark effect in your plotted output.
Note: Bitonal images cannot be adjusted for brightness, contrast, or fade.
Examples
VBA:
Sub Example_Fade()
    ' This example inserts a raster image and finds the current
    ' Fade value of the image. It then changes the Fade value
    ' of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have the image, or if it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotAngleInDegree As Double
    Dim rotAngle As Double
    Dim imageName As String
    Dim raster As AcadRasterImage
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotAngleInDegree = 0#
    rotAngle = rotAngleInDegree * 3.141592 / 180#
    
    On Error Resume Next
    
    ' Creates a raster image in model space
    Set raster = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotAngle)
    If Err.Description = \"Filer error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ' Find the current Fade
    ThisDrawing.Regen True
    MsgBox \"The Fade is currently set to: \" & raster.Fade, vbInformation
    
    ' Change the Fade to 5
    raster.Fade = 50
    ThisDrawing.Regen True
    MsgBox \"The Fade is now set to: \" & raster.Fade, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Fade()
    ;; This example inserts a raster image and finds the current
    ;; Fade value of the image. It then changes the Fade value
    ;; of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 2 2 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotAngle (/ (* 0 3.141592) 180))
    (if (/= (findfile imageName) nil)
        (progn
            ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq raster (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotAngle))
            (vla-ZoomExtents acadObj)
            ;; Find the current Fade
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The Fade is currently set to: \" (rtos (vla-get-Fade raster) 2)))
    
            ;; Change the Fade to 5
            (vla-put-Fade raster 5)
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The Fade is now set to: \" (rtos (vla-get-Fade raster) 2)))	  
	)
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("FieldLength" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D2944C82-C67C-4C8D-B5DF-0496CA6318BE"
               "
FieldLength Property (ActiveX)
Specifies the field length of the attribute.
Supported platforms: Windows only
Signature
VBA:
object.FieldLength
object
    Type: Attribute, AttributeReference
    The objects this property applies to.
Property Value
Read-only: No
Type: Integer
The field length of the attribute.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_FieldLength()
    ' This example creates an attribute definition in model space.
    ' It then queries the initial value of the FieldLength property,
    ' changes that value, and finally resets the value.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"New_Tag\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
    ' Return the current field length of the attribute
    Dim currFieldLength As Integer
    currFieldLength = attributeObj.FieldLength
    MsgBox \"The FieldLength of the attribute is \" & attributeObj.FieldLength, vbInformation, \"FieldLength Example\"
    
    ' Change the field length
    attributeObj.FieldLength = currFieldLength + 2
    attributeObj.Update
    MsgBox \"The new FieldLength of the attribute is \" & attributeObj.FieldLength, vbInformation, \"FieldLength Example\"
    
    ' Reset the field length to the original value
    attributeObj.FieldLength = currFieldLength
    attributeObj.Update
    MsgBox \"The FieldLength of the attribute is reset to \" & attributeObj.FieldLength, vbInformation, \"FieldLength Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FieldLength()
    ;; This example creates an attribute definition in model space.
    ;; It then queries the initial value of the FieldLength property,
    ;; changes that value, and finally resets the value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0)
          height 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace height attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
    
    ;; Return the current field length of the attribute
    (setq currFieldLength (vla-get-FieldLength attributeObj))
    (alert (strcat \"The FieldLength of the attribute is \" (itoa currFieldLength)))
    
    ;; Change the field length
    (setq newFieldLength (+ currFieldLength 2))
    (vla-put-FieldLength attributeObj newFieldLength)
    (vla-Update attributeObj)
    (alert (strcat \"The new FieldLength of the attribute is \" (itoa newFieldLength)))
    
    ;; Reset the field length to the original value
    (vla-put-FieldLength attributeObj currFieldLength)
    (vla-Update attributeObj)
    (alert (strcat \"The FieldLength of the attribute is reset to \" (itoa currFieldLength)))
)
")
("File" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-223D48A9-D1A5-4D53-BDA7-37CC37F16FA2"
"
File Property (ActiveX)
Specifies the path to the underlay file.
Supported platforms: Windows only
Signature
VBA:
object.File
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: String
The path to the underlay file.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("FirstSegmentAngleConstraint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D017142F-E957-44EA-9E7F-CA4D76E64EC5"
                               "
FirstSegmentAngleConstraint Property (ActiveX)
Specifies the FirstSegmentAngleConstraint of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.FirstSegmentAngleConstraint
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The first segment's angle constraint value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Fit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8AD82E1B-6C98-46A2-A7FC-4CF38BB36AB8"
"
Fit Property (ActiveX)
Specifies the placement of text and arrowheads inside or outside extension lines, based on the available space between the extension lines.
Supported platforms: Windows only
Signature
VBA:
object.Fit
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimFit enum
    acTextAndArrows: This option places both the text and arrowheads inside the extension lines.
    acArrowsOnly: This option places only the arrowheads inside the extension lines. The text is placed outside the arrowheads.
    acTextOnly: This option places only the text inside the extension lines. The arrowheads are placed outside the extension lines.
    acBestFit: This option places the text and arrowheads in the best fit location given the space available.
    When enough space is available for text and arrowheads, this option places both between the extension lines.
    When enough space is available for text only, this option places the text between the extension lines and places the arrowheads outside the extension lines.
    When enough space is available for arrowheads only, this option places them between the extension lines and places the text outside the extension lines.
    When space is available for neither text nor arrowheads, this option places them both outside the extension lines.
Remarks
The initial value for this property is acBestFit.
The Fit property sets priorities for moving text and arrowheads when space is not available to fit both within the extension lines.
Note: This property overrides the value of the DIMATFIT system variable for the given dimension.
Examples
VBA:
Sub Example_Fit()
    ' This example creates an aligned dimension in model space
    ' and cycles the text fit of the dimension to a couple of common values
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentFit As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 6: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
    ' Read and display current dimension line fit information
    Select Case dimObj.Fit
        Case acTextAndArrows:   CurrentFit = \"Text and Arrows\"
        Case acArrowsOnly:      CurrentFit = \"Arrows Only\"
        Case acTextOnly:        CurrentFit = \"Text Only\"
        Case acBestFit:         CurrentFit = \"Best Fit\"
    End Select
    
    MsgBox \"The current dimension fit is set to: \" & CurrentFit
    ' Change the fit to arrows only
    dimObj.Fit = acArrowsOnly
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension fit has been changed to arrows only\"
    
    ' Change the fit to text only
    dimObj.Fit = acTextOnly
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension fit has been changed to text only\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Fit()
    ;; This example creates an aligned dimension in model space
    ;; and cycles the text fit of the dimension to a couple of common values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 6 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Read and display current dimension line fit information
    (setq CurrentFit (vla-get-Fit dimObj))
    (cond
        ((= acTextAndArrows CurrentFit)(setq CurrentFit \"Text and Arrows\"))
        ((= acArrowsOnly CurrentFit)(setq CurrentFit \"Arrows Only\"))
        ((= acTextOnly CurrentFit)(setq CurrentFit \"Text Only\"))
        ((= acBestFit CurrentFit)(setq CurrentFit \"Best Fit\"))
	                                (setq CurrentFit (itoa CurrentFit))
    )
    
    (alert (strcat \"The current dimension fit is set to: \" CurrentFit))
    ;; Change the fit to arrows only
    (vla-put-Fit dimObj acArrowsOnly)
    (vla-Regen doc acAllViewports)
    (alert \"The dimension fit has been changed to arrows only\")
    
    ;; Change the fit to text only
    (vla-put-Fit dimObj acTextOnly)
    (vla-Regen doc acAllViewports)
    (alert \"The dimension fit has been changed to text only\")
)
")
("FitPoints" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EA703EA6-E4E2-47AD-B91D-C341EFA35F79"
"
FitPoints Property (ActiveX)
Specifies the fit points of a spline.
Supported platforms: Windows only
Signature
VBA:
object.FitPoints
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (array of doubles)
An array of 3D WCS coordinates representing the fit points of the spline.
Remarks
The fit points define the path of the spline. You can change the tolerance of a given fit point by using the FitTolerance property. You can add a fit point by using the AddFitPoint method. You can delete a fit point by using the DeleteFitPoint method. You can query the location of a fit point by using the GetFitPoint method. You can change the location of a given fit point by using the SetFitPoint method.
Examples
VBA:
Sub Example_FitPoints()
    ' This example creates a Spline object in model space, reads the fit points
    ' of the Spline and then modifies the fit points of the Spline.
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double, endTan(0 To 2) As Double
    Dim FPoints(0 To 8) As Double
    Dim UserMessage As String
    Dim fitPoints As Variant
    Dim iCount As Long, iPoint As Integer
    Dim NewFP(0 To 2) As Double
    
    ' Define the Spline object
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    FPoints(0) = 0: FPoints(1) = 0: FPoints(2) = 0
    FPoints(3) = 5:   FPoints(4) = 5: FPoints(5) = 0
    FPoints(6) = 10: FPoints(7) = 0: FPoints(8) = 0
    
    ' Create new Spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(FPoints, startTan, endTan)
    ThisDrawing.Application.ZoomAll
    
    ' Display fit points for this Spline
    GoSub DISPLAYPOINTS
    
    ' Modify an existing fit point for this Spline
    fitPoints(0) = 3
    splineObj.fitPoints = fitPoints
    
    ' Now add a new fit point
    NewFP(0) = 15: NewFP(1) = 4: NewFP(2) = 0
    splineObj.AddFitPoint splineObj.NumberOfFitPoints + 1, NewFP
        
    ThisDrawing.Application.ZoomAll
            
    ' Display new fit points for this Spline
    GoSub DISPLAYPOINTS
        
    Exit Sub
    
DISPLAYPOINTS:
    fitPoints = splineObj.fitPoints
    
    ' Display in groups of three
    UserMessage = \"\"
    iPoint = 0
    For iCount = 0 To UBound(fitPoints) Step 3
        iPoint = iPoint + 1
        UserMessage = UserMessage & iPoint & \")\" & vbTab
        UserMessage = UserMessage & fitPoints(iCount)
        UserMessage = UserMessage & \", \" & fitPoints(iCount + 1)
        UserMessage = UserMessage & \", \" & fitPoints(iCount + 2)
        UserMessage = UserMessage & vbCrLf
    Next
    
    MsgBox \"The \" & splineObj.NumberOfFitPoints & \" Spline fit points are: \" & vbCrLf & vbCrLf & UserMessage
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FitPoints()
    ;; This example creates a Spline object in model space, reads the fit points
    ;; of the Spline and then modifies the fit points of the Spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display fit points for this Spline
    (setq fitPoints (vlax-variant-value (vla-get-FitPoints splineObj)))
    
    ;; Display in groups of three
    (setq UserMessage \"\"
          iPoint 0
	         iCount 0)
    (while (>= (vlax-safearray-get-u-bound fitPoints 1) iCount)
        (setq iPoint (1+ iPoint))
        (setq UserMessage (strcat UserMessage (itoa iPoint) \")  \"
                                  (rtos (vlax-safearray-get-element fitPoints iCount) 2) \",  \"
                                  (rtos (vlax-safearray-get-element fitPoints (+ iCount 1)) 2) \",  \"
                                  (rtos (vlax-safearray-get-element fitPoints (+ iCount 2)) 2) \"\n\"))
        (setq iCount (+ iCount 3))
    )
    
    (alert (strcat \"The \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" Spline fit points are: \n\n\" UserMessage))
    
    ;; Modify an existing fit point for this Spline
    (vlax-safearray-put-element fitPoints 0 3)
    (vla-put-FitPoints splineObj fitPoints)
    
    ;; Now add a new fit point
    (setq NewFP (vlax-3d-point 15 4 0))
  
    (vla-AddFitPoint splineObj (+ (vla-get-NumberOfFitPoints splineObj) 1) NewFP)
        
    (vla-ZoomAll acadObj)
            
    ;; Display new fit points for this Spline
    (setq fitPoints (vlax-variant-value (vla-get-FitPoints splineObj)))
    (setq UserMessage \"\"
          iPoint 0
	         iCount 0)
    (while (>= (vlax-safearray-get-u-bound fitPoints 1) iCount)
        (setq iPoint (1+ iPoint))
        (setq UserMessage (strcat UserMessage (itoa iPoint) \")  \"
                                  (rtos (vlax-safearray-get-element fitPoints iCount) 2) \",  \"
                                  (rtos (vlax-safearray-get-element fitPoints (+ iCount 1)) 2) \",  \"
                                  (rtos (vlax-safearray-get-element fitPoints (+ iCount 2)) 2) \"\n\"))
        (setq iCount (+ iCount 3))
    )
    (alert (strcat \"The \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" Spline fit points are: \n\n\" UserMessage))  
)
")
("FitTolerance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7A98F43E-DD80-4F24-BDBC-3447827FB0B0"
"
FitTolerance Property (ActiveX)
Refits the spline to the existing points with new tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.FitTolerance
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The fit tolerance cannot be a negative number.
Remarks
If the fit tolerance is set to zero, then the spline will pass through all the fit points. Providing a value greater than zero allows the curve to pass through the fit points within the specified tolerance.
Examples
VBA:
Sub Example_FitTolerance()
    ' This example creates a spline object in model space.
    ' It then changes the FitTolerance property of that spline.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Find the current FitTolerance value
    Dim currFitTolerance As Double
    currFitTolerance = splineObj.FitTolerance
    MsgBox \"The current FitTolerance is \" & currFitTolerance, vbInformation, \"FitTolerance Example\"
    ' Change the fit tolerance value
    splineObj.FitTolerance = 5
    ZoomAll
    MsgBox \"The FitTolerance is now \" & splineObj.FitTolerance, vbInformation, \"FitTolerance Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FitTolerance()
    ;; This example creates a spline object in model space.
    ;; It then changes the FitTolerance property of that spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
				     5 5 0
				     10 0 0
				    )
    )
  
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Find the current FitTolerance value
    (setq currFitTolerance (vla-get-FitTolerance splineObj))
    (alert (strcat \"The current FitTolerance is \" (rtos currFitTolerance 2)))
    ;; Change the fit tolerance value
    (vla-put-FitTolerance splineObj 5)
    (vla-ZoomAll acadObj)
    (alert (strcat \"The FitTolerance is now \" (rtos (vla-get-FitTolerance splineObj) 2)))
)
")
("FlowDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-76BAA2AF-8250-4D01-853D-0EC792EDFBD1"
"
FlowDirection Property (ActiveX)
Specifies whether the title and header rows are at the bottom or the top of the table.
Supported platforms: Windows only
Signature
VBA:
object.FlowDirection
object
    Type: Table, TableStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcTableDirection enum
Specify one of the following constants for the location of the title and header rows.
    acTableBottomToTop: Table flow direction of bottom to top; value = 1
    acTableTopToBottom: Table flow direction of top to bottom (default); value = 0
Remarks
No additional remarks.
Examples
VBA:
Sub Example_FlowDirection()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FlowDirection()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("FontFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DD2E1EB8-3BDE-46B6-ADC4-636234CCB3E7"
"
FontFile Property (ActiveX)
Specifies the primary font file name and the path.
Supported platforms: Windows only
Signature
VBA:
object.FontFile
object
    Type: TextStyle
    The object this property applies to.
Property Value
Read-only: No
Type: String
The primary font file path.
Remarks
To specify an Asian-language font file, use the BigFontFile property.
Fonts define the shapes of the text characters that make up each character set.
Note: Once this property has been set, you must call the Regen method to see the changes to the text.
Examples
VBA:
Sub Example_FontFile()
    ' This example returns the current setting of
    ' the FontFile property. It then changes the value, and
    ' finally resets the value back to the original setting.
    
    Dim textStyle1 As AcadTextStyle
    Dim currFontFile As String
    Dim newFontFile As String
    
    Set textStyle1 = ThisDrawing.ActiveTextStyle
    
    ' Retrieve the current FontFile value
    currFontFile = textStyle1.fontFile
    MsgBox \"The current value for FontFile is \" & currFontFile, vbInformation, \"FontFile Example\"
    
    ' Change the value for FontFile
    newFontFile = \"C:/AutoCAD/Fonts/italic.shx\"
    textStyle1.fontFile = newFontFile
    MsgBox \"The new value for FontFile is \" & textStyle1.fontFile, vbInformation, \"FontFile Example\"
        
    ' Reset font file
    textStyle1.fontFile = currFontFile
    MsgBox \"The value for FontFile has been reset to \" & textStyle1.fontFile, vbInformation, \"FontFile Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FontFile()
    ;; This example returns the current setting of
    ;; the FontFile property. It then changes the value, and
    ;; finally resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq textStyle1 (vla-get-ActiveTextStyle doc))
    
    ;; Retrieve the current FontFile value
    (setq currFontFile (vla-get-FontFile textStyle1))
    (alert (strcat \"The current value for FontFile is \" currFontFile))
    
    ;; Change the value for FontFile
    (setq newFontFile (findfile \"./Fonts/italic.shx\"))
    (vla-put-FontFile textStyle1 newFontFile)
    (alert (strcat \"The new value for FontFile is \" (vla-get-FontFile textStyle1)))
        
    ;; Reset font file
    (if (= (findfile currFontFile) nil)
	(setq currFontFile (findfile (strcat (getenv \"WinDir\") \"\\Fonts\\\" currFontFile)))
    )
  
    (vla-put-FontFile textStyle1 (findfile currFontFile))
    (alert (strcat \"The value for FontFile has been reset to \" (vla-get-FontFile textStyle1)))
)
")
("ForceLineInside" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-285E26AB-0228-4522-9564-84B899172FAF"
                   "
ForceLineInside Property (ActiveX)
Specifies whether a dimension line is drawn between the extension lines even when the text is placed outside the extension lines.
Supported platforms: Windows only
Signature
VBA:
object.ForceLineInside
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Draw dimension lines between the measured points when arrowheads are placed outside the measured points.
    False: Do not draw dimension lines between the measured points when arrowheads are placed outside the measured points.
Remarks
The initial value for this property is False.
For radius and diameter dimensions (when the TextInside property is set to False), this property draws a dimension line and arrowheads inside the circle or arc and places the text and leader outside.
Note: This property overrides the value of the DIMTOFL system variable for the given dimension.
Examples
VBA:
Sub Example_ForceLineInside()
    ' This example creates an aligned dimension in model space
    ' and toggles dimension lines to be drawn between extension lines
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentValue As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current line suppression information
    CurrentValue = IIf(dimObj.ForceLineInside, \"are\", \"are not\")
    MsgBox \"Dimension lines \" & CurrentValue & \" forced between the extension lines\"
    ' Force the display of dimension lines between the extension lines
    dimObj.ForceLineInside = True
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension lines are forced between the extension lines\"
   
    ' Do not force the display of dimension lines between the extension lines (default)
    dimObj.ForceLineInside = False
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension lines are not forced between the extension lines\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ForceLineInside()
    ;; This example creates an aligned dimension in model space
    ;; and toggles dimension lines to be drawn between extension lines
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current line suppression information
    (setq CurrentValue (if (= (vla-get-ForceLineInside dimObj) :vlax-true) \"are\" \"are not\"))
    (alert (strcat \"Dimension lines \" CurrentValue \" forced between the extension lines\"))
    ;; Force the display of dimension lines between the extension lines
    (vla-put-ForceLineInside dimObj :vlax-true)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension lines are forced between the extension lines\")
   
    ;; Do not force the display of dimension lines between the extension lines (default)
    (vla-put-ForceLineInside dimObj :vlax-false)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension lines are not forced between the extension lines\")
)
")
("FractionFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-70B3796C-1CAA-417D-B4A7-34533379A290"
                  "
FractionFormat Property (ActiveX)
Specifies the format of fractional values in dimensions and tolerances.
Supported platforms: Windows only
Signature
VBA:
object.FractionFormat
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimFractionType enum
    acHorizontal
    acDiagonal
    acNotStacked
Remarks
This property is used when the UnitsFormat property is set to acDimLArchitectural or acDimLFractional.
Note: This property overrides the value of the DIMFRAC system variable for the given dimension.
Examples
VBA:
Sub Example_FractionFormat()
    ' This example creates an aligned dimension in model space and
    ' uses FractionFormat to cycle through some fractional formats
    ' for the dimension.
    ' * Note the appearance of the \"1/2\" component of the dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
    ' Switch to a mode that works with the FractionFormat property
    dimObj.UnitsFormat = acDimLArchitectural
      
    ' Cycle through some common fractional formats
    
    dimObj.FractionFormat = acDiagonal      ' Change format to Diagonal
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension format is now set to diagonal\"
    
    dimObj.FractionFormat = acHorizontal    ' Change format to Horizontal
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension format is now set to horizontal\"
    dimObj.FractionFormat = acNotStacked    ' Change format to NotStacked
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension format is now unstacked\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FractionFormat()
   ;; This example creates an aligned dimension in model space and
   ;; uses FractionFormat to cycle through some fractional formats
   ;; for the dimension.
   ;; * Note the appearance of the \"1/2\" component of the dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Switch to a mode that works with the FractionFormat property
    (vla-put-UnitsFormat dimObj acDimLArchitectural)
      
    ;; Cycle through some common fractional formats
    (vla-put-FractionFormat dimObj acDiagonal)      ;; Change format to Diagonal
    (vla-Regen doc acAllViewports)
    (alert \"The dimension format is now set to diagonal\")
    
    (vla-put-FractionFormat dimObj acHorizontal)    ;; Change format to Horizontal
    (vla-Regen doc acAllViewports)
    (alert \"The dimension format is now set to horizontal\")
    (vla-put-FractionFormat dimObj acNotStacked)    ;; Change format to NotStacked
    (vla-Regen doc acAllViewports)
    (alert \"The dimension format is now unstacked\")
)
")
("Freeze" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1B5D15DA-4C0A-470E-ABD9-E004B74C83AA"
          "
Freeze Property (ActiveX)
Specifies the freeze status of a layer.
Supported platforms: Windows only
Signature
VBA:
object.Freeze
object
    Type: Layer
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Freeze the layer.
    False: Thaw the layer.
Remarks
Freezing layers makes them invisible and excludes them from regeneration and plotting. Thawing a layer enables these capabilities. AutoCAD surfaces and circles on a turned-off or frozen layer are invisible, but they still hide objects when you use the HIDE, SHADEMODE, or RENDER commands.
You cannot freeze the active layer, or make a frozen layer active.
This property differs from the LayerOn property because frozen layers are not generated during a regeneration.
Examples
VBA:
Sub Example_Freeze()
    ' This example creates a new layer called \"Freeze\".
    ' It then displays the status of the Freeze property
    ' for the new layer, toggles the status of the
    ' Freeze property, and again displays its status.
    ' After running this example, you can check the layer
    ' control on the Object Properties tool bar. It will
    ' show the new layer and the latest Freeze status.
    
    Dim layerObj As AcadLayer
    
    ' Create the new layer
    Set layerObj = ThisDrawing.Layers.Add(\"Freeze\")
    
    ' Display the Freeze status of the new layer
    GoSub DISPLAYSTATUS
    
    ' Toggle the status of the Freeze property for the layer
    layerObj.Freeze = Not (layerObj.Freeze)
    
    ' Display the Freeze status of the new layer
    GoSub DISPLAYSTATUS
    Exit Sub
    
DISPLAYSTATUS:
    If layerObj.Freeze Then
        MsgBox \"Layer \" & layerObj.name & \" is frozen.\", , \"Freeze Example\"
    Else
        MsgBox \"Layer \" & layerObj.name & \" is thawed.\", , \"Freeze Example\"
    End If
    Return
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Freeze()
    ;; This example creates a new layer called \"Freeze\".
    ;; It then displays the status of the Freeze property
    ;; for the new layer, toggles the status of the
    ;; Freeze property, and again displays its status.
    ;; After running this example, you can check the layer
    ;; control on the Object Properties tool bar. It will
    ;; show the new layer and the latest Freeze status.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the new layer
    (setq layerObj (vla-Add (vla-get-Layers doc) \"Freeze\"))
    
    ;; Display the Freeze status of the new layer
    (if (= (vla-get-Freeze layerObj) :vlax-true)
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is frozen.\"))
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is thawed.\"))
    )
    
    ;; Toggle the status of the Freeze property for the layer
    (vla-put-Freeze layerObj (if (= (vla-get-Freeze layerObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Display the Freeze status of the new layer
    (if (= (vla-get-Freeze layerObj) :vlax-true)
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is frozen.\"))
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is thawed.\"))
    )
)
")
("FullName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1738D847-ACED-491B-9B5C-CDC781A89BEB"
"
FullName Property (ActiveX)
Gets the name of the application or document, including the path.
Supported platforms: Windows only
Signature
VBA:
object.FullName
object
    Type: Application, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: String
The name and path of the application or document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_FullName()
    ' This example uses the FullName property to find
    ' the full name of the current drawing, and of
    ' the application.
    
    ' Find the full name of current drawing file including path.
    ' (If the drawing has not been saved, this name will be blank.)
    Dim docName As String
    docName = ThisDrawing.FullName
    MsgBox \"The full name of the current drawing is \" & docName, , \"FullName Example\"
    
    ' Find the full name of application
    Dim appName As String
    appName = ThisDrawing.Application.FullName
    MsgBox \"The full name of the current application is \" & appName, , \"FullName Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_FullName()
    ;; This example uses the FullName property to find
    ;; the full name of the current drawing, and of
    ;; the application.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Find the full name of current drawing file including path.
    ;; (If the drawing has not been saved, this name will be blank.)
    (setq docName (vla-get-FullName doc))
    (alert (strcat \"The full name of the current drawing is \" docName))
    
    ;; Find the full name of application
    (setq appName (vla-get-FullName acadObj))
    (alert (strcat \"The full name of the current application is \" appName))
)
")
("GeoImageBrightness" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1C798E2C-C26B-49F6-9022-0F4B54601DD4"
                      "
GeoImageBrightness Property (ActiveX)
Specifies the brightness value of the embedded image.
Supported platforms: Windows only
Signature
VBA:
object.GeoImageBrightness
object
    Type: GeomapImage
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The brightness value for the image is a positive integer between 0 and 100 inclusive.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GeoImageContrast" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-80234F8E-3207-4A86-AC16-AD968578216E"
                    "
GeoImageContrast Property (ActiveX)
Specifies the contrast value of the embedded image.
Supported platforms: Windows only
Signature
VBA:
object.GeoImageContrast
object
    Type: GeomapImage
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The valid range is 0 to 100 inclusive.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GeoImageFade" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-35DDA5D7-68F0-42C0-9DE0-1EC83DBE4D03"
"
GeoImageFade Property (ActiveX)
Specifies the current fade value of the embedded image.
Supported platforms: Windows only
Signature
VBA:
object.GeoImageFade
object
    Type: GeomapImage
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The value is between 0 and 100 inclusive.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GeoImageHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16AFEC32-D8D6-4FBA-ACF6-EF2110BB45AC"
"
GeoImageHeight Property (ActiveX)
Specifies the height of the embedded image.
Supported platforms: Windows only
Signature
VBA:
object.GeoImageHeight
object
    Type: GeomapImage
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The height of the image.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GeoImagePosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F56AC56A-7D19-4864-BAD0-8E3BEC96A877"
"
GeoImagePosition Property (ActiveX)
Specifies the bottom left corner of the embedded image.
Supported platforms: Windows only
Signature
VBA:
object.GeoImagePosition
object
    Type: GeomapImage
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
The position of the image.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GeoImageWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-90D4EE36-6D71-4087-8C8D-BA347747BB68"
"
GeoImageWidth Property (ActiveX)
Specifies the width of the embedded image.
Supported platforms: Windows only
Signature
VBA:
object.GeoImageWidth
object
    Type: GeomapImage
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The width of the image.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Geolocate" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-12F57213-B4A6-44B2-8E07-4B34E54D2A33"
"
Geolocate Property (ActiveX)
Specifies whether the point cloud is geographically located.
Supported platforms: Windows only
Signature
VBA:
object.Geolocate
object
    Type: PointCloudEx
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Point cloud is geographically located.
    False: Point cloud is not geographically located.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("GradientAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3BCAAD20-A2CD-4E59-A3FD-A6144A49E848"
"
GradientAngle Property (ActiveX)
Specifies the gradient angle.
Supported platforms: Windows only
Signature
VBA:
object.GradientAngle
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_ANGLE
Angle of the gradient pattern.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GradientAngle()
    ' This example changes the value of the GradientAngle property.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"CYLINDER\"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col1.SetRGB 255, 0, 0
    col2.SetRGB 0, 255, 0
    hatchObj.GradientColor1 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"Initial value of GradientAngle is \" & hatchObj.GradientAngle
    hatchObj.GradientAngle = 3.1415 / 4
    MsgBox \"New value of GradientAngle is \" & hatchObj.GradientAngle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GradientAngle()
    ;; This example changes the value of the GradientAngle property.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName \"CYLINDER\")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"Initial value of GradientAngle is \" (rtos (vla-get-GradientAngle hatchObj) 2)))
    (vla-put-GradientAngle hatchObj (/ 3.1415 4))
    (alert (strcat \"New value of GradientAngle is \" (rtos (vla-get-GradientAngle hatchObj) 2)))
    (vlax-release-object col1)
    (vlax-release-object col2)
)
")
("GradientCentered" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-883A9FC6-FC9E-4F56-9C5E-7641BEFE98F6"
"
GradientCentered Property (ActiveX)
Specifies whether the gradient is centered.
Supported platforms: Windows only
Signature
VBA:
object.GradientCentered
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Gradient pattern is centered.
    False: Gradient pattern is not centered.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GradientCentered()
    ' This example changes the value of the GradientCentered property.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"CYLINDER\"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col1.SetRGB 255, 0, 0
    col2.SetRGB 0, 255, 0
    hatchObj.GradientColor1 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"Initial value of GradientCentered is \" & hatchObj.GradientCentered
    hatchObj.GradientCentered = False
    MsgBox \"New value of GradientCentered is \" & hatchObj.GradientCentered
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GradientCentered()
    ;; This example changes the value of the GradientCentered property.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName \"CYLINDER\")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"Initial value of GradientCentered is \" (if (= (vla-get-GradientCentered hatchObj) :vlax-true) \"True\" \"False\")))
    (vla-put-GradientCentered hatchObj (if (= (vla-get-GradientCentered hatchObj) :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"New value of GradientCentered is \" (if (= (vla-get-GradientCentered hatchObj) :vlax-true) \"True\" \"False\")))
  
    (vlax-release-object col1)
    (vlax-release-object col2)
)
")
("GradientColor1" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9E901910-0C2D-4B5F-9B9E-F137AEA471EE"
"
GradientColor1 Property (ActiveX)
Specifies the start color of the gradient.
Supported platforms: Windows only
Signature
VBA:
object.GradientColor1
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: AcCmColor
The AcCmColor object must contain one of the following constants, or an error is returned:
    acColorMethodByACI
    acColorMethodByBlock
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GradientColor1()
    ' This example changes the value of the GradientColor1 property.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"CYLINDER\"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor, newColor As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set newColor = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col1.SetRGB 255, 0, 0
    col2.SetRGB 0, 255, 0
    newColor.SetRGB 0, 100, 0
    hatchObj.GradientColor1 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"Initial value of GradientColor1 is :\" & vbCrLf & _
                    \"red = \" & hatchObj.GradientColor1.Red & vbCrLf & _
                    \"green = \" & hatchObj.GradientColor1.Green & vbCrLf & _
                    \"blue = \" & hatchObj.GradientColor1.Blue
    hatchObj.GradientColor1 = newColor
    MsgBox \"New value of GradientColor1 is :\" & vbCrLf & _
                    \"red = \" & hatchObj.GradientColor1.Red & vbCrLf & _
                    \"green = \" & hatchObj.GradientColor1.Green & vbCrLf & _
                    \"blue = \" & hatchObj.GradientColor1.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GradientColor1()
    ;; This example changes the value of the GradientColor1 property.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName \"CYLINDER\")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq newColor (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-SetRGB newColor 0 100 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"Initial value of GradientColor1 is :\"
                   \"\nred = \" (itoa (vla-get-Red (vla-get-GradientColor1 hatchObj)))
                   \"\ngreen = \" (itoa (vla-get-Green (vla-get-GradientColor1 hatchObj)))
                   \"\nblue = \" (itoa (vla-get-Blue (vla-get-GradientColor1 hatchObj)))))
    (vla-put-GradientColor1 hatchObj newColor)
    (alert (strcat \"New value of GradientColor1 is :\"
                   \"\nred = \" (itoa (vla-get-Red (vla-get-GradientColor1 hatchObj)))
                   \"\ngreen = \" (itoa (vla-get-Green (vla-get-GradientColor1 hatchObj)))
                   \"\nblue = \" (itoa (vla-get-Blue (vla-get-GradientColor1 hatchObj)))))
    (vlax-release-object col1)
    (vlax-release-object col2)
    (vlax-release-object newColor)
)
")
("GradientColor2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-60D0625B-25AC-4086-A065-D5D6A875F3BB"
                  "
GradientColor2 Property (ActiveX)
Specifies the end color of the gradient.
Supported platforms: Windows only
Signature
VBA:
object.GradientColor2
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: AcCmColor
The AcCmColor object must contain one of the following constants, or an error is returned:
    acColorMethodByACI
    acColorMethodByBlock
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GradientColor2()
    ' This example changes the value of the GradientColor2 property.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"CYLINDER\"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor, newColor As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set newColor = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col1.SetRGB 255, 0, 0
    col2.SetRGB 0, 255, 0
    newColor.SetRGB 0, 100, 0
    hatchObj.GradientColor1 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"Initial value of GradientColor2 is :\" & vbCrLf & _
                    \"red = \" & hatchObj.GradientColor2.Red & vbCrLf & _
                    \"green = \" & hatchObj.GradientColor2.Green & vbCrLf & _
                    \"blue = \" & hatchObj.GradientColor2.Blue
    hatchObj.GradientColor2 = newColor
    MsgBox \"New value of GradientColor2 is :\" & vbCrLf & _
                    \"red = \" & hatchObj.GradientColor2.Red & vbCrLf & _
                    \"green = \" & hatchObj.GradientColor2.Green & vbCrLf & _
                    \"blue = \" & hatchObj.GradientColor2.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GradientColor2()
    ;; This example changes the value of the GradientColor2 property.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName \"CYLINDER\")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq newColor (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-SetRGB newColor 0 100 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"Initial value of GradientColor2 is :\"
                   \"\nred = \" (itoa (vla-get-Red (vla-get-GradientColor2 hatchObj)))
                   \"\ngreen = \" (itoa (vla-get-Green (vla-get-GradientColor2 hatchObj)))
                   \"\nblue = \" (itoa (vla-get-Blue (vla-get-GradientColor2 hatchObj)))))
    (vla-put-GradientColor2 hatchObj newColor)
    (alert (strcat \"New value of GradientColor2 is :\"
                   \"\nred = \" (itoa (vla-get-Red (vla-get-GradientColor2 hatchObj)))
                   \"\ngreen = \" (itoa (vla-get-Green (vla-get-GradientColor2 hatchObj)))
                   \"\nblue = \" (itoa (vla-get-Blue (vla-get-GradientColor2 hatchObj)))))
    (vlax-release-object col1)
    (vlax-release-object col2)
    (vlax-release-object newColor)
)
")
("GradientName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C1F522D5-7644-4569-9CF9-029E768F4530"
                "
GradientName Property (ActiveX)
Specifies the pattern name of the gradient.
Supported platforms: Windows only
Signature
VBA:
object.GradientName
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: String
The pattern name of the gradient, which can be
    \"Linear\"
    \"Cylinder\"
    \"InvCylinder\"
    \"Spherical\"
    \"HemiSpherical\"
    \"Curved\"
    \"InvSpherical\"
    \"InvHemiSpherical\"
    \"InvCurved\"
Remarks
No additional remarks.
Examples
VBA:
Sub Example_GradientName()
    ' This example changes the value of the GradientName property.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"CYLINDER\"
    PatternType = acPreDefinedGradient '0
    bAssociativity = True
    
    ' Create the associative Hatch object in model space
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity, acGradientObject)
    Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor
    Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col1.SetRGB 255, 0, 0
    col2.SetRGB 0, 255, 0
    hatchObj.GradientColor2 = col1
    hatchObj.GradientColor2 = col2
    
    ' Create the outer boundary for the hatch (a circle)
    Dim outerLoop(0 To 0) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Append the outerboundary to the hatch object, and display the hatch
    hatchObj.AppendOuterLoop (outerLoop)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"Initial value of GradientName is \" & hatchObj.GradientName
    hatchObj.GradientName = \"SPHERICAL\"
    MsgBox \"New value of GradientName is \" & hatchObj.GradientName
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GradientName()
    ;; This example changes the value of the GradientColor1 property.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Define the hatch
    (setq patternName \"CYLINDER\")
    (setq patternType acPreDefinedGradient)
    (setq bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acGradientObject))
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-put-GradientColor1 hatchObj col1)
    (vla-put-GradientColor2 hatchObj col2)
    
    ;; Create the outer boundary for the hatch (a circle)
    (setq center (vlax-3d-point 3 3 0)
          radius 1)
    (setq circle (vla-AddCircle modelSpace center radius))
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element outerLoop 0 circle)
    
    ;; Append the outerboundary to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"Initial value of GradientName is \" (vla-get-GradientName hatchObj)))
    (vla-put-GradientName hatchObj \"SPHERICAL\")
    (alert (strcat \"New value of GradientName is \" (vla-get-GradientName hatchObj)))
    (vlax-release-object col1)
    (vlax-release-object col2)
)
")
("Green" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2874356A-C91F-42C4-8091-F45B95D7E776"
         "
Green Property (ActiveX)
Specifies the green component of the True Color.
Supported platforms: Windows only
Signature
VBA:
object.Green
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
The green component, from 0-255, of AcCmColor.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Green()
    ' This example draws a line and returns the RGB values
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    Dim line As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
        
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
        
    Set line = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    line.TrueColor = color
    Dim retcolor As AcadAcCmColor
    Set retcolor = line.TrueColor
    
    MsgBox \"Red = \" & retcolor.Red & vbLf & _
           \"Green = \" & retcolor.Green & vbLf & _
           \"Blue = \" & retcolor.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Green()
    ;; This example draws a line and returns the RGB values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
        
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq line (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (vla-put-TrueColor line color)
    (setq retcolor (vla-get-TrueColor line))
    
    (alert (strcat \"Red = \" (itoa (vla-get-Red retcolor))
                   \"\nGreen = \" (itoa (vla-get-Green retcolor))
                   \"\nBlue = \" (itoa (vla-get-Blue retcolor))
           )
    )
    (vlax-release-object color)
)
")
("GridOn" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-85F3005E-87BF-4A22-B6BC-7FFF8F2E27E8"
"
GridOn Property (ActiveX)
Specifies the status of the viewport grid.
Supported platforms: Windows only
Signature
VBA:
object.GridOn
object
    Type: PViewport, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The grid is on.
    False: The grid is off.
Remarks
The grid is used only for visual reference. It is not plotted, nor is it considered part of the drawing. The grid origin is set by the SnapBasePoint method.
When the grid is turned on, it is set to the current grid spacing. To change the grid spacing, use the SetGridSpacing method.
When you turn the grid on or off on a viewport, the visibility of the grid will not change until the viewport is made active. If you toggle the grid of the active viewport, the visibility of the grid will not change until the viewport is reset as the active viewport. To set or reset the viewport as the active viewport, use the ActiveViewport property with the updated viewport object.
Note: The value of this property is stored in the GRIDMODE system variable. When using the SetVariable method to update the grid mode of the active viewport, you do not have to reset the viewport as the active viewport to see the change.
Examples
VBA:
Sub Example_GridOn()
    ' This example toggles the setting of GridOn.
    
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
TOGGLEGRID:
    If MsgBox(\"Toggle the grid?\", vbOKCancel, \"GridOn Example\") = vbOK Then
        viewportObj.GridOn = Not (viewportObj.GridOn)
    Else
        Exit Sub
    End If
    
    ' Reset the active viewport to see the change
    ThisDrawing.ActiveViewport = viewportObj
    
    GoTo TOGGLEGRID
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_GridOn()
    ;; This example toggles the setting of GridOn.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    (vla-put-GridOn viewportObj (if (= (vla-get-GridOn viewportObj) :vlax-true) :vlax-false :vlax-true))
    ;; Reset the active viewport to see the change
    (vla-put-ActiveViewport doc viewportObj)
    (vla-Regen doc acAllViewports)
  
    (alert \"Toggled the display of the grid.\")  
)
")
("Groups" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-61422D1A-B391-4528-968A-04A7B7A590F2"
          "
Groups Property (ActiveX)
Gets the Groups collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Groups
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Groups
The Groups collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Groups()
    ' This example finds the current Groups collection and
    ' adds a new group to that collection.
    
    Dim groupColl As AcadGroups
    Set groupColl = ThisDrawing.Groups
    
    ' Create a dimension style named \"TEST\" in current drawing
    Dim testGroup As AcadGroup
    Set testGroup = groupColl.Add(\"TEST\")
    MsgBox \"A new group called \" & testGroup.name & \" has been added to the Groups collection.\", vbInformation, \"Groups Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Groups()
    ;; This example finds the current Groups collection and
    ;; adds a new group to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq groupColl (vla-get-Groups doc))
    
    ;; Create a dimension style named \"TEST\" in current drawing
    (setq testGroup (vla-Add groupColl \"TEST\"))
    (alert (strcat \"A new group called \" (vla-get-Name testGroup) \" has been added to the Groups collection.\"))
)
")
("HWND" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-79FF9339-5361-4E73-A8F9-0F72C5E03DC1"
        "
HWND Property (ActiveX)
Gets the window handle of the window frame.
Supported platforms: Windows only
Signature
VBA:
object.HWND
object
    Type: Application, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Long_PTR
The handle of the window frame.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_HWND()
    ' This example returns the handle (Hwnd) of a document window. The handle can be
    ' used with WindowsAPI calls, or with ActiveX components that require a handle
    ' to a window.
   
    ' If there are no open documents, then exit
    If Documents.Count = 0 Then
        MsgBox \"There are no open documents!\"
        Exit Sub
    End If
    
    MsgBox \"The HWND of the active document is: \" & ActiveDocument.HWND
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HWND()
    ;; This example returns the handle (Hwnd) of a document window. The handle can be
    ;; used with WindowsAPI calls, or with ActiveX components that require a handle
    ;; to a window.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    (alert (strcat \"The HWND of the active document is: \" (itoa (vla-get-HWND doc))))
)
")
("Handle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-08DCE6ED-DE5A-41FA-9220-3D75B2B4C43D"
"
Handle Property (ActiveX)
Gets the handle of an object.
Supported platforms: Windows only
Signature
VBA:
object.Handle
object
    Type: All drawing objects, AttributeReference, Block, Blocks, Dictionaries, Dictionary, DimStyle, DimStyles, Group, Groups, Layer, Layers, Layout, Layouts, Linetype, Linetypes, ModelSpace, PaperSpace, PlotConfiguration, PlotConfigurations, RegisteredApplication, RegisteredApplications, SectionManager, SectionSettings, SortentsTable, TableStyle, TextStyle, TextStyles, UCS, UCSs, View, Views, Viewport, Viewports, XRecord
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
The handle of the entity.
Remarks
An object ID and a unique handle are the two ways of referencing an object. A handle is persistent (stays the same) in a drawing for the lifetime of the object.
In general, use a handle unless you plan to work with certain ObjectARX functions that require an object ID.
Examples
VBA:
Sub Example_Handle()
    ' This example creates several objects in model space.
    ' It then iterates through the objects in model space and displays the
    ' Handle for each object found.
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 5: centerPt(1) = 3: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection and display
    ' the handle of each object found.
    Dim entHandle As String
    Dim entry As AcadEntity
    For Each entry In ThisDrawing.ModelSpace
        entHandle = entry.handle
        entry.Highlight (True)
        MsgBox \"The handle of this object is \" & entHandle, vbInformation, \"Handle Example\"
        entry.Highlight (False)
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Handle()
    ;; This example creates several objects in model space.
    ;; It then iterates through the objects in model space and displays the
    ;; Handle for each object found.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
                                  3 5
				 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection and display
    ;; the handle of each object found.
    (vlax-for entry (vla-get-ModelSpace doc)
        (setq entHandle (vla-get-Handle entry))
        (vla-Highlight entry :vlax-true)
        (alert (strcat \"The handle of this object is \" entHandle))
        (vla-Highlight entry :vlax-false)
    )
)
")
("HasAttributes" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-98EA1BF9-6259-45F0-87EF-CB97C012D0ED"
                 "
HasAttributes Property (ActiveX)
Specifies whether the block has any attributes in it.
Supported platforms: Windows only
Signature
VBA:
object.HasAttributes
object
    Type: BlockReferences, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The block reference has attributes.
    False: The block reference does not have attributes.
Remarks
This property is True if the block reference contains any editable or constant (non-editable) attributes. It is False if there are no attributes.
To return an array of Attribute objects associated to a block, use the GetAttributes method.
Examples
VBA:
Sub Example_HasAttributes()
    ' This example first creates a block without attributes.
    ' It then inserts the block and checks whether it has attributes.
    ' It then adds attributes to the block and inserts it again.
    ' Then it checks the new block reference for attributes.
    
    ' Create the block
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"CircleBlock\")
    
    ' Add a circle to the block
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 0: center(1) = 0: center(2) = 0
    radius = 1
    Set circleObj = blockObj.AddCircle(center, radius)
   
    ' Insert the block
    Dim blockRefObj As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"CircleBlock\", 1#, 1#, 1#, 0)
    ThisDrawing.Application.ZoomAll
    MsgBox \"This block reference \" & IIf(blockRefObj.HasAttributes, \"has attributes.\", \"does not have attributes.\"), , \"Has Attributes Example\"
    
    ' Add attributes to the block definition.
    ' Define the attribute definition.
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"Attribute Prompt\"
    insertionPoint(0) = 1#: insertionPoint(1) = 1#: insertionPoint(2) = 0
    tag = \"Attribute_Tag\"
    value = \"Attribute Value\"
    
    ' Create the attribute definition
    Set attributeObj = blockObj.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
       
    ' Insert the block again
    Dim blockRefObj2 As AcadBlockReference
    insertionPnt(0) = 3#: insertionPnt(1) = 3#: insertionPnt(2) = 0
    Set blockRefObj2 = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"CircleBlock\", 1#, 1#, 1#, 0)
    ZoomAll
    MsgBox \"The first block reference \" & IIf(blockRefObj.HasAttributes, \"has attributes.\", \"does not have attributes.\") & vbCrLf & _
            \"The second block reference \" & IIf(blockRefObj2.HasAttributes, \"has attributes.\", \"does not have attributes.\"), , \"Has Attributes Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HasAttributes()
    ;; This example first creates a block without attributes.
    ;; It then inserts the block and checks whether it has attributes.
    ;; It then adds attributes to the block and inserts it again.
    ;; Then it checks the new block reference for attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the block
    (setq insertionPnt (vlax-3d-point 0 0 0))  
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"CircleBlock\"))
    
    ;; Add a circle to the block
    (setq center (vlax-3d-point 0 0 0))  
    (setq radius 1)
    (setq circleObj (vla-AddCircle blockObj center radius))
   
    ;; Insert the block
    (setq insertionPnt (vlax-3d-point 2 2 0))  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj (vla-InsertBlock modelSpace insertionPnt \"CircleBlock\" 1 1 1 0))
    (vla-ZoomAll acadObj)
    (alert (strcat \"This block reference \" (if (= (vla-get-HasAttributes blockRefObj) :vlax-true) \"has attributes.\" \"does not have attributes.\")))
    
    ;; Add attributes to the block definition.
    ;; Define the attribute definition.
    (setq insertionPoint (vlax-3d-point 1 1 0)
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"Attribute Prompt\"
          attTag \"Attribute_Tag\"
          attValue \"Attribute Value\")
    
    ;; Create the attribute definition
    (setq attributeObj (vla-AddAttribute blockObj attHeight attMode attPrompt insertionPoint attTag attValue))
       
    ;; Insert the block again
    (setq insertionPnt (vlax-3d-point 3 3 0))  
    (setq blockRefObj2 (vla-InsertBlock modelSpace insertionPnt \"CircleBlock\" 1 1 1 0))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The first block reference \" (if (= (vla-get-HasAttributes blockRefObj) :vlax-true) \"has attributes.\" \"does not have attributes.\")
                   \"\nThe second block reference \" (if (= (vla-get-HasAttributes blockRefObj2) :vlax-true) \"has attributes.\" \"does not have attributes.\")))
)
")
("HasExtensionDictionary" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-691DA1BB-3D33-45A9-9A0F-212988DBA5F6"
                          "
HasExtensionDictionary Property (ActiveX)
Determines whether the object has an extension dictionary associated with it.
Supported platforms: Windows only
Signature
VBA:
object.HasExtensionDictionary
object
    Type: All drawing objects, AttributeReference, Block, Dictionary, DimStyle, Group, Layer, Layout, Linetype, Material, MLeaderStyle, PlotConfiguration, RegisteredApplication, SectionManager, SectionSettings, SortentsTable, TableStyle, TextStyle, UCS, View, Viewport, XRecord
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The object has an extension dictionary associated with it.
    False: The object does not have an extension dictionary associated with it.
Remarks
You can create an extension dictionary for an object, or query an existing extension dictionary by using the GetExtensionDictionary method.
Examples
VBA:
Sub Example_HasExtensionDictionary()
    ' This example will iterate through each object in the current drawing and
    ' determine whether that object has an associated Extension Dictionary
    
    Dim DrawingObject As AcadObject
    Dim ExtensionDictionaryResults As String
    
    ' Make sure this drawing contains objects before continuing
    If ThisDrawing.ModelSpace.count = 0 Then
        MsgBox \"There are no objects in the current drawing.\"
        Exit Sub
    End If
    
    For Each DrawingObject In ThisDrawing.ModelSpace
        ' Determine whether object contains Extension Dictionary
        Select Case DrawingObject.HasExtensionDictionary
            Case True
                ExtensionDictionaryResults = ExtensionDictionaryResults & _
                                             DrawingObject.ObjectName & _
                                             \" has an associated Extension Dictionary\" & vbCrLf
            Case False
                ExtensionDictionaryResults = ExtensionDictionaryResults _
                                             & DrawingObject.ObjectName & _
                                             \" does not have an associated Extension Dictionary\" & vbCrLf
        End Select
    Next
    
    MsgBox ExtensionDictionaryResults
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HasExtensionDictionary()
    ;; This example will iterate through each object in the current drawing and
    ;; determine whether that object has an associated Extension Dictionary
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    
    ;; Make sure this drawing contains objects before continuing
    (if (= (vla-get-Count modelSpace) 0)
        (alert \"There are no objects in the current drawing.\")
        (progn
            (setq ExtensionDictionaryResults \"\")
	           (vlax-for DrawingObject modelSpace
	               ;; Determine whether object contains Extension Dictionary
	               (cond
                    ((= (vla-get-HasExtensionDictionary DrawingObject) :vlax-true)
                        (setq ExtensionDictionaryResults (strcat ExtensionDictionaryResults
                                                                 (vla-get-ObjectName DrawingObject)
                                                                 \" has an associated Extension Dictionary.\n\")))
                    ((= (vla-get-HasExtensionDictionary DrawingObject) :vlax-false)
                        (setq ExtensionDictionaryResults (strcat ExtensionDictionaryResults
                                                                 (vla-get-ObjectName DrawingObject)
                                                                 \" does not have an associated Extension Dictionary.\n\")))
                )
	    )
	    
	    (alert ExtensionDictionaryResults)
        )
    )
)
")
("HasLeader" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6809548A-E4CF-45B0-899D-450C06F0C0E3"
"
HasLeader Property (ActiveX)
Specifies whether the dimension has a leader.
Supported platforms: Windows only
Signature
VBA:
object.HasLeader
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The dimension has a leader.
    False: The dimension does not have a leader.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("HasSheetView" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C3E561D6-7623-4740-BBAA-E96E30039596"
                "
HasSheetView Property (ActiveX)
Specifies whether the viewport is linked to a corresponding sheet view.
Supported platforms: Windows only
Signature
VBA:
object.HasSheetView
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The viewport has a corresponding sheet view.
    False: The viewport does not have a corresponding sheet view.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("HasSubSelection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B178F988-EE33-434C-BD65-78136A53AF0C"
"
HasSubSelection Property (ActiveX)
Specifies whether the table contains a subselection set.
Supported platforms: Windows only
Signature
VBA:
object.HasSubSelection
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: Table contains a subselection set.
    False: Table does not contain a subselection set.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("HasVpAssociation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-93422C59-FF28-4798-9CE9-78C75FD0C780"
"
HasVpAssociation Property (ActiveX)
Specifies whether the view is associated with a paper space viewport.
Supported platforms: Windows only
Signature
VBA:
object.HasVpAssociation
object
    Type: View
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The view is associated with a paper space viewport.
    False: The view is not associated with a paper space viewport.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_HasVpAssociation()
    ' This example demonstrates the
    ' CategoryName, LayoutId, LayerState,
    ' and HasVpAssociation properties of the View object
    
    Dim oLSM As AcadLayerStateManager
    ' Access the LayerStateManager object
    Set oLSM = ThisDrawing.Application. _
       GetInterfaceObject(\"AutoCAD.AcadLayerStateManager.\" & Left(AcadApplication.Version, 2))
    ' Associate the current drawing database with LayerStateManager
    oLSM.SetDatabase ThisDrawing.Database
    oLSM.Save \"ColorLinetype\", acLsColor + acLsLineType
    
    ' Create a view named \"New_View\" in current drawing
    Dim viewObj As AcadView
   
    ' Add the view to the views collection
    Set viewObj = ThisDrawing.Views.Add(\"New_View\")
    MsgBox viewObj.Name & \" has been added.\" & vbCrLf & _
           \"Height: \" & viewObj.height & vbCrLf & _
           \"Width: \" & viewObj.Width, , \"Example\"
    
    viewObj.CategoryName = \"My View Category\"
    viewObj.LayerState = \"My Layer State\"
    
    viewObj.LayoutId = ThisDrawing.Layouts(1).ObjectID
        
    MsgBox viewObj.CategoryName & \" is the Category name.\" & vbCrLf & _
            viewObj.LayoutId & \" is the Layout ID.\" & vbCrLf & _
            viewObj.LayerState & \" is the Layer state.\"
   
    If viewObj.HasVpAssociation = True Then
        MsgBox \"The view is associated with a paper space viewport.\"
    Else
        MsgBox \"The view is not associated with a paper space viewport.\"
   End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HasVpAssociation()
    ;; This example demonstrates the
    ;; CategoryName, LayoutId, LayerState,
    ;; and HasVpAssociation properties of the View object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Access the LayerStateManager object
    (setq oLSM (vla-GetInterfaceObject acadObj (strcat \"AutoCAD.AcadLayerStateManager.\" (substr (getvar \"ACADVER\") 1 2))))
    ;; Associate the current drawing database with LayerStateManager
    (vla-SetDatabase oLSM (vla-get-Database doc))
    (vla-Save oLSM \"ColorLinetype\" (+ acLsColor acLsLineType))
    
    ;; Create a view named \"New_View\" in current drawing
    ;; Add the view to the views collection
    (setq viewObj (vla-Add (vla-get-Views doc) \"New_View\"))
    (alert (strcat (vla-get-Name viewObj) \" has been added.\"
                   \"\nHeight: \" (rtos (vla-get-Height viewObj) 2)
                   \"\nWidth: \" (rtos (vla-get-Width viewObj) 2)))
    
    (vla-put-CategoryName viewObj \"My View Category\")
    (vla-put-LayerState viewObj \"ColorLinetype\")
    
    (vla-put-LayoutId viewObj (vla-get-ObjectID (vla-Item (vla-get-Layouts doc) 1)))
    (alert (strcat (vla-get-CategoryName viewObj) \" is the Category name.\"
                   \"\n\" (itoa (vla-get-LayoutId viewObj)) \" is the Layout ID.\"
                   \"\n\" (vla-get-LayerState viewObj) \" is the Layer state.\"))
  
    (if (= (vla-get-HasVpAssociation viewObj) :vlax-true)
        (alert \"The view is associated with a paper space viewport.\")
        (alert \"The view is not associated with a paper space viewport.\")
    )
    (vlax-release-object oLSM)
)
")
("HatchObjectType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BBDF246E-8F3E-45D8-9906-2A6970322235"
"
HatchObjectType Property (ActiveX)
Specifies the type of the hatch, classic or gradient.
Supported platforms: Windows only
Signature
VBA:
object.HatchObjectType
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: AcHatchObjectType enum
    acHatchObject
    acGradientObject
Remarks
The default value of this property is 0, acHatchObject, which creates a classic hatch.
If the value of this property is 1, acGradientObject, a gradient is created by the AddHatch method for hatch creation. If a gradient is created, then PatternType should be AcGradientPatternType and PatternName should contain a gradient pattern name of LINEAR, CYLINDER, INVCYLINDER, SPHERICAL, HEMISPHERICAL, CURVED, INVSPHERICAL, INVHEMISPHERICAL, or INVCURVED.
Examples
VBA:
Sub Example_HatchObjectType()
    ' This example changes the value of the HatchObjectType property.
    ' The example requires that the active drawing contain an existing hatch.
    
    AppActivate ThisDrawing.Application.Caption
    
    Dim ent As AcadHatch
    Dim util As AcadUtility
    Set util = ThisDrawing.Utility
    Dim pt As Variant
    Call util.GetEntity(ent, pt, \"Select hatch :\")
    With ent
        MsgBox \"Initial value of HatchObjectType = \" & .HatchObjectType
        .HatchObjectType = acGradientObject
        .GradientAngle = 3.1415 / 4
        .GradientCentered = False
        .GradientName = \"SPHERICAL\"
        Dim col1 As AcadAcCmColor, col2 As AcadAcCmColor
        Set col1 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
        Set col2 = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
        col1.SetRGB 255, 0, 0
        col2.SetRGB 0, 255, 0
        .GradientColor1 = col1
        .GradientColor2 = col2
        MsgBox \"New value of HatchObjectType = \" & .HatchObjectType
    End With
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HatchObjectType()
    ;; This example changes the value of the HatchObjectType property.
    ;; The example requires that the active drawing contain an existing hatch.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq util (vla-get-Utility doc))
    (vla-GetEntity util 'ent 'pt \"Select hatch :\")
    (alert (strcat \"Initial value of HatchObjectType = \" (itoa (vla-get-HatchObjectType ent))))
    (vla-put-HatchObjectType ent acGradientObject)
    (vla-put-GradientAngle ent (/ 3.1415 4))
    (vla-put-GradientCentered ent :vlax-false)
    (vla-put-GradientName ent \"SPHERICAL\")
    (setq col1 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (setq col2 (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col1 255 0 0)
    (vla-SetRGB col2 0 255 0)
    (vla-put-GradientColor1 ent col1)
    (vla-put-GradientColor2 ent col2)
    (alert (strcat \"New value of HatchObjectType = \" (itoa (vla-get-HatchObjectType ent))))
    (vlax-release-object col1)
    (vlax-release-object col2)
)
")
("HatchStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F05981A7-DB57-4F64-96D5-73B812BA259B"
              "
HatchStyle Property (ActiveX)
Specifies the hatch style.
Supported platforms: Windows only
Signature
VBA:
object.HatchStyle
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: acHatchStyle enum
    acHatchStyleNormal
    acHatchStyleOuter
    acHatchStyleIgnore
Remarks
    acHatchStyleNormal
    Specifies standard style or normal. This option hatches inward from the outermost area boundary. If AutoCAD encounters an internal boundary, it turns off hatching until it encounters another boundary.
    acHatchStyleOuter
    Fills the outermost areas only. This style also hatches inward from the area boundary, but it turns off hatching if it encounters an internal boundary and does not turn it back on again.
    acHatchStyleIgnore
    Ignores internal structure. This option hatches through all internal objects.
Examples
VBA:
Sub Example_HatchStyle()
    ' This example creates an associative hatch in model space.
    ' The hatch style is then changed to demonstrate the different
    ' ways that inner loops are processed.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Set the hatch style to normal
    hatchObj.hatchstyle = acHatchStyleNormal
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"The HatchStyle is set to \" & Choose(hatchObj.hatchstyle + 1, \"acHatchStyleNormal\", \"acHatchStyleOuter\", \"acHatchStyleIgnore\"), , \"HatchStyle Example\"
    
    ' Set the hatch style to outer
    hatchObj.hatchstyle = acHatchStyleOuter
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"The HatchStyle is set to \" & Choose(hatchObj.hatchstyle + 1, \"acHatchStyleNormal\", \"acHatchStyleOuter\", \"acHatchStyleIgnore\"), , \"HatchStyle Example\"
        
    ' Set the hatch style to ignore
    hatchObj.hatchstyle = acHatchStyleIgnore
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"The HatchStyle is set to \" & Choose(hatchObj.hatchstyle + 1, \"acHatchStyleNormal\", \"acHatchStyleOuter\", \"acHatchStyleIgnore\"), , \"HatchStyle Example\"
               
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HatchStyle()
    ;; This example creates an associative hatch in model space.
    ;; The hatch style is then changed to demonstrate the different
    ;; ways that inner loops are processed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)  
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object, and display the hatch
    (vla-AppendOuterLoop hatchObj outerLoop)
    ;; Append a circle as the inner loop for the hatch.
    (setq center (vlax-3d-point 5 4.5 0))  
    (setq radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
  
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    (vla-ZoomAll acadObj)
    
    ;; Set the hatch style to normal
    (vla-put-hatchstyle hatchObj acHatchStyleNormal)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The HatchStyle is set to \"
                   (cond
                     ((= (vla-get-hatchstyle hatchObj) 0) \"acHatchStyleNormal\")
                     ((= (vla-get-hatchstyle hatchObj) 1) \"acHatchStyleOuter\")
                     ((= (vla-get-hatchstyle hatchObj) 2) \"acHatchStyleIgnore\")
                   )))
    
    ;; Set the hatch style to outer
    (vla-put-hatchstyle hatchObj acHatchStyleOuter)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The HatchStyle is set to \"
                   (cond
                     ((= (vla-get-hatchstyle hatchObj) 0) \"acHatchStyleNormal\")
                     ((= (vla-get-hatchstyle hatchObj) 1) \"acHatchStyleOuter\")
                     ((= (vla-get-hatchstyle hatchObj) 2) \"acHatchStyleIgnore\")
                   )))
        
    ;; Set the hatch style to ignore
    (vla-put-hatchstyle hatchObj acHatchStyleIgnore)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The HatchStyle is set to \"
                   (cond
                     ((= (vla-get-hatchstyle hatchObj) 0) \"acHatchStyleNormal\")
                     ((= (vla-get-hatchstyle hatchObj) 1) \"acHatchStyleOuter\")
                     ((= (vla-get-hatchstyle hatchObj) 2) \"acHatchStyleIgnore\")
                   )))
)
")
("HeaderSuppressed" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-834B9A4F-D308-4CE6-9F58-C67F00C177E7"
                    "
HeaderSuppressed Property (ActiveX)
Specifies whether the header of the table is suppressed.
Supported platforms: Windows only
Signature
VBA:
object.HeaderSuppressed
object
    Type: Table, TableStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Table header is suppressed.
    False: Table header is not suppressed.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_HeaderSuppressed()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HeaderSuppressed()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
                   \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
                   \"\nTitle Suppression = \" (if (= (vla-get-TitleSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)  
)
")
("Height" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EB797768-80BE-4A07-95A3-34F3CD61D5A3"
"
Height Property (ActiveX)
Changes the height of the object.
Supported platforms: Windows only
Signature
VBA:
object.Height
object
    Type: Application, Attribute, AttributeReference, DgnUnderlay, DwfUnderlay, ExtrudedSurface, GeomapImage, Helix, MText, OLE, PdfUnderlay, PointCloud, PViewport, RasterImage, Shape, Table, Text, TextStyle, Toolbar, View, Viewport, Wipeout
    The objects this property applies to.
Property Value
Read-only: No (except for the GeomapImage, RasterImage and Toolbar objects that are read-only)
Type: Double (except for the Application and Toolbar objects that are of the Integer type)
This must be a positive, non-negative number.
Remarks
Application: The height of the main application window in pixels.
GeoPositionMarker, MText, Text: The height of the uppercase text. Height is measured in the current units. The Height property is used as a scale factor for both the height and width of the text.
GeomapImage, RasterImage: The height of the raster image in pixels.
Viewport: The height of a viewport is the Y axis measurement of the viewport frame.
View: The height of a view is the Y axis measurement of the area within a viewport that is used to display the model.
Examples - Text
VBA:
Sub Example_Height()
    ' This example creates a text object in model space.
    ' It then changes the height of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    MsgBox \"The text height is \" & textObj.height, vbInformation, \"Height Example\"
    
    ' Change the value of the Height to 1
    textObj.height = 1
    textObj.Update
    MsgBox \"The text height is set to \" & textObj.height, vbInformation, \"Height Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Height()
    ;; This example creates a text object in model space.
    ;; It then changes the height of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the text object
    (setq textString \"Hello, World.\"
          insertionPoint (vlax-3d-point 3 3 0)
          height 0.5)
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    (vla-ZoomAll acadObj)
    (vla-Update textObj)
    (alert (strcat \"The text height is \" (rtos (vla-get-height textObj) 2)))
    
    ;; Change the value of the Height to 1
    (vla-put-height textObj 1)
    (vla-Update textObj)
    (alert (strcat \"The text height is set to \" (rtos (vla-get-height textObj) 2)))
)
Examples - ExtrudedSurface
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("History" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9879D666-5C87-4CA6-A5D6-A4C07C7A3428"
"
History Property (ActiveX)
Specifies whether history is saved.
Supported platforms: Windows only
Signature
VBA:
object.History
object
    Type: 3DSolid
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: History is saved.
    False: History is not saved.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("HorizontalTextPosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BE78386A-DB47-4DA6-B089-724033465C2D"
"
HorizontalTextPosition Property (ActiveX)
Specifies the horizontal justification for dimension text.
Supported platforms: Windows only
Signature
VBA:
object.HorizontalTextPosition
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimHorizontalJustification enum
    acHorzCentered: The text is centered along the dimension line between the extension lines.
    acFirstExtensionLine: The text is next to the first extension line.
    acSecondExtensionLine: The text is next to the second extension line.
    acOverFirstExtension: The text is above and aligned with the first extension line.
    acOverSecondExtension: The text is above and aligned with the second extension line.
Remarks
Note: This property overrides the value of the DIMJUST system variable for the given dimension.
Examples
VBA:
Sub Example_HorizontalTextPosition()
    ' This example creates an aligned dimension in model space
    ' and cycles the dimension text through different
    ' horizontal alignments
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentValue As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 9: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current text position
    Select Case dimObj.HorizontalTextPosition
        Case acHorzCentered:        CurrentValue = \"centered\"
        Case acFirstExtensionLine:  CurrentValue = \"aligned to first extension line\"
        Case acSecondExtensionLine: CurrentValue = \"aligned to second extension line\"
        Case acOverFirstExtension:  CurrentValue = \"aligned over first extension line\"
        Case acOverSecondExtension: CurrentValue = \"aligned over second extension line\"
    End Select
    
    MsgBox \"The dimension is \" & CurrentValue
    ' Force the alignment of the dimension text to the first extension line
    dimObj.HorizontalTextPosition = acFirstExtensionLine
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension text is now aligned to the first extension line\"
   
    ' Force the alignment of the dimension text to the second extension line
    dimObj.HorizontalTextPosition = acSecondExtensionLine
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension text is now aligned to the second extension line\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HorizontalTextPosition()
    ;; This example creates an aligned dimension in model space
    ;; and cycles the dimension text through different
    ;; horizontal alignments
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 9 5 0)
          location (vlax-3d-point 5 7 0))  
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current text position
    (cond
        ((= (vla-get-HorizontalTextPosition dimObj) acHorzCentered) (setq CurrentValue \"centered\"))
        ((= (vla-get-HorizontalTextPosition dimObj) acFirstExtensionLine) (setq CurrentValue \"aligned to first extension line\"))
        ((= (vla-get-HorizontalTextPosition dimObj) acSecondExtensionLine) (setq CurrentValue \"aligned to second extension line\"))
        ((= (vla-get-HorizontalTextPosition dimObj) acOverFirstExtension) (setq CurrentValue \"aligned over first extension line\"))
        ((= (vla-get-HorizontalTextPosition dimObj) acOverSecondExtension) (setq CurrentValue \"aligned over second extension line\"))
    )
    
    (alert (strcat \"The dimension is \" CurrentValue))
    ;; Force the alignment of the dimension text to the first extension line
    (vla-put-HorizontalTextPosition dimObj acFirstExtensionLine)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension text is now aligned to the first extension line\")
   
    ;; Force the alignment of the dimension text to the second extension line
    (vla-put-HorizontalTextPosition dimObj acSecondExtensionLine)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension text is now aligned to the second extension line\")
)
")
("HorzCellMargin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-931D7084-14D0-493F-9796-9CF45147A373"
"
HorzCellMargin Property (ActiveX)
Specifies the value of the horizontal margin of cells.
Supported platforms: Windows only
Signature
VBA:
object.HorzCellMargin
object
    Type: Table, TableStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The horizontal margin applied to each table cell.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_HorzCellMargin()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HorzCellMargin()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-VertCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nVertical Cell Margin = \" (rtos (vla-get-VertCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	           \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	   )
    )
    (vlax-release-object col)
)
")
("HyperlinkBase" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9911D570-27F9-4F3D-837F-4064447065FF"
                 "
HyperlinkBase Property (ActiveX)
Specifies the base address used for all relative links inserted within the drawing.
Supported platforms: Windows only
Signature
VBA:
object.HyperlinkBase
object
    Type: SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The HyperlinkBase property of a drawing.
Remarks
You can specify an Internet location or a path to a folder on a network drive.
Examples
VBA:
Sub Example_HyperlinkBase()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
            \"Author = \" & Author & vbCrLf & _
            \"Comments = \" & Comments & vbCrLf & _
            \"HyperlinkBase = \" & HLB & vbCrLf & _
            \"Keywords = \" & KW & vbCrLf & _
            \"LastSavedBy = \" & LSB & vbCrLf & _
            \"RevisionNumber = \" & RN & vbCrLf & _
            \"Subject = \" & Subject & vbCrLf & _
            \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
            \"First property name = \" & Key0 & vbCrLf & _
            \"First property value = \" & Value0 & vbCrLf & _
            \"Second property name = \" & Key1 & vbCrLf & _
            \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HyperlinkBase()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("Hyperlinks" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-585A0DF2-7932-4B18-A3B3-698B5AE595F5"
              "
Hyperlinks Property (ActiveX)
Gets the Hyperlinks collection for an entity.
Supported platforms: Windows only
Signature
VBA:
object.Hyperlinks
object
    Type: All drawing objects, AttributeReference, SubDMeshEdge, SubDMeshFace, SubDMeshVertex, SubEntity, SubEntSolidEdge, SubEntSolidFace, SubEntSolidNode, SubEntSolidVertex
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Hyperlinks
The Hyperlinks collection for the entity.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_HyperLinks()
    ' This example creates a Circle object in model space and
    ' adds a new Hyperlink to its Hyperlink collection
    
    Dim Hyperlinks As AcadHyperlinks
    Dim Hyperlink As AcadHyperlink
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim HLList As String
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ThisDrawing.Application.ZoomAll
    
    ' Get reference to the Circle's Hyperlinks collection
    Set Hyperlinks = circleObj.Hyperlinks
    
    ' Add a new Hyperlink complete with all properties
    Set Hyperlink = Hyperlinks.Add(\"AutoDesk\")
    Hyperlink.URL = \"www.autodesk.com\"
    Hyperlink.URLDescription = \"Autodesk Main Site\"
    Hyperlink.URLNamedLocation = \"MY_LOCATION\"
    
    ' Read and display a list of existing Hyperlinks and
    ' their properties for this object
    For Each Hyperlink In Hyperlinks
        HLList = HLList & \"____________________________________\" & vbCrLf   ' Separator
        HLList = HLList & \"URL: \" & Hyperlink.URL & vbCrLf
        HLList = HLList & \"URL Description: \" & Hyperlink.URLDescription & vbCrLf
        HLList = HLList & \"URL Named Location: \" & Hyperlink.URLNamedLocation & vbCrLf
    Next
    
    MsgBox \"The circle has \" & Hyperlinks.count & \" Hyperlink: \" & vbCrLf & HLList
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HyperLinks()
    ;; This example creates a Circle object in model space and
    ;; adds a new Hyperlink to its Hyperlink collection
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    ;; Get reference to the Circle's Hyperlinks collection
    (setq Hyperlinks (vla-get-Hyperlinks circleObj))
    
    ;; Add a new Hyperlink complete with all properties
    (setq Hyperlink (vla-Add Hyperlinks \"Autodesk\"))
    (vla-put-URL Hyperlink \"www.autodesk.com\")
    (vla-put-URLDescription Hyperlink \"Autodesk Main Site\")
    (vla-put-URLNamedLocation Hyperlink \"MY_LOCATION\")
    
    ;; Read and display a list of existing Hyperlinks and
    ;; their properties for this object
    (setq HLList \"\")
    (vlax-for Hyperlink Hyperlinks
        (setq HLList (strcat HLList \"____________________________________\"   ;; Separator
                             \"\nURL: \" (vla-get-URL Hyperlink)
                             \"\nURL Description: \" (vla-get-URLDescription Hyperlink)
                             \"\nURL Named Location: \" (vla-get-URLNamedLocation Hyperlink)))
    )
    
    (alert (strcat \"The circle has \" (itoa (vla-get-Count Hyperlinks)) \" Hyperlink: \n\"  HLList))
)
")
("ISOPenWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-54B0DE75-E382-4DAC-9845-08A0124BD740"
               "
ISOPenWidth Property (ActiveX)
Specifies the ISO pen width of an ISO hatch pattern.
Supported platforms: Windows only
Signature
VBA:
object.ISOPenWidth
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: acISOPenWidth enum
    acPenWidth000: 0.00 mm
    acPenWidth013: 0.13 mm
    acPenWidth018: 0.18 mm
    acPenWidth025: 0.25 mm
    acPenWidth035: 0.35 mm
    acPenWidth050: 0.50 mm
    acPenWidth070: 0.70 mm
    acPenWidth100: 1.00 mm
    acPenWidth140: 1.40 mm
    acPenWidth200: 2.00 mm
    acPenWidthUnk: unknown
Remarks
The first ten values represent the pen width in hundredths of a millimeter.
The acPenWidthUnk value identifies an unknown, or non-standard, pen width. When you query a hatch and receive a value of acPenWidthUnk, use the PatternScale property to obtain the non-standard value. Setting the pen width of any hatch to acPenWidthUnk has no effect.
This property shares a relationship with the PatternScale property. When you work with ISO hatch patterns, the standard scale values can be entered through the PatternScale property or through this property. Non-standard pen widths can only be entered using the PatternScale property.
Examples
VBA:
Sub Example_ISOPenWidth()
    ' This example creates an associative hatch in model space.
    ' The ISOPenWidth of the hatch pattern is then returned and changed.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String, PatternType As Long
    Dim bAssociativity As Boolean
    Dim outerLoop(0 To 1) As Object
    Dim center(0 To 2) As Double
    Dim radius As Double, startAngle As Double, endAngle As Double
    Dim innerLoop1(0) As Object, innerLoop2(0) As Object
    Dim PatternScale As Double
    ' Define the hatch
    patternName = \"ANSI31\": PatternType = 0: bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
   
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3:  startAngle = 0:  endAngle = 3.141592
    
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the ISO pen width of the hatch pattern
    MsgBox \"The ISO pen width of the hatch pattern is: \" & hatchObj.ISOPenWidth, vbInformation
    ' Change the ISO pen width of the hatch pattern
    hatchObj.ISOPenWidth = acPenWidth050
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Display new pen width for this hatch
    If hatchObj.ISOPenWidth = acPenWidthUnk Then
        ' Non-Standard pen widths
        MsgBox \"The ISO pen width of the hatch pattern is now: \" & hatchObj.PatternScale, vbInformation
    Else
        ' Standard pen widths
        MsgBox \"The ISO pen width of the hatch pattern is now: \" & hatchObj.ISOPenWidth, vbInformation
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ISOPenWidth()
    ;; This example creates an associative hatch in model space.
    ;; The ISOPenWidth of the hatch pattern is then returned and changed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
   
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the ISO pen width of the hatch pattern
    (alert (strcat \"The ISO pen width of the hatch pattern is: \" (itoa (vla-get-ISOPenWidth hatchObj))))
    ;; Change the ISO pen width of the hatch pattern
    (vla-put-ISOPenWidth hatchObj acPenWidth050)
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Display new pen width for this hatch
    (if (= (vla-get-ISOPenWidth hatchObj) acPenWidthUnk)
        ;; Non-Standard pen widths
        (alert (strcat \"The ISO pen width of the hatch pattern is now: \" (rtos (vla-get-PatternScale hatchObj) 2)))
        ;; Standard pen widths
        (alert (strcat \"The ISO pen width of the hatch pattern is now: \" (itoa (vla-get-ISOPenWidth hatchObj))))
    )
)
")
("ImageFile" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-10F5B2F6-5D84-4B60-8ED5-D0B3A2644275"
"
ImageFile Property (ActiveX)
Specifies the full path and file name of the raster image file.
Supported platforms: Windows only
Signature
VBA:
object.ImageFile
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The full path and file name of the raster image file.
Remarks
This property is similar to the Name property, except that this property contains the path information and the Name property does not.
You can use this property to load a new raster image into an existing raster object.
Examples
VBA:
Sub Example_ImageFile()
    ' This example inserts a raster image and then finds the
    ' ImageFile for the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have the image, or if it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotAngleInDegree As Double, rotAngle As Double
    Dim imageName As String
    Dim raster As AcadRasterImage
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotAngleInDegree = 0#
    rotAngle = rotAngleInDegree * 3.141592 / 180#
    
    On Error Resume Next
    
    ' Creates a raster image in model space
    Set raster = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotAngle)
    If Err.Description = \"File error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ' Find the current ImageFile
    ThisDrawing.Regen True
    MsgBox \"The ImageFile is currently set to: \" & raster.ImageFile, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ImageFile()
    ;; This example inserts a raster image and then finds the
    ;; ImageFile for the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotAngle (/ (* 0 3.141592) 180))
    
    ;; Creates a raster image in model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq raster (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotAngle))
    
            (vla-ZoomExtents acadObj)
        )
        (alert (strcat imageName \" could not be found.\"))
    )
    ;; Find the current ImageFile
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The ImageFile is currently set to: \" (vla-get-ImageFile raster)))
)
")
("ImageHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-567443C9-C76D-4FA0-9842-942B6F3A23B6"
               "
ImageHeight Property (ActiveX)
Specifies the height of the raster image.
Supported platforms: Windows only
Signature
VBA:
object.ImageHeight
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The height of the raster image.
Remarks
This property is similar to the Height property. The Height property specifies the height of the image in pixels. This property specifies the height of the image in current units.
Examples
VBA:
Sub Example_ImageHeight()
    ' This example adds a raster image in model space and then finds
    ' the height and width of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have this image, or if it is located
    ' in a different directory, insert a valid path and file name
    ' for the imageName variable below.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    imageName = \"C:/AutoCAD/sample/2d Projected Polylines.jpg\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotationAngle = 0
    
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    ' Find the height and width of the raster image
    Dim height As Variant
    Dim width As Variant
    
    height = rasterObj.ImageHeight
    width = rasterObj.ImageWidth
    
    MsgBox \"Raster image: \" & rasterObj.ImageFile & vbCrLf & _
           \"ImageHeight: \" & Str(height) & vbCrLf & _
           \"ImageWidth: \" & Str(width)
            
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ImageHeight()
    ;; This example adds a raster image in model space and then finds
    ;; the height and width of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have this image, or if it is located
    ;; in a different directory, insert a valid path and file name
    ;; for the imageName variable below.
    (setq insertionPoint (vlax-3d-point 5 5 0)  
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotationAngle 0)
    
    ;; Creates a raster image in model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotationAngle))
    
	    ;; Find the height and width of the raster image
	    (setq height (vla-get-ImageHeight rasterObj)
	          width (vla-get-ImageWidth rasterObj))
	    
	    (alert (strcat \"Raster image: \" (vla-get-ImageFile rasterObj)
	                   \"\nImageHeight: \" (rtos height 2)
	                   \"\nImageWidth: \" (rtos width 2)))
        )
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("ImageVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AB60D8EC-C038-44FC-AFC4-69F22475947A"
                   "
ImageVisibility Property (ActiveX)
Specifies whether image visibility is on or off.
Supported platforms: Windows only
Signature
VBA:
object.ImageVisibility
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The image is visible.
    False: The image is hidden.
Remarks
You can increase redrawing speed by turning the image visibility off when you do not need it in the current drawing session. Hidden images are not displayed or plotted; only the drawing boundary is displayed. You can choose to hide an image regardless of the current viewport coordinate system, or specifically when the image is not orthogonal (aligned) with the current viewport coordinate system.
Examples
VBA:
Sub Example_ImageVisibility()
    ' This example inserts a raster image and finds the current status
    ' of ImageVisibility for the image. It then changes the ImageVisibility
    ' status of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have the image, or if it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotAngleInDegree As Double, rotAngle As Double
    Dim imageName As String
    Dim raster As AcadRasterImage
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotAngleInDegree = 0#
    rotAngle = rotAngleInDegree * 3.141592 / 180#
    
    On Error Resume Next
    
    ' Creates a raster image in model space
    Set raster = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotAngle)
    If Err.Description = \"File error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ' Find the current ImageVisibility
    ThisDrawing.Regen True
    MsgBox \"The ImageVisibility is currently set to: \" & raster.ImageVisibility, vbInformation
    
    ' Change the ImageVisibility
    If (raster.ImageVisibility) Then
        raster.ImageVisibility = False
    Else
        raster.ImageVisibility = True
    End If
    ThisDrawing.Regen True
    MsgBox \"The ImageVisibility is now set to: \" & raster.ImageVisibility, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ImageVisibility()
    ;; This example inserts a raster image and finds the current status
    ;; of ImageVisibility for the image. It then changes the ImageVisibility
    ;; status of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have the image, or if it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 2 2 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotAngle (/ (* 0 3.141592 180)))
    
    ;; Creates a raster image in model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq raster (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotAngle))
	    
	           ;; Find the current ImageVisibility
	           (vla-Regen doc :vlax-true)
	           (alert (strcat \"The ImageVisibility is currently set to: \" (if (= (vla-get-ImageVisibility raster) :vlax-true) \"True\" \"False\")))
	    
	           ;; Change the ImageVisibility
	           (if (= (vla-get-ImageVisibility raster) :vlax-true)
	               (vla-put-ImageVisibility raster :vlax-false)
	               (vla-put-ImageVisibility raster :vlax-true)
	           )
	           (vla-Regen doc :vlax-true)
	           (alert (strcat \"The ImageVisibility is now set to: \" (if (= (vla-get-ImageVisibility raster) :vlax-true) \"True\" \"False\")))
        )
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("ImageWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3D3ADA6C-DD69-4119-AC2D-1506328C5DF4"
              "
ImageWidth Property (ActiveX)
Specifies the width of the raster image.
Supported platforms: Windows only
Signature
VBA:
object.ImageWidth
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The width of the raster image.
Remarks
This property is similar to the Width property. The Width property specifies the width of the image in pixels. This property specifies the width of the image in the current units.
Examples
VBA:
Sub Example_ImageWidth()
    ' This example adds a raster image in model space and then finds
    ' the height and width of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ' directory. If you do not have this image, or if it is located
    ' in a different directory, insert a valid path and file name
    ' for the imageName variable below.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    imageName = \"C:/AutoCAD/sample/2d Projected Polylines.jpg\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotationAngle = 0
    
    ' Creates a raster image in model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
    
    ' Find the height and width of the raster image
    Dim height As Variant
    Dim width As Variant
    
    height = rasterObj.ImageHeight
    width = rasterObj.ImageWidth
    
    MsgBox \"Raster image: \" & rasterObj.ImageFile & vbCrLf & _
            \"ImageHeight: \" & Str(height) & vbCrLf & _
            \"ImageWidth: \" & Str(width)
            
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ImageWidth()
    ;; This example adds a raster image in model space and then finds
    ;; the height and width of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the Sample
    ;; directory. If you do not have this image, or if it is located
    ;; in a different directory, insert a valid path and file name
    ;; for the imageName variable below.
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotationAngle 0)
    
    ;; Creates a raster image in model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotationAngle))
    
	           ;; Find the height and width of the raster image
	           (setq height (vla-get-ImageHeight rasterObj)
	                 width (vla-get-ImageWidth rasterObj))
	    
	           (alert (strcat \"Raster image: \" (vla-get-ImageFile rasterObj)
	                          \"\nImageHeight: \" (rtos height 2)
	                          \"\nImageWidth: \" (rtos width 2)))
        )
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("IndicatorFillColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A2F9C320-8325-43B3-9740-6D91C0F8EDA4"
"
IndicatorFillColor Property (ActiveX)
Specifies color of section plane when shading is turned on.
Supported platforms: Windows only
Signature
VBA:
object.IndicatorFillColor
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: AcCmColor
The color of the section plane when shading is turned on.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IndicatorTransparency" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-882CDFEE-0F92-4D1A-A177-453DC59FB16C"
                         "
IndicatorTransparency Property (ActiveX)
Specifies transparency of section plane when shading is turned on.
Supported platforms: Windows only
Signature
VBA:
object.IndicatorTransparency
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The transparency of the section plane when shading is turned on.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("InsUnits" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6C8AFC78-7347-4536-BC5B-BD655F1AB948"
"
InsUnits Property (ActiveX)
Specifies the insert units saved with the block.
Supported platforms: Windows only
Signature
VBA:
object.InsUnits
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this property applies to.
Property Value
Read-only: Yes
Type: String
The InsUnits property specifies the native units for the block reference as defined by the block author. When a block is inserted in a drawing whose units have been defined, the block is automatically scaled proportional to the InsUnitsFactor, the conversion factor between the block units and the current drawing units.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("InsUnitsFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-738C8263-EEE2-4DA0-B41D-362CAA62C3DD"
"
InsUnitsFactor Property (ActiveX)
Specifies the conversion factor between block units and drawing units.
Supported platforms: Windows only
Signature
VBA:
object.InsUnitsFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Double
The conversion factor between block and drawing units.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("InsertionPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B6F917C1-9916-419A-9047-625453CEA306"
"
InsertionPoint Property (ActiveX)
Insertion point for a tolerance, text, block, or shape, and the origin (upper-left corner) of an OLE object.
Supported platforms: Windows only
Signature
VBA:
object.InsertionPoint
object
    Type: Attribute, AttributeReference, BlockReference, ComparedReference, ExternalReference, MInsertBlock, MText, OLE, PointCloud, PointCloudEx, Shape, Table, Text, Tolerance
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D WCS coordinate representing the insertion or origin point.
Remarks
MText: Specifies the location for a corner of the text boundary. Use the AttachmentPoint property to specify which corner of the text boundary is to be positioned at this insertion point.
Text: This property is read-only except for text whose Alignment property is set to acAlignmentLeft, acAlignmentAligned, or acAlignmentFit. To position text whose justification is other than left, aligned, or fit, use the TextAlignmentPoint property.
Examples
VBA:
Sub Example_InsertionPoint()
    ' This example creates a text object in model space.
    ' It then changes the insertion point of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 2: insertionPoint(1) = 2: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    
    ' Return the current value of the insertion point
    Dim currInsertionPoint As Variant
    currInsertionPoint = textObj.insertionPoint
    MsgBox \"The insertion point of the text is \" & currInsertionPoint(0) & \", \" & currInsertionPoint(1) & \", \" & currInsertionPoint(2), vbInformation, \"InsertionPoint Example\"
    
    ' Change the insertion point of the text object and
    ' update the display of the text object.
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    textObj.insertionPoint = insertionPoint
    textObj.Update
    MsgBox \"The new insertion point of the text is \" & textObj.insertionPoint(0) & \", \" & textObj.insertionPoint(1) & \", \" & textObj.insertionPoint(2), vbInformation, \"InsertionPoint Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_InsertionPoint()
    ;; This example creates a text object in model space.
    ;; It then changes the insertion point of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the text object
    (setq textString \"Hello, World.\"
          insertionPoint (vlax-3d-point 2 2 0)
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    (vla-ZoomAll acadObj)
    
    ;; Return the current value of the insertion point
    (setq currInsertionPoint (vlax-safearray->list (vlax-variant-value (vla-get-InsertionPoint textObj))))
    (alert (strcat \"The insertion point of the text is \" (rtos (nth 0 currInsertionPoint) 2) \", \"
                                                         (rtos (nth 1 currInsertionPoint) 2) \", \"
                                                         (rtos (nth 2 currInsertionPoint) 2)))
    
    ;; Change the insertion point of the text object and
    ;; update the display of the text object.
    (setq insertionPoint (vlax-3d-point 3 3 0))
    (vla-put-insertionPoint textObj insertionPoint)
    (vla-Update textObj)
    (setq newInsertionPoint (vlax-safearray->list (vlax-variant-value (vla-get-InsertionPoint textObj))))
    (alert (strcat \"The new insertion point of the text is \" (rtos (nth 0 newInsertionPoint) 2) \", \"
                                                             (rtos (nth 1 newInsertionPoint) 2) \", \"
                                                             (rtos (nth 2 newInsertionPoint) 2)))
)
")
("IntensityColorScheme" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BB89E9B6-3F46-4942-8695-2B2598B358ED"
"
IntensityColorScheme Property (ActiveX)
Specifies the color scheme to use for displaying intensity values.
Supported platforms: Windows only
Signature
VBA:
object.IntensityColorScheme
object
    Type: PointCloud
    The object this property applies to.
Property Value
Read-only: No
Type: AcPointCloudIntensityStyle enum
    acIntensityGrayscale
    acIntensityRainbow
    acIntensityRed
    acIntensityGreen
    acIntensityBlue
    acIntensityEditableFlag
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Invisible" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B5C539EB-F345-4517-9463-8E77A59F635B"
             "
Invisible Property (ActiveX)
Specifies whether the attribute or attribute reference is invisible.
Supported platforms: Windows only
Signature
VBA:
object.Invisible
object
    Type: Attribute, AttributeReference
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The attribute is an invisible attribute.
    False: The attribute is not an invisible attribute.
Remarks
An invisible attribute will not be displayed or plotted.
An attribute can exist as only one of four optional modes: constant, preset, invisible, or verify. The AFLAGS system variable stores the current mode settings. You can query the current mode using the Mode property.
Examples
VBA:
Sub Example_Invisible()
    ' This example creates an attribute definition in model space.
    ' It then queries the visibility of the attribute, changes
    ' the visibility, and queries the visibility again.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"New_Tag\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
    ' Find the current visibility for the attribute
    GoSub QUERYSTATUS
        
    ' Change the visibility of the attribute
    attributeObj.Invisible = Not attributeObj.Invisible
    ZoomAll
    
    GoSub QUERYSTATUS
    
    Exit Sub
    
QUERYSTATUS:
    If attributeObj.Invisible Then
        MsgBox \"The attribute is invisible.\"
    Else
        MsgBox \"The attribute is visible.\"
    End If
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Invisible()
    ;; This example creates an attribute definition in model space.
    ;; It then queries the visibility of the attribute, changes
    ;; the visibility, and queries the visibility again.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
    
    ;; Find the current visibility for the attribute
    (if (= (vla-get-Invisible attributeObj) :vlax-true)
        (alert \"The attribute is invisible.\")
        (alert \"The attribute is visible.\")
    )
  
    ;; Change the visibility of the attribute
    (vla-put-Invisible attributeObj (if (= (vla-get-Invisible attributeObj) :vlax-true) :vlax-false :vlax-true))
    (vla-ZoomAll acadObj)
    
    (if (= (vla-get-Invisible attributeObj) :vlax-true)
        (alert \"The attribute is invisible.\")
        (alert \"The attribute is visible.\")
    )
)
")
("IsDynamicBlock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7EF9313C-D017-4698-A421-46DF696C1B4E"
"
IsDynamicBlock Property (ActiveX)
Specifies whether this is a dynamic block.
Supported platforms: Windows only
Signature
VBA:
object.IsDynamicBlock
object
    Type: Block, BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The block is a dynamic block.
    False: The block is not a dynamic block.
Remarks
The ComparedReference and ExternalReference objects inherit this property from BlockReference, but this property doesn't affect either of the object types when used.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsLayout" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6CA8725D-4872-41AF-8B0B-48F05380E28C"
            "
IsLayout Property (ActiveX)
Determines whether the given block is a layout block.
Supported platforms: Windows only
Signature
VBA:
object.IsLayout
object
    Type: Block
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The block is a layout.
    False: The block is not a layout.
Remarks
The IsLayout property works with the IsXRef property. If both properties are False, then the block is a simple block. If the IsXRef property is True, then the block is an external reference. If the IsLayout property is True, then the block contains all the geometry associated with a layout.
Examples
VBA:
Sub Example_IsLayout()
    ' This example cycles through each Block object in a drawing
    ' and determines whether style of each Block by accessing the
    ' IsLayout and IsXRef properties.  A Block
    ' object is also added at runtime so the results are mixed and do not only
    ' come from the default Blocks.
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newBlock As AcadBlock, insertedBlock As AcadBlockReference
    Dim tempBlock As AcadBlock
    Dim msg As String
    
    ' Define the Circle object that will be inserted into the block
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle object
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block object
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Add the new block to model space
    Set insertedBlock = ThisDrawing.ModelSpace.InsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 0)
        
    ThisDrawing.Application.ZoomAll
    
    msg = vbCrLf & vbCrLf
    
    For Each tempBlock In ThisDrawing.Blocks
        If Not (tempBlock.IsLayout) And Not (tempBlock.IsXRef) Then
            ' Block is simple
            msg = msg & tempBlock.name & \": Simple\"
        ElseIf tempBlock.IsXRef Then
            ' Block is an external reference
            msg = msg & tempBlock.name & \": External Reference\"
            If tempBlock.IsLayout Then
                ' Block also contains layout geometry
                msg = msg & tempBlock.name & \" and Contains Layout Geometry\"
            End If
        ElseIf tempBlock.IsLayout Then
            ' Block contains layout geometry
            msg = msg & tempBlock.name & \": Contains Layout Geometry\"
        End If
        
        msg = msg & vbCrLf      ' Move to next line
    Next
        
    ' Display Block information for this drawing
    MsgBox \"Blocks in this drawing have the following styles: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsLayout()
    ;; This example cycles through each Block object in a drawing
    ;; and determines whether style of each Block by accessing the
    ;; IsLayout and IsXRef properties.  A Block
    ;; object is also added at runtime so the results are mixed and do not only
    ;; come from the default Blocks.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the Circle object that will be inserted into the block
    (setq centerPoint (vlax-3d-point 0 0 0)
          insertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle object
    (setq newBlock (vla-Add (vla-get-Blocks doc) centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block object
    (setq circleObj (vla-AddCircle (vla-Item (vla-get-Blocks doc) \"CBlock\") centerPoint radius))
    
    ;; Add the new block to model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq insertedBlock (vla-InsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 0))
        
    (vla-ZoomAll acadObj)
    
    (setq msg \"\")
    
    (vlax-for tempBlock (vla-get-Blocks doc)
        (cond
            ((and (= (vla-get-IsLayout tempBlock) :vlax-false)
                  (= (vla-get-IsXRef tempBlock) :vlax-false))
                ;; Block is simple
                (setq msg (strcat msg (vla-get-Name tempBlock) \": Simple\"))
            )
            ((= (vla-get-IsXRef tempBlock) :vlax-true)
                ;; Block is simple
                (setq msg (strcat msg (vla-get-Name tempBlock) \": External Reference\"))
                (if (= (vla-get-IsLayout tempBlock) :vlax-true)
                    ;; Block also contains layout geometry
                    (setq msg (strcat msg (vla-get-Name tempBlock) \" and Contains Layout Geometry\"))
                )
            )
            ((= (vla-get-IsLayout tempBlock) :vlax-true)
                ;; Block is simple
                (setq msg (strcat msg (vla-get-Name tempBlock) \": Contains Layout Geometry\"))
            )
        )
        (setq msg (strcat msg \"\n\"))
    )
        
    ;; Display Block information for this drawing
    (alert (strcat \"Blocks in this drawing have the following styles: \" msg))
)
")
("IsPartial" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C0281A71-9691-413C-8714-A785D8076BEF"
"
IsPartial Property (ActiveX)
Specifies whether the dimension is for a partial arc.
Supported platforms: Windows only
Signature
VBA:
object.IsPartial
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The dimension is for a partial arc.
    False: The dimension is not for a partial arc.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("IsPeriodic" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EA2B38A2-452E-4E74-84C5-F11E2F98DA69"
              "
IsPeriodic Property (ActiveX)
Determines whether the given spline is periodic.
Supported platforms: Windows only
Signature
VBA:
object.IsPeriodic
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The spline is periodic.
    False: The spline is not periodic.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_IsPeriodic()
    ' This example creates a Spline object in model space and
    ' determines if the Spline is periodic
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double, endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim UserMessage As String
    
    ' Define the Spline object
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0: fitPoints(3) = 5
    fitPoints(4) = 5: fitPoints(5) = 0: fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create new Spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ThisDrawing.Application.ZoomAll
    
    ' Display whether or not new Spline is periodic
    UserMessage = IIf(splineObj.IsPeriodic, \"is periodic\", \"is not periodic\")
    
    MsgBox \"The new Spline \" & UserMessage
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsPeriodic()
    ;; This example creates a Spline object in model space and
    ;; determines if the Spline is periodic
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display whether or not new Spline is periodic
    (setq UserMessage (if (= (vla-get-IsPeriodic splineObj) :vlax-true) \"is periodic\" \"is not periodic\"))
    
    (alert (strcat \"The new Spline \" UserMessage))
)
")
("IsPlanar" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-56E2E2C2-04B7-427A-B371-29E55D3E33EF"
"
IsPlanar Property (ActiveX)
Determines whether the given spline is planar.
Supported platforms: Windows only
Signature
VBA:
object.IsPlanar
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The spline is planar.
    False: The spline is not planar.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_IsPlanar()
    ' This example creates a Spline object in model space and
    ' determines whether the Spline is planar
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double, endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim UserMessage As String
    ' Define the Spline object
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0: fitPoints(3) = 5
    fitPoints(4) = 5: fitPoints(5) = 0: fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create new Spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ThisDrawing.Application.ZoomAll
    
    ' Display whether or not new Spline is planar
    UserMessage = IIf(splineObj.IsPlanar, \"is planar\", \"is not planar\")
    
    MsgBox \"The new Spline \" & UserMessage
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsPlanar()
    ;; This example creates a Spline object in model space and
    ;; determines whether the Spline is planar
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display whether or not new Spline is planar
    (setq UserMessage (if (= (vla-get-IsPlanar splineObj) :vlax-true) \"is planar\" \"is not planar\"))
    
    (alert (strcat \"The new Spline \" UserMessage))
)
")
("IsRational" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EB72402D-5B2D-4974-9434-65EC2F8E3A80"
              "
IsRational Property (ActiveX)
Determines whether the given spline is rational.
Supported platforms: Windows only
Signature
VBA:
object.IsRational
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The spline is rational.
    False: The spline is not rational.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_IsRational()
    ' This example creates a spline object in model space.
    ' It then determines whether the spline is rational or non-rational
    ' based on the IsRational property.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    ' Display a message according to the IsRational value for the spline.
    If splineObj.IsRational Then
        MsgBox \"The newly created Spline is a rational Spline\", , \"IsRational Example\"
    Else
        MsgBox \"The newly created Spline is a non-rational Spline\", , \"IsRational Example\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsRational()
    ;; This example creates a Spline object in model space and
    ;; determines whether the Spline is planar
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    ;; Display a message according to the IsRational value for the spline.
    (if (= (vla-get-IsRational splineObj) :vlax-true)
        (alert \"The newly created Spline is a rational Spline\")
        (alert \"The newly created Spline is a non-rational Spline\")
    )
)
")
("IsXRef" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2DB912E6-401E-4859-8D71-CAF474483D91"
          "
IsXRef Property (ActiveX)
Determines whether the given block is an XRef block.
Supported platforms: Windows only
Signature
VBA:
object.IsXRef
object
    Type: Block
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The block is an XRef.
    False: The block is not an XRef.
Remarks
The IsXRef property works with the IsLayout property. If both properties are False, then the block is a simple block. If the IsXRef property is True, then the block is an external reference. If the IsLayout property is True, then the block contains all the geometry associated with a layout.
Examples
VBA:
Sub Example_IsXRef()
    ' This example cycles through each Block object in a drawing
    ' and determines the style of each Block by accessing the
    ' IsLayout and IsXRef properties.  A Block
    ' object is also added at runtime so the results are mixed and do not only
    ' come from the default Blocks.
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newBlock As AcadBlock, insertedBlock As AcadBlockReference
    Dim tempBlock As AcadBlock
    Dim msg As String
    
    ' Define the Circle object that will be inserted into the block
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle object
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block object
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Add the new block to model space
    Set insertedBlock = ThisDrawing.ModelSpace.InsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 0)
        
    ThisDrawing.Application.ZoomAll
    
    msg = vbCrLf & vbCrLf
    
    For Each tempBlock In ThisDrawing.Blocks
        If Not (tempBlock.IsLayout) And Not (tempBlock.IsXRef) Then
            ' Block is simple
            msg = msg & tempBlock.name & \": Simple\"
        ElseIf tempBlock.IsXRef Then
            ' Block is an external reference
            msg = msg & tempBlock.name & \": External Reference\"
            If tempBlock.IsLayout Then
                ' Block also contains layout geometry
                msg = msg & tempBlock.name & \" and Contains Layout Geometry\"
            End If
        ElseIf tempBlock.IsLayout Then
            ' Block contains layout geometry
            msg = msg & tempBlock.name & \": Contains Layout Geometry\"
        End If
        
        msg = msg & vbCrLf      ' Move to next line
    Next
        
    ' Display Block information for this drawing
    MsgBox \"Blocks in this drawing have the following styles: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_IsXref()
    ;; This example cycles through each Block object in a drawing
    ;; and determines whether style of each Block by accessing the
    ;; IsLayout and IsXRef properties.  A Block
    ;; object is also added at runtime so the results are mixed and do not only
    ;; come from the default Blocks.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the Circle object that will be inserted into the block
    (setq centerPoint (vlax-3d-point 0 0 0)
          insertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle object
    (setq newBlock (vla-Add (vla-get-Blocks doc) centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block object
    (setq circleObj (vla-AddCircle (vla-Item (vla-get-Blocks doc) \"CBlock\") centerPoint radius))
    
    ;; Add the new block to model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq insertedBlock (vla-InsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 0))
        
    (vla-ZoomAll acadObj)
    
    (setq msg \"\")
    
    (vlax-for tempBlock (vla-get-Blocks doc)
        (cond
            ((and (= (vla-get-IsLayout tempBlock) :vlax-false)
                  (= (vla-get-IsXRef tempBlock) :vlax-false))
                ;; Block is simple
                (setq msg (strcat msg (vla-get-Name tempBlock) \": Simple\"))
            )
            ((= (vla-get-IsXRef tempBlock) :vlax-true)
                ;; Block is simple
                (setq msg (strcat msg (vla-get-Name tempBlock) \": External Reference\"))
                (if (= (vla-get-IsLayout tempBlock) :vlax-true)
                    ;; Block also contains layout geometry
                    (setq msg (strcat msg (vla-get-Name tempBlock) \" and Contains Layout Geometry\"))
                )
            )
            ((= (vla-get-IsLayout tempBlock) :vlax-true)
                ;; Block is simple
                (setq msg (strcat msg (vla-get-Name tempBlock) \": Contains Layout Geometry\"))
            )
        )
        (setq msg (strcat msg \"\n\"))
    )
        
    ;; Display Block information for this drawing
    (alert (strcat \"Blocks in this drawing have the following styles: \" msg))
)
")
("ItemName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A329A0CE-8A1F-4329-8439-84498E091B28"
            "
ItemName Property (ActiveX)
Specifies the item of the underlay file.
Supported platforms: Windows only
Signature
VBA:
object.ItemName
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: String
The item of the underlay file.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("JogAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C6AD7996-13DA-44C5-A5F0-D1DF3655B795"
            "
JogAngle Property (ActiveX)
Specifies the jog angle.
Supported platforms: Windows only
Signature
VBA:
object.JogAngle
object
    Type: DimRadialLarge
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_ANGLE
Jog angle of the radial dimension.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("JogLocation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-43F99AA5-5023-4156-BA29-E5A1B90FD12C"
"
JogLocation Property (ActiveX)
Specifies the jog location.
Supported platforms: Windows only
Signature
VBA:
object.JogLocation
object
    Type: DimRadialLarge
    The object this property applies to.
Property Value
Read-only: No
Type: Variant
Location of the jog for the radial dimension.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Justification" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7D9F7368-0B08-41FD-B7B3-8B800574FAC1"
"
Justification Property (ActiveX)
Specifies the justification of the MLine.
Supported platforms: Windows only
Signature
VBA:
object.Justification
object
    Type: MLine
    The object this property applies to.
Property Value
Read-only: No
Type: AcMLineJustification enum
    acBottom
    acTop
    acZero
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Keywords" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BFF112D6-5E97-4912-A052-8F3F5026F0C1"
"
Keywords Property (ActiveX)
Specifies the keywords you want to use to locate the drawing.
Supported platforms: Windows only
Signature
VBA:
object.Keywords
object
    Type: SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The Keywords property of a drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Keywords()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
            \"Author = \" & Author & vbCrLf & _
            \"Comments = \" & Comments & vbCrLf & _
            \"HyperlinkBase = \" & HLB & vbCrLf & _
            \"Keywords = \" & KW & vbCrLf & _
            \"LastSavedBy = \" & LSB & vbCrLf & _
            \"RevisionNumber = \" & RN & vbCrLf & _
            \"Subject = \" & Subject & vbCrLf & _
            \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
            \"First property name = \" & Key0 & vbCrLf & _
            \"First property value = \" & Value0 & vbCrLf & _
            \"Second property name = \" & Key1 & vbCrLf & _
            \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Keywords()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("KnotParameterization" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AA9D0E80-5814-4AAF-91B5-751133EEF625"
"
KnotParameterization Property (ActiveX)
Specifies the knot parameterization for a spline created by fit points.
Supported platforms: Windows only
Signature
VBA:
object.KnotParameterization
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: AcSplineKnotParameterizationType enum
    acChord
    acCustomParameterization
    acSqrtChord
    acUniformParam
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Knots" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B228DB94-7A0C-48F4-B6D4-9F3AF06D233A"
         "
Knots Property (ActiveX)
Gets the knot vector for a spline.
Supported platforms: Windows only
Signature
VBA:
object.Knots
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
The knots vector of the spline.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Knots()
    ' This example creates a Spline object in model space and
    ' returns the knot vector for the new Spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double, endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim knotVector As Variant
    ' Define the Spline object
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0: fitPoints(3) = 5
    fitPoints(4) = 5: fitPoints(5) = 0: fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create new Spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ThisDrawing.Application.ZoomAll
    
    ' Display the knot vector of the new Spline
    knotVector = splineObj.Knots
    MsgBox \"The knot vector of the new Spline is: \" & vbCrLf & _
           knotVector(0) & vbCrLf & _
           knotVector(1) & vbCrLf & _
           knotVector(2)
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Knots()
    ;; This example creates a Spline object in model space and
    ;; returns the knot vector for the new Spline
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    ;; Display the knot vector of the new Spline
    (setq knotVector (vlax-safearray->list (vlax-variant-value (vla-get-Knots splineObj))))
    (alert (strcat \"The knot vector of the new Spline is: \"
                   \"\n\" (rtos (nth 0 knotVector) 2)
                   \"\n\" (rtos (nth 1 knotVector) 2)
                   \"\n\" (rtos (nth 2 knotVector) 2)))
)
")
("LabelBlockId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-89FC2B94-702E-4CB0-BDBA-7E2F4DD37E4A"
"
LabelBlockId Property (ActiveX)
Returns and sets the label block ID associated with the viewport.
Supported platforms: Windows only
Signature
VBA:
object.LabelBlockId
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Long_PTR
The label block ID associated with the viewport.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LandingGap" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5848A6DC-0C57-427F-B8CF-A63BFE92B51F"
              "
LandingGap Property (ActiveX)
Specifies the text landing gap.
Supported platforms: Windows only
Signature
VBA:
object.LandingGap
object
    Type: GeoPositionMarker, MLeader, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The text landing gap.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("LastHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5FB3776F-CD98-48AE-B94A-B4835DFE69EA"
"
LastHeight Property (ActiveX)
Specifies the last text height used.
Supported platforms: Windows only
Signature
VBA:
object.LastHeight
object
    Type: TextStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The last text height used for the text style.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LastHeight()
    ' This example finds the current value for LastHeight.
    ' It then changes that value, and resets it again.
    Dim txtStyleObj As AcadTextStyle
    Set txtStyleObj = ThisDrawing.ActiveTextStyle
    
    ' Set and retrieve the LastHeight property
    Dim currHeight As Double
    Dim newHeight As Double
    
    ' Retrieve current LastHeight property
    currHeight = txtStyleObj.lastHeight
    MsgBox \"The current value for LastHeight is \" & txtStyleObj.lastHeight, , \"LastHeight Example\"
    
    ' Set LastHeight to a new value
    txtStyleObj.lastHeight = 4#
    
    ' Retrieve the current LastHeight value
    newHeight = txtStyleObj.lastHeight
    MsgBox \"The new value for LastHeight is \" & txtStyleObj.lastHeight, , \"LastHeight Example\"
    
    ' Finally reset LastHeight to its default value
    txtStyleObj.lastHeight = currHeight
    MsgBox \"The value for LastHeight has been reset to \" & txtStyleObj.lastHeight, , \"LastHeight Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LastHeight()
    ;; This example finds the current value for LastHeight.
    ;; It then changes that value, and resets it again.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq txtStyleObj (vla-get-ActiveTextStyle doc))
    
    ;; Set and retrieve the LastHeight property
    ;; Retrieve current LastHeight property
    (setq currHeight (vla-get-LastHeight txtStyleObj))
    (alert (strcat \"The current value for LastHeight is \" (rtos currHeight 2)))
    
    ;; Set LastHeight to a new value
    (vla-put-LastHeight txtStyleObj 4)
    
    ;; Retrieve the current LastHeight value
    (setq newHeight (vla-get-LastHeight txtStyleObj))
    (alert (strcat \"The new value for LastHeight is \" (rtos newHeight 2)))
    
    ;; Finally reset LastHeight to its default value
    (vla-put-LastHeight txtStyleObj currHeight)
    (alert (strcat \"The value for LastHeight has been reset to \" (rtos currHeight 2)))
)
")
("LastSavedBy" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-09FDBF11-27C6-4077-8F43-CF1713AB708A"
"
LastSavedBy Property (ActiveX)
Specifies the name of the last person who modified the file.
Supported platforms: Windows only
Signature
VBA:
object.LastSavedBy
object
    Type: SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The name of the last person who modified the file.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LastSavedBy()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LastSavedBy()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("Latitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-520D9095-24DA-42D8-8CBF-8091A734E7EE"
            "
Latitude Property (ActiveX)
Specifies the latitude of the position marker.
Supported platforms: Windows only
Signature
VBA:
object.Latitude
object
    Type: GeoPositionMarker
    The object this property applies to.
Property Value
Read-only: No
Type: String
The current latitude of the position marker.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Layer" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BBA57E84-2225-4363-ADDC-FB3A90A32643"
         "
Layer Property (ActiveX)
Specifies the layer for an object.
Supported platforms: Windows only
Signature
VBA:
object.Layer
object
    Type: All drawing objects, AttributeReference, Group, SubDMeshEdge, SubDMeshFace, SubDMeshVertex, SubEntity, SubEntSolidEdge, SubEntSolidFace, SubEntSolidNode, SubEntSolidVertex
    The objects this property applies to.
Property Value
Read-only: No; except for the Group object which is write-only
Type: String
The name of the layer.
Remarks
All objects have an associated layer. The document always contains at least one layer (layer 0). As with linetypes, you can specify a layer for an object. If you do not specify a layer, the current active layer is used for a new object. If a layer is specified for an object, the current active layer is ignored. Use the ActiveLayer property to set or query the current active layer.
Each layer has associated properties that can be set and queried through the Layer object.
Examples
VBA:
Sub Example_Layer()
    ' This example creates a new layer named \"ABC\" (colored blue).
    ' It then creates a circle and assigns it to layer \"ABC\"
    ' Create new layer
    Dim layerObj As AcadLayer
    Set layerObj = ThisDrawing.Layers.Add(\"ABC\")
    Dim color As AcadAcCmColor
	   Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    Call color.SetRGB(80, 100, 244)
    layerObj.TrueColor = color
    
    ' Create Circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 3: center(1) = 3: center(2) = 0
    radius = 1.5
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    MsgBox \"The circle has been created on layer \" & circleObj.Layer, , \"Layer Example\"
        
    ' Set the layer of new circle to \"ABC\"
    circleObj.Layer = \"ABC\"
    ' Refresh view
    ThisDrawing.Regen (True)
    MsgBox \"The circle is now on layer \" & circleObj.Layer, , \"Layer Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Layer()
    ;; This example creates a new layer named \"ABC\" (colored blue).
    ;; It then creates a circle and assigns it to layer \"ABC\"
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
 
    ;; Create new layer
    (setq layerObj (vla-Add (vla-get-Layers doc) \"ABC\"))
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    (vla-put-TrueColor layerObj color)
    
    ;; Create Circle
    (setq center (vlax-3d-point 3 3 0)
          radius 1.5)
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The circle has been created on layer \" (vla-get-Layer circleObj)))
        
    ;; Set the layer of new circle to \"ABC\"
    (vla-put-Layer circleObj \"ABC\")
    ;; Refresh view
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The circle is now on layer \" (vla-get-Layer circleObj)))
    (vlax-release-object color)
)
")
("LayerOn" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-832E23F5-C622-4FF6-AAB0-D2E9120DA1AB"
"
LayerOn Property (ActiveX)
Specifies the state of a layer.
Supported platforms: Windows only
Signature
VBA:
object.LayerOn
object
    Type: Layer
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The layer is on.
    False: The layer is off.
Remarks
Objects associated with a turned-off layer are not displayed on the screen or plotted. Unlike the Freeze property, layers that are turned off are generated during a regeneration but are not displayed.
AutoCAD surfaces and circles on a turned-off or frozen layer are invisible but they still hide objects when you use the HIDE, SHADEMODE, or RENDER commands.
Examples
VBA:
Sub Example_LayerOn()
    ' This example creates a new layer called \"LayerOn\".
    ' It then displays the status of the LayerOn property
    ' for the new layer, toggles the status of the
    ' LayerOn property, and again displays its status.
    ' After running this example, you can check the layer
    ' control on the Object Properties tool bar. It will
    ' show the new layer and the latest LayerOn status.
    
    Dim layerObj As AcadLayer
    
    ' Create the new layer
    Set layerObj = ThisDrawing.Layers.Add(\"LayerOn\")
    
    ' Display the LayerOn status of the new layer
    GoSub DISPLAYSTATUS
    
    ' Toggle the status of the LayerOn property for the layer
    layerObj.LayerOn = Not (layerObj.LayerOn)
    
    ' Display the LayerOn status of the new layer
    GoSub DISPLAYSTATUS
    Exit Sub
    
DISPLAYSTATUS:
    If layerObj.LayerOn Then
        MsgBox \"Layer \" & layerObj.name & \" is turned on.\", , \"LayerOn Example\"
    Else
        MsgBox \"Layer \" & layerObj.name & \" is turned off.\", , \"LayerOn Example\"
    End If
    Return
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LayerOn()
    ;; This example creates a new layer called \"LayerOn\".
    ;; It then displays the status of the LayerOn property
    ;; for the new layer, toggles the status of the
    ;; LayerOn property, and again displays its status.
    ;; After running this example, you can check the layer
    ;; control on the Object Properties tool bar. It will
    ;; show the new layer and the latest LayerOn status.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the new layer
    (setq layerObj (vla-Add (vla-get-Layers doc) \"LayerOn\"))
    
    ;; Display the LayerOn status of the new layer
    (if (= (vla-get-LayerOn layerObj) :vlax-true)
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is turned on.\"))
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is turned off.\"))
    )
    ;; Toggle the status of the LayerOn property for the layer
    (vla-put-LayerOn layerObj (if (= (vla-get-LayerOn layerObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Display the LayerOn status of the new layer
    (if (= (vla-get-LayerOn layerObj) :vlax-true)
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is turned on.\"))
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is turned off.\"))
    )
)
")
("LayerPropertyOverrides" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9C8B04B9-B1E5-4F66-A49F-344E40A7D808"
                          "
LayerPropertyOverrides Property (ActiveX)
Specifies whether the external reference or viewport has layer property overrides.
Supported platforms: Windows only
Signature
VBA:
object.LayerPropertyOverrides
object
    Type: ComparedReference, ExternalReference, PViewport
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: External reference or viewport has layer property overrides.
    False: External reference or viewport does not have layer property overrides.
Remarks
The ComparedReference object inherits this property from ExternalReference, but this property doesn't affect objects of the ComparedReference type when used.
Examples
VBA:
Sub Example_LayerPropertyOverrides()
    ' This example checks to see if the viewports in Paper Space
    ' have one or more layer property overrides applied.
    
    Dim acObj As AcadObject
    
    ' Step through the objects in Paper space
    For Each acObj In ThisDrawing.PaperSpace
        ' Check to see if the object is a Viewport
        If acObj.ObjectName = \"AcDbViewport\" Then
            ' Display the Layer Properties Override status for the viewport
            GoSub DISPLAYSTATUS
        End If
    Next acObj
    
    Exit Sub
    
DISPLAYSTATUS:
    Dim vpObj As AcadPViewport
    Set vpObj = acObj
    ' Get the ObjectId for the viewport
    Dim strObjId as string
    strObjId = \"ObjectId: \" + CStr(vpObj.ObjectId)
    ' Display a message based on whether the viewport has layer overrides applied
    If vpObj.LayerPropertyOverrides Then
        MsgBox strObjId + vbLf + \"Viewport does have layer property overrides applied.\", , \"LayerPropertyOverrides Example\"
    Else
        MsgBox strObjId + vbLf + \"Viewport doesn't have any layer property overrides applied.\", , \"LayerPropertyOverrides Example\"
    End If
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LayerPropertyOverrides()
    ;; This example checks to see if the viewports in Paper Space
    ;; have one or more layer property overrides applied.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Step through the objects in Paper space
    (vlax-for acObj (vla-get-PaperSpace doc)
        ;; Check to see if the object is a Viewport
        (if (= (vla-get-ObjectName acObj) \"AcDbViewport\")
            (progn
                ;; Get the ObjectId for the viewport
                (setq strObjId (strcat \"ObjectID: \" (itoa (vla-get-ObjectId acObj))))
                ;; Display a message based on whether the viewport has layer overrides applied
                (if (= (vla-get-LayerPropertyOverrides acObj) :vlax-true)
                    (alert (strcat strObjId
                                   \"\nViewport does have layer property overrides applied.\"))
                    (alert (strcat strObjId
                                   \"\nViewport doesn't have any layer property overrides applied.\"))
                )
            )
        )
    )
)
")
("LayerState" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8CE360A3-D98E-4974-B7E3-BBDAA938EC39"
"
LayerState Property (ActiveX)
Specifies the name of the layer state of the view.
Supported platforms: Windows only
Signature
VBA:
object.LayerState
object
    Type: View
    The object this property applies to.
Property Value
Read-only: No
Type: String
The name of the layer state.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LayerState()
    ' This example demonstrates the
    ' CategoryName, LayoutId, LayerState,
    ' and HasVpAssociation properties of the View object
    
    Dim oLSM As AcadLayerStateManager
    ' Access the LayerStateManager object
    Set oLSM = ThisDrawing.Application. _
       GetInterfaceObject(\"AutoCAD.AcadLayerStateManager.\" & Left(AcadApplication.Version, 2))
    ' Associate the current drawing database with LayerStateManager
    oLSM.SetDatabase ThisDrawing.Database
    oLSM.Save \"ColorLinetype\", acLsColor + acLsLineType
    
    ' Create a view named \"New_View\" in current drawing
    Dim viewObj As AcadView
   
    ' Add the view to the views collection
    Set viewObj = ThisDrawing.Views.Add(\"New_View\")
    MsgBox viewObj.Name & \" has been added.\" & vbCrLf & _
           \"Height: \" & viewObj.Height & vbCrLf & _
           \"Width: \" & viewObj.Width, , \"Example\"
    
    viewObj.CategoryName = \"My View Category\"
    viewObj.LayerState = \"My Layer State\"
    
    viewObj.LayoutId = ThisDrawing.Layouts(1).ObjectID
        
    MsgBox viewObj.CategoryName & \" is the Category name.\" & vbCrLf & _
            viewObj.LayoutId & \" is the Layout ID.\" & vbCrLf & _
            viewObj.LayerState & \" is the Layer state.\"
   
    If viewObj.HasVpAssociation = True Then
        MsgBox \"The view is associated with a paper space viewport.\"
    Else
        MsgBox \"The view is not associated with a paper space viewport.\"
    
   End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LayerState()
    ;; This example demonstrates the
    ;; CategoryName, LayoutId, LayerState,
    ;; and HasVpAssociation properties of the View object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Access the LayerStateManager object
    (setq oLSM (vla-GetInterfaceObject acadObj (strcat \"AutoCAD.AcadLayerStateManager.\" (substr (getvar \"ACADVER\") 1 2))))
    ;; Associate the current drawing database with LayerStateManager
    (vla-SetDatabase oLSM (vla-get-Database doc))
    (vla-Save oLSM \"ColorLinetype\" (+ acLsColor acLsLineType))
    
    ;; Create a view named \"New_View\" in current drawing
    ;; Add the view to the views collection
    (setq viewObj (vla-Add (vla-get-Views doc) \"New_View\"))
    (alert (strcat (vla-get-Name viewObj) \" has been added.\"
                   \"\nHeight: \" (rtos (vla-get-Height viewObj) 2)
                   \"\nWidth: \" (rtos (vla-get-Width viewObj) 2)))
    
    (vla-put-CategoryName viewObj \"My View Category\")
    (vla-put-LayerState viewObj \"ColorLinetype\")
    
    (vla-put-LayoutId viewObj (vla-get-ObjectID (vla-Item (vla-get-Layouts doc) 1)))
    (alert (strcat (vla-get-CategoryName viewObj) \" is the Category name.\"
                   \"\n\" (itoa (vla-get-LayoutId viewObj)) \" is the Layout ID.\"
                   \"\n\" (vla-get-LayerState viewObj) \" is the Layer state.\"))
  
    (if (= (vla-get-HasVpAssociation viewObj) :vlax-true)
        (alert \"The view is associated with a paper space viewport.\")
        (alert \"The view is not associated with a paper space viewport.\")
    )
    (vlax-release-object oLSM)
)
")
("Layers" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D01C8A57-12BE-4EE3-9952-EEBD99818585"
          "
Layers Property (ActiveX)
Gets the Layers collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Layers
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Layers
The Layers collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Layers()
    ' This example finds the current Layers collection and
    ' adds a new layer to that collection.
    
    Dim layerColl As AcadLayers
    Set layerColl = ThisDrawing.Layers
    
    ' Create a dimension style named \"TEST\" in current drawing
    Dim testlayer As AcadLayer
    Set testlayer = layerColl.Add(\"TEST\")
    MsgBox \"A new layer called \" & testlayer.name & \" has been added to the Layers collection.\", vbInformation, \"Layers Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Layers()
    ;; This example finds the current Layers collection and
    ;; adds a new layer to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    (setq layerColl (vla-get-Layers doc))
    
    ;; Create a dimension style named \"TEST\" in current drawing
    (setq testlayer (vla-Add layerColl \"TEST\"))
    (alert (strcat \"A new layer called \" (vla-get-Name testlayer) \" has been added to the Layers collection.\"))
)
")
("Layout" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8C02D136-1FCD-4456-84AC-B1A73BD179C7"
          "
Layout Property (ActiveX)
Specifies the layout associated with the model space, paper space, or block object.
Supported platforms: Windows only
Signature
VBA:
object.Layout
object
    Type: Block, ModelSpace, PaperSpace
    The objects this property applies to.
Property Value
Read-only: No
Type: Layout
The layout that is associated with the model space, paper space, or block object.
Remarks
The Layout object contains the plot settings for the model space, paper space, or block object.
Named plot settings not associated with a given block are stored as PlotConfiguration objects.
Examples
VBA:
Sub Example_Layout()
    ' This example references the Layout object obtained from model space.
    ' We then display information from the Layout object.
    
    Dim Layout As ACADLayout
    
    ' Attach to Layout object
    Set Layout = ThisDrawing.ModelSpace.Layout
    MsgBox \"We now have access to the properties and methods of the model space Layout object!\"
    
    ' Retrieve the name of the model space Layout
    MsgBox \"The name of the model space Layout is: \" & Layout.name
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Layout()
    ;; This example references the Layout object obtained from model space.
    ;; We then display information from the Layout object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    
    ;; Attach to Layout object
    (setq Layout (vla-get-Layout (vla-get-ModelSpace doc)))
    (alert \"We now have access to the properties and methods of the model space Layout object!\")
    
    ;; Retrieve the name of the model space Layout
    (alert (strcat \"The name of the model space Layout is: \" (vla-get-Name Layout.name)))
)
")
("LayoutID" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AA4F0EBB-1A09-4C5E-A971-A54BDAA64512"
            "
LayoutID Property (ActiveX)
Specifies the layout of the view.
Supported platforms: Windows only
Signature
VBA:
object.LayoutID
object
    Type: View
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long_PTR
The ObjectID of the layout.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LayoutID()
    ' This example demonstrates the
    ' CategoryName, LayoutId, LayerState,
    ' and HasVpAssociation properties of the View object
    
    Dim oLSM As AcadLayerStateManager
    ' Access the LayerStateManager object
    Set oLSM = ThisDrawing.Application. _
       GetInterfaceObject(\"AutoCAD.AcadLayerStateManager.\" & Left(AcadApplication.Version, 2))
    ' Associate the current drawing database with LayerStateManager
    oLSM.SetDatabase ThisDrawing.Database
    oLSM.Save \"ColorLinetype\", acLsColor + acLsLineType
    
    ' Create a view named \"New_View\" in current drawing
    Dim viewObj As AcadView
   
    ' Add the view to the views collection
    Set viewObj = ThisDrawing.Views.Add(\"New_View\")
    MsgBox viewObj.Name & \" has been added.\" & vbCrLf & _
           \"Height: \" & viewObj.Height & vbCrLf & _
           \"Width: \" & viewObj.Width, , \"Example\"
    
    viewObj.CategoryName = \"My View Category\"
    viewObj.LayerState = \"My Layer State\"
    
    viewObj.LayoutId = ThisDrawing.Layouts(1).ObjectID
        
    MsgBox viewObj.CategoryName & \" is the Category name.\" & vbCrLf & _
            viewObj.LayoutId & \" is the Layout ID.\" & vbCrLf & _
            viewObj.LayerState & \" is the Layer state.\"
   
    If viewObj.HasVpAssociation = True Then
        MsgBox \"The view is associated with a paper space viewport.\"
    Else
        MsgBox \"The view is not associated with a paper space viewport.\"
    
   End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LayoutID()
    ;; This example demonstrates the
    ;; CategoryName, LayoutId, LayerState,
    ;; and HasVpAssociation properties of the View object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Access the LayerStateManager object
    (setq oLSM (vla-GetInterfaceObject acadObj (strcat \"AutoCAD.AcadLayerStateManager.\" (substr (getvar \"ACADVER\") 1 2))))
    ;; Associate the current drawing database with LayerStateManager
    (vla-SetDatabase oLSM (vla-get-Database doc))
    (vla-Save oLSM \"ColorLinetype\" (+ acLsColor acLsLineType))
    
    ;; Create a view named \"New_View\" in current drawing
    ;; Add the view to the views collection
    (setq viewObj (vla-Add (vla-get-Views doc) \"New_View\"))
    (alert (strcat (vla-get-Name viewObj) \" has been added.\"
                   \"\nHeight: \" (rtos (vla-get-Height viewObj) 2)
                   \"\nWidth: \" (rtos (vla-get-Width viewObj) 2)))
    
    (vla-put-CategoryName viewObj \"My View Category\")
    (vla-put-LayerState viewObj \"ColorLinetype\")
    
    (vla-put-LayoutId viewObj (vla-get-ObjectID (vla-Item (vla-get-Layouts doc) 1)))
    (alert (strcat (vla-get-CategoryName viewObj) \" is the Category name.\"
                   \"\n\" (itoa (vla-get-LayoutId viewObj)) \" is the Layout ID.\"
                   \"\n\" (vla-get-LayerState viewObj) \" is the Layer state.\"))
  
    (if (= (vla-get-HasVpAssociation viewObj) :vlax-true)
        (alert \"The view is associated with a paper space viewport.\")
        (alert \"The view is not associated with a paper space viewport.\")
    )
    (vlax-release-object oLSM)
)
")
("Layouts" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4D435BCF-BD83-46D6-9940-8CA519F29272"
           "
Layouts Property (ActiveX)
Gets the Layouts collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Layouts
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Layouts
The Layouts collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Layouts()
    ' This example will access the Layouts collection for the current drawing
    ' and list basic information about the Layouts in the drawing.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    msg = vbCrLf    ' Start with a space
    
    ' Get the names of every layout in this drawing
    For Each Layout In Layouts
        msg = msg & Layout.name & vbCrLf
    Next
    
    ' Display a list of available layouts
    MsgBox \"There are \" & Layouts.count & \" layouts in \" & _
           ThisDrawing.WindowTitle & \":\" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Layouts()
    ;; This example will access the Layouts collection for the current drawing
    ;; and list basic information about the Layouts in the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\")   ;; Start with a space
    
    ;; Get the names of every layout in this drawing
    (vlax-for Layout Layouts
        (setq msg (strcat msg (vla-get-Name Layout) \"\n\"))
    )
    
    ;; Display a list of available layouts
    (alert (strcat \"There are \" (itoa (vla-get-Count Layouts)) \" layouts in \"
                   (vla-get-WindowTitle doc) \":\n\" msg))
)
")
("Leader1Point" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-993EA61B-01EC-491A-A6B5-B05E38F85CD7"
                "
Leader1Point Property (ActiveX)
Specifies the origin of leader 1.
Supported platforms: Windows only
Signature
VBA:
object.Leader1Point
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Variant
The origin of leader 1.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Leader2Point" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3332BFBE-6426-42DD-B46F-79EFECE05907"
                "
Leader2Point Property (ActiveX)
Specifies the origin of leader 2.
Supported platforms: Windows only
Signature
VBA:
object.Leader2Point
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: Variant
The origin of leader 2.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LeaderCount" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-71008474-8C2E-4E9C-9B40-5BD1B452D587"
"
LeaderCount Property (ActiveX)
Gets the number of leader line clusters in this MLeader object.
Supported platforms: Windows only
Signature
VBA:
object.LeaderLineColor
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
A value which stands for the leader line cluster count.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				                             )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("LeaderLength" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A0F745BF-7F78-44B9-B90C-D39B831BAE64"
"
LeaderLength Property (ActiveX)
Specifies the length of the leader on the diameter or radius dimension.
Supported platforms: Windows only
Signature
VBA:
object.LeaderLength
object
    Type: DimDiametric, DimRadial
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The length of the leader.
Remarks
The LeaderLength is the distance from the ChordPoint dimension definition point out to where the dimension will do a horizontal dogleg to the annotation text (or stop if no dogleg is necessary). (See the AddDimDiametric or AddDimRadial method for more information.)
Note: The LeaderLength setting will be used only during the creation of the dimension. After the dimension has been saved, changing the LeaderLength value will not affect how the dimension displays. The LeaderLength property is used to calculate the leader location. The value is not saved, and therefore will always return a zero if read.
Examples
VBA:
Sub Example_LeaderLength()
    ' This example creates a diametric dimension
    ' and returns the LeaderLength for that dimension.
    
    Dim dimObj As AcadDimDiametric
    Dim chordPoint(0 To 2) As Double
    Dim farChordPoint(0 To 2) As Double
    Dim leaderLength As Double
    
    ' Define the dimension
    chordPoint(0) = 5#: chordPoint(1) = 3#: chordPoint(2) = 0#
    farChordPoint(0) = 5#: farChordPoint(1) = 5#: farChordPoint(2) = 0#
    leaderLength = 1#
    
    ' Create the diametric dimension in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimDiametric(chordPoint, farChordPoint, leaderLength)
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLength()
    ;; This example creates a diametric dimension
    ;; and returns the LeaderLength for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq chordPoint (vlax-3d-point 5 3 0)
          farChordPoint (vlax-3d-point 5 5 0)
          leaderLength 1)
    
    ;; Create the diametric dimension in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimDiametric modelSpace chordPoint farChordPoint leaderLength))
    (vla-ZoomAll acadObj)
)
")
("LeaderLineColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6FFAED08-A300-4952-8928-64E0A1F8D95B"
                   "
LeaderLineColor Property (ActiveX)
Specifies the color of the leader lines.
Supported platforms: Windows only
Signature
VBA:
object.LeaderLineColor
object
    Type: MLeader, MLeaderLeader, MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcCmColor
A value which stands for the leader line color display.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("LeaderLineType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B98CCE6B-055B-4839-8A60-B5C9BA5DE110"
                  "
LeaderLinetype Property (ActiveX)
Specifies the type of the leader lines.
Supported platforms: Windows only
Signature
VBA:
object.LeaderLinetype
object
    Type: MLeader, MLeaderLeader, MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_LTYPE
A value which stands for the leader line's linetype.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("LeaderLineTypeId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-72ED034A-6CE4-4815-B23B-F222B3CF9DBA"
                    "
LeaderLineTypeId Property (ActiveX)
Specifies the linetype of leader lines of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.LeaderLineTypeId
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_LTYPE
The leader line type ID value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LeaderLineWeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E634FC41-6495-4D72-BA06-80B8584E8B8D"
                    "
LeaderLineWeight Property (ActiveX)
Specifies the lineweight of the leader lines.
Supported platforms: Windows only
Signature
VBA:
object.LeaderLineWeight
object
    Type: MLeader, MLeaderLeader, MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_LWEIGHT
A value which stands for the leader line's lineweight.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LeaderType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0CB6A8E7-861A-424E-8F08-D48BDE7E31C2"
"
LeaderType Property (ActiveX)
Specifies the type of the leader.
Supported platforms: Windows only
Signature
VBA:
object.LeaderType
object
    Type: MLeader, MLeaderLeader
    The object this property applies to.
Property Value
Read-only: No
Type: AcMLeaderType enum
    acInVisibleLeader: No leader
    acSplineLeader: Spline leader
    acStraightLeader: Straight leader
Remarks
No additional remarks.
Examples
VBA:
Sub Example_LeaderLine()
    Dim oML As AcadMLeader
    Dim points(0 To 5) As Double
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    Dim r As Long
    r = oML.AddLeader()
    points(4) = 10
    Call oML.AddLeaderLine(r, points)
    MsgBox \"LeaderCount = \" & oML.LeaderCount
    ZoomExtents
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LeaderLine()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(1 1 0
                                  4 4 0
				 )
    )  
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    (setq r (vla-AddLeader oML))
    (vlax-safearray-put-element points 4 10)
    (vla-AddLeaderLine oML r points)
    (alert (strcat \"LeaderCount = \" (itoa (vla-get-LeaderCount oML))))
    (vla-ZoomExtents acadObj)
)
")
("Length" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6D7C13B5-1DAB-4591-80E5-8C05923331F3"
"
Length Property (ActiveX)
Gets the length of an object.
Supported platforms: Windows only
Signature
VBA:
object.Length
object
    Type: 3DPolyline, Line, LWPolyline, PointCloud, Polyline, SweptSurface
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Double
The length of the line.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Length()
   ' This example adds a line in model space and returns the length of the new line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double, endPoint(0 To 2)  As Double
    
    ' Define the start and end points for the line
    startPoint(0) = 1: startPoint(1) = 1: startPoint(2) = 0
    endPoint(0) = 5: endPoint(1) = 5: endPoint(2) = 0
    ' Create the line in model space
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The length of the new Line is: \" & lineObj.length
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Length()
    ;; This example adds a line in model space and returns the length of the new line
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the start and end points for the line
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    ;; Create the line in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The length of the new Line is: \" (rtos (vla-get-Length lineObj) 2)))
)
")
("LensLength" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D81A20CE-6E51-4E3E-8AD0-ADCF773FEE6E"
"
LensLength Property (ActiveX)
Specifies the lens length used in perspective viewing.
Supported platforms: Windows only
Signature
VBA:
object.LensLength
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The length of the lens in millimeters.
Remarks
Note: The value of this property is stored in the LENSLENGTH system variable.
Examples
VBA:
Sub Example_LensLength()
    ' This example creates a new paper space viewport.
    ' It then displays the lens length of the viewport.
    
    Dim pviewportObj As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the paper space viewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40
    height = 40
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    ' Create the paper space viewport
    Set pviewportObj = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    pviewportObj.DISPLAY True
    ThisDrawing.mspace = True
    ThisDrawing.ActivePViewport = pviewportObj
    ThisDrawing.Regen acAllViewports
    
    ' Find the Lens Length for the viewport
    Dim lenslgnth As Double
    lenslgnth = pviewportObj.LensLength
    MsgBox \"The lens length of the paperspace viewport is \" & pviewportObj.LensLength, , \"LensLength Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LensLength()
    ;; This example creates a new paper space viewport.
    ;; It then displays the lens length of the viewport.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
          height 40)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    ;; Create the paper space viewport
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj (vla-AddPViewport paperSpace center width height))
    (vla-Display pviewportObj :vlax-true)
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc pviewportObj)
    (vla-Regen doc acAllViewports)
    
    ;; Find the Lens Length for the viewport
    (setq lenslgnth (vla-get-LensLength pviewportObj))
    (alert (strcat \"The lens length of the paperspace viewport is \" (rtos lenslgnth 2)))
)
")
("Limits" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-30E059A2-A0C0-4F1A-B021-0478AF950D6E"
          "
Limits Property (ActiveX)
Specifies the drawing limits.
Supported platforms: Windows only
Signature
VBA:
object.Limits
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (array of doubles)
An array of four values. The first pair of values define the X and Y coordinates of the lower-left limit, the second pair of values define the X and Y coordinates of the upper-right limit.
Remarks
The drawing limits are two-dimensional points in the World Coordinate System (WCS) that represent a lower-left and an upper-right limit. You cannot impose limits on the Z direction.
The drawing limits also govern the portion of the drawing covered by the visible grid and determine the minimum area that the ZoomAll method displays.
Note: The lower-left limit controls the LIMMIN system variable. The upper-right limit controls the LIMMAX system variable. The LIMCHECK system variable turns limits checking on and off for the current space.
Examples
VBA:
Sub Example_Limits()
    ' This example finds the current limits for the drawing.
    ' It then changes the limits for the drawing. The grid
    ' is turned on to show the limits.
    
    ' Turn on the grid for the active viewport
    ThisDrawing.ActiveViewport.GridOn = True
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    
    ' Find the current limits
    Dim currLimits As Variant
    currLimits = ThisDrawing.Limits
    MsgBox \"The current drawing limits are \" & vbCrLf _
           & \"Lower-left corner \" & ThisDrawing.Limits(0) & \", \" & ThisDrawing.Limits(1) & vbCrLf _
           & \"Upper-right corner \" & ThisDrawing.Limits(2) & \", \" & ThisDrawing.Limits(3), , \"Limits Example\"
           
    ' Change the limits
    Dim newLimits(0 To 3) As Double
    newLimits(0) = 2#: newLimits(1) = 2#: newLimits(2) = 4#: newLimits(3) = 4#
    ThisDrawing.Limits = newLimits
    ThisDrawing.Regen acActiveViewport
    MsgBox \"The new drawing limits are \" & vbCrLf _
           & \"Lower-left corner \" & ThisDrawing.Limits(0) & \", \" & ThisDrawing.Limits(1) & vbCrLf _
           & \"Upper-right corner \" & ThisDrawing.Limits(2) & \", \" & ThisDrawing.Limits(3), , \"Limits Example\"
    
    ' Reset the drawing limits
    ThisDrawing.Limits = currLimits
    ThisDrawing.Regen acActiveViewport
    MsgBox \"The drawing limits have been reset to \" & vbCrLf _
           & \"Lower-left corner \" & ThisDrawing.Limits(0) & \", \" & ThisDrawing.Limits(1) & vbCrLf _
           & \"Upper-right corner \" & ThisDrawing.Limits(2) & \", \" & ThisDrawing.Limits(3), , \"Limits Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Limits()
    ;; This example finds the current limits for the drawing.
    ;; It then changes the limits for the drawing. The grid
    ;; is turned on to show the limits.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Turn on the grid for the active viewport
    (vla-put-GridOn (vla-get-ActiveViewport doc) :vlax-true)
    (vla-put-ActiveViewport doc (vla-get-ActiveViewport doc))
    
    ;; Find the current limits
    (setq currLimits (vlax-variant-value (vla-get-Limits doc)))
    (setq tempLimits (vlax-safearray->list currLimits))
    (alert (strcat \"The current drawing limits are\"
                   \"\nLower-left corner \" (rtos (nth 0 tempLimits) 2) \", \" (rtos (nth 1 tempLimits) 2)
                   \"\nUpper-right corner \" (rtos (nth 2 tempLimits) 2) \", \" (rtos (nth 3 tempLimits) 2)))
    ;; Change the limits
    (setq newLimits (vlax-make-safearray vlax-vbDouble '(0 . 3)))
    (vlax-safearray-fill newLimits '(2 2 4 4))    
    (vla-put-Limits doc newLimits)
    (vla-Regen doc acActiveViewport)
    (setq tempLimits (vlax-safearray->list newLimits))
    (alert (strcat \"The new drawing limits are\"
                   \"\nLower-left corner \" (rtos (nth 0 tempLimits) 2) \", \" (rtos (nth 1 tempLimits) 2)
                   \"\nUpper-right corner \" (rtos (nth 2 tempLimits) 2) \", \" (rtos (nth 3 tempLimits) 2)))
  
    ;; Reset the drawing limits
    (vla-put-Limits doc currLimits)
    (vla-Regen doc acActiveViewport)
    (setq tempLimits (vlax-safearray->list currLimits))  
    (alert (strcat \"The drawing limits have been reset to\"
                   \"\nLower-left corner \" (rtos (nth 0 tempLimits) 2) \", \" (rtos (nth 1 tempLimits) 2)
                   \"\nUpper-right corner \" (rtos (nth 2 tempLimits) 2) \", \" (rtos (nth 3 tempLimits) 2)))
)
")
("LineSpacingDistance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-13A19CD9-C287-48AA-B6DC-8ED79EF53B20"
                       "
LineSpacingDistance Property (ActiveX)
Specifies the spacing of multiline text.
Supported platforms: Windows only
Signature
VBA:
object.LineSpacingDistance
object
    Type: GeoPositionMarker, MText
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The spacing of multiline text.
Remarks
MText: The value contained in this property is the Line Space Distance property in the Properties palette.
Examples
VBA:
Sub Example_LineSpacingDistance()
    ' This example creates an MText object, displays the value of the LineSpacingDistance property,
    ' changes the value of the property, and then resets the value to the original value.
    
    Dim MTextObj As AcadMText
    Dim width As Double
    Dim text As String
    Dim CurrentDistance As Double
    Dim corner(0 To 2) As Double
    corner(0) = 0
    corner(1) = 10
    corner(2) = 0
    width = 10
    text = \"This is the text for the MText object\"
    ' Creates the MText Object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
    ' Find the current LineSpacingDistance
    CurrentDistance = MTextObj.LineSpacingDistance
    MsgBox \"The LineSpacingDistance for the MText object is: \" & CurrentDistance
    
    ' Change the LineSpacingDistance
    MTextObj.LineSpacingDistance = 0.7
    MsgBox \"The LineSpacingDistance for the MText object is: \" & MTextObj.LineSpacingDistance
    
    ' Reset the LineSpacingDistance
    MTextObj.LineSpacingDistance = CurrentDistance
    MsgBox \"The LineSpacingDistance for the MText object is: \" & MTextObj.LineSpacingDistance
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LineSpacingDistance()
    ;; This example creates an MText object, displays the value of the LineSpacingDistance property,
    ;; changes the value of the property, and then resets the value to the original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq corner (vlax-3d-point 0 10 0)
          width 10
          text \"This is the text for the MText object\")
  
    ;; Creates the MText Object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
    
    ;; Find the current LineSpacingDistance
    (setq CurrentDistance (vla-get-LineSpacingDistance MTextObj))
    (alert (strcat \"The LineSpacingDistance for the MText object is: \" (rtos CurrentDistance 2)))
    
    ;; Change the LineSpacingDistance
    (vla-put-LineSpacingDistance MTextObj 0.7)
    (alert (strcat \"The LineSpacingDistance for the MText object is: \" (rtos (vla-get-LineSpacingDistance MTextObj) 2)))
    
    ;; Reset the LineSpacingDistance
    (vla-put-LineSpacingDistance MTextObj CurrentDistance)
    (alert (strcat \"The LineSpacingDistance for the MText object is: \" (rtos (vla-get-LineSpacingDistance MTextObj) 2)))
)
")
("LineSpacingFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-429D5E20-4522-4699-BEC8-0D27CA17EDDF"
                     "
LineSpacingFactor Property (ActiveX)
Specifies the relative line spacing factor for the MText object.
Supported platforms: Windows only
Signature
VBA:
object.LineSpacingFactor
object
    Type: GeoPositionMarker, MText
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The relative line spacing factor for the MText object. Enter a value between 0.25 and 4 inclusive.
Remarks
The spacing factor is the vertical distance between the baseline of one text line and the baseline of the next text line. The spacing factor is set as a multiple of single line spacing.
You can set the line spacing to be either \"At Least\" the specified distance, or \"Exactly\" the specified distance by using the LineSpacingStyle property.
Examples
VBA:
Sub Example_LineSpacingFactor()
    ' This example creates an MText object in model space
    ' and then finds the LineSpacingFactor for the object.
    
    Dim MTextObj As AcadMText
    Dim corner(0 To 2) As Double
    Dim width As Double
    Dim text As String
    corner(0) = 0#: corner(1) = 10#: corner(2) = 0#
    width = 10
    text = \"This is the text String for the mtext Object\"
    ' Creates the MText Object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
    ' Find the current LineSpacingFactor
    Dim currFactor As Double
    currFactor = MTextObj.LineSpacingFactor
    MsgBox \"The LineSpacingFactor for the MText object is: \" & currFactor
    
    ' Change the LineSpacingFactor
    MTextObj.LineSpacingFactor = 4
    MsgBox \"The LineSpacingFactor for the MText object is: \" & MTextObj.LineSpacingFactor
    
    ' Reset the LineSpacingFactor
    MTextObj.LineSpacingFactor = currFactor
    MsgBox \"The LineSpacingFactor for the MText object is: \" & MTextObj.LineSpacingFactor
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LineSpacingFactor()
    ;; This example creates an MText object in model space
    ;; and then finds the LineSpacingFactor for the object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq corner (vlax-3d-point 0 10 0)
          width 10
          text \"This is the text String for the mtext Object\")
    ;; Creates the MText Object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
    
    ;; Find the current LineSpacingFactor
    (setq currFactor (vla-get-LineSpacingFactor MTextObj))
    (alert (strcat \"The LineSpacingFactor for the MText object is: \" (rtos currFactor 2)))
    
    ;; Change the LineSpacingFactor
    (vla-put-LineSpacingFactor MTextObj 0.7)
    (alert (strcat \"The LineSpacingFactor for the MText object is: \" (rtos (vla-get-LineSpacingFactor MTextObj) 2)))
    
    ;; Reset the LineSpacingFactor
    (vla-put-LineSpacingFactor MTextObj currFactor)
    (alert (strcat \"The LineSpacingFactor for the MText object is: \" (rtos (vla-get-LineSpacingFactor MTextObj) 2)))
)
")
("LineSpacingStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F2313E05-2429-4B28-8D6B-8D474F1DA746"
                    "
LineSpacingStyle Property (ActiveX)
Specifies the line spacing style for the MText object.
Supported platforms: Windows only
Signature
VBA:
object.LineSpacingStyle
object
    Type: GeoPositionMarker, MText
    The object this property applies to.
Property Value
Read-only: No
Type: acLineSpacingStyle enum
    acLineSpacingStyleAtLeast
    acLineSpacingStyleExactly
Remarks
The acLineSpacingStyleAtLeast setting allows the spacing between different lines of text to adjust automatically, based on the height of the largest character in a line of text. The acLineSpacingStyleExactly setting forces the line spacing to be the same size for all the lines in the MText object regardless of formatting overrides.
Examples
VBA:
Sub Example_LineSpacingFactor()
    ' This example creates an MText object in model space
    ' and then finds the LineSpacingFactor for the object.
    
    Dim MTextObj As AcadMText
    Dim corner(0 To 2) As Double
    Dim width As Double
    Dim text As String
    corner(0) = 0#: corner(1) = 10#: corner(2) = 0#
    width = 10
    text = \"This is the text String for the mtext Object\"
    ' Creates the MText Object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
    ' Find the current LineSpacingFactor
    Dim currFactor As Double
    currFactor = MTextObj.LineSpacingFactor
    MsgBox \"The LineSpacingFactor for the MText object is: \" & currFactor
    
    ' Change the LineSpacingFactor
    MTextObj.LineSpacingFactor = 4
    MsgBox \"The LineSpacingFactor for the MText object is: \" & MTextObj.LineSpacingFactor
    
    ' Reset the LineSpacingFactor
    MTextObj.LineSpacingFactor = currFactor
    MsgBox \"The LineSpacingFactor for the MText object is: \" & MTextObj.LineSpacingFactor
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LineSpacingFactor()
    ;; This example creates an MText object in model space
    ;; and then finds the LineSpacingFactor for the object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq corner (vlax-3d-point 0 10 0)
          width 10
          text \"This is the text String for the mtext Object\")
    ;; Creates the MText Object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
    
    ;; Find the current LineSpacingFactor
    (setq currFactor (vla-get-LineSpacingFactor MTextObj))
    (alert (strcat \"The LineSpacingFactor for the MText object is: \" (rtos currFactor 2)))
    
    ;; Change the LineSpacingFactor
    (vla-put-LineSpacingFactor MTextObj 0.7)
    (alert (strcat \"The LineSpacingFactor for the MText object is: \" (rtos (vla-get-LineSpacingFactor MTextObj) 2)))
    
    ;; Reset the LineSpacingFactor
    (vla-put-LineSpacingFactor MTextObj currFactor)
    (alert (strcat \"The LineSpacingFactor for the MText object is: \" (rtos (vla-get-LineSpacingFactor MTextObj) 2)))
)
")
("LinearScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-17D4F009-070C-472A-9B71-9A94FA57788C"
"
LinearScaleFactor Property (ActiveX)
Specifies a global scale factor for linear dimensioning measurements.
Supported platforms: Windows only
Signature
VBA:
object.LinearScaleFactor
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A real number greater than 0.0.
Remarks
The initial value for this property is 1.0000.
When LinearScaleFactor is assigned a negative value, the factor is only applied in paper space. The paper space factor to be applied is the absolute value of this property.
Note: This property overrides the value of the DIMLFAC system variable for the given dimension.
Examples
VBA:
Sub Example_LinearScaleFactor()
    ' This example creates an aligned dimension in model space and
    ' turns on the tolerance display for the new dimension.  The LinearScaleFactor
    ' of the tolerance is then read and modified.
    '
    ' * Note the change in the text of the dimension after the modification.
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentScale As Integer
    
    ' Define the dimension
    point1(0) = 1: point1(1) = 10: point1(2) = 0
    point2(0) = 10: point2(1) = 10: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Turn on the tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    ThisDrawing.Application.ZoomAll
    
    ' Display current scale factor
    MsgBox dimObj.LinearScaleFactor
    ' Change current scale factor
    dimObj.LinearScaleFactor = 10#      ' Multiply by ten
    ThisDrawing.Regen acAllViewports
    ' Display new scale factor
    MsgBox dimObj.LinearScaleFactor
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LinearScaleFactor()
    ;; This example creates an aligned dimension in model space and
    ;; turns on the tolerance display for the new dimension.  The LinearScaleFactor
    ;; of the tolerance is then read and modified.
    ;;
    ;; * Note the change in the text of the dimension after the modification.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 1 10 0)
          point2 (vlax-3d-point 10 10 0) 
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Turn on the tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    (vla-ZoomAll acadObj)
    
    ;; Display current scale factor
    (alert (rtos (vla-get-LinearScaleFactor dimObj) 2))
    ;; Change current scale factor
    (vla-put-LinearScaleFactor dimObj 10)      ;; Multiply by ten
    (vla-Regen doc acAllViewports)
    ;; Display new scale factor
    (alert (rtos (vla-get-LinearScaleFactor dimObj) 2))
)
")
("Linetype" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2EEC97F1-0956-47DA-9FF4-1058EAA173A8"
            "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-17D4F009-070C-472A-9B71-9A94FA57788C")
("LinetypeGeneration" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-40F4B7B9-CB82-4D62-AD82-1BCFDBBC9F81"
                      "
LinetypeGeneration Property (ActiveX)
Specifies the linetype generation of a 2D polyline or a lightweight polyline.
Supported platforms: Windows only
Signature
VBA:
object.LinetypeGeneration
object
    Type: LWPolyline, Polyline
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Generates the linetype in a continuous pattern through the polyline vertices.
    False: Generates the linetype starting and ending with a dash at each polyline vertex.
Remarks
This property does not apply to polylines with tapered segments.
A polyline with linetype generation set to true (left) and set to false (right)
Examples
VBA:
Sub Example_LinetypeGeneration()
    ' This example creates a polyline in model space and
    ' queries and changes the linetype generation for
    ' the polyline.
    
    ' To see the effect of changing the linetype generation, set
    ' the linetype of the polyline to something other than continuous,
    ' ByBlock, or ByLayer.
    
    Dim plineObj As AcadPolyline
    Dim points(0 To 14) As Double
    
    ' Define the 2D polyline points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
        
    ' Create a lightweight Polyline object in model space
    Set plineObj = ThisDrawing.ModelSpace.AddPolyline(points)
    ZoomAll
    
    ' Find the current linetype generation for the polyline
    MsgBox \"The linetype generation for the polyline is: \" & plineObj.LinetypeGeneration
    
    ' Change the linetype generation
    plineObj.LinetypeGeneration = Not plineObj.LinetypeGeneration
    plineObj.Update
    MsgBox \"The linetype generation for the polyline is now: \" & plineObj.LinetypeGeneration
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LinetypeGeneration()
    ;; This example creates a polyline in model space and
    ;; queries and changes the linetype generation for
    ;; the polyline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; To see the effect of changing the linetype generation, set
    ;; the linetype of the polyline to something other than continuous,
    ;; ByBlock, or ByLayer.
    ;; Define the 2D polyline points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
				  1 2 0
				  2 2 0
				  3 2 0
				  4 4 0
				 )
    )
        
    ;; Create a lightweight Polyline object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq plineObj (vla-AddPolyline modelSpace points))
    (vla-ZoomAll acadObj)
    
    ;; Find the current linetype generation for the polyline
    (alert (strcat \"The linetype generation for the polyline is: \" (if (= (vla-get-LinetypeGeneration plineObj) :vlax-true) \"True\" \"False\")))
    
    ;; Change the linetype generation
    (vla-put-LinetypeGeneration plineObj (if (= (vla-get-LinetypeGeneration plineObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Update plineObj)
    (alert (strcat \"The linetype generation for the polyline is now: \" (if (= (vla-get-LinetypeGeneration plineObj) :vlax-true) \"True\" \"False\")))
)
")
("LinetypeScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-203A67F6-12BF-4F10-B8E8-C8B9A12CDCBD"
"
LinetypeScale Property (ActiveX)
Specifies the linetype scale of an object.
Supported platforms: Windows only
Signature
VBA:
object.LinetypeScale
object
    Type: All drawing objects, AttributeReference, Group, SubDMeshEdge, SubDMeshFace, SubDMeshVertex, SubEntity, SubEntSolidEdge, SubEntSolidFace, SubEntSolidNode, SubEntSolidVertex
    The objects this property applies to.
Property Value
Read-only: No; except for a Group object which is write-only
Type: Double
This value must be a positive real number. The default is 1.0.
Remarks
The linetype scale of an object specifies the relative length of dash-dot linetypes per drawing unit.
    : Linetype scale = 1.0
    : Linetype scale = 0.5
    : Linetype scale = 0.25
Examples
VBA:
Sub Example_LinetypeScale()
    ' This example creates a line and finds the linetype scale
    ' for the line. It then changes the linetype scale, and finally
    ' resets the linetype scale back to the original value.
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    Dim lineObj As AcadLine
    Dim currLTScale As Double
    ' Create a Line object in model space
    startPoint(0) = 2#: startPoint(1) = 2#: startPoint(2) = 0#
    endPoint(0) = 4#: endPoint(1) = 4#: endPoint(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    lineObj.Update
    currLTScale = lineObj.LinetypeScale
    MsgBox \"The linetype scale for the line is: \" & lineObj.LinetypeScale, vbInformation, \"Linetypes Example\"
    ' Set the linetype scale of a Line to .5
    lineObj.LinetypeScale = 0.5
    lineObj.Update
    MsgBox \"The new linetype scale for the line is: \" & lineObj.LinetypeScale, vbInformation, \"Linetypes Example\"
    
    ' Reset the linetype scale of a Line to what is was before
    lineObj.LinetypeScale = currLTScale
    lineObj.Update
    MsgBox \"The linetype scale for the line is reset to: \" & lineObj.LinetypeScale, vbInformation, \"Linetypes Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LinetypeScale()
    ;; This example creates a line and finds the linetype scale
    ;; for the line. It then changes the linetype scale, and finally
    ;; resets the linetype scale back to the original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a Line object in model space
    (setq startPoint (vlax-3d-point 2 2 0)
          endPoint (vlax-3d-point 4 4 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-Update lineObj)
  
    (setq currLTScale (vla-get-LinetypeScale lineObj))
    (alert (strcat \"The linetype scale for the line is: \" (rtos currLTScale 2)))
    ;; Set the linetype scale of a Line to .5
    (vla-put-LinetypeScale lineObj 0.5)
    (vla-Update lineObj)
    (alert (strcat \"The new linetype scale for the line is: \" (rtos (vla-get-LinetypeScale lineObj) 2)))
    
    ;; Reset the linetype scale of a Line to what is was before
    (vla-put-LinetypeScale lineObj currLTScale)
    (vla-Update lineObj)
    (alert (strcat \"The linetype scale for the line is reset to: \" (rtos (vla-get-LinetypeScale lineObj) 2)))
)
")
("Linetypes" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BADF9960-D671-46DC-B887-334D72A4B295"
             "
Linetypes Property (ActiveX)
Gets the Linetypes collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Linetypes
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Linetypes
The Linetypes collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Linetypes()
    ' This example finds the linetypes collection and
    ' lists all the available linetypes in the collection.
    
    Dim linetypeColl As AcadLineTypes
    Dim entry As AcadLineType
    Dim msg As String
    
    ' Return the linetype collection object of the active document
    Set linetypeColl = ThisDrawing.Linetypes
    ' List all available linetypes
    For Each entry In linetypeColl
        msg = msg & entry.name & vbCrLf
    Next
    MsgBox \"The linetypes available in this drawing are:\" & vbCrLf & msg, vbInformation, \"Linetypes Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Linetypes()
    ;; This example finds the linetypes collection and
    ;; lists all the available linetypes in the collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Return the linetype collection object of the active document
    (setq linetypeColl (vla-get-Linetypes doc))
  
    ;; List all available linetypes
    (setq msg \"\")
    (vlax-for entry linetypeColl
        (setq msg (strcat msg (vla-get-Name entry) \"\n\"))
    )
    (alert (strcat \"The linetypes available in this drawing are:\n\" msg))
)
")
("Lineweight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DE1AC635-BCEA-428F-A47D-80E35EFE55D3"
              "
Lineweight Property (ActiveX)
Specifies the lineweight of an individual object or the default lineweight for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.Lineweight
object
    Type: All drawing objects, DatabasePreferences, Layer, SubDMeshEdge, SubDMeshFace, SubDMeshVertex, SubEntity, SubEntSolidEdge, SubEntSolidFace, SubEntSolidNode, SubEntSolidVertex
    The objects this property applies to.
Property Value
Read-only: No
Type: acLineWeight enum
    acLnWtByLayer
    acLnWtByBlock
    acLnWtByLwDefault
    acLnWt000
    acLnWt005
    acLnWt009
    acLnWt013
    acLnWt015
    acLnWt018
    acLnWt020
    acLnWt025
    acLnWt030
    acLnWt035
    acLnWt040
    acLnWt050
    acLnWt053
    acLnWt060
    acLnWt070
    acLnWt080
    acLnWt090
    acLnWt100
    acLnWt106
    acLnWt120
    acLnWt140
    acLnWt158
    acLnWt200
    acLnWt211
Remarks
The initial value for this property is acLnWtByBlock.
Lineweight values consist of standard settings including BYLAYER, BYBLOCK, and DEFAULT. The DEFAULT value is set by the LWDEFAULT system variable and defaults to a value of 0.01 in. or 0.25 mm. All new objects and layers have a default setting of DEFAULT. The lineweight value of 0 plots at the thinnest lineweight available on the specified plotting device and is displayed at one pixel wide in model space.
Examples
VBA:
Sub Example_LineWeight()
    ' This example creates a circle in model space and then
    ' finds the current lineweight for the circle. The lineweight
    ' is then changed to a new value.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ZoomAll
    
    ' Find the lineweight for the circle
    MsgBox \"The current lineweight for the circle is \" & circleObj.Lineweight
    
    ' Change the lineweight for the circle
    circleObj.Lineweight = acLnWt211
    circleObj.Update
    MsgBox \"The current lineweight for the circle is \" & circleObj.Lineweight
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LineWeight()
    ;; This example creates a circle in model space and then
    ;; finds the current lineweight for the circle. The lineweight
    ;; is then changed to a new value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    ;; Find the lineweight for the circle
    (alert (strcat \"The current lineweight for the circle is \" (itoa (vla-get-Lineweight circleObj))))
    
    ;; Change the lineweight for the circle
    (vla-put-Lineweight circleObj acLnWt211)
    (vla-Update circleObj)
    (alert (strcat \"The current lineweight for the circle is \" (itoa (vla-get-Lineweight circleObj))))
)
")
("LineweightDisplay" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9530FD9D-2BF9-476F-8A7A-C85842E56B10"
"
LineweightDisplay Property (ActiveX)
Specifies whether lineweights are displayed in model space for the drawing.
Supported platforms: Windows only
Signature
VBA:
object.LineweightDisplay
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Lineweights are displayed in model space.
    False: Lineweights are not displayed in model space.
Remarks
The initial value for this property is True.
AutoCAD regeneration time increases with lineweights that are represented by more than one pixel. Set this property to False if AutoCAD performance slows down when working with large lineweights.
Examples
VBA:
Sub Example_LineweightDisplay()
    ' This example reads and modifies the preference value that controls
    ' whether symbol names may include extended character sets, or more
    ' than 31 characters.
    '
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.LineWeightDisplay
    MsgBox \"The LineweightDisplay preference is set to: \" & originalValue
    ' Modify the LineweightDisplay preference by toggling the value
    ACADPref.LineWeightDisplay = Not (ACADPref.LineWeightDisplay)
    newValue = ACADPref.LineWeightDisplay
    MsgBox \"The LineweightDisplay preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.LineWeightDisplay = originalValue
    MsgBox \"The LineweightDisplay preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LineweightDisplay()
    ;; This example reads and modifies the preference value that controls
    ;; the display of lineweights in the drawing window.
    ;;
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-LineWeightDisplay preferences))
    (alert (strcat \"The LineweightDisplay preference is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the LineweightDisplay preference by toggling the value
    (vla-put-LineWeightDisplay preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-LineWeightDisplay preferences))
    (alert (strcat \"The LineweightDisplay preference has been set to: \" (if (= newValue :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-LineWeightDisplay preferences originalValue)
    (alert (strcat \"The LineweightDisplay preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("LiveSectionEnabled" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3CE8C36B-B1D8-4FB4-BC3A-63926CC5EE68"
                      "
LiveSectionEnabled Property (ActiveX)
Turns live section on or off for this section object.
Supported platforms: Windows only
Signature
VBA:
object.LiveSectionEnabled
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Live section is enabled for the section object.
    False: Live section is not enabled for the section object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LocaleID" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7A8C2188-FB2F-4D88-B6C3-1311967B65D8"
            "
LocaleID Property (ActiveX)
Gets the locale ID of the current AutoCAD session.
Supported platforms: Windows only
Signature
VBA:
object.LocaleID
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
The locale ID of the current AutoCAD session.
Remarks
The locale ID is defined by the operating system.
Examples
VBA:
Sub Example_LocaleID()
    ' This code retrieves the Locale ID and displays it in a message box
    MsgBox \"The locale ID is \" & ThisDrawing.Application.LocaleId, , \"LocaleID Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LocaleId()
    ;; This code retrieves the Locale ID and displays it in a message box
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (alert (strcat \"The locale ID is \" (itoa (vla-get-LocaleId acadObj))))
)
")
("Lock" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-49CA344E-0F8C-4AB2-8336-9E696F8BD5D7"
"
Lock Property (ActiveX)
Locks or unlocks a layer.
Supported platforms: Windows only
Signature
VBA:
object.Lock
object
    Type: Layer
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The layer is locked.
    False: The layer is unlocked.
Remarks
You cannot edit objects on a locked layer; however, they are still visible if the layer is on and thawed. You can make a locked layer active and you can add objects to it. You can also apply object snap modes to objects on locked layers. You can freeze and turn off locked layers and change their associated colors.
Locking is useful when you want to edit objects that are associated with particular layers but also want to view objects on other layers.
Examples
VBA:
Sub Example_Lock()
    ' This example creates a new layer called \"Lock\".
    ' It then displays the status of the Lock property
    ' for the new layer, toggles the status of the
    ' Lock property, and again displays its status.
    ' After running this example, you can check the layer
    ' control on the Object Properties tool bar. It will
    ' show the new layer and the latest Lock status.
    
    Dim layerObj As AcadLayer
    
    ' Create the new layer
    Set layerObj = ThisDrawing.Layers.Add(\"Lock\")
    
    ' Display the Lock status of the new layer
    GoSub DISPLAYSTATUS
    
    ' Toggle the status of the Lock property for the layer
    layerObj.Lock = Not (layerObj.Lock)
    
    ' Display the Lock status of the new layer
    GoSub DISPLAYSTATUS
    Exit Sub
    
DISPLAYSTATUS:
    If layerObj.Lock Then
        MsgBox \"Layer \" & layerObj.Name & \" is locked.\", , \"Lock Example\"
    Else
        MsgBox \"Layer \" & layerObj.Name & \" is unlocked.\", , \"Lock Example\"
    End If
    Return
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Lock()
    ;; This example creates a new layer called \"Lock\".
    ;; It then displays the status of the Lock property
    ;; for the new layer, toggles the status of the
    ;; Lock property, and again displays its status.
    ;; After running this example, you can check the layer
    ;; control on the Object Properties tool bar. It will
    ;; show the new layer and the latest Lock status.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the new layer
    (setq layerObj (vla-Add (vla-get-Layers doc) \"Lock\"))
    
    ;; Display the Lock status of the new layer
    (if (= (vla-get-Lock layerObj) :vlax-true)
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is locked.\"))
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is unlocked.\"))
    )
    
    ;; Toggle the status of the Lock property for the layer
    (vla-put-Lock layerObj (if (= (vla-get-Lock layerObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Display the Lock status of the new layer
    (if (= (vla-get-Lock layerObj) :vlax-true)
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is locked.\"))
        (alert (strcat \"Layer \" (vla-get-Name layerObj) \" is unlocked.\"))
    )
)
")
("LockAspectRatio" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3F83D35C-89A7-4CE1-A433-3F281BDF7996"
                   "
LockAspectRatio Property (ActiveX)
Ensures that the width and height of the object stay in proportion.
Supported platforms: Windows only
Signature
VBA:
object.LockAspectRatio
object
    Type: OLE
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The proportion of the width to the height of the object is locked.
    False: The proportion of the width to the height of the object is not locked.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LockPosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-306CD657-9EE2-42B3-A169-A6F90B786B83"
                "
LockPosition Property (ActiveX)
Specifies whether the attribute or attribute reference may be moved relative to the geometry in the block.
Supported platforms: Windows only
Signature
VBA:
object.LockPosition
object
    Type: Attribute, AttributeReference
    The objects this property applies to.
Property Value
Read-only: Yes; except an Attribute object
Type: Boolean
    True: The attribute's position is locked.
    False: The attribute's position is not locked.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Locked" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D131D7F6-084A-48B6-909A-52DB42A21BCA"
"
Locked Property (ActiveX)
Specifies if the point cloud is locked.
Supported platforms: Windows only
Signature
VBA:
object.Locked
object
    Type: PointCloud, PointCloudEx
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Point cloud is locked.
    False: Point cloud is not unlocked.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Longitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B437473C-B233-499F-A40B-A33FF5010063"
"
Longitude Property (ActiveX)
Specifies the longitude of the position marker.
Supported platforms: Windows only
Signature
VBA:
object.Longitude
object
    Type: GeoPositionMarker
    The object this property applies to.
Property Value
Read-only: No
Type: String
The current longitude of the position marker.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("LowerLeftCorner" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C0FCFADF-7D43-47CA-8B6F-68321C58A053"
"
LowerLeftCorner Property (ActiveX)
Gets the lower-left corner of the current active viewport.
Supported platforms: Windows only
Signature
VBA:
object.LowerLeftCorner
object
    Type: Viewport
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant (two-element array of doubles)
A 2D coordinate representing the lower-left corner of the current active viewport.
Remarks
The LowerLeftCorner and UpperRightCorner properties represent the graphic placement of the viewport on the display. These properties are defined as follows:
Viewport 1—LowerLeftCorner = (0, .5), UpperRightCorner = (.5, 1)
Viewport 2—LowerLeftCorner = (.5, .5), UpperRightCorner = (1, 1)
Viewport 3—LowerLeftCorner = (0, 0), UpperRightCorner = (.5, .5)
Viewport 4—LowerLeftCorner = (.5, 0), UpperRightCorner = (1, .5)
Examples
VBA:
Sub Example_LowerLeftCorner()
    ' This example creates a new viewport and makes it active.
    ' Then it splits the viewport into four windows.
    ' It then finds the lower-left corner of each of the
    ' windows.
    Dim newViewport As AcadViewport
       
    ' Create a new viewport and make it active
    Set newViewport = ThisDrawing.Viewports.Add(\"TESTVIEWPORT\")
    ThisDrawing.ActiveViewport = newViewport
    
    ' Split the viewport in four windows
    newViewport.Split acViewport4
    
    ' Make the newly split viewport active
    ThisDrawing.ActiveViewport = newViewport
    
    ' Iterate through the viewports. For each viewport,
    ' make that viewport active and display the coordinates
    ' of the lower left corner.
    Dim entry As AcadViewport
    Dim lowerLeft As Variant
    For Each entry In ThisDrawing.Viewports
        entry.GridOn = True
        ThisDrawing.ActiveViewport = entry
        lowerLeft = entry.LowerLeftCorner
        MsgBox \"The lower left corner of this viewport is \" & lowerLeft(0) & \", \" & lowerLeft(1), , \"LowerLeftCorner Example\"
        entry.GridOn = False
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_LowerLeftCorner()
    ;; This example creates a new viewport and makes it active.
    ;; Then it splits the viewport into four windows.
    ;; It then finds the lower-left corner of each of the
    ;; windows.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Create a new viewport and make it active
    (setq newViewport (vla-Add (vla-get-Viewports doc) \"TESTVIEWPORT\"))
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Split the viewport in four windows
    (vla-Split newViewport acViewport4)
    
    ;; Make the newly split viewport active
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Iterate through the viewports. For each viewport,
    ;; make that viewport active and display the coordinates
    ;; of the lower left corner.
    (vlax-for entry (vla-get-Viewports doc)
        (vla-put-GridOn entry :vlax-true)
        (vla-put-ActiveViewport doc entry)
        (setq lowerLeft (vlax-safearray->list (vlax-variant-value (vla-get-LowerLeftCorner entry))))
        (alert (strcat \"The lower left corner of this viewport is \" (rtos (nth 0 lowerLeft) 2) \", \" (rtos (nth 1 lowerLeft) 2)))
        (vla-put-GridOn entry :vlax-false)
    )
)
")
("MLineScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6CFD9F11-2CE2-4011-BF88-E264AAE9D2A1"
"
MLineScale Property (ActiveX)
Specifies the scale of the MLine.
Supported platforms: Windows only
Signature
VBA:
object.MLineScale
object
    Type: MLine
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
The scale of the MLine.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("MSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FC5EE356-D978-47B8-A8B2-CDDFA4CA3415"
          "
MLineScale Property (ActiveX)
Specifies the scale of the MLine.
Supported platforms: Windows only
Signature
VBA:
object.MLineScale
object
    Type: MLine
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
The scale of the MLine.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("MTextAttribute" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-200B59A4-AB76-4A1D-9E20-C075571B39E3"
"
MTextAttribute Property (ActiveX)
Determines if the attribute is multiline.
Supported platforms: Windows only
Signature
VBA:
object.MTextAttribute 
object
    Type: Attribute, AttributeReference
    The object this method applies to.
Property Value
Read-only: No
Type: Boolean
    True: The attribute is multiline.
    False: The attribute is single-line.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddAttribute()
    ' This example creates an attribute definition in model space.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddAttribute()
    ;; This example creates an attribute definition in model space.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
)
")
("MTextAttributeContent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D15CA00-A962-4664-9BE5-81C43384478C"
"
MTextAttributeContent Property (ActiveX)
Gets the multiline attribute content.
Supported platforms: Windows only
Signature
VBA:
object.MTextAttributeContent
object
    Type: Attribute, AttributeReference
    The object this method applies to.
Property Value
Read-only: No
Type: String
The content of the attribute.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MTextAttribute()
    ' This example creates an attribute definition in model space.
    ' It then manipulates its MText properties
    
    Dim attributeObj As IAcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1.4
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5.2: insertionPoint(1) = 5.7: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    
    attributeObj.MTextAttribute = True
    attributeObj.MTextAttributeContent = \"test content\"
    attributeObj.MTextBoundaryWidth = 4.2
    attributeObj.UpdateMTextAttribute
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MTextAttribute()
    ;; This example creates an attribute definition in model space.
    ;; It then manipulates its MText properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5.2 5.7 0) 
          attHeight 1.4
          attMode (+ acAttributeModeVerify acAttributeModeMultipleLine)
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    
    (vla-put-MTextAttributeContent attributeObj \"test content\")
    (vla-put-MTextBoundaryWidth attributeObj 4.2)
    (vla-UpdateMTextAttribute attributeObj)
    (vla-ZoomAll acadObj)
)
")
("MTextBoundaryWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2B799069-AAC8-4D8F-B30A-805814DE47D4"
                      "
MTextBoundaryWidth Property (ActiveX)
Determines the width of the text boundary for the multiline attribute.
Supported platforms: Windows only
Signature
VBA:
object.MTextBoundaryWidth
object
    Type: Attribute, AttributeReference
    The object this method applies to.
Property Value
Read-only: No
Type: Double
The width of the text boundary.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MTextAttribute()
    ' This example creates an attribute definition in model space.
    ' It then manipulates its MText properties
    
    Dim attributeObj As IAcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1.4
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5.2: insertionPoint(1) = 5.7: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    
    attributeObj.MTextAttribute = True
    attributeObj.MTextAttributeContent = \"test content\"
    attributeObj.MTextBoundaryWidth = 4.2
    attributeObj.UpdateMTextAttribute
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MTextAttribute()
    ;; This example creates an attribute definition in model space.
    ;; It then manipulates its MText properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5.2 5.7 0) 
          attHeight 1.4
          attMode (+ acAttributeModeVerify acAttributeModeMultipleLine)
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    
    (vla-put-MTextAttributeContent attributeObj \"test content\")
    (vla-put-MTextBoundaryWidth attributeObj 4.2)
    (vla-UpdateMTextAttribute attributeObj)
    (vla-ZoomAll acadObj)
)
")
("MTextDrawingDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-88481CB1-3150-46FC-8692-5E97759506D6"
                         "
MTextDrawingDirection Property (ActiveX)
Determines the drawing direction for the multiline attribute.
Supported platforms: Windows only
Signature
VBA:
object.MTextDrawingDirection
object
    Type: Attribute, AttributeReference
    The object this method applies to.
Property Value
Read-only: No
Type: AcDrawingDirection enum
    acBottomToTop
    acByStyle
    acLeftToRight
    acRightToLeft
    acTopToBottom
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MTextAttribute()
    ' This example creates an attribute definition in model space.
    ' It then manipulates its MText properties
    
    Dim attributeObj As IAcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1.4
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5.2: insertionPoint(1) = 5.7: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    
    attributeObj.MTextAttribute = True
    attributeObj.MTextAttributeContent = \"test content\"
    attributeObj.MTextBoundaryWidth = 4.2
    attributeObj.UpdateMTextAttribute
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MTextAttribute()
    ;; This example creates an attribute definition in model space.
    ;; It then manipulates its MText properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5.2 5.7 0) 
          attHeight 1.4
          attMode (+ acAttributeModeVerify acAttributeModeMultipleLine)
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    
    (vla-put-MTextAttributeContent attributeObj \"test content\")
    (vla-put-MTextBoundaryWidth attributeObj 4.2)
    (vla-UpdateMTextAttribute attributeObj)
    (vla-ZoomAll acadObj)
)
")
("MaintainAssociativity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1E74D925-75C2-433C-A0B5-032149CB6542"
"
MaintainAssociativity Property (ActiveX)
Specifies if a surface maintains its associativity with another surface.
Supported platforms: Windows only
Signature
VBA:
object.MaintainAssociativity
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The objects this property applies to.
Property Value
Read-only: No
Type: Long
    0: None; associativity it not maintained
    1: Remove; associativity is removed
    2: Yes; associativity is maintained
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("MajorAxis" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F97BBFD1-ED1A-450D-845C-D46EE58E2C0F"
             "
MajorAxis Property (ActiveX)
Specifies the direction of the major axis of the ellipse.
Supported platforms: Windows only
Signature
VBA:
object.MajorAxis
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D vector defining the major axis. The vector originates at the ellipse center.
Remarks
The longer axis of an ellipse is called the major axis; the shorter one is the minor axis.
Examples
VBA:
Sub Example_MajorAxis()
    ' This example creates an ellipse and finds the major axis
    ' for that ellipse. It then changes the major axis for the ellipse.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ellObj.Update
    MsgBox \"The ellipse has a major axis of \" & majAxis(0) & \", \" & majAxis(1) & \", \" & majAxis(2), vbInformation, \"MajorAxis Example\"
    ' Change the major axis of the ellipse
    majAxis(0) = 5: majAxis(1) = 5: majAxis(2) = 0
    ellObj.MajorAxis = majAxis
    ellObj.Update
    
    ' Query the major axis of an Ellipse
    Dim retMajAxis As Variant
    retMajAxis = ellObj.MajorAxis
    MsgBox \"The ellipse has been udpated with the major axis \" & retMajAxis(0) & \", \" & retMajAxis(1) & \", \" & retMajAxis(2), vbInformation, \"MajorAxis Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MajorAxis()
    ;; This example creates an ellipse and finds the major axis
    ;; for that ellipse. It then changes the major axis for the ellipse.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    (vla-Update ellObj)
    (setq majAxis (vlax-variant-value majAxis))
    (alert (strcat \"The ellipse has a major axis of \" (rtos (vlax-safearray-get-element majAxis 0) 2) \", \"
                                                      (rtos (vlax-safearray-get-element majAxis 1) 2) \", \"
                                                      (rtos (vlax-safearray-get-element majAxis 2) 2)))
    ;; Change the major axis of the ellipse
    (setq majAxis (vlax-3d-point 5 5 0))
    (vla-put-MajorAxis ellObj majAxis)
    (vla-Update ellObj)
    
    ;; Query the major axis of an Ellipse
    (setq retMajAxis (vlax-variant-value (vla-get-MajorAxis ellObj)))
    (alert (strcat \"The ellipse has been udpated with the major axis \" (rtos (vlax-safearray-get-element retMajAxis 0) 2) \", \"
                                                                       (rtos (vlax-safearray-get-element retMajAxis 1) 2) \", \"
                                                                       (rtos (vlax-safearray-get-element retMajAxis 2) 2)))
)
")
("MajorRadius" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0CB2B20E-7523-4823-B91B-86846CDC37F3"
"
MajorRadius Property (ActiveX)
Specifies the length of the major axis of the ellipse.
Supported platforms: Windows only
Signature
VBA:
object.MajorRadius
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The length of the major axis for an ellipse.
Remarks
The longer axis of an ellipse is called the major axis; the shorter one is the minor axis.
Examples
VBA:
Sub Example_MajorRadius()
    ' This example creates an Ellipse in model space and displays
    ' both the Major radius and the Minor radius of the new Ellipse
  
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double, center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5: center(1) = 5: center(2) = 0
    majAxis(0) = 10: majAxis(1) = 20: majAxis(2) = 0
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ThisDrawing.Application.ZoomAll
    
    ' Display radius information
    MsgBox \"The major radius of the new Ellipse is: \" & ellObj.majorRadius & vbCrLf & _
           \"The minor radius of the new Ellipse is: \" & ellObj.minorRadius
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MajorRadius()
    ;; This example creates an Ellipse in model space and displays
    ;; both the Major radius and the Minor radius of the new Ellipse
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)  
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
  
    (vla-ZoomAll acadObj)
    
    ;; Display radius information
    (alert (strcat \"The major radius of the new Ellipse is: \" (rtos (vla-get-majorRadius ellObj) 2)
                   \"\nThe minor radius of the new Ellipse is: \" (rtos (vla-get-minorRadius ellObj) 2)))
)
")
("Material" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-291D29B4-D327-424B-B9F5-DB46E99D0F27"
            "
Material Property (ActiveX)
Specifies the name of the material.
Supported platforms: Windows only
Signature
VBA:
object.Material
object
    Type: All drawing objects, AttributeReference, Group, Layer, SubDMeshFace, SubEntSolidFace
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the material.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddMaterial()
    Dim oMaterial As AcadMaterial
    Dim oMaterials As AcadMaterials
    Set oMaterial = ThisDrawing.Materials.Add(\"TestMaterial\")
    oMaterial.Description = \"This material demonstrates how to add a material to a database.\"
    ThisDrawing.ActiveMaterial = oMaterial
    
    ' Display the name and description of the layer
    MsgBox oMaterial.Name & \" has been added.\" & vbCrLf & _
            \"Name: \" & vbCrLf & oMaterial.Name & vbCrLf & vbCrLf & _
            \"Description: \" & vbCrLf & _
            oMaterial.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Materials()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq oMaterial (vla-Add (vla-get-Materials doc) \"TestMaterial\"))
    (vla-put-Description oMaterial \"This material demonstrates how to add a material to a database.\")
    (vla-put-ActiveMaterial doc oMaterial)
    ;; Display the status of the new layer
    (alert (strcat (vla-get-Name oMaterial) \" has been added.\"
            \"\nName: \" (vla-get-Name oMaterial)
            \"\nDescription: \" (vla-get-Description oMaterial)))
)
")
("Materials" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CC0B448B-532C-48F8-A93C-9FE435C5BCFD"
             "
Materials Property (ActiveX)
Returns the materials collection for the database.
Supported platforms: Windows only
Signature
VBA:
object.Materials
object
    Type: Database, Document
    The object to which this property applies.
Property Value
Read-only: Yes
Type: Materials
The Materials collection for the database.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_AddMaterial()
    Dim oMaterial As AcadMaterial
    Dim oMaterials As AcadMaterials
    Set oMaterial = ThisDrawing.Materials.Add(\"TestMaterial\")
    oMaterial.Description = \"This material demonstrates how to add a material to a database.\"
    ThisDrawing.ActiveMaterial = oMaterial
    
    ' Display the name and description of the layer
    MsgBox oMaterial.Name & \" has been added.\" & vbCrLf & _
            \"Name: \" & vbCrLf & oMaterial.Name & vbCrLf & vbCrLf & _
            \"Description: \" & vbCrLf & _
            oMaterial.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Materials()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq oMaterial (vla-Add (vla-get-Materials doc) \"TestMaterial\"))
    (vla-put-Description oMaterial \"This material demonstrates how to add a material to a database.\")
    (vla-put-ActiveMaterial doc oMaterial)
    ;; Display the status of the new layer
    (alert (strcat (vla-get-Name oMaterial) \" has been added.\"
            \"\nName: \" (vla-get-Name oMaterial)
            \"\nDescription: \" (vla-get-Description oMaterial)))
)
")
("MaxActiveViewports" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-76B88EE1-CDFB-44E3-AEAE-DA19ADFD0139"
                      "
MaxActiveViewports Property (ActiveX)
Specifies the maximum number of active viewports.
Supported platforms: Windows only
Signature
VBA:
object.MaxActiveViewports
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Integer
The maximum number of active viewports; 2 <= MaxActiveViewports <= 48
Remarks
Inactive viewports are blank, so their contents are not regenerated. You can, therefore, improve performance by specifying a low value. The initial value is 48.
Note: The value of this property is stored in the MAXACTVP system variable.
Examples
VBA:
Sub Example_MaxActiveViewports()
    ' This example returns the current setting of
    ' MaxActiveViewports. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currMaxActiveViewports As Integer
    Dim newMaxActiveViewports As Integer
    
    ' Retrieve the current MaxActiveViewports value
    currMaxActiveViewports = ThisDrawing.preferences.MaxActiveViewports
    MsgBox \"The current value for MaxActiveViewports is \" & currMaxActiveViewports, vbInformation, \"MaxActiveViewports Example\"
    
    ' Change the value for MaxActiveViewports
    newMaxActiveViewports = 20
    ThisDrawing.preferences.MaxActiveViewports = newMaxActiveViewports
    MsgBox \"The new value for MaxActiveViewports is \" & newMaxActiveViewports, vbInformation, \"MaxActiveViewports Example\"
    
    ' Reset MaxActiveViewports to its original value
    ThisDrawing.preferences.MaxActiveViewports = currMaxActiveViewports
    MsgBox \"The MaxActiveViewports value is reset to \" & currMaxActiveViewports, vbInformation, \"MaxActiveViewports Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MaxActiveViewports()
    ;; This example returns the current setting of
    ;; MaxActiveViewports. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Retrieve the current MaxActiveViewports value
    (setq currMaxActiveViewports (vla-get-MaxActiveViewports preferences))
    (alert (strcat \"The current value for MaxActiveViewports is \" (itoa currMaxActiveViewports)))
    
    ;; Change the value for MaxActiveViewports
    (setq newMaxActiveViewports 20)
    (vla-put-MaxActiveViewports preferences newMaxActiveViewports)
    (alert (strcat \"The new value for MaxActiveViewports is \" (itoa newMaxActiveViewports)))
    
    ;; Reset MaxActiveViewports to its original value
    (vla-put-MaxActiveViewports preferences currMaxActiveViewports)
    (alert (strcat \"The MaxActiveViewports value is reset to \" (itoa currMaxActiveViewports)))
)
")
("MaxLeaderSegmentsPoints" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CE3817AE-45E3-4EAE-B532-9AE6C1059F40"
                           "
MaxLeaderSegmentsPoints Property (ActiveX)
Specifies the maximum leader segments points of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.MaxLeaderSegmentsPoints
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Integer
The maximum number of leader segment points.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Measurement" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A7FB34BA-81A6-4D75-9AA6-C3A56C93C9FD"
               "
Measurement Property (ActiveX)
Gets the measurement for the dimension.
Supported platforms: Windows only
Signature
VBA:
object.Measurement
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Double
For linear dimensions this is a length, for angular dimensions it is an angle.
Remarks
For non-angular dimensions, this property overrides the value for the DIMLUNIT system variable.
For angular dimension, this property overrides the value for the DIMAUNIT system variable.
Examples
VBA:
Sub Example_Measurement()
    ' This example creates an aligned dimension in model space
    ' and returns the measurement of the dimension; in the case
    ' of a linear dimension, this measurement will be its length
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentValue As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 9: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current measurement
    MsgBox \"The current measurement of the new dimension is: \" & dimObj.Measurement
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Measurement()
    ;; This example creates an aligned dimension in model space
    ;; and returns the measurement of the dimension; in the case
    ;; of a linear dimension, this measurement will be its length
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 9 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current measurement
    (alert (strcat \"The current measurement of the new dimension is: \" (rtos (vla-get-Measurement dimObj) 2)))
)
")
("MenuBar" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E607F7BE-AE4E-47D0-BA96-A9CB1EA2B9CA"
"
MenuBar Property (ActiveX)
Gets the MenuBar object for the session.
Supported platforms: Windows only
Signature
VBA:
object.MenuBar 
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: Yes
Type: MenuBar
The MenuBar object for the session.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MenuBar()
    ' This example uses MenuBar to obtain a reference to the AutoCAD File menu.
    ' It then creates a new menu item and inserts it at the bottom of the File menu.
    '
    ' The menu item will be automatically removed when AutoCAD is restarted
    
    Dim menu As AcadPopupMenu, newMenuItem As AcadPopupMenuItem
    Dim openMacro As String
    
    On Error GoTo ERRORTRAP
        
    ' Use MenuBar property to obtain reference to the AutoCAD File menu
    Set menu = ThisDrawing.Application.MenuBar.Item(\"&File\")
    
    ' Add a menu item to the new menu and
    ' assign an Open macro (VBA equivalent of: \"ESC ESC _open \")
    openMacro = Chr(3) & Chr(3) & Chr(95) & \"open\" & Chr(32)
    
    ' Add a menu separator
    menu.AddSeparator (menu.count + 1)
    
    ' Add new menu item to File menu
    Set newMenuItem = menu.AddMenuItem(menu.count + 1, \"NEW MENU ITEM\", openMacro)
   
    MsgBox \"A new menu item has been added to the File menu!\"
   
    Exit Sub
    
ERRORTRAP:
    MsgBox \"The following error has occurred: \" & Err.Description
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MenuBar()
    ;; This example uses MenuBar to obtain a reference to the AutoCAD File menu.
    ;; It then creates a new menu item and inserts it at the bottom of the File menu.
    ;;
    ;; The menu item will be automatically removed when AutoCAD is restarted
    (setq acadObj (vlax-get-acad-object))
  
    ;; Use MenuBar property to obtain reference to the AutoCAD File menu
    (setq menu (vla-Item (vla-get-MenuBar acadObj) \"&File\"))
    
    ;; Add a menu item to the new menu and
    ;; assign an Open macro (VBA equivalent of: \"ESC ESC _open \")
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) \"open\" (Chr 32)))
    
    ;; Add a menu separator
    (vla-AddSeparator menu (1+ (vla-get-Count menu)))
    
    ;; Add new menu item to File menu
    (setq newMenuItem (vla-AddMenuItem menu (1+ (vla-get-Count menu)) \"Open File\" openMacro))
   
    (alert \"A new menu item has been added to the File menu!\")
)
")
("MenuGroups" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4DD90235-FEB0-4ED0-AC20-67F5C71B41D9"
"
MenuGroups Property (ActiveX)
Gets the MenuGroups collection for the session.
Supported platforms: Windows only
Signature
VBA:
object.MenuGroups
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: Yes
Type: MenuGroups
The MenuGroups collection for the session.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_MenuGroups()
    ' This example uses MenuGroups to obtain a reference to the AutoCAD main menu.
    ' It then creates a new menu called TestMenu and inserts a menu item
    ' into it. The menu is then displayed on the menu bar.
    '
    ' The menu item will be automatically removed when AutoCAD is restarted
        
    Dim currMenuGroup As acadMenuGroup
    Dim newMenu As AcadPopupMenu, newMenuItem As AcadPopupMenuItem
    Dim openMacro As String
    
    On Error GoTo ERRORTRAP
    
    ' Use MenuGroups property to obtain reference to main AutoCAD menu
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(\"ACAD\")
    
    ' Create the new menu in this group
    Set newMenu = currMenuGroup.Menus.Add(\"TestMenu\")
    
    ' Add a menu item to the new menu and
    ' assign an Open macro (VBA equivalent of: \"ESC ESC _open \")
    openMacro = Chr(3) & Chr(3) & Chr(95) & \"open\" & Chr(32)
    
    Set newMenuItem = newMenu.AddMenuItem(newMenu.count + 1, \"Open\", openMacro)
   
    ' Display the menu on the menu bar
    newMenu.InsertInMenuBar (ThisDrawing.Application.MenuBar.count + 1)
    
    MsgBox \"A new menu has been added to the ACAD menu system!\"
    
    Exit Sub
    
ERRORTRAP:
    MsgBox \"The following error has occurred: \" & Err.Description
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MenuGroups()
    ;; This example uses MenuGroups to obtain a reference to the AutoCAD main menu.
    ;; It then creates a new menu called TestMenu and inserts a menu item
    ;; into it. The menu is then displayed on the menu bar.
    ;;
    ;; The menu item will be automatically removed when AutoCAD is restarted
    (setq acadObj (vlax-get-acad-object))
    ;; Use MenuGroups property to obtain reference to main AutoCAD menu
    (setq currMenuGroup (vla-Item (vla-get-MenuGroups acadObj) \"ACAD\"))
    
    ;; Create the new menu in this group
    (setq newMenu (vla-Add (vla-get-Menus currMenuGroup) \"TestMenu\"))
    
    ;; Add a menu item to the new menu and
    ;; assign an Open macro (VBA equivalent of: \"ESC ESC _open \")
    (setq openMacro (strcat (Chr 3) (Chr 3) (Chr 95) \"open\" (Chr 32)))
    (setq newMenuItem (vla-AddMenuItem newMenu (1+ (vla-get-Count newMenu)) \"Open\" openMacro))
   
    ;; Display the menu on the menu bar
    (vla-InsertInMenuBar newMenu (1+ (vla-get-Count (vla-get-MenuBar acadObj))))
    
    (alert \"A new menu has been added to the ACAD menu system!\")
)
")
("MinimumTableHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D1B8AE6F-6447-4C4C-B660-A1E590DC4505"
                      "
MinimumTableHeight Property (ActiveX)
Specifies the minimum height of the table.
Supported platforms: Windows only
Signature
VBA:
object.MinimumTableHeight
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The minimum height of the table.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("MinimumTableWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C372DEB1-71FB-4DB2-A4C4-D0B080B7A4BE"
                     "
MinimumTableWidth Property (ActiveX)
Specifies the minimum width of the table.
Supported platforms: Windows only
Signature
VBA:
object.MinimumTableWidth
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The minimum width of the table.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("MinorAxis" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F2E76EDC-458A-4536-964C-8B8873835396"
"
MinorAxis Property (ActiveX)
Specifies the direction of the minor axis of an ellipse.
Supported platforms: Windows only
Signature
VBA:
object.MinorAxis
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
A 3D vector defining the minor axis. The vector originates at the ellipse center.
Remarks
The longer axis of an ellipse is called the major axis; the shorter one is the minor axis.
Examples
VBA:
Sub Example_MinorAxis()
    ' This example creates an ellipse and returns the minor
    ' axis for that ellipse.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Find the minor axis for the ellipse
    Dim minorAxis As Variant
    minorAxis = ellObj.minorAxis
    MsgBox \"The ellipse has a minor axis of \" & minorAxis(0) & \", \" & minorAxis(1) & \", \" & minorAxis(2), vbInformation, \"MinorAxis Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MinorAxis()
    ;; This example creates an ellipse and returns the minor
    ;; axis for that ellipse.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Find the minor axis for the ellipse
    (setq minorAxis (vlax-variant-value (vla-get-MinorAxis ellObj)))
    (alert (strcat \"The ellipse has a minor axis of \" (rtos (vlax-safearray-get-element minorAxis 0) 2) \", \"
                                                      (rtos (vlax-safearray-get-element minorAxis 1) 2) \", \"
                                                      (rtos (vlax-safearray-get-element minorAxis 2) 2)))  
)
")
("MinorRadius" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-455F5930-2E8C-492A-89F2-4BD2483FD317"
"
MinorRadius Property (ActiveX)
Specifies the length of the minor axis of the ellipse.
Supported platforms: Windows only
Signature
VBA:
object.MinorRadius
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The length of the minor axis for an ellipse.
Remarks
The longer axis of an ellipse is called the major axis; the shorter one is the minor axis.
Examples
VBA:
Sub Example_MinorRadius()
    ' This example creates an Ellipse in model space and displays
    ' both the Major radius and the Minor radius of the new Ellipse
  
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double, center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5: center(1) = 5: center(2) = 0
    majAxis(0) = 10: majAxis(1) = 20: majAxis(2) = 0
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ThisDrawing.Application.ZoomAll
    
    ' Display radius information
    MsgBox \"The major radius of the new Ellipse is: \" & ellObj.majorRadius & vbCrLf & _
           \"The minor radius of the new Ellipse is: \" & ellObj.minorRadius
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MinorRadius()
    ;; This example creates an Ellipse in model space and displays
    ;; both the Major radius and the Minor radius of the new Ellipse
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
  
    (vla-ZoomAll acadObj)
    
    ;; Display radius information
    (alert (strcat \"The major radius of the new Ellipse is: \" (rtos (vla-get-majorRadius ellObj) 2)
                   \"\nThe minor radius of the new Ellipse is: \" (rtos (vla-get-minorRadius ellObj) 2)))
)
")
("Mode" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-63FFF960-83A5-4B7C-8D47-B396E96FE309"
        "
Mode Property (ActiveX)
Specifies the mode of the attribute definition.
Supported platforms: Windows only
Signature
VBA:
object.Mode 
object
    Type: Attribute
    The object this property applies to.
Property Value
Read-only: No
Type: acAttributeMode enum
    acAttributeModeNormal: Specifies that the current visibility of each attribute is retained.
    acAttributeModeInvisible: Specifies that attribute values won't be shown when you insert the block. The ATTDISP command overrides Invisible mode.
    acAttributeModeConstant: Gives attributes a fixed value for block insertions.
    acAttributeModeVerify: Prompts you to verify that the attribute value is correct when you insert the block.
    acAttributeModeLockPosition: Locks the position of the attributes.
    acAttributeModeMultipleLine: Allows the attributes to carry-over onto multiple lines.
    acAttributeModePreset: Sets the attribute to its default value when you insert a block containing a preset attribute.
Remarks
Note: The value of this property is stored in the AFLAGS system variable.
Examples
VBA:
Sub Example_Mode()
    ' This example creates an attribute definition in model space.
    ' It then queries the initial value of the Mode property,
    ' changes that value, and finally resets the value.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"New_Tag\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
    ' Return the current field length of the attribute
    Dim currMode As Integer
    Dim constant As String
    currMode = attributeObj.mode
    GoSub GETCONSTANT
    MsgBox \"The Mode of the attribute is \" & constant, vbInformation, \"Mode Example\"
    
    ' Change the field length
    attributeObj.mode = acAttributeModeInvisible
    GoSub GETCONSTANT
    attributeObj.Update
    MsgBox \"The new Mode of the attribute is \" & constant, vbInformation, \"Mode Example\"
    
    ' Reset the field length to the original value
    attributeObj.mode = currMode
    GoSub GETCONSTANT
    attributeObj.Update
    MsgBox \"The Mode of the attribute is reset to \" & constant, vbInformation, \"Mode Example\"
    Exit Sub
    
GETCONSTANT:
    ' Get the constant that corresponds to the current mode
    constant = Choose(attributeObj.mode, \"acAttributeModeInvisible\", \"acAttributeModeConstant\", \"\", \"acAttributeModeVerify\", \"\", \"\", \"\", \"acAttributeModePreset\")
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Mode()
    ;; This example creates an attribute definition in model space.
    ;; It then queries the initial value of the Mode property,
    ;; changes that value, and finally resets the value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
    
    ;; Return the current field length of the attribute
    (setq currMode (vla-get-Mode attributeObj))
    ;; Get the constant that corresponds to the current mode
    (setq constant (cond
                       ((= (vla-get-Mode attributeObj) 0) \"acAttributeModeNormal\")
                       ((= (vla-get-Mode attributeObj) 1) \"acAttributeModeInvisible\")
                       ((= (vla-get-Mode attributeObj) 2) \"acAttributeModeConstant\")
                       ((= (vla-get-Mode attributeObj) 4) \"acAttributeModeVerify\")
                       ((= (vla-get-Mode attributeObj) 8) \"acAttributeModePreset\")
                   ))
    (alert (strcat \"The Mode of the attribute is \" constant))
    
    ;; Change the field length
    (vla-put-Mode attributeObj acAttributeModeInvisible)
  
    (setq constant (cond
                       ((= (vla-get-Mode attributeObj) 0) \"acAttributeModeNormal\")
                       ((= (vla-get-Mode attributeObj) 1) \"acAttributeModeInvisible\")
                       ((= (vla-get-Mode attributeObj) 2) \"acAttributeModeConstant\")
                       ((= (vla-get-Mode attributeObj) 4) \"acAttributeModeVerify\")
                       ((= (vla-get-Mode attributeObj) 8) \"acAttributeModePreset\")
                   ))
  
    (vla-Update attributeObj)
    (alert (strcat \"The new Mode of the attribute is \" constant))
    
    ;; Reset the field length to the original value
    (vla-put-Mode attributeObj currMode)
    (setq constant (cond
                       ((= (vla-get-Mode attributeObj) 0) \"acAttributeModeNormal\")
                       ((= (vla-get-Mode attributeObj) 1) \"acAttributeModeInvisible\")
                       ((= (vla-get-Mode attributeObj) 2) \"acAttributeModeConstant\")
                       ((= (vla-get-Mode attributeObj) 4) \"acAttributeModeVerify\")
                       ((= (vla-get-Mode attributeObj) 8) \"acAttributeModePreset\")
                   ))
    (vla-Update attributeObj)
    (alert (strcat \"The Mode of the attribute is reset to \" constant))
)
")
("ModelSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5A488EA7-C843-4994-8D66-03B7745EC80D"
              "
ModelSpace Property (ActiveX)
Gets the ModelSpace collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.ModelSpace
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: ModelSpace
The ModelSpace collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ModelSpace()
    ' This example adds a line and a circle to model space.
    ' The line is added using a user-defined variable representing
    ' the model space. The circle is added without using the
    ' user-defined variable. Either use of the ModelSpace
    ' property is valid.
    
    ' Define the line
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 4: endPoint(1) = 4: endPoint(2) = 0
    
    ' Add the line to model space using the mspace variable
    Dim mspace As AcadModelSpace
    Set mspace = ThisDrawing.ModelSpace
    Set lineObj = mspace.AddLine(startPoint, endPoint)
    
    ' Define a circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 4: center(1) = 4: center(2) = 0
    radius = 1
    
    ' Add the circle to model space without using the mspace variable
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ModelSpace()
    ;; This example adds a line and a circle to model space.
    ;; The line is added using a user-defined variable representing
    ;; the model space. The circle is added without using the
    ;; user-defined variable. Either use of the ModelSpace
    ;; property is valid.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the line
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 4 4 0))
    
    ;; Add the line to model space using the mspace variable
    (setq mspace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine mspace startPoint endPoint))
    
    ;; Define a circle
    (setq center (vlax-3d-point 4 4 0)
          radius 1)
    
    ;; Add the circle to model space without using the mspace variable
    (setq circleObj (vla-AddCircle mspace center radius))
    
    (vla-ZoomAll acadObj)
)
")
("ModelType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7D01DF6D-1D7D-4505-8EDC-861C38551593"
"
ModelType Property (ActiveX)
Specifies whether a plot configuration applies to model space or to all layouts.
Supported platforms: Windows only
Signature
VBA:
object.ModelType
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The plot configuration applies only to the Model Space tab, or the layout is the model space layout.
    False: The plot configuration applies to all layouts, or the layout is a paper space layout.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ModelType()
    ' This example creates a plot configuration object
    ' and then finds the ModelType for the object.
    
    Dim PlotConfigObj As AcadPlotConfiguration
    ' Creates the MText Object
    Set PlotConfigObj = ThisDrawing.PlotConfigurations.Add(\"NewPlotConfiguration\")
    
    ' Find the current ModelType
    Dim currModelType As Boolean
    currModelType = PlotConfigObj.ModelType
    MsgBox \"The ModelType for the object is: \" & currModelType
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ModelType()
    ;; This example creates a plot configuration object
    ;; and then finds the ModelType for the object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))    
    ;; Creates the MText Object
    (setq PlotConfigObj (vla-Add (vla-get-PlotConfigurations doc) \"NewPlotConfiguration\"))
    
    ;; Find the current ModelType
    (setq currModelType (vla-get-ModelType PlotConfigObj))
    (alert (strcat \"The ModelType for the object is: \" (if (= currModelType :vlax-true) \"True\" \"False\")))
)
")
("ModelView" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-626ECDFE-31D3-40B5-84D6-C789C0BA2900"
             "
ModelView Property (ActiveX)
Returns and sets the model view associated with the viewport.
Supported platforms: Windows only
Signature
VBA:
object.ModelView
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: View
The model view associated with the viewport.
Remarks
The model view returned by the property refers to a view placed on a sheet from the Model Views tab of the Sheet Set Manager.
Note: This property can't be used to assign a named view to a viewport.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("MomentOfInertia" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16A4E0AD-2D46-42FA-B7A6-00D7027154EE"
                   "
MomentOfInertia Property (ActiveX)
Gets the moment of inertia for the solid.
Supported platforms: Windows only
Signature
VBA:
object.MomentOfInertia
object
    Type: 3DSolid, Region
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
A 3D coordinate based on the current coordinate system.
Remarks
The moment of inertia is returned as X, Y, and Z coordinates defined as a variant.
Examples
VBA:
Sub Example_MomentOfInertia()
    ' This example creates a box in model space.
    ' It then returns the MomentOfInertia for that box.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the MomentOfInertia for the box
    Dim momentOfInertia As Variant
    momentOfInertia = boxObj.momentOfInertia
    MsgBox \"The MomentOfInertia for the box is \" & momentOfInertia(0) & \", \" & momentOfInertia(1) & \", \" & momentOfInertia(2), , \"MomentOfInertia Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_MomentOfInertia()
    ;; This example creates a box in model space.
    ;; It then returns the MomentOfInertia for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	  boxWidth 7
	  boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the MomentOfInertia for the box
    (setq momentOfInertia (vlax-variant-value (vla-get-MomentOfInertia boxObj)))
    (alert (strcat \"The MomentOfInertia for the box is \" (rtos (vlax-safearray-get-element momentOfInertia 0) 2) \", \"
                                                         (rtos (vlax-safearray-get-element momentOfInertia 1) 2) \", \"
                                                         (rtos (vlax-safearray-get-element momentOfInertia 2) 2)))
)
")
("Monochrome" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8FFF3B6B-9B73-4971-A395-384FB2A9C385"
"
Monochrome Property (ActiveX)
Determines whether underlay is monochrome.
Supported platforms: Windows only
Signature
VBA:
object.Monochrome
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: The underlay is displayed in monochrome.
    False: The underlay is not displayed in monochrome.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Name" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5656E0DF-64F4-4117-BA31-64E6C2C55877"
        "
Name Property (ActiveX)
Specifies the name of the object.
Supported platforms: Windows only
Signature
VBA:
object.Name
object
    Type: Application, Block, BlockReference, ComparedReference, Dictionary, DimStyle, Document, ExternalReference, GeomapImage, Group, Layer, Layout, Linetype, Material, MenuGroup, MInsertBlock, MLeaderStyle, ModelSpace, PaperSpace, PlotConfiguration, PointCloud, PointCloudEx, PopupMenu, RasterImage, RegisteredApplication, Section, SelectionSet, Shape, TableStyle, TextStyle, Toolbar, ToolbarItem, UCS, View, Viewport, Wipeout, XRecord
    The objects this property applies to.
Property Value
Read-only: No (except for Application, Document, MenuGroup, ModelSpace, PaperSpace, SelectionSet, TextStyle objects)
Type: String
Name of the object.
Remarks
Application, Document: This property returns the file name only, not the path.
ToolbarItem: This name is used as the tooltip text.
MenuGroup: The name is limited to 32 characters and cannot contain spaces or punctuation marks.
Raster: This property is similar to the ImageFile property, except that this property does not contain path information.
XRecord: The name of the object within the dictionary in which it resides. This name does not represent the class name of the object.
BlockRef: A block reference can be assigned the name of only a valid block definition in the drawing. Assigning a block reference a unique name will not automatically create a new block definition. To create a new block definition, use the Add method to add a new Block object to the Blocks collection.
Examples
VBA:
Sub Example_Name()
    ' This example creates a new layer. It then
    ' changes the name of that layer.
    
    ' Add the new layer
    Dim layerObj As AcadLayer
    Set layerObj = ThisDrawing.Layers.Add(\"NewLayer\")
    
    ' Find the name of the new layer
    Dim layerName As String
    layerName = layerObj.name
    MsgBox \"A new layer was created with the name: \" & layerObj.name, , \"Name Example\"
    
    ' Change the name of the layer to \"TEST\". Note that behavior of the
    ' following code will be different for different objects. In some cases such as
    ' Block reference, changing the name means referencing to a new Block and therefore
    ' a Block with named \"TEST\" should already exist: otherwise an error will be
    ' returned.
    layerObj.name = \"TEST\"
    layerName = layerObj.name
    MsgBox \"The new name of the layer is: \" & layerObj.name, , \"Name Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Name()
    ;; This example creates a new layer. It then
    ;; changes the name of that layer.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Add the new layer
    (setq layerObj (vla-Add (vla-get-Layers doc) \"NewLayer\"))
    
    ;; Find the name of the new layer
    (setq layerName (vla-get-Name layerObj))
    (alert (strcat \"A new layer was created with the name: \" layerName))
    
    ;; Change the name of the layer to \"TEST\". Note that behavior of the
    ;; following code will be different for different objects. In some cases such as
    ;; Block reference, changing the name means referencing to a new Block and therefore
    ;; a Block with named \"TEST\" should already exist: otherwise an error will be
    ;; returned.
    (vla-put-Name layerObj \"TEST\")
    (setq layerName (vla-get-Name layerObj))
    (alert (strcat \"The new name of the layer is: \" layerName))
)
")
("Normal" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EA1EE244-2D63-4491-8133-1ADAF9531BB6"
"
Normal Property (ActiveX)
Specifies the three-dimensional normal unit vector for the object.
Supported platforms: Windows only
Signature
VBA:
object.Normal
object
    Type: Arc, Attribute, AttributeReference, BlockReference, Circle, ComparedReference, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Ellipse, ExternalReference, Hatch, Leader, Line, LWPolyline, MInsertBlock, MText, Point, Polyline, Region, Section, Shape, Solid, Text, Tolerance, Trace
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D normal unit vector in WCS.
Remarks
This normal vector defines the Z axis for the given object. Although the normal is returned in WCS, it can be used to determine the OCS for the object. Use this property as the OCSNormal in the TranslateCoordinates method when converting coordinates to and from OCS.
Note that this property specifies a vector, not a point. The vector defines the direction of the normal, not a location in space. You can add this normal vector to a point to obtain another point.
Tolerance: The normal vector must be perpendicular to the direction of the Tolerance object. A normal that is not perpendicular to the Tolerance object will generate an error.
Examples
VBA:
Sub Example_Normal()
    ' This example creates a circle in model space.
    ' It then finds the current normal to that circle
    ' and changes the normal.
    
    ' Define a circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 4: center(1) = 4: center(2) = 0
    radius = 1
    
    ' Add the circle to model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    ZoomAll
    
    ' Find the normal for the circle
    Dim currNormal As Variant
    currNormal = circleObj.Normal
    MsgBox \"The current normal for the circle is \" & circleObj.Normal(0) & \", \" & circleObj.Normal(1) & \", \" & circleObj.Normal(2), , \"Normal Example\"
    
    ' Change the normal for the circle
    Dim newNormal(0 To 2) As Double
    newNormal(0) = 1: newNormal(1) = 1: newNormal(2) = -1
    circleObj.Normal = newNormal
    circleObj.Update
    MsgBox \"The current normal for the circle is \" & circleObj.Normal(0) & \", \" & circleObj.Normal(1) & \", \" & circleObj.Normal(2), , \"Normal Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Normal()
    ;; This example creates a circle in model space.
    ;; It then finds the current normal to that circle
    ;; and changes the normal.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define a circle
    (setq center (vlax-3d-point 4 4 0)
          radius 1)
    
    ;; Add the circle to model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace center radius))
    (vla-ZoomAll acadObj)
    
    ;; Find the normal for the circle
    (setq currNormal (vlax-variant-value (vla-get-Normal circleObj)))
    (alert (strcat \"The current normal for the circle is \" (rtos (vlax-safearray-get-element currNormal 0) 2) \", \"
                                                           (rtos (vlax-safearray-get-element currNormal 1) 2) \", \"
                                                           (rtos (vlax-safearray-get-element currNormal 2) 2)))
    
    ;; Change the normal for the circle
    (setq newNormal (vlax-3d-point 1 1 -1))
    (vla-put-Normal circleObj newNormal)
    (vla-Update circleObj)
    (setq newNormal (vlax-variant-value newNormal))
    (alert (strcat \"The current normal for the circle is \" (rtos (vlax-safearray-get-element newNormal 0) 2) \", \"
                                                           (rtos (vlax-safearray-get-element newNormal 1) 2) \", \"
                                                           (rtos (vlax-safearray-get-element newNormal 2) 2)))
)
")
("Notes" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4D6A1086-CC45-462C-ABB6-E979D01A95BD"
"
Notes Property (ActiveX)
Specifies the notes for the position marker.
Supported platforms: Windows only
Signature
VBA:
object.Notes
object
    Type: GeoPositionMarker
    The object this property applies to.
Property Value
Read-only: No
Type: String
The current notes attached to the position marker.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("NumCellStyles" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0773F383-3914-40CD-8BD9-B737CFA90BB0"
                 "
NumCellStyles Property (ActiveX)
Gets the number of cell styles a table has.
Supported platforms: Windows only
Signature
VBA:
object.NumCellStyles
object
    Type: TableStyle
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
Location for the value.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_CellStyle()
    ' This example creates a TableStyle object and sets values for
    ' the style name and formatting.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As IAcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.CreateCellStyle (\"NewTestStyle\")
    Dim cellTestFormat As String
      
    customObj.SetFormat2 \"NewTestStyle\", \"test format\"
    customObj.GetFormat2 \"NewTestStyle\", cellTestFormat
      
    MsgBox \"Cell Style Name = \" & cellTestFormat
    customObj.RenameCellStyle \"NewTestStyle\", \"NewTestStyle2\"
    customObj.GetFormat2 \"NewTestStyle2\", cellTestFormat
    
    MsgBox \"Cell Style Name = \" & cellTestFormat
      
    Dim uniqueStyleName As String
      
    uniqueStyleName = customObj.GetUniqueCellStyleName(\"testbase\")
      
    MsgBox \"Cell Style Name = \" & uniqueStyleName
      
    If customObj.GetIsCellStyleInUse(\"testbase\") = False Then
        MsgBox \"That cell style is not being used!\"
    End If
    
    customObj.CreateCellStyleFromStyle \"TestStyleFromStyle\", \"NewTestStyle2\"
      
    customObj.DeleteCellStyle \"NewTestStyle2\"
      
    Dim numOfStyles As Long
    numOfStyles = customObj.NumCellStyles
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_CellStyle()
    ;; This example creates a TableStyle object and sets values for
    ;; the style name and formatting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
  
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-CreateCellStyle customObj \"NewTestStyle\")
    (setq cellTestFormat \"\")
    (vla-SetFormat2 customObj \"NewTestStyle\" \"test format\")
    (vla-GetFormat2 customObj \"NewTestStyle\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
    (vla-RenameCellStyle customObj \"NewTestStyle\" \"NewTestStyle2\")
    (vla-GetFormat2 customObj \"NewTestStyle2\" 'cellTestFormat)
      
    (alert (strcat \"Cell Style Name = \" cellTestFormat))
      
    (setq uniqueStyleName (vla-GetUniqueCellStyleName customObj \"testbase\"))
      
    (alert (strcat \"Cell Style Name = \" uniqueStyleName))
      
    (if (= (vla-GetIsCellStyleInUse customObj \"testbase\") :vlax-false)
        (alert \"That cell style is not being used!\")
    )
    
    (vla-CreateCellStyleFromStyle customObj \"TestStyleFromStyle\" \"NewTestStyle2\")
      
    (vla-DeleteCellStyle customObj \"NewTestStyle2\")
      
    (setq numOfStyles (vla-get-NumCellStyles customObj))
    (alert (strcat \"Number of Cell Styles = \" (itoa numOfStyles)))
)
")
("NumCrossSections" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B17F2C28-7DA8-47DD-9D10-E911758FC8B8"
"
NumCrossSections Property (ActiveX)
Gets the number of cross-section curves used.
Supported platforms: Windows only
Signature
VBA:
object.NumCrossSections
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No (write-only)
Type: Long
The number of cross-section curves used for the lofted surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("NumGuidePaths" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CBC0B517-EFD3-4AAC-996D-98DF1A66F98C"
                 "
NumGuidePaths Property (ActiveX)
Gets the number of guide paths used.
Supported platforms: Windows only
Signature
VBA:
object.NumGuidePaths
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No (write-only)
Type: Long
The number of guide paths used for the lofted surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("NumVertices" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AB8EB3CA-1A6F-4A05-86D9-2172761B7D41"
"
NumVertices Property (ActiveX)
Gets the number of vertices in the section line.
Supported platforms: Windows only
Signature
VBA:
object.NumVertices
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Integer
The number of vertices in the section line.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("NumberOfControlPoints" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-594F8EBD-EE03-4DD8-A091-6EE21614C8DA"
                         "
NumberOfControlPoints Property (ActiveX)
Gets the number of control points of the spline.
Supported platforms: Windows only
Signature
VBA:
object.NumberOfControlPoints 
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: Yes
Type: Integer
The number of control points of the spline.
Remarks
Control points fine-tune a spline definition by adding weight to a portion of the spline curve.
You can query the current position of a control point by using the GetControlPoint method. You can set a new coordinate location for a control point by using the SetControlPoint method. You can set a new weight for a control point by using the SetWeight method.
Examples
VBA:
Sub Example_NumberOfControlPoints()
    ' This example creates a spline object in model space.
    ' It then finds the number of control points for that spline.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    MsgBox \"The Spline has \" & splineObj.NumberOfControlPoints & \" control points.\", , \"NumberOfControlPoints Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumberOfControlPoints()
    ;; This example creates a spline object in model space.
    ;; It then finds the number of control points for that spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
				     5 5 0
				     10 0 0
				    )
    )
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The Spline has \" (itoa (vla-get-NumberOfControlPoints splineObj)) \" control points.\"))
)
")
("NumberOfCopies" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3E910816-76DC-44B4-839E-4B56D79D1D88"
"
NumberOfCopies Property (ActiveX)
Specifies the number of copies to plot.
Supported platforms: Windows only
Signature
VBA:
object.NumberOfCopies
object
    Type: Plot
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The number of copies to plot.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_NumberOfCopies()
    ' This example plots the layouts of a drawing.
    Dim oPlot As AcadPlot
    Dim AddedLayouts() As String
    Dim LayoutList As Variant
    Dim oLayout As AcadLayout
    Dim ArraySize As Integer, BatchCount As Integer
    
    For Each oLayout In ThisDrawing.Layouts
        ArraySize = ArraySize + 1
        ReDim Preserve AddedLayouts(1 To ArraySize)
        AddedLayouts(ArraySize) = oLayout.Name
    Next
    LayoutList = AddedLayouts
    Set oPlot = ThisDrawing.Plot
    oPlot.SetLayoutsToPlot LayoutList
    oPlot.PlotToDevice \"DWF6 ePlot.pc3\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumberOfCopies()
    ;; This example plots the layouts of a drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq AddedLayouts (vlax-make-safearray vlax-vbString (cons 0 (1- (vla-get-Count (vla-get-Layouts doc)))))
          ArraySize 0)
  
    (vlax-for oLayout (vla-get-Layouts doc)
        (vlax-safearray-put-element AddedLayouts ArraySize (vla-get-Name oLayout))
        (setq ArraySize (1+ ArraySize))
    )
    (setq oPlot (vla-get-Plot doc))
    (vla-SetLayoutsToPlot oPlot AddedLayouts)
    (vla-PlotToDevice oPlot \"DWF6 ePlot.pc3\")
)
")
("NumberOfFaces" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-46848BD7-B361-4EC2-BEF9-47F7A6035EE0"
"
NumberOfFaces Property (ActiveX)
Gets the number of faces for the PolyfaceMesh.
Supported platforms: Windows only
Signature
VBA:
object.NumberOfFaces
object
    Type: PolyFaceMesh
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
Number of faces for the PolyfaceMesh.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_NumberOfFaces()
    ' This example creates a PolyFaceMesh and displays the number of faces it contains
    
    Dim vertexList(0 To 17) As Double
    Dim FaceList(0 To 7) As Integer
    Dim NewPolyFaceMeshObj As AcadPolyfaceMesh
    Dim direction(0 To 2) As Double
    
    'Data for new PolyFaceMesh object
    vertexList(0) = 4: vertexList(1) = 7: vertexList(2) = 0
    vertexList(3) = 5: vertexList(4) = 7: vertexList(5) = 0
    vertexList(6) = 6: vertexList(7) = 7: vertexList(8) = 0
    vertexList(9) = 4: vertexList(10) = 6: vertexList(11) = 0
    vertexList(12) = 5: vertexList(13) = 6: vertexList(14) = 0
    vertexList(15) = 6: vertexList(16) = 6: vertexList(17) = 6
    
    FaceList(0) = 1:    FaceList(1) = 2:    FaceList(2) = 5
    FaceList(3) = 4:    FaceList(4) = 2:    FaceList(5) = 3
    FaceList(6) = 6:    FaceList(7) = 5
    ' Create new PolyFaceMesh object
    Set NewPolyFaceMeshObj = ModelSpace.AddPolyfaceMesh(vertexList, FaceList)
    NewPolyFaceMeshObj.Update
    ' Change the viewing direction of the viewport to
    ' better see the polyface mesh
    direction(0) = -1: direction(1) = -1: direction(2) = 1
    ThisDrawing.ActiveViewport.direction = direction
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ThisDrawing.Application.ZoomAll
    
    ' Display number of faces in this PolyFaceMesh
    MsgBox \"The new PolyFaceMesh contains \" & NewPolyFaceMeshObj.NumberOfFaces & \" faces.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumberOfFaces()
    ;; This example creates a PolyFaceMesh and displays the number of faces it contains
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Data for new PolyFaceMesh object
    (setq vertexList (vlax-make-safearray vlax-vbDouble '(0 . 17)))
    (vlax-safearray-fill vertexList '(4 7 0
				      5 7 0
				      6 7 0
				      4 6 0
				      5 6 0
				      6 6 6
				     )
    )
    (setq FaceList (vlax-make-safearray vlax-vbInteger '(0 . 7)))
    (vlax-safearray-fill FaceList '(1
				    2
				    5
				    4
				    2
				    3
				    6
				    5
				   )
    )
    ;; Create new PolyFaceMesh object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq NewPolyFaceMeshObj (vla-AddPolyfaceMesh modelSpace vertexList FaceList))
    (vla-Update NewPolyFaceMeshObj)
    ;; Change the viewing direction of the viewport to
    ;; better see the polyface mesh
    (setq direction (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport direction)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Display number of faces in this PolyFaceMesh
    (alert (strcat \"The new PolyFaceMesh contains \" (itoa (vla-get-NumberOfFaces NewPolyFaceMeshObj)) \" faces.\"))
)
")
("NumberOfFitPoints" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-35245B4A-FB48-42C2-AE36-ADC229449662"
                     "
NumberOfFitPoints Property (ActiveX)
Gets the number of fit points of the spline.
Supported platforms: Windows only
Signature
VBA:
object.NumberOfFitPoints
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: Yes
Type: Integer
Number of fit points of the spline.
Remarks
The fit points define the path of the spline. You can change the tolerance of a given fit point by using the FitTolerance property. You can add a fit point by using the AddFitPoint method. You can delete a fit point by using the DeleteFitPoint method. You can query the location of a fit point by using the GetFitPoint method. You can change the location of a given fit point by using the SetFitPoint method.
Examples
VBA:
Sub Example_NumberOfFitPoints()
    ' This example creates a spline object in model space.
    ' It then finds the number of control points for that spline.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    ZoomAll
    
    MsgBox \"The Spline has \" & splineObj.NumberOfFitPoints & \" fit points.\", , \"NumberOfFitPoints Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumberOfFitPoints()
    ;; This example creates a spline object in model space.
    ;; It then finds the number of control points for that spline.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
				     5 5 0
				     10 0 0
				    )
    )
    
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The Spline has \" (itoa (vla-get-NumberOfFitPoints splineObj)) \" fit points.\"))
)
")
("NumberOfLoops" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E31A9E53-0435-4002-8247-814B966919E6"
                 "
NumberOfLoops Property (ActiveX)
Gets the number of loops in the hatch boundary.
Supported platforms: Windows only
Signature
VBA:
object.NumberOfLoops
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: Yes
Type: Integer
The number of loops in the hatch boundary.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_NumberOfLoops()
    ' This example creates an associative hatch in model space.
    ' The number of loops in the hatch is then returned.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the number of loops in the hatch
    Dim numOfLoops As Integer
    numOfLoops = hatchObj.NumberOfLoops
    MsgBox \"The number of loops in the hatch is \" & hatchObj.NumberOfLoops, , \"NumberOfLoops Example\"
               
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumberOfLoops()
    ;; This example creates an associative hatch in model space.
    ;; The number of loops in the hatch is then returned.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)  
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
  
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    (vla-ZoomAll acadObj)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the number of loops in the hatch
    (setq numOfLoops (vla-get-NumberOfLoops hatchObj))
    (alert (strcat \"The number of loops in the hatch is \" (itoa numOfLoops)))
)
")
("NumberOfVertices" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C21ED544-A002-438B-8030-8B4D425A198E"
                    "
NumberOfVertices Property (ActiveX)
Gets the number of vertices for the PolyfaceMesh.
Supported platforms: Windows only
Signature
VBA:
object.NumberOfVertices
object
    Type: PolyFaceMesh
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
The number of vertices in the PolyfaceMesh.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_NumberOfVertices()
    ' This example creates a PolyFaceMesh and displays the number of vertices it contains
    
    Dim vertexList(0 To 17) As Double
    Dim FaceList(0 To 7) As Integer
    Dim NewPolyFaceMeshObj As AcadPolyfaceMesh
    Dim direction(0 To 2) As Double
    
    'Data for new PolyFaceMesh object
    vertexList(0) = 4: vertexList(1) = 7: vertexList(2) = 0
    vertexList(3) = 5: vertexList(4) = 7: vertexList(5) = 0
    vertexList(6) = 6: vertexList(7) = 7: vertexList(8) = 0
    vertexList(9) = 4: vertexList(10) = 6: vertexList(11) = 0
    vertexList(12) = 5: vertexList(13) = 6: vertexList(14) = 0
    vertexList(15) = 6: vertexList(16) = 6: vertexList(17) = 6
    
    FaceList(0) = 1:    FaceList(1) = 2:    FaceList(2) = 5
    FaceList(3) = 4:    FaceList(4) = 2:    FaceList(5) = 3
    FaceList(6) = 6:    FaceList(7) = 5
    ' Create new PolyFaceMesh object
    Set NewPolyFaceMeshObj = ModelSpace.AddPolyfaceMesh(vertexList, FaceList)
    NewPolyFaceMeshObj.Update
    ' Change the viewing direction of the viewport to
    ' better see the polyface mesh
    direction(0) = -1: direction(1) = -1: direction(2) = 1
    ThisDrawing.ActiveViewport.direction = direction
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ThisDrawing.Application.ZoomAll
    
    ' Display number of vertices in this PolyFaceMesh
    MsgBox \"The new PolyFaceMesh contains \" & NewPolyFaceMeshObj.NumberOfVertices & \" vertices.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_NumberOfVertices()
    ;; This example creates a PolyFaceMesh and displays the number of vertices it contains
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Data for new PolyFaceMesh object
    (setq vertexList (vlax-make-safearray vlax-vbDouble '(0 . 17)))
    (vlax-safearray-fill vertexList '(4 7 0
				      5 7 0
				      6 7 0
				      4 6 0
				      5 6 0
				      6 6 6
				     )
    )
    
    (setq FaceList (vlax-make-safearray vlax-vbInteger '(0 . 7)))
    (vlax-safearray-fill FaceList '(1
				    2
				    5
				    4
				    2
				    3
				    6
				    5
				   )
    )
    ;; Create new PolyFaceMesh object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq NewPolyFaceMeshObj (vla-AddPolyfaceMesh modelSpace vertexList FaceList))
    (vla-Update NewPolyFaceMeshObj)
    ;; Change the viewing direction of the viewport to
    ;; better see the polyface mesh
    (setq direction (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport direction)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Display number of vertices in this PolyFaceMesh
    (alert (strcat \"The new PolyFaceMesh contains \" (itoa (vla-get-NumberOfVertices NewPolyFaceMeshObj)) \" vertices.\"))
)
")
("OLELaunch" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F22D7EF8-E48F-4619-A0B3-B09BDE5DE7ED"
             "
OLELaunch Property (ActiveX)
Determines whether to launch the parent application when plotting OLE objects.
Supported platforms: Windows only
Signature
VBA:
object.OLELaunch
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The parent application of an OLE object is launched to print it.
    False: The OLE object is printed from AutoCAD.
Remarks
The initial value of this property is False.
Plotting from the parent application achieves a higher quality plot; however, the speed of the plot is decreased.
Note: The value of this property is stored in the OLESTARTUP system variable.
Examples
VBA:
Sub Example_OLELaunch()
    ' This example reads and modifies the preference value that controls
    ' whether to launch the parent application when plotting OLE objects.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.OLELaunch
    MsgBox \"The OLELaunch preference is set to: \" & originalValue
    ' Modify the OLELaunch preference by toggling the value
    ACADPref.OLELaunch = Not (ACADPref.OLELaunch)
    newValue = ACADPref.OLELaunch
    MsgBox \"The OLELaunch preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.OLELaunch = originalValue
    MsgBox \"The OLELaunch preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_OLELaunch()
    ;; This example reads and modifies the preference value that controls
    ;; whether to launch the parent application when plotting OLE objects.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-OLELaunch preferences))
    (alert (strcat \"The OLELaunch preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the OLELaunch preference by toggling the value
    (vla-put-OLELaunch preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-OLELaunch preferences))
    (alert (strcat \"The OLELaunch preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-OLELaunch preferences originalValue)
    (alert (strcat \"The OLELaunch preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObjectID" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D9E5EA63-5508-4C50-8DBF-F6750214BCCD"
"
ObjectID Property (ActiveX)
Gets the object ID.
Supported platforms: Windows only
Signature
VBA:
object.ObjectID
object
    Type: All drawing objects, AttributeReference, Block, Blocks, Dictionary, Dictionaries, Dimension, DimStyle, DimStyles, Group, Groups, Layer, Layers, Layout, Layouts, Linetype, Linetypes, Material, Materials, MLeaderStyle, ModelSpace, PaperSpace, PlotConfiguration, PlotConfigurations, RegisteredApplication, RegisteredApplications, SectionManager, SectionSettings, SortentsTable, TableStyle, TextStyle, TextStyles, UCS, UCSs, View, Views, Viewport, Viewports, XRecord
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Long_PTR
The object ID of an object.
Remarks
An object ID and a unique handle are both ways of referencing an object.
In general, use a handle unless you plan to work with certain ObjectARX functions that require an object ID.
Examples
VBA:
Sub Example_ObjectID()
    ' This example creates several objects in model space.
    ' It then iterates through model space and displays the
    ' ObjectID for each object found.
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a Polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a Line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a Circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 5: centerPt(1) = 3: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an Ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection and display
    ' the ObjectID of each object found.
    Dim entObjectID As Long
    Dim entry As AcadEntity
    
    For Each entry In ThisDrawing.ModelSpace
        entObjectID = entry.ObjectID
        entry.Highlight (True)
        MsgBox \"The ObjectID of this object is \" & entObjectID, vbInformation, \"ObjectID Example\"
        entry.Highlight (False)
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectID()
    ;; This example creates several objects in model space.
    ;; It then iterates through model space and displays the
    ;; ObjectID for each object found.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a Polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
				  3 5
				 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a Line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a Circle object in model space
    (setq centerPt (vlax-3d-point 5 3 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an Ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    
    ;; Iterate through the model space collection and display
    ;; the ObjectID of each object found.
    (vlax-for entry (vla-get-ModelSpace doc)
        (setq entObjectID (vla-get-objectID entry))
        (vla-Highlight entry :vlax-true)
        (alert (strcat \"The ObjectID of this object is \" (itoa entObjectID)))
        (vla-Highlight entry :vlax-false)
    )
)
")
("ObjectName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-12879015-C05A-4DF8-8B9C-3C861D098D6B"
              "
ObjectName Property (ActiveX)
Gets the AutoCAD class name of the object.
Supported platforms: Windows only
Signature
VBA:
object.ObjectName
object
    Type: All drawing objects, AttributeReference, Block, Blocks, Dictionary, Dictionaries, Dimension, DimStyle, DimStyles, Group, Groups, Layer, Layers, Layout, Layouts, Linetype, Linetypes, Material, Materials, MLeaderStyle, ModelSpace, PaperSpace, PlotConfiguration, PlotConfigurations, RegisteredApplication, RegisteredApplications, SectionManager, SectionSettings, SortentsTable, SubDMeshEdge, SubDMeshFace, SubDMeshVertex, SubEntity, SubEntSolidEdge, SubEntSolidFace, SubEntSolidNode, SubEntSolidVertex, TableStyle, TextStyle, TextStyles, UCS, UCSs, View, Views, Viewport, Viewports, XRecord
    The objects this property applies to.
Property Value
Read-only: Yes
Type: String
The AutoCAD class name of an object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ObjectName()
    ' This example creates several objects in model space.
    ' It then iterates through model space and displays the
    ' Object Name for each object found.
    
    ' Create a Ray object in model space
    Dim rayObj As AcadRay
    Dim basePoint(0 To 2) As Double
    Dim SecondPoint(0 To 2) As Double
    basePoint(0) = 3#: basePoint(1) = 3#: basePoint(2) = 0#
    SecondPoint(0) = 1#: SecondPoint(1) = 3#: SecondPoint(2) = 0#
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, SecondPoint)
    
    ' Create a Polyline object in model space
    Dim plineObj As AcadLWPolyline
    Dim points(0 To 5) As Double
    points(0) = 3: points(1) = 7
    points(2) = 9: points(3) = 2
    points(4) = 3: points(5) = 5
    Set plineObj = ThisDrawing.ModelSpace.AddLightWeightPolyline(points)
    plineObj.Closed = True
    ' Create a Line object in model space
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    startPoint(0) = 0: startPoint(1) = 0: startPoint(2) = 0
    endPoint(0) = 2: endPoint(1) = 2: endPoint(2) = 0
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    
    ' Create a Circle object in model space
    Dim circObj As AcadCircle
    Dim centerPt(0 To 2) As Double
    Dim radius As Double
    centerPt(0) = 20: centerPt(1) = 30: centerPt(2) = 0
    radius = 3
    Set circObj = ThisDrawing.ModelSpace.AddCircle(centerPt, radius)
    ' Create an Ellipse object in model space
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    
    ' Iterate through the model space collection and display
    ' the object name of each object found.
    
    Dim objName As String
    Dim entry As AcadEntity
    For Each entry In ThisDrawing.ModelSpace
        objName = entry.ObjectName
        entry.Highlight (True)
        MsgBox \"The name of this object is \" & objName, vbInformation, \"ObjectName Example\"
        entry.Highlight (False)
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectName()
    ;; This example creates several objects in model space.
    ;; It then iterates through model space and displays the
    ;; Object Name for each object found.  
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
  
    ;; Create a Ray object in model space
    (setq basePoint (vlax-3d-point 3 3 0)
          secondPoint (vlax-3d-point 1 3 0))
    (setq rayObj (vla-AddRay modelSpace basePoint SecondPoint))
    
    ;; Create a Polyline object in model space
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 5)))
    (vlax-safearray-fill points '(3 7
                                  9 2
				  3 5
				 )
    )
    (setq plineObj (vla-AddLightWeightPolyline modelSpace points))
    (vla-put-Closed plineObj :vlax-true)
    ;; Create a Line object in model space
    (setq startPoint (vlax-3d-point 0 0 0)
          endPoint (vlax-3d-point 2 2 0))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    
    ;; Create a Circle object in model space
    (setq centerPt (vlax-3d-point 20 30 0)
          radius 3)
    (setq circObj (vla-AddCircle modelSpace centerPt radius))
    ;; Create an Ellipse object in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    ;; Iterate through the model space collection and display
    ;; the object name of each object found.
    (vlax-for entry (vla-get-ModelSpace doc)
        (setq objName (vla-get-ObjectName entry))
        (vla-Highlight entry :vlax-true)
        (alert (strcat \"The name of this object is \" objName))
        (vla-Highlight entry :vlax-false)
    )
)
")
("ObjectSnapMode" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E7E097DE-098F-48C9-A4C2-69AEBD56F30A"
                  "
ObjectSnapMode Property (ActiveX)
Specifies the setting of the object snap mode.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSnapMode
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Snap mode is on.
    False: Snap mode is off.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ObjectSnapMode()
    ' This example toggles the setting of the Object Snap Mode.
    
    Dim currObjSnapMode As Boolean
    
    ' Get the current ObjectSnapMode value
    currObjSnapMode = ThisDrawing.ObjectSnapMode
    MsgBox \"The object snap mode is currently \" & IIf(ThisDrawing.ObjectSnapMode, \"on.\", \"off.\"), , \"ObjectSnapMode Example\"
    
    ' Change the default ObjectSnapMode value
    ThisDrawing.ObjectSnapMode = Not (currObjSnapMode)
    MsgBox \"The object snap mode is now \" & IIf(ThisDrawing.ObjectSnapMode, \"on.\", \"off.\"), , \"ObjectSnapMode Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSnapMode()
    ;; This example toggles the setting of the Object Snap Mode.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the current ObjectSnapMode value
    (setq currObjSnapMode (vla-get-ObjectSnapMode doc))
    (alert (strcat \"The object snap mode is currently \" (if (= (vla-get-ObjectSnapMode doc) :vlax-true) \"on.\" \"off.\")))
    
    ;; Change the default ObjectSnapMode value
    (vla-put-ObjectSnapMode doc (if (= (vla-get-ObjectSnapMode doc) :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The object snap mode is now \" (if (= (vla-get-ObjectSnapMode doc) :vlax-true) \"on.\" \"off.\")))
)
")
("ObjectSortByPSOutput" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7C7DD416-D295-4CD2-ADB9-0E7662E60955"
                        "
ObjectSortByPSOutput Property (ActiveX)
Toggles sorting of drawing objects by PostScript output order.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSortByPSOutput
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable sort by PostScript output order.
    False: Disable sort by PostScript output order.
Remarks
The initial value of this property is True.
AutoCAD initially enables sorting for plotting and PostScript output only. Setting additional sorting options can result in slower regeneration and redrawing times.
Note: The value of this property is stored in the SORTENTS system variable.
Examples
VBA:
Sub Example_ObjectSortByPSOutput()
    ' This example reads and modifies the preference value which controls
    ' the sorting of drawing objects by PostScript output order.
    ' When finished, this example resets the preference value back to
    ' it's original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.ObjectSortByPSOutput
    MsgBox \"The ObjectSortByPSOutput preference is set to: \" & originalValue
    ' Modify the ObjectSortByPSOutput preference by toggling the value
    ACADPref.ObjectSortByPSOutput = Not (ACADPref.ObjectSortByPSOutput)
    newValue = ACADPref.ObjectSortByPSOutput
    MsgBox \"The ObjectSortByPSOutput preference has been set to: \" & newValue
    ' Reset the preference back to it's original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.ObjectSortByPSOutput = originalValue
    MsgBox \"The ObjectSortByPSOutput preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSortByPSOutput()
    ;; This example reads and modifies the preference value which controls
    ;; the sorting of drawing objects by PostScript output order.
    ;; When finished, this example resets the preference value back to
    ;; it's original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ObjectSortByPSOutput preferences))
    (alert (strcat \"The ObjectSortByPSOutput preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the ObjectSortByPSOutput preference by toggling the value
    (vla-put-ObjectSortByPSOutput preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-ObjectSortByPSOutput preferences))
    (alert (strcat \"The ObjectSortByPSOutput preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to it's original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-ObjectSortByPSOutput preferences originalValue)
    (alert (strcat \"The ObjectSortByPSOutput preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObjectSortByPlotting" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F0C68844-103D-4916-A55A-A9D8CCBBC213"
"
ObjectSortByPlotting Property (ActiveX)
Toggles sorting of drawing objects by plotting order.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSortByPlotting
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable sort by plotting order.
    False: Disable sort by plotting order.
Remarks
The initial value of this property is True.
AutoCAD initially enables sorting for plotting and PostScript output only. Setting additional sorting options can result in slower regeneration and redrawing times.
Note: The value of this property is stored in the SORTENTS system variable.
Examples
VBA:
Sub Example_ObjectSortByPlotting()
    ' This example reads and modifies the preference value that controls
    ' the sorting of drawing objects by plotting order.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.ObjectSortByPlotting
    MsgBox \"The ObjectSortByPlotting preference is set to: \" & originalValue
    ' Modify the ObjectSortByPlotting preference by toggling the value
    ACADPref.ObjectSortByPlotting = Not (ACADPref.ObjectSortByPlotting)
    newValue = ACADPref.ObjectSortByPlotting
    MsgBox \"The ObjectSortByPlotting preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.ObjectSortByPlotting = originalValue
    MsgBox \"The ObjectSortByPlotting preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSortByPlotting()
    ;; This example reads and modifies the preference value that controls
    ;; the sorting of drawing objects by plotting order.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
  
    ;; Read and display the original value
    (setq originalValue (vla-get-ObjectSortByPlotting preferences))
    (alert (strcat \"The ObjectSortByPlotting preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the ObjectSortByPlotting preference by toggling the value
    (vla-put-ObjectSortByPlotting preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-ObjectSortByPlotting preferences))
    (alert (strcat \"The ObjectSortByPlotting preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-ObjectSortByPlotting preferences originalValue)
    (alert (strcat \"The ObjectSortByPlotting preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObjectSortByRedraws" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-67658E90-C04A-4F92-97C2-50B3799EF1B1"
                       "
ObjectSortByRedraws Property (ActiveX)
Toggles sorting of drawing objects by redraw order.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSortByRedraws
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable sort by redraw order.
    False: Disable sort by redraw order.
Remarks
The initial value of this property is False.
AutoCAD initially enables sorting for plotting and PostScript output only. Setting additional sorting options can result in slower regeneration and redrawing times.
Note: The value of this property is stored in the SORTENTS system variable.
Examples
VBA:
Sub Example_ObjectSortByRedraws()
    ' This example reads and modifies the preference value that controls
    ' the sorting of drawing objects by redraw order.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.ObjectSortByRedraws
    MsgBox \"The ObjectSortByRedraws preference is set to: \" & originalValue
    ' Modify the ObjectSortByRedraws preference by toggling the value
    ACADPref.ObjectSortByRedraws = Not (ACADPref.ObjectSortByRedraws)
    newValue = ACADPref.ObjectSortByRedraws
    MsgBox \"The ObjectSortByRedraws preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.ObjectSortByRedraws = originalValue
    MsgBox \"The ObjectSortByRedraws preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSortByRedraws()
    ;; This example reads and modifies the preference value that controls
    ;; the sorting of drawing objects by redraw order.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ObjectSortByRedraws preferences))
    (alert (strcat \"The ObjectSortByRedraws preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the ObjectSortByRedraws preference by toggling the value
    (vla-put-ObjectSortByRedraws preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-ObjectSortByRedraws preferences))
    (alert (strcat \"The ObjectSortByRedraws preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-ObjectSortByRedraws preferences originalValue)
    (alert (strcat \"The ObjectSortByRedraws preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObjectSortByRegens" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DEC7C1A6-AA4A-4477-B030-0DF4B3EE0BA1"
                      "
ObjectSortByRegens Property (ActiveX)
Toggles sorting of drawing objects by regeneration order.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSortByRegens
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable sort by regeneration order.
    False: Disable sort by regeneration order.
Remarks
The initial value of this property is False.
AutoCAD initially enables sorting for plotting and PostScript output only. Setting additional sorting options can result in slower regeneration and redrawing times.
Note: The value of this property is stored in the SORTENTS system variable.
Examples
VBA:
Sub Example_ObjectSortByRegens()
    ' This example reads and modifies the preference value that controls
    ' the sorting of drawing objects by regeneration order.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.ObjectSortByRegens
    MsgBox \"The ObjectSortByRegens preference is set to: \" & originalValue
    ' Modify the ObjectSortByRegens preference by toggling the value
    ACADPref.ObjectSortByRegens = Not (ACADPref.ObjectSortByRegens)
    newValue = ACADPref.ObjectSortByRegens
    MsgBox \"The ObjectSortByRegens preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.ObjectSortByRegens = originalValue
    MsgBox \"The ObjectSortByRegens preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSortByRegens()
    ;; This example reads and modifies the preference value that controls
    ;; the sorting of drawing objects by regeneration order.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ObjectSortByRegens preferences))
    (alert (strcat \"The ObjectSortByRegens preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the ObjectSortByRegens preference by toggling the value
    (vla-put-ObjectSortByRegens preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-ObjectSortByRegens preferences))
    (alert (strcat \"The ObjectSortByRegens preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-ObjectSortByRegens preferences originalValue)
    (alert (strcat \"The ObjectSortByRegens preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObjectSortBySelection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-32EF368D-7604-4114-8B39-77DD3A245148"
                         "
ObjectSortBySelection Property (ActiveX)
Toggles sorting of drawing objects by object selection.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSortBySelection
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable sort by object selection.
    False: Disable sort by object selection.
Remarks
The initial value of this property is False.
AutoCAD initially enables sorting for plotting and PostScript output only. Setting additional sorting options can result in slower regeneration and redrawing times.
Note: The value of this property is stored in the SORTENTS system variable.
Examples
VBA:
Sub Example_ObjectSortBySelection()
    ' This example reads and modifies the preference value that controls
    ' the sorting of drawing objects by object selection.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.ObjectSortBySelection
    MsgBox \"The ObjectSortBySelection preference is set to: \" & originalValue
    ' Modify the ObjectSortBySelection preference by toggling the value
    ACADPref.ObjectSortBySelection = Not (ACADPref.ObjectSortBySelection)
    newValue = ACADPref.ObjectSortBySelection
    MsgBox \"The ObjectSortBySelection preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.ObjectSortBySelection = originalValue
    MsgBox \"The ObjectSortBySelection preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSortBySelection()
    ;; This example reads and modifies the preference value that controls
    ;; the sorting of drawing objects by object selection.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ObjectSortBySelection preferences))
    (alert (strcat \"The ObjectSortBySelection preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the ObjectSortBySelection preference by toggling the value
    (vla-put-ObjectSortBySelection preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-ObjectSortBySelection preferences))
    (alert (strcat \"The ObjectSortBySelection preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-ObjectSortBySelection preferences originalValue)
    (alert (strcat \"The ObjectSortBySelection preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObjectSortBySnap" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-84665987-23F2-42E1-AE91-5961E46CE3E4"
                    "
ObjectSortBySnap Property (ActiveX)
Toggles sorting of drawing objects by object snap.
Supported platforms: Windows only
Signature
VBA:
object.ObjectSortBySnap
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enable sort by object snap.
    False: Disable sort by object snap.
Remarks
The initial value of this property is False.
AutoCAD initially enables sorting for plotting and PostScript output only. Setting additional sorting options can result in slower regeneration and redrawing times.
Note: The value of this property is stored in the SORTENTS system variable.
Examples
VBA:
Sub Example_ObjectSortBySnap()
    ' This example reads and modifies the preference value that controls
    ' the sorting of drawing objects by object snap.
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.ObjectSortBySnap
    MsgBox \"The ObjectSortBySnap preference is set to: \" & originalValue
    ' Modify the ObjectSortBySnap preference by toggling the value
    ACADPref.ObjectSortBySnap = Not (ACADPref.ObjectSortBySnap)
    newValue = ACADPref.ObjectSortBySnap
    MsgBox \"The ObjectSortBySnap preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.ObjectSortBySnap = originalValue
    MsgBox \"The ObjectSortBySnap preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObjectSortBySnap()
    ;; This example reads and modifies the preference value that controls
    ;; the sorting of drawing objects by object snap.
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ObjectSortBySnap preferences))
    (alert (strcat \"The ObjectSortBySnap preference is set to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
    ;; Modify the ObjectSortBySnap preference by toggling the value
    (vla-put-ObjectSortBySnap preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-ObjectSortBySnap preferences))
    (alert (strcat \"The ObjectSortBySnap preference has been set to: \" (if (= newValue :vlax-true) \"True\"  \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-ObjectSortBySnap preferences originalValue)
    (alert (strcat \"The ObjectSortBySnap preference was reset back to: \" (if (= originalValue :vlax-true) \"True\"  \"False\")))
)
")
("ObliqueAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5EBE2471-54BF-45F3-BFF9-0A4926DA780C"
"
ObliqueAngle Property (ActiveX)
Specifies the oblique angle of the object.
Supported platforms: Windows only
Signature
VBA:
object.ObliqueAngle
object
    Type: Attribute, AttributeReference, Shape, Text, TextStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The angle in radians within the range of -85 to +85 degrees. A positive angle denotes a lean to the right; a negative value will have 2*PI added to it to convert it to its positive equivalent.
Remarks
The oblique angle is the object's \"angle of slant\" away from its vertical axis.
Examples
VBA:
Sub Example_ObliqueAngle()
    ' This example creates a text object in model space.
    ' It then changes the ObliqueAngle of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    MsgBox \"The ObliqueAngle is \" & textObj.ObliqueAngle, vbInformation, \"ObliqueAngle Example\"
    
    ' Change the value of the ObliqueAngle to 45 degrees (.707 radians)
    textObj.ObliqueAngle = 0.707
    ZoomAll
    MsgBox \"The ObliqueAngle is set to \" & textObj.ObliqueAngle, vbInformation, \"ObliqueAngle Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ObliqueAngle()
    ;; This example creates a text object in model space.
    ;; It then changes the ObliqueAngle of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 3 3 0)
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))  
    (vla-ZoomAll acadObj)
  
    (alert (strcat \"The ObliqueAngle is \" (rtos (vla-get-ObliqueAngle textObj) 2)))
    
    ;; Change the value of the ObliqueAngle to 45 degrees (.707 radians)
    (vla-put-ObliqueAngle textObj 0.707)
    (vla-ZoomAll acadObj)
    (alert (strcat \"The ObliqueAngle is set to \" (rtos (vla-get-ObliqueAngle textObj) 2)))
)
")
("OleItemType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-270BCCD6-AC88-4628-A736-A5560452F208"
               "
OleItemType Property (ActiveX)
Specifies whether the OLE object is linked to the original pasted file when opening the object for editing.
Supported platforms: Windows only
Signature
VBA:
object.OleItemType
object
    Type: OLE
    The object this property applies to.
Property Value
Read-only: No
Type: AcOleType enum
    acOTEmbedded
    acOTLink
    acOTStatic
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("OlePlotQuality" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0FD15AD4-612A-4C22-8E09-D0AD77FF03B7"
                  "
OlePlotQuality Property (ActiveX)
Controls the plot quality of an OLE object based on the file type selected from the list.
Supported platforms: Windows only
Signature
VBA:
object.OlePlotQuality
object
    Type: OLE
    The object this property applies to.
Property Value
Read-only: No
Type: AcOlePlotQuality enum
    acOPQHighGraphics
    acOPQLowGraphics
    acOPQMonochrome
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("OleSourceApp" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-478C115C-0976-4092-8F7F-7933EA3C14BB"
"
OleSourceApp Property (ActiveX)
Specifies the application for editing the OLE object.
Supported platforms: Windows only
Signature
VBA:
object.OleSourceApp
object
    Type: OLE
    The object this property applies to.
Property Value
Read-only: No
Type: String
The application for editing the OLE object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Origin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9EB3E590-E112-4FA7-A266-3B60E5A0B1AF"
"
Origin Property (ActiveX)
Specifies the origin of the UCS, block, hatch, or raster image in WCS coordinates.
Supported platforms: Windows only
Signature
VBA:
object.Origin
object
    Type: Block, GeomapImage, Hatch, ModelSpace, PaperSpace, RasterImage, UCS, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (two- or three-element array of doubles)
2D Point: The X and Y values representing the origin relative to the lower-left corner of the media.
3D Point: A 3D WCS coordinate specifying the origin of the object.
Remarks
Hatch: This property is the origin coordinates for the pattern of the hatch entity.
Examples
VBA:
Sub Example_Origin()
    ' This example creates a UCS and returns its origin.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Create a new UCS with origin 2, 2, 0
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPoint(0 To 2) As Double
    Dim yAxisPoint(0 To 2) As Double
    
    origin(0) = 2: origin(1) = 2: origin(2) = 0
    xAxisPoint(0) = 3: xAxisPoint(1) = 2: xAxisPoint(2) = 0
    yAxisPoint(0) = 2: yAxisPoint(1) = 3: yAxisPoint(2) = 0
    
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPoint, yAxisPoint, \"UCS1\")
    ThisDrawing.ActiveUCS = ucsObj
    viewportObj.UCSIconOn = True
    viewportObj.UCSIconAtOrigin = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Display the current origin for the new UCS
    MsgBox \"The origin of the UCS is: \" & ucsObj.origin(0) & \", \" & ucsObj.origin(1) & \", \" & ucsObj.origin(2), , \"Origin Example\"
    ' Change the origin of the UCS
    origin(0) = 4: origin(1) = 4: origin(2) = 0
    ucsObj.origin = origin
    
    ' Reset the active UCS and viewport to see the change
    ThisDrawing.ActiveUCS = ucsObj
    ThisDrawing.ActiveViewport = viewportObj
    
    MsgBox \"The origin of the UCS is now: \" & ucsObj.origin(0) & \", \" & ucsObj.origin(1) & \", \" & ucsObj.origin(2), , \"Origin Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Origin()
    ;; This example creates a UCS and returns its origin.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Create a new UCS with origin 2, 2, 0
    (setq origin (vlax-3d-point 2 2 0)
          xAxisPoint (vlax-3d-point 3 2 0)
          yAxisPoint (vlax-3d-point 2 3 0))
    
    (setq ucsObj (vla-Add (vla-get-UserCoordinateSystems doc) origin xAxisPoint yAxisPoint \"UCS1\"))
    (vla-put-ActiveUCS doc ucsObj)
    (vla-put-UCSIconOn viewportObj :vlax-true)
    (vla-put-UCSIconAtOrigin viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Display the current origin for the new UCS
    (alert (strcat \"The origin of the UCS is: \" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 0) 2) \", \"
                                                (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 1) 2) \", \"
                                                (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 2) 2)))
    ;; Change the origin of the UCS
    (setq origin (vlax-3d-point 4 4 0))
    (vla-put-Origin ucsObj origin)
    
    ;; Reset the active UCS and viewport to see the change
    (vla-put-ActiveUCS doc ucsObj)
    (vla-put-ActiveViewport doc viewportObj)
    
    (alert (strcat \"The origin of the UCS is now: \" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 0) 2) \", \"
                                                    (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 1) 2) \", \"
                                                    (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-Origin ucsObj)) 2) 2)))
)
")
("OrthoOn" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-40D004C5-B856-487C-9B2D-B538ED871F6F"
"
OrthoOn Property (ActiveX)
Specifies the status of the Isometric snap mode for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.OrthoOn
object
    Type: Viewport
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Isometric snap mode is on.
    False: Isometric snap mode is off.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_OrthoOn()
    ' This example toggles the setting of OrthoOn.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Display the current setting of OrthoOn
    MsgBox \"Isometric snap mode is: \" & IIf(viewportObj.OrthoOn, \"On\", \"Off\"), , \"OrthoOn Example\"
    ' Toggle the setting of OrthoOn
    viewportObj.OrthoOn = Not (viewportObj.OrthoOn)
    
    ' Reset the active viewport to see the change on the AutoCAD status bar
    ThisDrawing.ActiveViewport = viewportObj
    
    MsgBox \"Isometric snap mode is now: \" & IIf(viewportObj.OrthoOn, \"On\", \"Off\"), , \"OrthoOn Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_OrthoOn()
    ;; This example toggles the setting of OrthoOn.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Display the current setting of OrthoOn
    (alert (strcat \"Isometric snap mode is: \" (if (= (vla-get-OrthoOn viewportObj) :vlax-true) \"On\" \"Off\")))
    ;; Toggle the setting of OrthoOn
    (vla-put-OrthoOn viewportObj (if (= (vla-get-OrthoOn viewportObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Reset the active viewport to see the change on the AutoCAD status bar
    (vla-put-ActiveViewport doc viewportObj)
    
    (alert (strcat \"Isometric snap mode is now: \" (if (= (vla-get-OrthoOn viewportObj) :vlax-true) \"On\" \"Off\")))
)
")
("OverrideCenter" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C32080D5-9F24-49E8-828B-6C1F9CC7B7D4"
                  "
OverrideCenter Property (ActiveX)
Specifies the override center location.
Supported platforms: Windows only
Signature
VBA:
object.OverrideCenter
object
    Type: DimRadialLarge
    The object this property applies to.
Property Value
Read-only: No
Type: Variant
The override center location.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("OverwritePropChanged" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9326FC6A-BFE6-4432-9781-92770D0D0DD3"
                        "
OverwritePropChanged Property (ActiveX)
Indicates whether properties were changed.
Supported platforms: Windows only
Signature
VBA:
object.OverwritePropChanged
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: Properties were changed.
    False: Properties were not changed.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("OwnerID" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A7D4D1FB-64DB-43A4-84C4-6D5FCA3959F1"
"
OwnerID Property (ActiveX)
Gets the object ID of the owner (parent) object.
Supported platforms: Windows only
Signature
VBA:
object.OwnerID 
object
    Type: All drawing objects, AttributeReference, Block, Blocks, Dictionary, Dictionaries, Dimension, DimStyle, DimStyles, Group, Groups, Layer, Layers, Layout, Layouts, Linetype, Linetypes, Material, Materials, MLeaderStyle, ModelSpace, PaperSpace, PlotConfiguration, PlotConfigurations, RegisteredApplication, RegisteredApplications, SectionManager, SectionSettings, SortentsTable, TableStyle, TextStyle, TextStyles, UCS, UCSs, View, Views, Viewport, Viewports, XRecord
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Long_PTR
The object ID of an object's owner.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_OwnerID()
    ' This example creates an MText object in model space
    ' and then finds the OwnerID for the object.
    
    Dim MTextObj As AcadMText
    Dim corner(0 To 2) As Double
    Dim width As Double
    Dim text As String
    corner(0) = 0#: corner(1) = 10#: corner(2) = 0#
    width = 10
    text = \"This is the text string for the MText object\"
    ' Creates the MText object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
    MsgBox \"The OwnerID for the MText object is: \" & MTextObj.OwnerID
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_OwnerID()
    ;; This example creates an MText object in model space
    ;; and then finds the OwnerID for the object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq corner (vlax-3d-point 0 10 0)
          width 10
          text \"This is the text string for the MText object\")
    ;; Creates the MText object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
    
    (alert (strcat \"The OwnerID for the MText object is: \" (itoa (vla-get-OwnerID MTextObj))))
)
")
("PaperSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-740E6C3D-4EA9-4202-96D0-F8ACF0C92DC8"
"
PaperSpace Property (ActiveX)
Gets the PaperSpace collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.PaperSpace
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: PaperSpace
The PaperSpace collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PaperSpace()
    ' This example sets the variable pspace to the paper space object collection.
    
    Dim pspace As AcadPaperSpace
    Set pspace = ThisDrawing.PaperSpace
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PaperSpace()
    ;; This example sets the variable pspace to the paper space object collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq pspace (vla-get-PaperSpace doc))
)
")
("PaperUnits" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E4325F20-6258-4F62-93D2-2E1C37C820C9"
              "
PaperUnits Property (ActiveX)
Specifies the units for the display of layout or plot configuration properties.
Supported platforms: Windows only
Signature
VBA:
object.PaperUnits
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: acPlotPaperUnits enum
    acInches
    acMillimeters
    acPixels
Remarks
This property determines the units for the display of the layout or plot configuration in the user interface. This property does not determine the units for input or query of the ActiveX Automation properties. All ActiveX Automation properties are represented in millimeters or radians, regardless of the units settings.
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
Examples
VBA:
Sub Example_PaperUnits()
    ' This example will access the Layouts collection for the current drawing
    ' and list basic information about the paper units used for each Layout.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim Measurement As String
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    msg = vbCrLf   ' Start with a space
    
    ' Get the paper units information of every layout in this drawing
    For Each Layout In Layouts
        ' Using inches or millimeters?
        Measurement = IIf(Layout.PaperUnits = acInches, \" inches\", \" millimeters\")
        
        ' Format for display
        msg = msg & Layout.name & \" is using\" & Measurement & vbCrLf
    Next
    
    ' Display paper units information
    MsgBox \"The paper units used in the current drawing are: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PaperUnits()
    ;; This example will access the Layouts collection for the current drawing
    ;; and list basic information about the paper units used for each Layout.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc))
    
    (setq msg \"\"
          Measurement \"\")
    
    ;; Get the paper units information of every layout in this drawing
    (vlax-for Layout Layouts
        ;; Using inches or millimeters?
        (setq Measurement (if (= (vla-get-PaperUnits Layout) acInches) \" inches\" \" millimeters\"))
        
        ;; Format for display
        (setq msg (strcat msg (vla-get-Name Layout) \" is using\" Measurement \"\n\"))
    )
    
    ;; Display paper units information
    (alert (strcat \"The paper units used in the current drawing are: \n\" msg))
)
")
("Path" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-252F6CDA-B400-4EF5-A3F6-FD0E54A4CA40"
        "
Path Property (ActiveX)
Gets the path of the block, document, application, or external reference.
Supported platforms: Windows only
Signature
VBA:
object.Path
object
    Type: Application, Block, ComparedReference, Document, ExternalReference, PointCloud, PointCloudEx
    The objects this property applies to.
Property Value
Read-only: Yes; except for the ComparedReference, ExternalReference and Block objects
Type: String
The path of the application, document, or reference.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Path()
    ' This example returns the path of the drawing and application.
    
    ' If the drawing has not been saved, the path of the
    ' document will be blank.
    Dim docPath As String
    docPath = ThisDrawing.Path
    MsgBox \"The Path of the current drawing is \" & docPath, , \"Path Example\"
    
    Dim appPath As String
    appPath = ThisDrawing.Application.Path
    MsgBox \"The Path of the current appication is \" & appPath, , \"Path Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Path()
    ;; This example returns the path of the drawing and application.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; If the drawing has not been saved, the path of the
    ;; document will be blank.
    (setq docPath (vla-get-Path doc))
    (alert (strcat \"The Path of the current drawing is \" docPath))
    
    (setq appPath (vla-get-Path acadObj))
    (alert (strcat \"The Path of the current appication is \" appPath))
)
")
("PatternAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A7CDE967-0755-41A0-B557-3E6918E57315"
                "
Path Property (ActiveX)
Gets the path of the block, document, application, or external reference.
Supported platforms: Windows only
Signature
VBA:
object.Path
object
    Type: Application, Block, ComparedReference, Document, ExternalReference, PointCloud, PointCloudEx
    The objects this property applies to.
Property Value
Read-only: Yes; except for the ComparedReference, ExternalReference and Block objects
Type: String
The path of the application, document, or reference.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Path()
    ' This example returns the path of the drawing and application.
    
    ' If the drawing has not been saved, the path of the
    ' document will be blank.
    Dim docPath As String
    docPath = ThisDrawing.Path
    MsgBox \"The Path of the current drawing is \" & docPath, , \"Path Example\"
    
    Dim appPath As String
    appPath = ThisDrawing.Application.Path
    MsgBox \"The Path of the current appication is \" & appPath, , \"Path Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Path()
    ;; This example returns the path of the drawing and application.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; If the drawing has not been saved, the path of the
    ;; document will be blank.
    (setq docPath (vla-get-Path doc))
    (alert (strcat \"The Path of the current drawing is \" docPath))
    
    (setq appPath (vla-get-Path acadObj))
    (alert (strcat \"The Path of the current appication is \" appPath))
)
")
("PatternDouble" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-645969D5-9475-4413-8AD1-8F410DBD333B"
                 "
PatternDouble Property (ActiveX)
Specifies if the user-defined hatch is double-hatched.
Supported platforms: Windows only
Signature
VBA:
object.PatternDouble
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Double pattern is on.
    False: Double pattern is off.
Remarks
If the PatternType property is set to acHatchPatternTypePreDefined or acHatchPatternTypeCustomDefined, then the PatternDouble property is not used.
Note: The value of this property is set from the HPDOUBLE system variable.
Examples
VBA:
Sub Example_PatternDouble()
    ' This example creates an associative hatch in model space.
    ' It then returns whether or not the pattern is doubled, and
    ' then changes that value.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ansi31\"
    PatternType = acHatchPatternTypePreDefined
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Determine if the pattern is doubled
    Dim patternDouble As Boolean
    patternDouble = hatchObj.patternDouble
    MsgBox \"Pattern doubling: \" & hatchObj.patternDouble, , \"PatternDouble Example\"
               
    ' Change the angle of the hatch pattern
    hatchObj.patternDouble = Not (hatchObj.patternDouble)
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"Pattern doubling: \" & hatchObj.patternDouble, , \"PatternDouble Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PatternDouble()
    ;; This example creates an associative hatch in model space.
    ;; It then returns whether or not the pattern is doubled, and
    ;; then changes that value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType acHatchPatternTypePreDefined
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
  
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Determine if the pattern is doubled
    (setq patternDouble (vla-get-PatternDouble hatchObj))
    (alert (strcat \"Pattern doubling: \" (if (= patternDouble :vlax-true) \"True\" \"False\")))
               
    ;; Change the angle of the hatch pattern
    (vla-put-PatternDouble hatchObj (if (= patternDouble :vlax-true) :vlax-false :vlax-true))
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"Pattern doubling: \" (if (= (vla-get-PatternDouble hatchObj) :vlax-true) \"True\" \"False\")))
)
")
("PatternName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5B25E3C9-0BAD-455B-9A81-85731BEFDF45"
               "
PatternName Property (ActiveX)
Specifies the hatch pattern name.
Supported platforms: Windows only
Signature
VBA:
object.PatternName
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: String
The hatch pattern name.
Remarks
The default hatch pattern name can be up to 34 characters, no spaces allowed. Returns \"\" if there is no default. Enter a period (.) to set no default.
If the PatternType property is set to acHatchPatternTypePreDefined, then the PatternName property refers to the name of a hatch pattern in acad.pat.
If the PatternType property is set to acHatchPatternTypeCustomDefined, then the PatternName property refers to the name of a hatch pattern in a custom .pat file.
If the PatternType property is set to acHatchPatternTypeUserDefined, then the PatternName property is not used.
Note: The value of this property is set from the HPNAME system variable.
Examples
VBA:
Sub Example_PatternName()
    ' This example creates an associative hatch in model space.
    ' The name of the hatch pattern is then returned.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the name of the hatch pattern
    patternName = hatchObj.patternName
    MsgBox \"The name of the hatch pattern is \" & hatchObj.patternName, , \"patternName Example\"
                   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PatternName()
    ;; This example creates an associative hatch in model space.
    ;; The name of the hatch pattern is then returned.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0) 
          radius 3
          startAngle 0
          endAngle 3.141592)
    
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)  
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the name of the hatch pattern
    (setq patternName (vla-get-PatternName hatchObj))
    (alert (strcat \"The name of the hatch pattern is \" patternName))
)
")
("PatternScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B18585CA-9CB1-400C-BD9E-EC227F3EB3C4"
"
PatternScale Property (ActiveX)
Specifies the hatch pattern scale.
Supported platforms: Windows only
Signature
VBA:
object.PatternScale
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Must be non-zero.
Remarks
If the PatternType property is set to acHatchPatternTypeUserDefined, then PatternScale is not used.
Note: The value of this property is set from the HPSCALE system variable.
Examples
VBA:
Sub Example_PatternScale()
    ' This example creates an associative hatch in model space.
    ' The scale of the hatch pattern is then returned and changed.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the scale of the hatch pattern
    Dim PatternScale As Double
    PatternScale = hatchObj.PatternScale
    MsgBox \"The scale of the hatch pattern is \" & hatchObj.PatternScale, , \"PatternScale Example\"
                  
    ' Change the scale of the hatch pattern
    hatchObj.PatternScale = PatternScale + 2
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"The scale of the hatch pattern is now \" & hatchObj.PatternScale, , \"PatternScale Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PatternScale()
    ;; This example creates an associative hatch in model space.
    ;; The scale of the hatch pattern is then returned and changed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the scale of the hatch pattern
    (setq patternScale (vla-get-PatternScale hatchObj))
    (alert (strcat \"The scale of the hatch pattern is \" (rtos patternScale 2)))
                  
    ;; Change the scale of the hatch pattern
    (vla-put-PatternScale hatchObj (+ patternScale 2))
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The scale of the hatch pattern is now \" (rtos (vla-get-PatternScale hatchObj) 2)))
)
")
("PatternSpace" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-18C8D938-C657-4856-87F8-DBE14205E7B4"
                "
PatternSpace Property (ActiveX)
Specifies the user-defined hatch pattern spacing.
Supported platforms: Windows only
Signature
VBA:
object.PatternSpace
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The hatch pattern spacing.
Remarks
If the PatternType property is set to acHatchPatternTypePreDefined or acHatchPatternTypeCustomDefined, then the PatternSpace property is not used.
Note: The value of this property is set from the HPSPACE system variable.
Examples
VBA:
Sub Example_PatternSpace()
    ' This example creates an associative hatch in model space.
    ' The spacing of the hatch pattern is then returned and changed.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = 0
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the space of the hatch pattern
    Dim patternSpace As Double
    patternSpace = hatchObj.patternSpace
    MsgBox \"The spacing of the hatch pattern is \" & hatchObj.patternSpace, , \"PatternSpace Example\"
                  
    ' Change the spacing of the hatch pattern
    hatchObj.patternSpace = patternSpace + 2
    hatchObj.Evaluate
    ThisDrawing.Regen True
    MsgBox \"The spacing of the hatch pattern is now \" & hatchObj.patternSpace, , \"PatternSpace Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PatternSpace()
    ;; This example creates an associative hatch in model space.
    ;; The spacing of the hatch pattern is then returned and changed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType 0
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the space of the hatch pattern
    (setq patternSpace (vla-get-PatternSpace hatchObj))
    (alert (strcat \"The spacing of the hatch pattern is \" (rtos patternSpace 2)))
                  
    ;; Change the spacing of the hatch pattern
    (vla-put-PatternSpace hatchObj (+ patternSpace 2))
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The spacing of the hatch pattern is now \" (rtos (vla-get-PatternSpace hatchObj) 2)))
)
")
("PatternType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5D71CDF9-E9EB-402B-AED5-7BC1A9B4A03D"
               "
PatternType Property (ActiveX)
Gets the pattern type used for the hatch.
Supported platforms: Windows only
Signature
VBA:
object.PatternType
object
    Type: Hatch
    The object this property applies to.
Property Value
Read-only: Yes
Type: acPatternType enum
    acHatchPatternTypePreDefined: Selects the pattern name from those defined in the acad.pat file.
    acHatchPatternTypeUserDefined: Defines a pattern of lines using the current linetype.
    acHatchPatternTypeCustomDefined: Selects the pattern name from a PAT file other than the acad.pat file.
Remarks
The pattern type for a hatch can only be set by the AddHatch method for hatch creation, or by the SetPattern method.
Examples
VBA:
Sub Example_PatternType()
    ' This example creates an associative hatch in model space.
    ' The type of the hatch pattern is then returned.
    
    Dim hatchObj As AcadHatch
    Dim patternName As String
    Dim PatternType As Long
    Dim bAssociativity As Boolean
    
    ' Define the hatch
    patternName = \"ANSI31\"
    PatternType = acHatchPatternTypePreDefined
    bAssociativity = True
    
    ' Create the associative Hatch object
    Set hatchObj = ThisDrawing.ModelSpace.AddHatch(PatternType, patternName, bAssociativity)
    
    ' Create the outer loop for the hatch.
    ' An arc and a line are used to create a closed loop.
    Dim outerLoop(0 To 1) As AcadEntity
    Dim center(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    center(0) = 5: center(1) = 3: center(2) = 0
    radius = 3
    startAngle = 0
    endAngle = 3.141592
    Set outerLoop(0) = ThisDrawing.ModelSpace.AddArc(center, radius, startAngle, endAngle)
    Set outerLoop(1) = ThisDrawing.ModelSpace.AddLine(outerLoop(0).startPoint, outerLoop(0).endPoint)
        
    ' Append the outer loop to the hatch object
    hatchObj.AppendOuterLoop (outerLoop)
    
    ' Append the first circle as one inner loop
    Dim innerLoop1(0) As AcadEntity
    center(0) = 5: center(1) = 4.5: center(2) = 0
    radius = 1
    Set innerLoop1(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop1)
    
    ' Append the second circle as the other inner loop
    Dim innerLoop2(0) As AcadEntity
    radius = 0.5
    Set innerLoop2(0) = ThisDrawing.ModelSpace.AddCircle(center, radius)
    hatchObj.AppendInnerLoop (innerLoop2)
    
    ' Evaluate and display the hatch
    hatchObj.Evaluate
    ThisDrawing.Regen True
    
    ' Find the type of hatch
    PatternType = hatchObj.PatternType
    MsgBox \"The type of hatch pattern is \" & Choose(hatchObj.PatternType + 1, \"acHatchPatternTypeUserDefined\", \"acHatchPatternTypePreDefined\", \"acHatchPatternTypeCustomDefined\"), , \"PatternType Example\"
                      
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PatternType()
    ;; This example creates an associative hatch in model space.
    ;; The type of the hatch pattern is then returned.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the hatch
    (setq patternName \"ANSI31\"
          patternType acHatchPatternTypePreDefined
          bAssociativity :vlax-true)
    
    ;; Create the associative Hatch object
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq hatchObj (vla-AddHatch modelSpace patternType patternName bAssociativity acHatchObject))
    
    ;; Create the outer loop for the hatch.
    ;; An arc and a line are used to create a closed loop.
    (setq center (vlax-3d-point 5 3 0)
          radius 3
          startAngle 0
          endAngle 3.141592)
    (setq arc (vla-AddArc modelSpace center radius startAngle endAngle))
    (setq line (vla-AddLine modelSpace (vla-get-StartPoint arc) (vla-get-EndPoint arc)))
  
    (setq outerLoop (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element outerLoop 0 arc)
    (vlax-safearray-put-element outerLoop 1 line)
        
    ;; Append the outer loop to the hatch object
    (vla-AppendOuterLoop hatchObj outerLoop)
    
    ;; Append the first circle as one inner loop
    (setq center (vlax-3d-point 5 4.5 0)
          radius 1)
    (setq circle1 (vla-AddCircle modelSpace center radius))
    (setq innerLoop1 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (vlax-safearray-put-element innerLoop1 0 circle1)
    (vla-AppendInnerLoop hatchObj innerLoop1)
    
    ;; Append the second circle as the other inner loop
    (setq radius 0.5)
    (setq innerLoop2 (vlax-make-safearray vlax-vbObject '(0 . 0)))
    (setq circle2 (vla-AddCircle modelSpace center radius))
    (vlax-safearray-put-element innerLoop2 0 circle2)
    (vla-AppendInnerLoop hatchObj innerLoop2)
    
    ;; Evaluate and display the hatch
    (vla-Evaluate hatchObj)
    (vla-Regen doc :vlax-true)
    
    ;; Find the type of hatch
    (setq patternType (vla-get-PatternType hatchObj))
    (alert (strcat \"The type of hatch pattern is \" (cond
                                                       ((= patternType acHatchPatternTypeUserDefined) \"acHatchPatternTypeUserDefined\")
                                                       ((= patternType acHatchPatternTypePreDefined) \"acHatchPatternTypePreDefined\")
                                                       ((= patternType acHatchPatternTypeCustomDefined) \"acHatchPatternTypeCustomDefined\")
                                                   )))
)
")
("Perimeter" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9B1F3413-02C1-4531-8AF0-0B0EF776647E"
             "
Perimeter Property (ActiveX)
Gets the total length of the inner and outer region loops.
Supported platforms: Windows only
Signature
VBA:
object.Perimeter
object
    Type: Region
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The perimeter is returned in drawing units.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Perimeter()
    ' This example creates a region from an arc and a line.
    ' It then returns the length of the perimeter of the region.
    Dim curves(0 To 1) As AcadEntity
    Dim arcObj As AcadArc
    Dim lineObj As AcadLine
    
    ' Create the arc and line
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngle As Double
    Dim endAngle As Double
    centerPoint(0) = 5#: centerPoint(1) = 3#: centerPoint(2) = 0#
    radius = 2#
    startAngle = 0
    endAngle = 3.141592
    Set arcObj = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngle, endAngle)
    Set lineObj = ThisDrawing.ModelSpace.AddLine(arcObj.startPoint, arcObj.endPoint)
    Set curves(0) = arcObj
    Set curves(1) = lineObj
    
    ' Create the region
    Dim regionObj As Variant
    regionObj = ThisDrawing.ModelSpace.AddRegion(curves)
    ZoomAll
    
    ' Find the perimeter of the region.
    Dim perimeter As Double
    perimeter = regionObj(0).perimeter
    MsgBox \"The perimeter of the region is \" & regionObj(0).perimeter, , \"Perimeter Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Perimeter()
    ;; This example creates a region from an arc and a line.
    ;; It then returns the length of the perimeter of the region.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    
    ;; Create the arc and line
    (setq centerPoint (vlax-3d-point 5 3 0)
          radius 2
          startAngle 0
          endAngle 3.141592)
    (setq arcObj (vla-AddArc modelSpace centerPoint radius startAngle endAngle))
    (setq lineObj (vla-AddLine modelSpace (vla-get-StartPoint arcObj) (vla-get-EndPoint arcObj)))
    (setq curves (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element curves 0 arcObj)
    (vlax-safearray-put-element curves 1 lineObj)
    
    ;; Create the region
    (setq regionObj (vla-AddRegion modelSpace curves))
    (vla-ZoomAll acadObj)
    
    ;; Find the perimeter of the region.
    (setq perimeter (vla-get-Perimeter (vlax-safearray-get-element (vlax-variant-value regionObj) 0)))
    (alert (strcat \"The perimeter of the region is \" (rtos perimeter 2)))
)
")
("Periodic" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-72209D73-58EA-4FAC-B6FE-B0B036422A9F"
"
Periodic Property (ActiveX)
Specifies that a smooth and closed surface is created without a kink if it is reshaped.
Supported platforms: Windows only
Signature
VBA:
object.Periodic
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: A kink can be created when reshaping the object.
    False: A kink cannot be created when reshaping the object.
Remarks
This property only affects lofts that are ruled or smooth fit, and the loft is a closed surface or solid.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("PickfirstSelectionSet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D48A1C37-4223-4AAA-B1DC-A746604C49B3"
                         "
PickfirstSelectionSet Property (ActiveX)
Gets the pickfirst selection set.
Supported platforms: Windows only
Signature
VBA:
object.PickfirstSelectionSet
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: SelectionSet
The pickfirst selection set.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PickfirstSelectionSet()
    ' This example lists all the objects in the pickfirst selection set.
    ' Before running this example, create some objects in the active
    ' drawing and select those objects. The objects currently selected
    ' in the active drawing will be returned in the pickfirst selection set.
            
    Dim pfSS As AcadSelectionSet
    Dim ssobject As AcadEntity
    Dim msg As String
    msg = \"\"
    
    Set pfSS = ThisDrawing.PickfirstSelectionSet
    For Each ssobject In pfSS
        msg = msg & vbCrLf & ssobject.ObjectName
    Next ssobject
    MsgBox \"The Pickfirst selection set contains: \" & msg
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PickfirstSelectionSet()
    ;; This example lists all the objects in the pickfirst selection set.
    ;; Before running this example, create some objects in the active
    ;; drawing and select those objects. The objects currently selected
    ;; in the active drawing will be returned in the pickfirst selection set.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
            
    (setq msg \"\"
          pfSS (vla-get-PickfirstSelectionSet doc))
  
    (vlax-for ssobject pfSS
        (setq msg (strcat msg \"\n\" (vla-get-ObjectName ssobject)))
    )
    (alert (strcat \"The Pickfirst selection set contains: \" msg))
)
")
("Plot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7C66D011-6130-4463-935F-26D92D6C83F3"
"
Plot Property (ActiveX)
Gets the Plot object for the document.
Supported platforms: Windows only
Signature
VBA:
object.Plot
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Plot
The Plot object of the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Plot()
    ' This example sends a plot of the current drawing
    ' to a file.
    
    ThisDrawing.ActiveLayout.ConfigName = \"DWF6 ePlot.pc3\"
    
    ' Define the plot variable
    Dim currentPlot As AcadPlot
    Set currentPlot = ThisDrawing.Plot
    
    ' Define the output file name.
    ' Use \"\" to use the drawing name as the file name.
    ' Note: if the file name exists an error will be generated.
    Dim plotFileName As String
    plotFileName = \"MyPlot\"
    
    currentPlot.PlotToFile plotFileName
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Plot()
    ;; This example sends a plot of the current drawing
    ;; to a file.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Set a device current that outputs to a file
    (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWF6 ePlot.pc3\")
    ;; Define the plot variable
    (setq currentPlot (vla-get-Plot doc))
    
    ;; Define the output file name.
    ;; Use \"\" to use the drawing name as the file name.
    ;; Note: if the file name exists an error will be generated.
    (setq plotFileName \"MyPlot\")
    (vla-PlotToFile currentPlot plotFileName)
)
")
("PlotConfigurations" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CCF26567-0714-40F4-9895-856A1722C891"
                      "
PlotConfigurations Property (ActiveX)
Gets the PlotConfigurations collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.PlotConfigurations
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: PlotConfigurations
The PlotConfigurations collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PlotConfigurations()
    ' This example will access the PlotConfigurations collection for the current drawing,
    ' add a plot configuration, and list basic information about the
    ' plot configurations in the drawing.
    Dim PlotConfigurations As AcadPlotConfigurations
    Dim PlotConfiguration As AcadPlotConfiguration
    Dim msg As String
    
    ' Get PlotConfigurations collection from document object
    Set PlotConfigurations = ThisDrawing.PlotConfigurations
    
    ' If there aren't any plot configurations, then add one
    If PlotConfigurations.count = 0 Then
        '*** Customize the new configuration to your satisfaction ***
        PlotConfigurations.Add \"NEW_CONFIGURATION\"
    End If
    
    msg = vbCrLf     ' Start with a space
    
    ' Get the names of the plot configurations in this drawing
    For Each PlotConfiguration In PlotConfigurations
        msg = msg & PlotConfiguration.name & vbCrLf
    Next
    
    ' Display a list of available plot configurations
    MsgBox \"There are \" & PlotConfigurations.count & \" plot configuration(s) in \" & _
           ThisDrawing.WindowTitle & \":\" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotConfigurations()
    ;; This example will access the PlotConfigurations collection for the current drawing,
    ;; add a plot configuration, and list basic information about the
    ;; plot configurations in the drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Get PlotConfigurations collection from document object
    (setq PlotConfigurations (vla-get-PlotConfigurations doc))
    
    ;; If there aren't any plot configurations, then add one
    (if (= (vla-get-Count PlotConfigurations) 0)
        ;; *** Customize the new configuration to your satisfaction ***
        (vla-Add PlotConfigurations \"NEW_CONFIGURATION\")
    )
    
    (setq msg \"\")
    
    ;; Get the names of the plot configurations in this drawing
    (vlax-for PlotConfiguration PlotConfigurations
        (setq msg (strcat msg (vla-get-Name PlotConfiguration) \"\n\"))
    )
    
    ;; Display a list of available plot configurations
    (alert (strcat \"There are \" (itoa (vla-get-Count PlotConfigurations)) \" plot configuration(s) in \"
                   (vla-get-WindowTitle doc) \": \n\" msg))
)
")
("PlotHidden" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-04E76F4D-D58B-406B-AB8E-7A62AFC7EF0C"
              "
PlotHidden Property (ActiveX)
Specifies if objects are to be hidden during a plot.
Supported platforms: Windows only
Signature
VBA:
object.PlotHidden
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Hide objects during the plot.
    False: Do not hide objects during the plot.
Remarks
This property specifies if the objects in paper space are processed through the hidden line algorithm. Note that this property does not affect objects inside floating model space viewports.
Examples
VBA:
Sub Example_PlotHidden()
    ' This example will access the Layouts collection for the current drawing
    ' and display whether the objects for each layout are to be hidden during a plot.
    ' It will then toggle the state of PlotHidden for \"Layout1\" and re-display the
    ' PlotHidden state for each Layout.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    Dim IsHidden As String
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    ' Display current hidden information
    GoSub DISPLAY
    
    ' Toggle object hidden state for Layout1
    Layouts(\"Layout1\").PlotHidden = Not (Layouts(\"Layout1\").PlotHidden)
    
    ' Display new hidden information
    GoSub DISPLAY
    
    Exit Sub
    
DISPLAY:
    msg = \"\"    ' Clear message
    
    ' Determine whether the objects for each layout are hidden during a plot
    For Each Layout In Layouts
        ' Are these objects hidden?
        IsHidden = IIf(Layout.PlotHidden, \" are hidden \", \" are not hidden \")
        
        ' Format for display
        msg = msg & \"Objects for \" & Layout.name & IsHidden & \"during a plot.\" & vbCrLf
    Next
    
    ' Display layout information
    MsgBox msg
    
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotHidden()
    ;; This example will access the Layouts collection for the current drawing
    ;; and display whether the objects for each layout are to be hidden during a plot.
    ;; It will then toggle the state of PlotHidden for \"Layout1\" and re-display the
    ;; PlotHidden state for each Layout.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc))
    
    ;; Display current hidden information
    (setq msg \"\")
    
    ;; Determine whether the objects for each layout are hidden during a plot
    (vlax-for Layout Layouts
        ;; Are these objects hidden?
        (setq IsHidden (if (= (vla-get-PlotHidden Layout) :vlax-true) \" are hidden \" \" are not hidden \"))
        
        ;; Format for display
        (setq msg (strcat msg \"Objects for \" (vla-get-Name Layout) IsHidden \"during a plot.\n\"))
    )
    
    ;; Display layout information
    (alert msg)
    
    ;; Toggle object hidden state for Layout1
    (vla-put-PlotHidden (vla-item Layouts \"Layout1\") (if (= (vla-get-PlotHidden (vla-item Layouts \"Layout1\")) :vlax-true) :vlax-false :vlax-true))
    
    ;; Display new hidden information
    (setq msg \"\")
    
    ;; Determine whether the objects for each layout are hidden during a plot
    (vlax-for Layout Layouts
        ;; Are these objects hidden?
        (setq IsHidden (if (= (vla-get-PlotHidden Layout) :vlax-true) \" are hidden \" \" are not hidden \"))
        
        ;; Format for display
        (setq msg (strcat msg \"Objects for \" (vla-get-Name Layout) IsHidden \"during a plot.\n\"))
    )
    
    ;; Display layout information
    (alert msg)
)
")
("PlotOrigin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CBA0BF04-AA4B-4605-98F9-7B50531E2CDE"
              "
PlotOrigin Property (ActiveX)
Specifies the origin of the layout or plot configuration in WCS coordinates.
Supported platforms: Windows only
Signature
VBA:
object.PlotOrigin
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (two-element array of doubles)
The X and Y values representing the origin relative to the lower-left corner of the media.
Remarks
The origin is offset from the media edge by the paper margin. Use the GetPaperMargins method to query the margins. The origin is given in millimeters.
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
Examples
VBA:
Sub Example_PlotOrigin()
    ' This example reads and modifies the PlotOrigin
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Variant
    Dim newValue(0 To 1) As Double
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotOrigin
    MsgBox \"The PlotOrigin value is set to: \" & originalValue(0) & \" ,\" & originalValue(1)
    ' Modify the PlotOrigin preference by toggling the value
    newValue(0) = originalValue(0) + 20
    newValue(1) = originalValue(1) - 20
    ACADLayout.PlotOrigin = newValue
    MsgBox \"The PlotOrigin value is set to: \" & newValue(0) & \" ,\" & newValue(1)
    ' Reset the preference back to its original value
    ACADLayout.PlotOrigin = originalValue
    MsgBox \"The PlotOrigin value is set to: \" & originalValue(0) & \" ,\" & originalValue(1)
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotOrigin()
    ;; This example reads and modifies the PlotOrigin
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vlax-variant-value (vla-get-PlotOrigin ACADLayout)))
    (alert (strcat \"The PlotOrigin value is set to: \" (rtos (vlax-safearray-get-element originalValue 0) 2) \" ,\"
                                                      (rtos (vlax-safearray-get-element originalValue 1) 2)))
    ;; Modify the PlotOrigin preference by toggling the value
    (setq newValue (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-fill newValue (list (+ (vlax-safearray-get-element originalValue 0) 20)
                                        (- (vlax-safearray-get-element originalValue 1) 20)))
    (vla-put-PlotOrigin ACADLayout newValue)
    (alert (strcat \"The PlotOrigin value is set to: \" (rtos (vlax-safearray-get-element newValue 0) 2) \" ,\"
                                                      (rtos (vlax-safearray-get-element newValue 1) 2)))
    ;; Reset the preference back to its original value
    (vla-put-PlotOrigin ACADLayout originalValue)
    (alert (strcat \"The PlotOrigin value is set to: \" (rtos (vlax-safearray-get-element originalValue 0) 2) \" ,\"
                                                      (rtos (vlax-safearray-get-element originalValue 1) 2)))
)
")
("PlotRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E612859D-AEC5-414F-B1D5-24C0CF6A4F48"
                "
PlotRotation Property (ActiveX)
Specifies the rotation angle for the layout or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.PlotRotation
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: acPlotRotation enum
    ac0degrees
    ac90degrees
    ac180degrees
    ac270degrees
Remarks
The rotation angle is relative to the X axis of the object's WCS with positive angles going counterclockwise when looking down from the Z axis toward the origin.
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
Examples
VBA:
Sub Example_PlotRotation()
    ' This example reads and modifies the PlotRotation
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Integer
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotRotation
    MsgBox \"The PlotRotation value is set to: \" & originalValue
    ' Modify the PlotRotation preference by toggling the value
    ACADLayout.PlotRotation = ac180degrees
    MsgBox \"The PlotRotation preference has been set to: \" & ACADLayout.PlotRotation
    ' Reset the preference back to its original value
    ACADLayout.PlotRotation = originalValue
    MsgBox \"The PlotRotation preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotRotation()
    ;; This example reads and modifies the PlotRotation
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-PlotRotation ACADLayout))
    (alert (strcat \"The PlotRotation value is set to: \" (itoa originalValue)))
    ;; Modify the PlotRotation preference by toggling the value
    (vla-put-PlotRotation ACADLayout ac180degrees)
    (alert (strcat \"The PlotRotation preference has been set to: \" (itoa (vla-get-PlotRotation ACADLayout))))
    ;; Reset the preference back to its original value
    (vla-put-PlotRotation ACADLayout originalValue)
    (alert (strcat \"The PlotRotation preference was reset back to: \" (itoa originalValue)))
)
")
("PlotStyleName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1AF12D45-BF89-4426-AC06-C9C703E6C72B"
                 "
PlotStyleName Property (ActiveX)
Specifies the plot style name for an object, group of objects, or layer.
Supported platforms: Windows only
Signature
VBA:
object.PlotStyleName
object
    Type: All drawing objects, AttributeReference, Dimension, Group, Layer, MLeaderLeader, SubDMeshEdge, SubDMeshFace, SubDMeshVertex, SubEntity, SubEntSolidEdge, SubEntSolidFace, SubEntSolidNode, SubEntSolidVertex
    The objects this property applies to.
Property Value
Read-only: No; except the Group object which is write-only
Type: String
The plot style name for the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PlotStyleName()
    ' This example creates a circle in model space and then
    ' finds the current PlotStyleName for the circle.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ZoomAll
    
    ' Find the PlotStyleName for the circle
    MsgBox \"The current PlotStyleName for the circle is \" & circleObj.PlotStyleName
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotStyleName()
    ;; This example creates a circle in model space and then
    ;; finds the current PlotStyleName for the circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    ;; Find the PlotStyleName for the circle
    (alert (strcat \"The current PlotStyleName for the circle is \" (vla-get-PlotStyleName circleObj)))
)
")
("PlotType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8C7BADF4-C201-4554-9E23-76DC5A60D787"
"
PlotType Property (ActiveX)
Specifies the type of layout or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.PlotType
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: acPlotType enum
    acDisplay: Prints everything that is in the current display.
    acExtents: Prints everything that falls within the extents of the currently selected space.
    acLimits: Prints everything that is in the limits of the current space.
    acView: Prints the view named by the ViewToPlot property.
    acWindow: Prints everything in the window specified by the SetWindowToPlot method.
    acLayout: Prints everything that falls within the margins of the specified paper size with the origin being calculated from 0,0 coordinate location in the Layout tab. This option is not available when printing from model space.
Remarks
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
The ViewToPlot property or SetWindowToPlot method must be called before you can set the PlotType to acView or acWindow.
Examples
VBA:
Sub Example_PlotType()
    ' This example reads and modifies the PlotType
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Integer
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotType
    MsgBox \"The PlotType value is set to: \" & originalValue
    ' Modify the PlotType preference by toggling the value
    ACADLayout.PlotType = acExtents
    MsgBox \"The PlotType preference has been set to: \" & ACADLayout.PlotType
    ' Reset the preference back to its original value
    ACADLayout.PlotType = originalValue
    MsgBox \"The PlotType preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotType()
    ;; This example reads and modifies the PlotType
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-PlotType ACADLayout))
    (alert (strcat \"The PlotType value is set to: \" (itoa originalValue)))
    ;; Modify the PlotType preference by toggling the value
    (vla-put-PlotType ACADLayout acExtents)
    (alert (strcat \"The PlotType preference has been set to: \" (itoa (vla-get-PlotType ACADLayout))))
    ;; Reset the preference back to its original value
    (vla-put-PlotType ACADLayout originalValue)
    (alert (strcat \"The PlotType preference was reset back to: \" (itoa originalValue)))
)
")
("PlotViewportBorders" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FBFBB73C-D6AB-4DEC-BC6F-2DFC55E9AF72"
                       "
PlotViewportBorders Property (ActiveX)
Specifies if the viewport borders are to be plotted.
Supported platforms: Windows only
Signature
VBA:
object.PlotViewportBorders
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Plot the viewport borders.
    False: Do not plot the viewport borders.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PlotViewportBorders()
    ' This example reads and modifies the PlotViewportBorders
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Boolean
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotViewportBorders
    MsgBox \"The PlotViewportBorders value is set to: \" & originalValue
    ' Modify the PlotViewportBorders preference by toggling the value
    ACADLayout.PlotViewportBorders = Not ACADLayout.PlotViewportBorders
    MsgBox \"The PlotViewportBorders preference has been set to: \" & ACADLayout.PlotViewportBorders
    ' Reset the preference back to its original value
    ACADLayout.PlotViewportBorders = originalValue
    MsgBox \"The PlotViewportBorders preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotViewportBorders()
    ;; This example reads and modifies the PlotViewportBorders
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-PlotViewportBorders ACADLayout))
    (alert (strcat \"The PlotViewportBorders value is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the PlotViewportBorders preference by toggling the value
    (vla-put-PlotViewportBorders ACADLayout (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-PlotViewportBorders ACADLayout))
    (alert (strcat \"The PlotViewportBorders preference has been set to: \" (if (= newValue :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    (vla-put-PlotViewportBorders ACADLayout originalValue)
    (alert (strcat \"The PlotViewportBorders preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("PlotViewportsFirst" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-53FD4018-8BEA-4E83-A271-5ECFB5331AC8"
                      "
PlotViewportsFirst Property (ActiveX)
Specifies if all geometry in paper space viewports is plotted first.
Supported platforms: Windows only
Signature
VBA:
object.PlotViewportsFirst
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Geometry in paper space viewports is plotted first, and the geometry in paper space is plotted last.
    False: Paper space geometry is plotted first, and the geometry in paper space viewports is plotted last.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PlotViewportsFirst()
    ' This example reads and modifies the PlotViewportsFirst
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Boolean
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotViewportsFirst
    MsgBox \"The PlotViewportsFirst value is set to: \" & originalValue
    ' Modify the PlotViewportsFirst preference by toggling the value
    ACADLayout.PlotViewportsFirst = Not ACADLayout.PlotViewportsFirst
    MsgBox \"The PlotViewportsFirst preference has been set to: \" & ACADLayout.PlotViewportsFirst
    ' Reset the preference back to its original value
    ACADLayout.PlotViewportsFirst = originalValue
    MsgBox \"The PlotViewportsFirst preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotViewportsFirst()
    ;; This example reads and modifies the PlotViewportsFirst
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-PlotViewportsFirst ACADLayout))
    (alert (strcat \"The PlotViewportsFirst value is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the PlotViewportsFirst preference by toggling the value
    (vla-put-PlotViewportsFirst ACADLayout (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-PlotViewportsFirst ACADLayout))
    (alert (strcat \"The PlotViewportsFirst preference has been set to: \" (if (= newValue :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    (vla-put-PlotViewportsFirst ACADLayout originalValue)
    (alert (strcat \"The PlotViewportsFirst preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("PlotWithLineweights" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-44A4E6C4-02B1-4BDB-ADAA-E94AB354DB91"
                       "
PlotWithLineweights Property (ActiveX)
Specifies whether objects plot with the lineweights they are assigned in the plot file, or with the lineweights in the drawing file.
Supported platforms: Windows only
Signature
VBA:
object.PlotWithLineweights
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Plot using the lineweights in the plot style.
    False: Plot using the lineweights in the drawing file.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_PlotWithLineweights()
    ' This example reads and modifies the PlotWithLineweights
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Boolean
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotWithLineweights
    MsgBox \"The PlotWithLineweights value is set to: \" & originalValue
    ' Modify the PlotWithLineweights preference by toggling the value
    ACADLayout.PlotWithLineweights = Not ACADLayout.PlotWithLineweights
    MsgBox \"The PlotWithLineweights preference has been set to: \" & ACADLayout.PlotWithLineweights
    ' Reset the preference back to its original value
    ACADLayout.PlotWithLineweights = originalValue
    MsgBox \"The PlotWithLineweights preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotWithLineweights()
    ;; This example reads and modifies the PlotWithLineweights
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-PlotWithLineweights ACADLayout))
    (alert (strcat \"The PlotWithLineweights value is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the PlotWithLineweights preference by toggling the value
    (vla-put-PlotWithLineweights ACADLayout (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-PlotWithLineweights ACADLayout))
    (alert (strcat \"The PlotWithLineweights preference has been set to: \" (if (= newValue :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    (vla-put-PlotWithLineweights ACADLayout originalValue)
    (alert (strcat \"The PlotWithLineweights preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("PlotWithPlotStyles" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-400D57D6-C025-44AA-A8F8-938783A5E33D"
                      "
PlotWithPlotStyles Property (ActiveX)
Specifies whether or not to plot using the plot styles that are applied to objects and defined in the plot style table.
Supported platforms: Windows only
Signature
VBA:
object.PlotWithPlotStyles
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Use the plot styles applied to objects when plotting.
    False: Do not use plot styles applied to objects when plotting.
Remarks
The PlotWithPlotStyles property is equivalent to the Plot with Plot Styles option in AutoCAD.
Examples
VBA:
Sub Example_PlotWithPlotStyles()
    ' This example reads and changes the PlotWithPlotStyles
    ' value, and shows a plot preview so the user can see the change.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Boolean
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.PlotWithPlotStyles
    MsgBox \"The PlotWithPlotStyles value is set to: \" & originalValue
    ' Modify the PlotWithPlotStyles preference by changing the value
    ACADLayout.PlotWithPlotStyles = Not ACADLayout.PlotWithPlotStyles
    MsgBox \"The PlotWithPlotStyles preference has been set to: \" & ACADLayout.PlotWithPlotStyles
    ThisDrawing.ActiveLayout.ConfigName = \"DWF6 ePlot.pc3\"
    
    'Show plot preview
    ThisDrawing.Plot.DisplayPlotPreview acFullPreview
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PlotWithPlotStyles()
    ;; This example reads and changes the PlotWithPlotStyles
    ;; value, and shows a plot preview so the user can see the change.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-PlotWithPlotStyles ACADLayout))
    (alert (strcat \"The PlotWithPlotStyles value is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the PlotWithPlotStyles preference by changing the value
    (vla-put-PlotWithPlotStyles ACADLayout (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-PlotWithPlotStyles ACADLayout))
    (alert (strcat \"The PlotWithPlotStyles preference has been set to: \" (if (= newValue :vlax-true) \"True\" \"False\")))
    ;; Set an output device current
    (if (= (strcase (vla-get-ConfigName (vla-get-ActiveLayout doc))) \"NONE\")
        (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWF6 ePlot.pc3\")
    )
    ;; Show plot preview
    (vla-DisplayPlotPreview (vla-get-Plot doc) acFullPreview)
)
")
("Plottable" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-61FD920B-1486-490B-A268-70A3DC7EA3EE"
             "
Plottable Property (ActiveX)
Specifies if the layer is plottable.
Supported platforms: Windows only
Signature
VBA:
object.Plottable
object
    Type: Layer
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The layer is plottable.
    False: The layer is not plottable.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Plottable()
    ' This example creates a new layer called \"New_Layer\".  It then uses
    ' the Plottable property of each Layer to display whether or not that layer
    ' is plottable.  The user has the ability to toggle the plottable state
    ' for each layer, and the final plottable status for all layers is displayed.
    
    Dim layerObj As AcadLayer, tempLayer As AcadLayer
    Dim msg As String
    ' Add the layer to the layers collection
    Set layerObj = ThisDrawing.Layers.Add(\"New_Layer\")
    
    ' Make the new layer the active layer for the drawing
    ThisDrawing.ActiveLayer = layerObj
    
    ' Cycle through the layers and allow user to make them plottable or not
    
    For Each tempLayer In ThisDrawing.Layers
        If tempLayer.Plottable Then     ' Determine if this layer is plottable
            If MsgBox(\"The layer '\" & tempLayer.name & \"' will plot.  Would you like to turn off plotting for this layer?\", vbYesNo & vbQuestion) = vbYes Then
                tempLayer.Plottable = False     ' Change plottable state
            End If
        Else
            If MsgBox(\"The layer '\" & tempLayer.name & \"' will not plot.  Would you like to turn on plotting for this layer?\", vbYesNo & vbQuestion) = vbYes Then
                tempLayer.Plottable = True      ' Change plottable state
            End If
        End If
    Next
    
    ' Display the new plottable status of the layers in this drawing
    
    For Each tempLayer In ThisDrawing.Layers
        ' Determine if this layer is plottable
        If tempLayer.Plottable Then
            msg = msg & \"The layer '\" & tempLayer.name & \"' will plot.\" & vbCrLf
        Else
            msg = msg & \"The layer '\" & tempLayer.name & \"' will not plot.\" & vbCrLf
        End If
    Next
    MsgBox msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Plottable()
    ;; This example creates a new layer called \"New_Layer\".  It then uses
    ;; the Plottable property of each Layer to display whether or not that layer
    ;; is plottable.  The user has the ability to toggle the plottable state
    ;; for each layer, and the final plottable status for all layers is displayed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Add the layer to the layers collection
    (setq layerObj (vla-Add (vla-get-Layers doc) \"New_Layer\"))
    
    ;; Make the new layer the active layer for the drawing
    (vla-put-ActiveLayer doc layerObj)
    
    ;; Cycle through the layers and allow user to make them plottable or not
    (vlax-for tempLayer (vla-get-Layers doc)
        (if (= (vla-get-Plottable tempLayer) :vlax-true)     ;; Determine if this layer is plottable
            (progn
                (alert (strcat \"The layer '\" (vla-get-Name tempLayer) \"' set to plot.\"))
                (vla-put-Plottable tempLayer :vlax-false)     ;; Change plottable state
                (alert (strcat \"The layer '\" (vla-get-Name tempLayer) \"' now set not to plot.\"))
            )
            (progn
                (alert (strcat \"The layer '\" (vla-get-Name tempLayer) \"' set not to plot.\"))
                (vla-put-Plottable tempLayer :vlax-true)     ;; Change plottable state
                (alert (strcat \"The layer '\" (vla-get-Name tempLayer) \"' now set to plot.\"))
            )
        )
    )
    (setq msg \"\")
  
    ;; Display the new plottable status of the layers in this drawing
    (vlax-for tempLayer (vla-get-Layers doc)
        ;; Determine if this layer is plottable
        (if (= (vla-get-Plottable tempLayer) :vlax-true)
            (setq msg (strcat msg \"The layer '\" (vla-get-Name tempLayer) \"' will plot.\n\"))
            (setq msg (strcat msg \"The layer '\" (vla-get-Name tempLayer) \"' will not plot.\n\"))
        )
    )
    (alert msg)
)
")
("Position" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7BAEF097-C177-4F4A-B9A6-0A2202C4381B"
"
Position Property (ActiveX)
Specifies the X, Y, Z coordinate for center of the base or center of the solid, or the origin for the position marker, helix, or underlay.
Supported platforms: Windows only
Signature
VBA:
object.Position
object
    Type: 3DSolid, DgnUnderlay, DwfUnderlay, GeoPositionMarker, Helix, PdfUnderlay
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant
The X, Y, Z coordinate for the base, center, or origin of the object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Preferences" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CEA64734-E3BE-441F-A586-2F954AA8403E"
               "
Preferences Property (ActiveX)
Gets the Preferences object.
Supported platforms: Windows only
Signature
VBA:
object.Preferences
object
    Type: Application, Database, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: DatabasePreferences, Preferences
The DatabasePreferences or Preferences object.
Remarks
The Preferences object holds the options from the Options dialog that reside in the registry. Options that reside in the drawing can be found through the DatabasePreferences object.
Examples
VBA:
Sub Example_Preferences()
    ' This example returns the current setting of
    ' LogFilePath from the preferences object.
    
    Dim preferences As AcadPreferences
    Set preferences = ThisDrawing.Application.Preferences
    
    ' Retrieve the current LogFilePath value
    MsgBox \"The current value for LogFilePath is \" & preferences.Files.LogFilePath, , \"Preferences Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Preferences()
    ;; This example returns the current setting of
    ;; LogFilePath from the preferences object.
    (setq acadObj (vlax-get-acad-object))
    (setq preferences (vla-get-Preferences acadObj))
    ;; Retrieve the current LogFilePath value
    (alert (strcat \"The current value for LogFilePath is \" (vla-get-LogFilePath (vla-get-Files preferences))))
)
")
("Preset" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A0753063-764A-4FA8-8211-E525A4C94FC9"
"
Preset Property (ActiveX)
Specifies if the attribute is preset.
Supported platforms: Windows only
Signature
VBA:
object.Preset
object
    Type: Attribute
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The attribute is a preset attribute.
    False: The attribute is not a preset attribute.
Remarks
A preset attribute sets the attribute to its default, or preset, value when the user inserts the block.
An attribute may exist as only one of four optional modes: constant, preset, invisible, or verify. The AFLAGS system variable stores the current mode settings. You can query the current mode using the Mode property.
Examples
VBA:
Sub Example_Preset()
    ' This example creates a block containing an attribute definition.
    ' Initially, the attribute has the preset flag turned on and will display a preset
    ' value for the attribute when the parent block is inserted as a reference.
    '
    ' Every time the example is run, attempt to find the attribute and
    ' toggle the Preset value.
    '
    ' * Note: After running this example for the first time, select the menu \"Insert/Block...\"
    ' and create a block reference from \"Block-PRESET\".  You will see
    ' the preset value display for the attribute when the blockref is displayed.
    '
    ' Then run the example again and repeat the block insert.  Notice this time that the
    ' preset has been turned off, and you are now prompted for the attribute value.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double, mode As Long, prompt As String, tag As String, value As String
    Dim AttrInsertionPoint(0 To 2) As Double
    Dim BlockInsertionPoint(0 To 2) As Double
    Dim newBlock As AcadBlock
    Dim IsPreset As String
    
    ' Determine if this block has already been created.  If so, get the block and
    ' the attribute inside; otherwise, create a new block containing an
    ' attribute.
    On Error Resume Next
    
    Set newBlock = ThisDrawing.Blocks(\"Block-PRESET\")
    
    
    If Err = 0 Then         ' The example block has been created
        Set attributeObj = newBlock.Item(0)                 ' Get only object in example block
    
        attributeObj.Preset = Not attributeObj.Preset     ' Toggle the attribute preset value
    
    ElseIf Err <> 0 Then    ' The example block has not been created
    
        ' Create a new block to hold the Attribute object
        BlockInsertionPoint(0) = 0: BlockInsertionPoint(1) = 0: BlockInsertionPoint(2) = 0
        Set newBlock = ThisDrawing.Blocks.Add(BlockInsertionPoint, \"Block-PRESET\")
    
        ' Define the attribute definition
        AttrInsertionPoint(0) = 0: AttrInsertionPoint(1) = 0: AttrInsertionPoint(2) = 0
        height = 1#
        mode = acAttributeModePreset
        prompt = \"New Prompt\"
        tag = \"New_Tag\"
        value = \"Preset\"
        
        ' Add attribute definition object to new block
        Set attributeObj = newBlock.AddAttribute(height, mode, prompt, AttrInsertionPoint, tag, value)
    
    End If
    
    On Error GoTo 0
    ' Read the attribute back and display information
    IsPreset = IIf(attributeObj.Preset, \"has a preset value of: \" & attributeObj.textString, _
                   \"does not have a preset value\")
                   
    MsgBox \"The block attribute \" & IsPreset, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Preset()
    ;; This example creates a block containing an attribute definition.
    ;; Initially, the attribute has the preset flag turned on and will display a preset
    ;; value for the attribute when the parent block is inserted as a reference.
    ;;
    ;; Every time the example is run, attempt to find the attribute and
    ;; toggle the Preset value.
    ;;
    ;; * Note: After running this example for the first time, select the menu \"Insert/Block...\"
    ;; and create a block reference from \"Block-PRESET\".  You will see
    ;; the preset value display for the attribute when the blockref is displayed.
    ;;
    ;; Then run the example again and repeat the block insert.  Notice this time that the
    ;; preset has been turned off, and you are now prompted for the attribute value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Determine if this block has already been created.  If so, get the block and
    ;; the attribute inside; otherwise, create a new block containing an
    ;; attribute.
    
    (setq err (vl-catch-all-apply 'vla-Item (list (vla-get-Blocks doc) \"Block-PRESET\")))
  
    (if (/= (type err) 'VL-CATCH-ALL-APPLY-ERROR)             ;; The example block has been created
        (progn
            (setq newBlock err)
            (setq attributeObj (vla-Item newBlock 0))         ;; Get only object in example block
    
            (vla-put-Preset attributeObj (if (= (vla-get-Preset attributeObj) :vlax-true) :vlax-false :vlax-true))     ;; Toggle the attribute preset value
        )
        (progn
	           ;; Create a new block to hold the Attribute object
            (setq BlockInsertionPoint (vlax-3d-point 0 0 0))
            (setq newBlock (vla-Add (vla-get-Blocks doc) BlockInsertionPoint \"Block-PRESET\"))
	           ;; Define the attribute definition
            (setq attrInsertionPoint (vlax-3d-point 0 0 0)
	                 attHeight 1
	                 attMode acAttributeModePreset
	                 attPrompt \"New Prompt\"
	                 attTag \"New_Tag\"
                  attValue \"Preset\")
	        
	           ;; Add attribute definition object to new block
	           (setq attributeObj (vla-AddAttribute newBlock attHeight attMode attPrompt attrInsertionPoint attTag attValue))
        )
    )
    
    ;; Read the attribute back and display information
    (setq IsPreset (if (= (vla-get-Preset attributeObj) :vlax-true)
                             (strcat \"has a preset value of: \" (vla-get-TextString attributeObj))
                                     \"does not have a preset value\"))
                   
    (alert (strcat \"The block attribute \" IsPreset))
)
")
("PrimaryUnitsPrecision" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2BA3198C-BC5A-47DC-BBE6-B5A6D94B6425"
                         "
PrimaryUnitsPrecision Property (ActiveX)
Specifies the number of decimal places displayed for the primary units of a dimension or tolerance.
Supported platforms: Windows only
Signature
VBA:
object.PrimaryUnitsPrecision
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimPrecision enum
    acDimPrecisionZero: 0.
    acDimPrecisionOne: 0.0
    acDimPrecisionTwo: 0.00
    acDimPrecisionThree: 0.000
    acDimPrecisionFour: 0.0000
    acDimPrecisionFive: 0.00000
    acDimPrecisionSix: 0.000000
    acDimPrecisionSeven: 0.0000000
    acDimPrecisionEight: 0.00000000
Remarks
Note: This property overrides the value of the DIMDEC system variable for the given dimension.
Examples
VBA:
Sub Example_PrimaryUnitsPrecision()
    ' This example creates an aligned dimension in model space and
    ' uses PrimaryUnitsPrecision to allow the user to change
    ' the number of decimal places displayed for the primary units and tolerance
    ' units of the dimension.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim oldPrecision As String, newPrecision As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5.12345678: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable and setup tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    dimObj.ToleranceLowerLimit = -0.0001
    dimObj.ToleranceUpperLimit = 0.005
    
    ThisDrawing.Application.ZoomAll
    ' Store old precision value as default for input box
    oldPrecision = dimObj.PrimaryUnitsPrecision
    
    ' Allow the user to change the precision for the dimension and dimension tolerance
    newPrecision = InputBox(\"Enter a new precision for the dimension and tolerances.  The value must range from 0 to 8.\", \"Change Precision\", oldPrecision)
    
    Select Case newPrecision
        Case 0: newPrecision = acDimPrecisionZero
        Case 1: newPrecision = acDimPrecisionOne
        Case 2: newPrecision = acDimPrecisionTwo
        Case 3: newPrecision = acDimPrecisionThree
        Case 4: newPrecision = acDimPrecisionFour
        Case 5: newPrecision = acDimPrecisionFive
        Case 6: newPrecision = acDimPrecisionSix
        Case 7: newPrecision = acDimPrecisionSeven
        Case 8: newPrecision = acDimPrecisionEight
        Case Else
            MsgBox \"The precision has not been changed.\"
            Exit Sub
    End Select
    
    ' Change the dimension and tolerance precision
    dimObj.TolerancePrecision = newPrecision
    dimObj.PrimaryUnitsPrecision = newPrecision
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the dimension and dimension tolerance precision
    newPrecision = dimObj.PrimaryUnitsPrecision
    MsgBox \"The precision has been set to \" & newPrecision & \" decimal places\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PrimaryUnitsPrecision()
    ;; This example creates an aligned dimension in model space and
    ;; uses PrimaryUnitsPrecision to allow the user to change
    ;; the number of decimal places displayed for the primary units and tolerance
    ;; units of the dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5.12345678 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable and setup tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    (vla-put-ToleranceLowerLimit dimObj -0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.005)
    
    (vla-ZoomAll acadObj)
    ;; Store old precision value as default for input box
    (setq oldPrecision (vla-get-PrimaryUnitsPrecision dimObj))
    
    ;; Allow the user to change the precision for the dimension and dimension tolerance
    (setq newPrecision (vla-GetInteger (vla-get-Utility doc) \"\nEnter a new precision for the dimension and tolerances (0 - 8): \"))
    
    (setq newPrecision (cond
                           ((= 0 newPrecision) acDimPrecisionZero)
                           ((= 1 newPrecision) acDimPrecisionOne)
                           ((= 2 newPrecision) acDimPrecisionTwo)
                           ((= 3 newPrecision) acDimPrecisionThree)
                           ((= 4 newPrecision) acDimPrecisionFour)
                           ((= 5 newPrecision) acDimPrecisionFive)
                           ((= 6 newPrecision) acDimPrecisionSix)
                           ((= 7 newPrecision) acDimPrecisionSeven)
                           ((= 8 newPrecision) acDimPrecisionEight)
                           (nil)
                       ))
    
    ;; Change the dimension and tolerance precision
    (if (/= newPrecision nil)
        (progn
            (vla-put-TolerancePrecision dimObj newPrecision)
            (vla-put-PrimaryUnitsPrecision dimObj newPrecision)
    
            (vla-Regen doc acAllViewports)
    
            ;; Read back and display the dimension and dimension tolerance precision
            (setq newPrecision (vla-get-PrimaryUnitsPrecision dimObj))
            (alert (strcat \"The precision has been set to \" (itoa newPrecision) \" decimal places\"))
        )
        (alert \"The precision has not been changed.\")
    )
)
")
("PrincipalDirections" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C1B05DAB-86A8-457A-8E46-555FAE277540"
                       "
PrincipalDirections Property (ActiveX)
Gets the principal directions of the solid or region.
Supported platforms: Windows only
Signature
VBA:
object.PrincipalDirections
object
    Type: 3DSolid, Region
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
The X, Y, and Z coordinates calculated on the current coordinate system.
Remarks
The principal directions are returned as X, Y, and Z coordinates defined as a variant. They are calculated based on the current coordinate system.
Examples
VBA:
Sub Example_PrincipalDirections()
    ' This example creates a box in model space.
    ' It then returns the PrincipalDirections for that box.
              
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the PrincipalDirections for the box
    Dim PrincipalDirections As Variant
    PrincipalDirections = boxObj.PrincipalDirections
    MsgBox \"The PrincipalDirections for the box are \" & PrincipalDirections(0) & \", \" & PrincipalDirections(1) & \", \" & PrincipalDirections(2), , \"PrincipalDirections Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PrincipalDirections()
    ;; This example creates a box in model space.
    ;; It then returns the PrincipalDirections for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the PrincipalDirections for the box
    (setq PrincipalDirections (vlax-variant-value (vla-get-PrincipalDirections boxObj)))
    (alert (strcat \"The PrincipalDirections for the box are \"
                   (rtos (vlax-safearray-get-element PrincipalDirections 0) 2) \", \"
                   (rtos (vlax-safearray-get-element PrincipalDirections 1) 2) \", \"
                   (rtos (vlax-safearray-get-element PrincipalDirections 2) 2)))
)
")
("PrincipalMoments" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1E8E7025-1E04-4806-B967-136295222877"
"
PrincipalMoments Property (ActiveX)
Gets the principal moments property of the solid or region.
Supported platforms: Windows only
Signature
VBA:
object.PrincipalMoments
object
    Type: 3DSolid, Region
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
The X, Y, and Z coordinates calculated on the current coordinate system.
Remarks
The principal moments are returned as X, Y, and Z coordinates defined as a variant. They are calculated based on the current coordinate system.
Examples
VBA:
Sub Example_PrincipalMoments()
    ' This example creates a box in model space.
    ' It then returns the PrincipalMoments for that box.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the PrincipalMoments for the box
    Dim PrincipalMoments As Variant
    PrincipalMoments = boxObj.PrincipalMoments
    MsgBox \"The PrincipalMoments for the box are \" & PrincipalMoments(0) & \", \" & PrincipalMoments(1) & \", \" & PrincipalMoments(2), , \"PrincipalMoments Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PrincipalMoments()
    ;; This example creates a box in model space.
    ;; It then returns the PrincipalMoments for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the PrincipalMoments for the box
    (setq PrincipalMoments (vlax-variant-value (vla-get-PrincipalMoments boxObj)))
    (alert (strcat \"The PrincipalMoments for the box are \"
                   (rtos (vlax-safearray-get-element PrincipalMoments 0) 2) \", \"
                   (rtos (vlax-safearray-get-element PrincipalMoments 1) 2) \", \"
                   (rtos (vlax-safearray-get-element PrincipalMoments 2) 2)))
)
")
("ProductOfInertia" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FE8F6365-9E04-44C4-80B4-3DE62707F71F"
                    "
ProductOfInertia Property (ActiveX)
Gets the product of inertia of the solid or region.
Supported platforms: Windows only
Signature
VBA:
object.ProductOfInertia
object
    Type: 3DSolid, Region
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
The X, Y, and Z coordinates calculated on the current coordinate system.
Remarks
The product of inertia is returned as X, Y, and Z coordinates defined as a variant. It is calculated based on the current coordinate system.
Examples
VBA:
Sub Example_ProductOfInertia()
    ' This example creates a box in model space.
    ' It then returns the ProductOfInertia for that box.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the ProductOfInertia for the box
    Dim ProductOfInertia As Variant
    ProductOfInertia = boxObj.ProductOfInertia
    MsgBox \"The ProductOfInertia for the box is \" & ProductOfInertia(0) & \", \" & ProductOfInertia(1) & \", \" & ProductOfInertia(2), , \"ProductOfInertia Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ProductOfInertia()
    ;; This example creates a box in model space.
    ;; It then returns the ProductOfInertia for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	         boxWidth 7
	         boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the ProductOfInertia for the box
    (setq ProductOfInertia (vlax-variant-value (vla-get-ProductOfInertia boxObj)))
    (alert (strcat \"The ProductOfInertia for the box is \"
                   (rtos (vlax-safearray-get-element ProductOfInertia 0) 2) \", \"
                   (rtos (vlax-safearray-get-element ProductOfInertia 1) 2) \", \"
                   (rtos (vlax-safearray-get-element ProductOfInertia 2) 2)))
)
")
("ProfileRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4FA17852-13F7-45A0-BB7B-3855640253E1"
                   "
ProfileRotation Property (ActiveX)
Specifies the rotation of the sweep profile.
Supported platforms: Windows only
Signature
VBA:
object.ProfileRotation
object
    Type: SweptSurface
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_ANGLE
The rotation of the swept profile.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("PromptString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5320ADDC-E5FF-483F-AC10-FFBBB9002128"
                "
PromptString Property (ActiveX)
Specifies the prompt string for an attribute.
Supported platforms: Windows only
Signature
VBA:
object.PromptString
object
    Type: Attribute
    The object this property applies to.
Property Value
Read-only: No
Type: String
The prompt string for the attribute.
Remarks
This string appears when a block containing this attribute is inserted. The default for this string is the TagString property. Entering acAttributeModeConstant for the Mode property disables the prompt.
Examples
VBA:
Sub Example_PromptString()
    ' This example creates an attribute definition in a block.
    ' It then inserts the block. Then it changes the prompt string
    ' of the attribute definition, and inserts the block again.
    
    ' Create the block
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"TEST\")
    
    ' Add a circle to block
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 0: center(1) = 0: center(2) = 0
    radius = 1
    Set circleObj = blockObj.AddCircle(center, radius)
    ' Define the attribute definition
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Integer
    Dim prompt As String
    Dim tag As String
    Dim value As String
    
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"Enter value:\"
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0
    tag = \"Tag1\"
    value = \"Circle1\"
    
    ' Create the attribute definition on the block
    Set attributeObj = blockObj.AddAttribute(height, mode, prompt, insertionPnt, tag, value)
    
    ' Insert the block
    Dim blockRefObj1 As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj1 = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"TEST\", 1#, 1#, 1#, 0)
        
    ' Change the prompt string and tag of the attribute definition
    attributeObj.PromptString = \"Verify value:\"
    
    ' Insert the block again
    Dim blockRefObj2 As AcadBlockReference
    insertionPnt(0) = 4#: insertionPnt(1) = 4#: insertionPnt(2) = 0
    Set blockRefObj2 = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"TEST\", 1#, 1#, 1#, 0)
    
    ZoomAll
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_PromptString()
    ;; This example creates an attribute definition in a block.
    ;; It then inserts the block. Then it changes the prompt string
    ;; of the attribute definition, and inserts the block again.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the block
    (setq insertionPnt (vlax-3d-point 0 0 0))
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"TEST\"))
    
    ;; Add a circle to block
    (setq center (vlax-3d-point 0 0 0)
          radius 1)
    (setq circleObj (vla-AddCircle blockObj center radius))
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 0 0 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"Enter value:\"
          attTag \"Tag1\"
          attValue \"Circle1\")
    
    ;; Create the attribute definition on the block
    (setq attributeObj (vla-AddAttribute blockObj attHeight attMode attPrompt insertionPoint attTag attValue))
    
    ;; Insert the block
    (setq insertionPnt (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj1 (vla-InsertBlock modelSpace insertionPnt \"TEST\" 1 1 1 0))
        
    ;; Change the prompt string and tag of the attribute definition
    (vla-put-PromptString attributeObj \"Verify value:\")
    
    ;; Insert the block again
    (setq insertionPnt (vlax-3d-point 4 4 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj2 (vla-InsertBlock modelSpace insertionPnt \"TEST\" 1 1 1 0))
    
    (vla-ZoomAll acadObj)
)
")
("PropertyName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1D55A245-28F4-48E5-BB2B-78E88C62541C"
"
PropertyName Property (ActiveX)
Specifies the name for the property.
Supported platforms: Windows only
Signature
VBA:
object.PropertyName
object
    Type: DynamicBlockReferenceProperty
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
The property name.
Remarks
Property names are guaranteed to be unique among all properties on a given block reference.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("QuietErrorMode" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CC97F02A-D833-4F2A-A4E7-14BF68CF5B77"
                  "
QuietErrorMode Property (ActiveX)
Toggles the quiet error mode for plot-error reporting.
Supported platforms: Windows only
Signature
VBA:
object.QuietErrorMode
object
    Type: Plot
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Enables quiet error mode.
    False: Disables quiet error mode.
Remarks
Quiet error mode logs all plot-related error messages into a log file.
When the quiet error mode is disabled, the normal error reporting mechanisms (alert boxes) are used.
Examples
VBA:
Sub Example_QuietErrorMode()
    ' This example plots the layouts of a drawing.
    Dim oPlot As AcadPlot
    Dim AddedLayouts() As String
    Dim LayoutList As Variant
    Dim oLayout As ACADLayout
    Dim ArraySize As Integer, BatchCount As Integer
    
    For Each oLayout In ThisDrawing.Layouts
        ArraySize = ArraySize + 1
        ReDim Preserve AddedLayouts(1 To ArraySize)
        AddedLayouts(ArraySize) = oLayout.Name
    Next
    LayoutList = AddedLayouts
    Set oPlot = ThisDrawing.Plot
    oPlot.SetLayoutsToPlot LayoutList
    oPlot.PlotToDevice \"DWF6 ePlot.pc3\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_QuietErrorMode()
    ;; This example plots the layouts of a drawing.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq AddedLayouts (vlax-make-safearray vlax-vbString (cons 0 (1- (vla-get-Count (vla-get-Layouts doc)))))
          ArraySize 0)
    
    (vlax-for oLayout (vla-get-Layouts doc)
        (vlax-safearray-put-element AddedLayouts ArraySize (vla-get-Name oLayout))
        (setq ArraySize (1+ ArraySize))
    )
    (setq oPlot (vla-get-Plot doc))
    (setq currMode (vla-get-QuietErrorMode oPlot))
    (vla-put-QuietErrorMode oPlot :vlax-true)
    (vla-SetLayoutsToPlot oPlot AddedLayouts)
    (vla-PlotToDevice oPlot \"DWF6 ePlot.pc3\")
    (vla-put-QuietErrorMode oPlot currMode)
)
")
("RadiiOfGyration" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1CA0EA7A-FD58-484F-ADB3-D5D58DF17938"
"
RadiiOfGyration Property (ActiveX)
Gets the radius of gyration of the solid or region.
Supported platforms: Windows only
Signature
VBA:
object.RadiiOfGyration
object
    Type: 3DSolid, Region
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Variant (three-element array of doubles)
The X, Y, and Z coordinates calculated on the current coordinate system.
Remarks
The radius of gyration is returned as X, Y, and Z coordinates defined as a variant. It is calculated based on the current coordinate system.
Examples
VBA:
Sub Example_RadiiOfGyration()
    ' This example creates a box in model space.
    ' It then returns the RadiiOfGyration for that box.
        
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport for a better view of the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the RadiiOfGyration for the box
    Dim RadiiOfGyration As Variant
    RadiiOfGyration = boxObj.RadiiOfGyration
    MsgBox \"The RadiiOfGyration for the box is \" & RadiiOfGyration(0) & \", \" & RadiiOfGyration(1) & \", \" & RadiiOfGyration(2), , \"RadiiOfGyration Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RadiiOfGyration()
    ;; This example creates a box in model space.
    ;; It then returns the RadiiOfGyration for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	  boxWidth 7
	  boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport for a better view of the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the RadiiOfGyration for the box
    (setq RadiiOfGyration (vlax-variant-value (vla-get-RadiiOfGyration boxObj)))
    (alert (strcat \"The RadiiOfGyration for the box is \"
                             (rtos (vlax-safearray-get-element RadiiOfGyration 0) 2) \", \"
                             (rtos (vlax-safearray-get-element RadiiOfGyration 1) 2) \", \"
                             (rtos (vlax-safearray-get-element RadiiOfGyration 2) 2)))
)
")
("Radius" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-28F16E3B-56A0-44AA-9449-1DB66BBF08DA"
          "
Radius Property (ActiveX)
Specifies the radius of an arc, circle, or position marker.
Supported platforms: Windows only
Signature
VBA:
object.Radius
object
    Type: Arc, Circle, GeoPositionMarker
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The radius of the arc, circle, or position marker.
Remarks
Radius of a circle
Examples
VBA:
Sub Example_Radius()
    ' This example creates an arc in model space.
    ' It then returns the radius of the arc.
    Dim arcObj As AcadArc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngleInDegree As Double
    Dim endAngleInDegree As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    startAngleInDegree = 10#
    endAngleInDegree = 230#
    
    ' Convert the angles in degrees to angles in radians
    Dim startAngleInRadian As Double
    Dim endAngleInRadian As Double
    startAngleInRadian = startAngleInDegree * 3.141592 / 180#
    endAngleInRadian = endAngleInDegree * 3.141592 / 180#
    
    ' Create the arc object in model space
    Set arcObj = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngleInRadian, endAngleInRadian)
    ZoomAll
    
    ' Find the radius of the arc
    radius = arcObj.radius
    MsgBox \"The radius of the arc is \" & arcObj.radius, , \"Radius Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Radius()
    ;; This example creates an arc in model space.
    ;; It then returns the radius of the arc.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5
          startAngleInDegree 10
          endAngleInDegree 230)
    
    ;; Convert the angles in degrees to angles in radians
    (setq startAngleInRadian (/ (* startAngleInDegree 3.141592) 180))
    (setq endAngleInRadian (/ (* endAngleInDegree 3.141592) 180))
    
    ;; Create the arc object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq arcObj (vla-AddArc modelSpace centerPoint radius startAngleInRadian endAngleInRadian))
    (vla-ZoomAll acadObj)
    
    ;; Find the radius of the arc
    (alert (strcat \"The radius of the arc is \" (rtos (vla-get-Radius arcObj))))
)
")
("RadiusRatio" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-816A420F-C2A0-4458-AAFD-D3D73D04B28D"
               "
RadiusRatio Property (ActiveX)
Specifies the major to minor axis ratio of an ellipse.
Supported platforms: Windows only
Signature
VBA:
object.RadiusRatio
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The radius ratio of the arc or circle.
Remarks
If the minor axis is entered longer than the major axis, the ellipse will be round because the radius ratio cannot be greater than 1.0. (A radius ratio of 1.0 defines a circle.)
Radius ratio = 0.25
Radius ratio = 0.75
Examples
VBA:
Sub Example_RadiusRatio()
    ' This example creates an ellipse and finds the radius ratio
    ' for that ellipse. It then changes the radius ratio to 0.75.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    ZoomAll
    MsgBox \"This ellipse has a radius ratio of \" & ellObj.RadiusRatio, vbInformation, \"RadiusRatio Example\"
    ' Change the radius ratio of the ellipse
    radRatio = 0.75
    ellObj.RadiusRatio = radRatio
    ellObj.Update
    MsgBox \"The ellipse has been udpated with the radius ratio of \" & ellObj.RadiusRatio, vbInformation, \"RadiusRatio Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RadiusRatio()
    ;; This example creates an ellipse and finds the radius ratio
    ;; for that ellipse. It then changes the radius ratio to 0.75.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    (vla-ZoomAll acadObj)
    (alert (strcat \"This ellipse has a radius ratio of \" (rtos (vla-get-RadiusRatio ellObj) 2)))
    ;; Change the radius ratio of the ellipse
    (vla-put-RadiusRatio ellObj 0.75)
    (vla-Update ellObj)
    (alert (strcat \"The ellipse has been udpated with the radius ratio of \" (rtos (vla-get-RadiusRatio ellObj) 2)))
)
")
("ReadOnly" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F907311B-2BFC-4498-BD1D-560D537F7FE8"
            "
ReadOnly Property (ActiveX)
Specifies if the document or property is read-only or read-write.
Supported platforms: Windows only
Signature
VBA:
object.ReadOnly
object
    Type: Document, DynamicBlockReferenceProperty
    The objects this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The document or property is read-only.
    False: The document or property is read-write.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ReadOnly()
    ' This example shows if current drawing file is read only or not
    
    If ThisDrawing.ReadOnly Then
        MsgBox \"The current drawing file is read only.\", , \"ReadOnly Example\"
    Else
        MsgBox \"The current drawing file is read-write.\", , \"ReadOnly Example\"
    End If
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ReadOnly()
    ;; This example shows if current drawing file is read only or not
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    (if (= (vla-get-ReadOnly doc) :vlax-true)
        (alert \"The current drawing file is read only.\")
        (alert \"The current drawing file is read-write.\")
    )
)
")
("Red" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4E401941-2C63-4D67-996F-7D5B625788EA"
"
Red Property (ActiveX)
Specifies the red component of the True Color.
Supported platforms: Windows only
Signature
VBA:
object.Red
object
    Type: AcCmColor
    The object this property applies to.
Property Value
Read-only: Yes
Type: Long
The red component, from 0-255, of AcCmColor.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Red()
    ' This example draws a line and returns the RGB values
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    Dim line As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
        
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
        
    Set line = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    line.TrueColor = color
    Dim retcolor As AcadAcCmColor
    Set retcolor = line.TrueColor
    
    MsgBox \"Red = \" & retcolor.Red & vbLf & _
           \"Green = \" & retcolor.Green & vbLf & _
           \"Blue = \" & retcolor.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Red()
    ;; This example draws a line and returns the RGB values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
        
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq line (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (vla-put-TrueColor line color)
    (setq retcolor (vla-get-TrueColor line))
    
    (alert (strcat \"Red = \" (itoa (vla-get-Red retcolor))
                   \"\nGreen = \" (itoa (vla-get-Green retcolor))
                   \"\nBlue = \" (itoa (vla-get-Blue retcolor))
           )
    )
    (vlax-release-object color)
)
")
("RegenerateTableSuppressed" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D2E984AC-BB0E-4F07-AB49-7962B40F3869"
"
RegenerateTableSuppressed Property (ActiveX)
Enables or disables regeneration of the table block.
Supported platforms: Windows only
Signature
VBA:
object.RegenerateTableSuppressed
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Regeneration of the table is suppressed.
    False: Regeneration of the table is not suppressed.
Remarks
All methods that change the Table object do the following:
    Open the Table object in write mode
    Modify the Table object based on the input parameters
    Close the Table object, which recomputes the Table
Recomputing large tables consumes a lot of time and memory because the Table object is reconstructed from scratch.
To avoid performance problems, you should temporarily disable the regeneration of the Table object when modifying large tables through the API, then apply the modifications and re-enable regeneration.
Examples
VBA:
Sub Example_RegenerateTableSuppressed()
    Dim MyModelSpace As AcadModelSpace
    Dim MyTable As IAcadTable
    Dim pt(2) As Double
    Set MyModelSpace = ThisDrawing.ModelSpace
    Set MyTable = MyModelSpace.AddTable(pt, 100, 5, 5, 10)
    'Temporarily disable the recomputing of table block
    MyTable.RegenerateTableSuppressed = True
    Dim i As Integer, j As Integer
    For i = 0 To 99
        For j = 0 To 4
            Call MyTable.SetText(i, j, \"my string \" & i & \", \" & j)
        Next j
    Next i
    'Now force the recomputing of table block
    'so that we can see the update table results
    MyTable.RegenerateTableSuppressed = False
    'You can also call RecomputeTableBlock(true) instead
    'to force the regeneration of table
    'MyTable.RecomputeTableBlock(True)
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RegenerateTableSuppressed()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq MyModelSpace (vla-get-ModelSpace doc))
    (setq MyTable (vla-AddTable MyModelSpace pt 100 5 5 10))
    ;; Temporarily disable the recomputing of table block
    (vla-put-RegenerateTableSuppressed MyTable :vlax-true)
    (setq i 1
          j 0)
  
    (while (>= 99 i)
        (while (>= 4 j)
            (vla-SetText MyTable i j (strcat \"my string \" (itoa i) \", \" (itoa j)))
            (setq j (1+ j))
        )
        (setq i (1+ i)
              j 0)
    )
    ;; Now force the recomputing of table block
    ;; so that we can see the update table results
    (vla-put-RegenerateTableSuppressed MyTable :vlax-false)
    ;; You can also call (vla-RecomputeTableBlock obj :vl;ax-true) instead
    ;; to force the regeneration of table
    ;;(vla-RecomputeTableBlock MyTable :vlax-true)
)
")
("RegisteredApplications" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-31073EC8-7827-4617-A3D2-7ED1760EFC59"
                          "
RegisteredApplications Property (ActiveX)
Gets the RegisteredApplications collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.RegisteredApplications
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: RegisteredApplications
The RegisteredApplications collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_RegisteredApplications()
    ' This example finds the current RegisteredApplications collection and
    ' adds a new RegisteredApplication to that collection.
    
    Dim RegAppColl As AcadRegisteredApplications
    Set RegAppColl = ThisDrawing.RegisteredApplications
    
    ' Create a RegisteredApp named \"TEST\" in the current drawing
    Dim RegAppObj As AcadRegisteredApplication
    Set RegAppObj = RegAppColl.Add(\"TEST\")
    MsgBox \"A new registered application called \" & RegAppObj.name & \" has been added to the Registered Applications collection.\", vbInformation, \"RegisteredApplications Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RegisteredApplications()
    ;; This example finds the current RegisteredApplications collection and
    ;; adds a new RegisteredApplication to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq RegAppColl (vla-get-RegisteredApplications doc))
    
    ;; Create a RegisteredApp named \"TEST\" in the current drawing
    (setq RegAppObj (vla-Add RegAppColl \"TEST\"))
    (alert (strcat \"A new registered application called \" (vla-get-Name RegAppObj) \" has been added to the Registered Applications collection.\"))
)
")
("RenderSmoothness" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E37F9070-DBFF-40B1-AD4E-3C2C665E526D"
                    "
RenderSmoothness Property (ActiveX)
Specifies the smoothness of shaded, rendered, and hidden line-removed objects.
Supported platforms: Windows only
Signature
VBA:
object.RenderSmoothness
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The valid range is 0.01 to 10.0.
Remarks
The initial value for this property is 0.5. To improve performance, set this value to 1 or less when drawing.
Note: The value of this property is stored in the FACETRES system variable.
Examples
VBA:
Sub Example_RenderSmoothness()
    ' This example returns the current setting of
    ' RenderSmoothness. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currRenderSmoothness As Double
    Dim newRenderSmoothness As Double
    
    ' Retrieve the current RenderSmoothness value
    currRenderSmoothness = ThisDrawing.preferences.RenderSmoothness
    MsgBox \"The current value for RenderSmoothness is \" & currRenderSmoothness, vbInformation, \"RenderSmoothness Example\"
    
    ' Change the value for RenderSmoothness
    newRenderSmoothness = 2.5
    ThisDrawing.preferences.RenderSmoothness = newRenderSmoothness
    MsgBox \"The new value for RenderSmoothness is \" & newRenderSmoothness, vbInformation, \"RenderSmoothness Example\"
    
    ' Reset RenderSmoothness to its original value
    ThisDrawing.preferences.RenderSmoothness = currRenderSmoothness
    MsgBox \"The RenderSmoothness value is reset to \" & currRenderSmoothness, vbInformation, \"RenderSmoothness Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RenderSmoothness()
    ;; This example returns the current setting of
    ;; RenderSmoothness. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
    
    ;; Retrieve the current RenderSmoothness value
    (setq currRenderSmoothness (vla-get-RenderSmoothness preferences))
    (alert (strcat \"The current value for RenderSmoothness is \" (rtos currRenderSmoothness 2)))
    
    ;; Change the value for RenderSmoothness
    (setq newRenderSmoothness 2.5)
    (vla-put-RenderSmoothness preferences newRenderSmoothness)
    (alert (strcat \"The new value for RenderSmoothness is \" (rtos newRenderSmoothness 2)))
    
    ;; Reset RenderSmoothness to its original value
    (vla-put-RenderSmoothness preferences currRenderSmoothness)
    (alert (strcat \"The RenderSmoothness value is reset to \" (rtos currRenderSmoothness 2)))
)
")
("RepeatBottomLabels" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BCBE8D30-F8AD-44FA-A208-13E9F289D435"
                      "
RepeatBottomLabels Property (ActiveX)
Determines whether the bottom set of label rows is repeated at the bottom of each broken table part.
Supported platforms: Windows only
Signature
VBA:
object.RepeatBottomLabels
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
Flag indicating how bottom labels ought to display.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RepeatTopLabels" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-73BD792F-2E89-475C-B9F7-15B45C037986"
                   "
RepeatTopLabels Property (ActiveX)
Determines whether the first set of label rows will be repeated at the top of each broken table part.
Supported platforms: Windows only
Signature
VBA:
object.RepeatTopLabels
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
Flag indicating how top labels ought to display.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RevisionNumber" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AB8F9912-637A-43D0-A89C-68F0AB59EB72"
"
RevisionNumber Property (ActiveX)
Specifies the revision number.
Supported platforms: Windows only
Signature
VBA:
object.RevisionNumber
object
    Type: SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The revision number assigned to the drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_RevisionNumber()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
            \"Author = \" & Author & vbCrLf & _
            \"Comments = \" & Comments & vbCrLf & _
            \"HyperlinkBase = \" & HLB & vbCrLf & _
            \"Keywords = \" & KW & vbCrLf & _
            \"LastSavedBy = \" & LSB & vbCrLf & _
            \"RevisionNumber = \" & RN & vbCrLf & _
            \"Subject = \" & Subject & vbCrLf & _
            \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
            \"First property name = \" & Key0 & vbCrLf & _
            \"First property value = \" & Value0 & vbCrLf & _
            \"Second property name = \" & Key1 & vbCrLf & _
            \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RevisionNumber()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("RevolutionAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C0E44A30-22F1-457C-AE76-7B17C03C96AF"
"
RevolutionAngle Property (ActiveX)
Specifies the angle of revolution.
Supported platforms: Windows only
Signature
VBA:
object.RevolutionAngle
object
    Type: RevolvedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: ACAD_ANGLE
The angle of revolution for the revolved surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("Rotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ADD5CBF4-4C4A-4DE2-A686-4F4DD0CB8734"
"
Rotation Property (ActiveX)
Specifies the rotation angle for the object.
Supported platforms: Windows only
Signature
VBA:
object.Rotation
object
    Type: Attribute, AttributeReference, BlockReference, ComparedReference, DgnUnderlay, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, DwfUnderlay, ExternalReference, GeomapImage, GeoPositionMarker, MInsertBlock, MText, OLE, PdfUnderlay, PointCloud, PointCloudEx, RasterImage, Shape, Text, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Double (except an OLE object which is of the ACAD_ANGLE type)
The rotation angle in radians.
Remarks
The rotation angle is relative to the X axis of the object's WCS with positive angles going counterclockwise when looking down from the Z axis toward the origin.
Raster: To display the raster image at the specified rotation, set the ShowRotation property to True.
Text: The rotation angle is read-only for text whose Alignment property is set to acAlignmentAligned or acAlignmentFit.
Text rotation angle
Dimension line angle
Examples
VBA:
Sub Example_Rotation()
    ' This example creates a text object in model space.
    ' It then changes the Rotation of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    MsgBox \"The Rotation is \" & textObj.rotation, vbInformation, \"Rotation Example\"
    
    ' Change the value of the Rotation to 45 degrees (.707 radians)
    textObj.rotation = 0.707
    ZoomAll
    MsgBox \"The Rotation is set to \" & textObj.rotation, vbInformation, \"Rotation Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Rotation()
    ;; This example creates a text object in model space.
    ;; It then changes the Rotation of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq textString \"Hello, World.\"
          insertionPoint (vlax-3d-point 3 3 0)
          height 0.5)
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The Rotation is \" (rtos (vla-get-Rotation textObj) 2)))
    
    ;; Change the value of the Rotation to 45 degrees (.707 radians)
    (vla-put-Rotation textObj 0.707)
    (vla-ZoomAll acadObj)
    (alert (strcat \"The Rotation is set to \" (rtos (vla-get-Rotation textObj) 2)))
)
")
("RoundDistance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E8298474-A584-425C-82BF-03F8A7F84B6B"
                 "
RoundDistance Property (ActiveX)
Specifies the rounding of dimension units.
Supported platforms: Windows only
Signature
VBA:
object.RoundDistance
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A positive real number representing the value to round distances to. The initial value is 0.00.
Remarks
This property rounds all dimensioning distances to the specified value. For instance, if this property is set to 0.25, the distance is rounded to the nearest 0.25 unit. If you set this property to 1.0, the distance for the dimension is rounded to the nearest integer. Note that the number of digits edited after the decimal point depends on the precision set by the PrimaryUnitsPrecision property or DIMDEC system variable. This property does not apply to angular dimensions.
Note: This property overrides the value of the DIMRND system variable for the given dimension.
Examples
VBA:
Sub Example_RoundDistance()
    ' This example creates an aligned dimension in model space and
    ' uses RoundDistance to set the unit display
    ' of the dimension to rounded values
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 10.123: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"Press any key to round the dimension unit display to .5\"
    
    ' Round the distance of the dimension to 0.50 of a unit
    dimObj.RoundDistance = 0.5
    ThisDrawing.Regen acAllViewports
    
    MsgBox \"Dimension units have been rounded to: \" & dimObj.RoundDistance
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RoundDistance()
    ;; This example creates an aligned dimension in model space and
    ;; uses RoundDistance to set the unit display
    ;; of the dimension to rounded values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 10.123 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    (alert \"Dimensions value will now be rounded to the nearest 0.50 of a unit\")
    
    ;; Round the distance of the dimension to 0.50 of a unit
    (vla-put-RoundDistance dimObj 0.5)
    (vla-Regen doc acAllViewports)
    
    (alert (strcat \"Dimension units have been rounded to: \" (rtos (vla-get-RoundDistance dimObj) 2)))
)
")
("RowHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-22463190-A009-408B-8E78-A002C60E2C56"
"
RowHeight Property (ActiveX)
Specifies a uniform height for all rows in the table.
Supported platforms: Windows only
Signature
VBA:
object.RowHeight
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The uniform height for all rows in the table.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("RowSpacing" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D8F6A399-860F-4204-9809-C007B8C7605C"
              "
RowSpacing Property (ActiveX)
Specifies the spacing of the rows in a block array.
Supported platforms: Windows only
Signature
VBA:
object.RowSpacing
object
    Type: MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The spacing of the rows in the block array.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_RowSpacing()
    ' This example creates a new MInsertBlock in the current drawing and
    ' displays the column and row information for the new MInsertBlock
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newMBlock As AcadMInsertBlock
    Dim newBlock As AcadBlock
        
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Create a rectangular array of Circles using the new block containing the Circle
    ' and the AddMInsertBlock method
    Set newMBlock = ThisDrawing.ModelSpace.AddMInsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 1, 2, 2, 1, 1)
        
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the Columns and Rows defined by the MInsertBlock
    MsgBox \"The new rectangular array is comprised of: \" & vbCrLf & _
            newMBlock.Columns & \" columns with a spacing of \" & newMBlock.ColumnSpacing & \" and\" & vbCrLf & _
            newMBlock.Rows & \" rows with a spacing of \" & newMBlock.RowSpacing
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_RowSpacing()
    ;; This example creates a new MInsertBlock in the current drawing and
    ;; displays the column and row information for the new MInsertBlock
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)
          InsertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle
    (setq newBlock (vla-Add (vla-get-Blocks doc) centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block
    (setq circleObj (vla-AddCircle newBlock centerPoint radius))
    
    ;; Create a rectangular array of Circles using the new block containing the Circle
    ;; and the AddMInsertBlock method
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq newMBlock (vla-AddMInsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 1 2 2 1 1))
        
    (vla-ZoomAll acadObj)
    
    ;; Display information about the Columns and Rows defined by the MInsertBlock
    (alert (strcat \"The new rectangular array comprises: \n\"
                   (itoa (vla-get-Columns newMBlock)) \" columns with a spacing of \" (rtos (vla-get-ColumnSpacing newMBlock) 2) \" and\n\"
                   (itoa (vla-get-Rows newMBlock)) \" rows with a spacing of \" (rtos (vla-get-RowSpacing newMBlock) 2) \".\"))
)
")
("Rows" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F93CE898-0504-4C44-BCC2-86EBAA742E24"
"
Rows Property (ActiveX)
Specifies the number of rows in a block array or table.
Supported platforms: Windows only
Signature
VBA:
object.Rows
object
    Type: MInsertBlock, Table
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The number of rows in the block array or table.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Rows()
    ' This example creates a new MInsertBlock in the current drawing and
    ' displays the column and row information for the new MInsertBlock
    
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double, InsertPoint(0 To 2) As Double
    Dim radius As Double
    Dim newMBlock As AcadMInsertBlock
    Dim newBlock As AcadBlock
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    radius = 0.5
    
    ' Create a new block to hold the Circle
    Set newBlock = ThisDrawing.Blocks.Add(centerPoint, \"CBlock\")
    
    ' Add the Circle object to the new block
    Set circleObj = ThisDrawing.Blocks(\"CBlock\").AddCircle(centerPoint, radius)
    
    ' Create a rectangular array of Circles using the new block containing the Circle
    ' and the AddMInsertBlock method
    Set newMBlock = ThisDrawing.ModelSpace.AddMInsertBlock(InsertPoint, \"CBlock\", 1, 1, 1, 1, 2, 2, 1, 1)
        
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the Columns and Rows defined by the MInsertBlock
    MsgBox \"The new rectangular array is comprised of: \" & vbCrLf & _
            newMBlock.Columns & \" columns with a spacing of \" & newMBlock.ColumnSpacing & \" and\" & vbCrLf & _
            newMBlock.Rows & \" rows with a spacing of \" & newMBlock.RowSpacing
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Rows()
    ;; This example creates a new MInsertBlock in the current drawing and
    ;; displays the column and row information for the new MInsertBlock
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)
          InsertPoint (vlax-3d-point 1 1 0)
          radius 0.5)
    
    ;; Create a new block to hold the Circle
    (setq newBlock (vla-Add (vla-get-Blocks doc) centerPoint \"CBlock\"))
    
    ;; Add the Circle object to the new block
    (setq circleObj (vla-AddCircle newBlock centerPoint radius))
    
    ;; Create a rectangular array of Circles using the new block containing the Circle
    ;; and the AddMInsertBlock method
    (setq modelSpace (vla-get-ModelSpace doc))   
    (setq newMBlock (vla-AddMInsertBlock modelSpace InsertPoint \"CBlock\" 1 1 1 1 2 2 1 1))
        
    (vla-ZoomAll acadObj)
    
    ;; Display information about the Columns and Rows defined by the MInsertBlock
    (alert (strcat \"The new rectangular array comprises: \n\"
                   (itoa (vla-get-Columns newMBlock)) \" columns with a spacing of \" (rtos (vla-get-ColumnSpacing newMBlock) 2) \" and\n\"
                   (itoa (vla-get-Rows newMBlock)) \" rows with a spacing of \" (rtos (vla-get-RowSpacing newMBlock) 2) \".\"))
)
")
("Saved" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5CC922B2-DFB3-45B6-88BB-CB59ED62934E"
         "
Saved Property (ActiveX)
Specifies if the document has any unsaved changes.
Supported platforms: Windows only
Signature
VBA:
object.Saved
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The document has no unsaved changes.
    False: The document has unsaved changes.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Saved()
    ' This example checks to see if the current drawing has been modified.
    
    If Not ThisDrawing.Saved Then
        MsgBox \"Drawing has been modified! Use the Save or SaveAs method to save the drawing.\", , \"Saved Example\"
    Else
        MsgBox \"Drawing has not been modified since the last save.\", , \"Saved Example\"
    End If
    
End Sub
Visual LISP:
(defun c:Example_Saved()
    ;; This example checks to see if the current drawing has been modified.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (if (= (vla-get-Saved doc) :vlax-false)
        (alert \"Drawing has been modified! Use the Save or SaveAs method to save the drawing.\")
        (alert \"Drawing has not been modified since the last save.\")
    )
)
")
("Scale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D2795DA7-91F2-46A4-9869-70B80BD3AD88"
"
Scale Property (ActiveX)
Specifies the scale factor from start to the end of the sweep path.
Supported platforms: Windows only
Signature
VBA:
object.Scale
object
    Type: PointCloud, PointCloudEx, SweptSurface
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The scale factor applied to the object or swept path.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("ScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1192309B-E37B-438D-B6C3-6443D858FC2A"
"
ScaleFactor Property (ActiveX)
Specifies the scale factor for the object.
Supported platforms: Windows only
Signature
VBA:
object.ScaleFactor
object
    Type: Attribute, AttributeReference, DgnUnderlay, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, DwfUnderlay, GeomapImage, Leader, MLeader, MLeaderStyle, PdfUnderlay, RasterImage, Shape, Text, Tolerance, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Double (ACAD_NOUNITS)
A real number greater than 0.0. A scale factor greater than 1 enlarges the object. A scale factor between 0 and 1 shrinks the object.
Remarks
The initial value for this property is 1.0000.
The scale factor is often referred to as the relative X scale factor. The scale factor is applied to the object's width to allow the width to be adjusted independently of the height. For example, if the scale factor value is 0.8, then the object will be drawn with a width that is 80 percent of its normal unadjusted width.
Dimension, leader, and tolerance objects: This property overrides the DIMSCALE system variable.
If you are working in paper space, the scale factor for dimensions will equal 0.0 and AutoCAD will compute a reasonable default value based on the scaling between the current model space viewport and paper space. You will not be able to change the scale factor for a dimension in paper space.
Examples
VBA:
Sub Example_ScaleFactor()
    ' This example creates a text object in model space.
    ' It then finds the current scale factor and changes it.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 2: insertionPoint(1) = 2: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    
    ' Find the current scale factor for the text object
    Dim currScaleFactor As Double
    currScaleFactor = textObj.scalefactor
    MsgBox \"The scale factor of the text is \" & textObj.scalefactor, , \"ScaleFactor Example\"
    
    ' Change the scale factor for the text object
    textObj.scalefactor = currScaleFactor + 1
    ThisDrawing.Regen True
    MsgBox \"The scale factor of the text is now \" & textObj.scalefactor, , \"ScaleFactor Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ScaleFactor()
    ;; This example creates a text object in model space.
    ;; It then finds the current scale factor and changes it.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq textString \"Hello, World.\"
          insertionPoint (vlax-3d-point 2 2 0)
          height 0.5)
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    (vla-ZoomAll acadObj)
    
    ;; Find the current scale factor for the text object
    (setq currScaleFactor (vla-get-Scalefactor textObj))
    (alert (strcat \"The scale factor of the text is \" (rtos currScaleFactor 2)))
    
    ;; Change the scale factor for the text object
    (vla-put-Scalefactor textObj (1+ currScaleFactor))
    (vla-Regen doc :vlax-true)
    (alert (strcat \"The scale factor of the text is now \" (rtos (vla-get-Scalefactor textObj) 2)))
)
")
("ScaleHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-23A24784-6C19-4130-B92F-F560C12516DC"
               "
ScaleHeight Property (ActiveX)
Specifies the height of the object as a percentage of its original height.
Supported platforms: Windows only
Signature
VBA:
object.ScaleHeight
object
    Type: OLE
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The percentage of the object's original height.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ScaleLineweights" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D0954BC9-C56C-4782-8AA6-6605AAF99418"
                    "
ScaleLineweights Property (ActiveX)
Specifies if the lineweight is scaled with the rest of the geometry when a layout is printed.
Supported platforms: Windows only
Signature
VBA:
object.ScaleLineweights
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Scale lineweights.
    False: Do not scale lineweights.
Remarks
By default, lineweights are printed at absolute size (not scaled).
The property disabled for the model space layout.
Examples
VBA:
Sub Example_ScaleLineweights()
    ' This example reads and modifies the ScaleLineweights
    ' Layout value.
    ' When finished, this example resets the  value back to
    ' its original value.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Boolean
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.ScaleLineweights
    MsgBox \"The ScaleLineweights value is set to: \" & originalValue
    ' Modify the ScaleLineweights preference by toggling the value
    ACADLayout.ScaleLineweights = Not ACADLayout.ScaleLineweights
    MsgBox \"The ScaleLineweights preference has been set to: \" & ACADLayout.ScaleLineweights
    ' Reset the preference back to its original value
    ACADLayout.ScaleLineweights = originalValue
    MsgBox \"The ScaleLineweights preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ScaleLineweights()
    ;; This example reads and modifies the ScaleLineweights
    ;; Layout value.
    ;; When finished, this example resets the  value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ScaleLineweights ACADLayout))
    (alert (strcat \"The ScaleLineweights value is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the ScaleLineweights preference by toggling the value
    (vla-put-ScaleLineweights ACADLayout (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The ScaleLineweights preference has been set to: \" (if (= (vla-get-ScaleLineweights ACADLayout) :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    (vla-put-ScaleLineweights ACADLayout originalValue)
    (alert (strcat \"The ScaleLineweights preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("ScaleWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AFE54257-47ED-4448-B23C-6F770C45F887"
"
ScaleWidth Property (ActiveX)
Specifies the width of the object as a percentage of its original width.
Supported platforms: Windows only
Signature
VBA:
object.ScaleWidth
object
    Type: OLE
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The percentage of the object's original width.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SecondPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1A3DDF2A-1D8F-4E3B-8ACB-66036C277265"
               "
SecondPoint Property (ActiveX)
Specifies the second point of the ray or xline.
Supported platforms: Windows only
Signature
VBA:
object.SecondPoint
object
    Type: Ray, XLine
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
The 3D WCS coordinate representing the second point of the ray or xline.
Remarks
You cannot set the second point of a ray equal to its base point.
Examples
VBA:
Sub Example_SecondPoint()
    ' This example creates a ray object. It then finds the
    ' second point of the ray, changes the second point, and
    ' queries the new second point.
    
    Dim basePoint(0 To 2) As Double
    Dim directionVec(0 To 2) As Double
    Dim rayObj As AcadRay
    Dim currSecondPoint As Variant
    Dim msg As String
    Dim newSecondPoint(0 To 2) As Double
    
    ' Establish the base point and directional vector for the ray
    basePoint(0) = 3: basePoint(1) = 3: basePoint(2) = 0
    directionVec(0) = 1:    directionVec(1) = 1: directionVec(2) = 0
    
    ' Create a Ray object in model space
    Set rayObj = ThisDrawing.ModelSpace.AddRay(basePoint, directionVec)
    
    ThisDrawing.Regen True
    MsgBox \"A new Ray has been added.\", vbInformation
    
    ' Define a new second point
    newSecondPoint(0) = 4: newSecondPoint(1) = 2: newSecondPoint(2) = 0
    
    ' Update the ray using the new second point
    rayObj.SecondPoint = newSecondPoint
            
    ' Query the new second point for the Ray
    currSecondPoint = rayObj.SecondPoint
    msg = currSecondPoint(0) & vbCrLf & _
          currSecondPoint(1) & vbCrLf & _
          currSecondPoint(2)
    
    ThisDrawing.Regen True
    MsgBox \"We've just changed the second point of the new Ray to: \" & vbCrLf & msg, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SecondPoint()
    ;; This example creates a ray object. It then finds the
    ;; second point of the ray, changes the second point, and
    ;; queries the new second point.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Establish the base point and directional vector for the ray
    (setq basePoint (vlax-3d-point 3 3 0)
          directionVec (vlax-3d-point 1 1 0))
    
    ;; Create a Ray object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq rayObj (vla-AddRay modelSpace basePoint directionVec))
    
    (vla-Regen doc :vlax-true)
    (alert \"A new Ray has been added.\")
    
    ;; Define a new second point
    (setq newSecondPoint (vlax-3d-point 4 2 0))
    
    ;; Update the ray using the new second point
    (vla-put-SecondPoint rayObj newSecondPoint)
            
    ;; Query the new second point for the Ray
    (setq currSecondPoint (vlax-safearray->list (vlax-variant-value (vla-get-SecondPoint rayObj))))
    (setq msg (strcat (rtos (nth 0 currSecondPoint) 2) \", \"
		      (rtos (nth 1 currSecondPoint) 2) \", \"
		      (rtos (nth 2 currSecondPoint) 2)))
    
    (vla-Regen doc :vlax-true)
    (alert (strcat \"We've just changed the second point of the new Ray to: \" msg))
)
")
("SecondSegmentAngleConstraint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-86037CC4-4E12-42DE-A972-44FDC70A20F4"
"
SecondSegmentAngleConstraint Property (ActiveX)
Specifies the second segment angle constraint value of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.SecondSegmentAngleConstraint
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The second segment's angle constraint value.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SectionManager" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-877A384A-4B16-4651-9DDA-939F70476DED"
                  "
SectionManager Property (ActiveX)
Returns the section manager object.
Supported platforms: Windows only
Signature
VBA:
object.SectionManager
object
    Type: Database, Document
    The object to which this property applies.
Property Value
Read-only: Yes
Type: SectionManager
The document object's section manager.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SectionPlaneOffset" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E2FFC822-699D-4DC5-9416-C5C46ABC32E3"
"
SectionPlaneOffset Property (ActiveX)
Specifies the offset distance of the section plane.
Supported platforms: Windows only
Signature
VBA:
object.SectionPlaneOffset
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
Remarks
The offset distance is the distance between the section plane and the parallel plane passing through WCS origin.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SegmentPerPolyline" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B6211F95-B4AA-4E5B-9D84-2B9A6CDD3EE7"
"
SegmentPerPolyline Property (ActiveX)
Specifies the number of line segments to be generated for each polyline curve.
Supported platforms: Windows only
Signature
VBA:
object.SegmentPerPolyline
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The number of line segments to be generated for each polyline curve.
0 < SegmentPerPolyline <= 42950
Remarks
The initial value is 8. The higher the number you specify, the greater the performance impact.
Note: The value of this property is stored in the SPLINESEGS system variable.
Examples
VBA:
Sub Example_SegmentPerPolyline()
    ' This example returns the current setting of
    ' SegmentPerPolyline. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currSegmentPerPolyline As Integer
    Dim newSegmentPerPolyline As Integer
    
    ' Retrieve the current SegmentPerPolyline value
    currSegmentPerPolyline = ThisDrawing.preferences.SegmentPerPolyline
    MsgBox \"The current value for SegmentPerPolyline is \" & currSegmentPerPolyline, vbInformation, \"SegmentPerPolyline Example\"
    
    ' Change the value for SegmentPerPolyline
    newSegmentPerPolyline = 2001
    ThisDrawing.preferences.SegmentPerPolyline = newSegmentPerPolyline
    MsgBox \"The new value for SegmentPerPolyline is \" & newSegmentPerPolyline, vbInformation, \"SegmentPerPolyline Example\"
    
    ' Reset SegmentPerPolyline to its original value
    ThisDrawing.preferences.SegmentPerPolyline = currSegmentPerPolyline
    MsgBox \"The SegmentPerPolyline value is reset to \" & currSegmentPerPolyline, vbInformation, \"SegmentPerPolyline Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SegmentPerPolyline()
    ;; This example returns the current setting of
    ;; SegmentPerPolyline. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
    
    ;; Retrieve the current SegmentPerPolyline value
    (setq currSegmentPerPolyline (vla-get-SegmentPerPolyline preferences))
    (alert (strcat \"The current value for SegmentPerPolyline is \" (itoa currSegmentPerPolyline)))
    
    ;; Change the value for SegmentPerPolyline
    (setq newSegmentPerPolyline 2001)
    (vla-put-SegmentPerPolyline preferences newSegmentPerPolyline)
    (alert (strcat \"The new value for SegmentPerPolyline is \" (itoa newSegmentPerPolyline)))
    
    ;; Reset SegmentPerPolyline to its original value
    (vla-put-SegmentPerPolyline preferences currSegmentPerPolyline)
    (alert (strcat \"The SegmentPerPolyline value is reset to \" (itoa currSegmentPerPolyline)))
)
")
("Segmentation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FF267722-D75B-49FC-8111-6232215FAB01"
"
Segmentation Property (ActiveX)
Returns the segmentation data status of the point cloud.
Supported platforms: Windows only
Signature
VBA:
object.Segmentation
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: Yes
Type: String
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SelectionSets" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-671644CD-D776-4743-88D4-C0F759EC5D89"
                 "
SelectionSets Property (ActiveX)
Gets the SelectionSets collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.SelectionSets
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: SelectionSets
The selection set collection for the drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_SelectionSets()
    ' This example finds the current SelectionSets collection and
    ' adds a new SelectionSet to that collection.
    
    Dim SSetColl As AcadSelectionSets
    Set SSetColl = ThisDrawing.SelectionSets
    
    ' Create a SelectionSet named \"TEST\" in the current drawing
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = SSetColl.Add(\"TEST\")
    MsgBox \"A new SelectionSet called \" & ssetObj.name & \" has been added to the SelectionSets collection.\", vbInformation, \"SelectionSets Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SelectionSets()
    ;; This example finds the current SelectionSets collection and
    ;; adds a new SelectionSet to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq SSetColl (vla-get-SelectionSets doc))
    ;; Create a SelectionSet named \"TEST\" in the current drawing
    (setq ssetObj (vla-Add SSetColl \"TEST\"))
    (alert (strcat \"A new SelectionSet called \" (vla-get-Name ssetObj) \" has been added to the SelectionSets collection.\"))
    (vla-Delete ssetObj)
)
")
("Settings" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-454EC342-BF99-4015-AEA4-84D41CF31EEC"
"
Settings Property (ActiveX)
Retrieves the section geometry settings for the Section object.
Supported platforms: Windows only
Signature
VBA:
object.Settings
object
    Type: Section
    The object this property applies to.
Property Value
Read-only: Yes
Type: SectionSettings
The section geometry settings of the Section object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ShadePlot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-911E01F5-B5A6-4331-B860-FAB1E7E124C2"
             "
ShadePlot Property (ActiveX)
Specifies the shaded viewport plotting mode of a viewport.
Supported platforms: Windows only
Signature
VBA:
object.ShadePlot
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: AcShadePlot enum
    acShadePlotAsDisplayed: Model space view plots the same way it is displayed.
    acShadePlotHidden: Model space view plots with hidden lines removed, regardless of display.
    acShadePlotRendered: Model space view plots as rendered regardless of display.
    acShadePlotWireframe: Model space view plots as wireframe regardless of display.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ShadePlot()
    ' This example creates a paper space viewport,
    ' makes it active, and then sets it to plot as displayed.
    
    Dim newPViewport As AcadPViewport
    Dim centerPoint(0 To 2) As Double
    Dim height As Double
    Dim width As Double
    height = 30#
    width = 40#
    centerPoint(0) = 30#: centerPoint(1) = 30#: centerPoint(2) = 0#
    
    ' Create a paper space Viewport object
    ThisDrawing.ActiveSpace = acPaperSpace
    Set newPViewport = ThisDrawing.PaperSpace.AddPViewport(centerPoint, width, height)
    ZoomAll
    newPViewport.Display True
    ThisDrawing.MSpace = True
    ' Set the viewport to plot as displayed
    ThisDrawing.ActivePViewport = newPViewport
    newPViewport.ShadePlot = acShadePlotAsDisplayed
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ShadePlot()
    ;; This example creates a paper space viewport,
    ;; makes it active, and then sets it to plot as displayed.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq centerPoint (vlax-3d-point 30 30 0)
          width 40
          height 40)
    
    ;; Create a paper space Viewport object
    (vla-put-ActiveSpace doc acPaperSpace)
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq newPViewport (vla-AddPViewport paperSpace centerPoint width height))
    (vla-ZoomAll acadObj)
    (vla-Display newPViewport :vlax-true)
    (vla-put-MSpace doc :vlax-true)
    ;; Set the viewport to plot as displayed
    (vla-put-ActivePViewport doc newPViewport)
    (vla-put-ShadePlot newPViewport acShadePlotAsDisplayed)
)
")
("SheetView" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9526B2BC-53E6-4BA7-A48E-398E38B449B7"
"
SheetView Property (ActiveX)
Returns and sets the sheet view associated with the viewport.
Supported platforms: Windows only
Signature
VBA:
object.SheetView
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: View
The sheet view associated with the viewport.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Show" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-42C29920-C453-42EF-8F1F-D557DA5AEA81"
        "
Show Property (ActiveX)
Specifies whether the property is shown in the user interface.
Supported platforms: Windows only
Signature
VBA:
object.Show
object
    Type: DynamicBlockReferenceProperty
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The property is shown in the user interface.
    False: The property is not shown in the user interface.
Remarks
If this property is True, the dynamic block reference property is displayed in the Properties palette when the block reference containing it is selected.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ShowAssociativity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2197BC32-E43F-4937-9933-A6DD22DB5184"
"
ShowAssociativity Property (ActiveX)
Specifies if dependent surfaces are highlighted when the surface is selected.
Supported platforms: Windows only
Signature
VBA:
object.ShowAssociativity
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Dependent surfaces are highlighted
    False: Dependent surfaces are not highlighted
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("ShowClipped" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9C823DB3-684C-4871-A8E0-E7C3E810F482"
"
ShowClipped Property (ActiveX)
Enables or disables the clipping boundary.
Supported platforms: Windows only
Signature
VBA:
object.ShowClipped
object
    Type: PointCloud
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Clipping boundary is enabled
    False: Clipping boundary is not enabled
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ShowCropped" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-383B906A-F600-43A2-8DA5-374F3D85C731"
               "
ShowCropped Property (ActiveX)
Specifies if the point cloud is shown cropped.
Supported platforms: Windows only
Signature
VBA:
object.ShowCropped
object
    Type: PointCloudEx
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The point cloud's cropping region filters out displayed points.
    False: All points are displayed regardless of any cropping regions attached to the point cloud.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ShowHistory" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-023CACF6-E1E4-482E-A11B-5A3F04C22F62"
"
ShowHistory Property (ActiveX)
Specifies whether to show history of the solid.
Supported platforms: Windows only
Signature
VBA:
object.ShowHistory
object
    Type: 3DSolid
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Solid history is shown
    False: Solid history is not shown
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ShowIntensity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A82310BC-6897-4152-9BAA-C911F001CAF5"
"
ShowIntensity Property (ActiveX)
Specifies if the point cloud is displayed using a shaded color scheme.
Supported platforms: Windows only
Signature
VBA:
object.ShowIntensity
object
    Type: PointCloud
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Intensity is turned on
    False: Intensity is turned off
Remarks
You can only see the intensity color mapping effect when a 3D visual style is current and hardware acceleration is on.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ShowPlotStyles" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-31B8B6DE-C9F1-4BB2-916C-EF7B9AE723B5"
"
ShowPlotStyles Property (ActiveX)
Specifies whether or not plot styles and plot style names are displayed in the drawing.
Supported platforms: Windows only
Signature
VBA:
object.ShowPlotStyles
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Plot styles and plot style names are displayed and plotted.
    False: Plot styles and plot style names are not displayed.
Remarks
The ShowPlotStyles property is equivalent to the Display Plot Styles option in AutoCAD.
Examples
VBA:
Sub Example_ShowPlotStyles()
    ' This example reads and modifies the ShowPlotStyles
    ' value, and then regenerates all viewports.
    
    Dim ACADLayout As ACADLayout
    Dim originalValue As Boolean
    
    ' Get the layout object
    Set ACADLayout = ThisDrawing.ActiveLayout
    
    ' Read and display the original value
    originalValue = ACADLayout.ShowPlotStyles
    MsgBox \"The ShowPlotStyles value is set to: \" & originalValue
    ' Modify the ShowPlotStyles preference by changing the value
    ACADLayout.ShowPlotStyles = Not ACADLayout.ShowPlotStyles
    MsgBox \"The ShowPlotStyles value has been set to: \" & ACADLayout.ShowPlotStyles
    ' Regenerate viewports
    ThisDrawing.Regen acAllViewports
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ShowPlotStyles()
    ;; This example reads and modifies the ShowPlotStyles
    ;; value, and then regenerates all viewports.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the layout object
    (setq ACADLayout (vla-get-ActiveLayout doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-ShowPlotStyles ACADLayout))
    (alert (strcat \"The ShowPlotStyles value is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the ShowPlotStyles preference by changing the value
    (vla-put-ShowPlotStyles ACADLayout (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The ShowPlotStyles value has been set to: \" (if (= (vla-get-ShowPlotStyles ACADLayout) :vlax-true) \"True\" \"False\")))
    ;; Regenerate viewports
    (vla-Regen doc acAllViewports)
)
")
("ShowRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F068E9E8-DAF6-426A-A288-89C6EF0D65BA"
"
ShowRotation Property (ActiveX)
Determines if a geomap image, raster image, or wipeout is displayed at its rotation value.
Supported platforms: Windows only
Signature
VBA:
object.ShowRotation
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Display the raster image at the rotation value stored in the Rotation property.
    False: Do not display the raster image at the rotation value stored in the Rotation property.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ShowRotation()
    ' This example adds a raster image in model space and rotates the image.
    ' One rotation is done without angle limits, one is done with ShowRotation,
    ' which limits rotations to 90 degrees
    
    ' This example uses the \"downtown.jpg\" found in the sample
    ' directory. If you do not have this image, or it is located
    ' in a different directory, insert a valid path and file name
    ' for the imageName variable below.
    
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double, rotationAngle As Double
    Dim imageName As String
    Dim rasterObj As AcadRasterImage
    
    imageName = \"c:\Autocad\sample\downtown.jpg\"
    
    ' Define Raster object
    insertionPoint(0) = 5: insertionPoint(1) = 5: insertionPoint(2) = 0
    scalefactor = 1#: rotationAngle = 0
    
    On Error GoTo ERRORTRAP
    
    ' Loads a raster image into model space
    Set rasterObj = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotationAngle)
        
    ' Limit the raster image rotations to 90 degrees
    rasterObj.ShowRotation = True
    
    ' Rotate the raster image 180 degrees
    rasterObj.Rotate insertionPoint, 180
    ThisDrawing.Application.ZoomAll
    
    Exit Sub
    
    ' If you get an error (most likely a problem with the file path),
    ' then display an error message
ERRORTRAP:
    If Err.Description <> \"\" Then
        MsgBox Err.Description
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ShowRotation()
    ;; This example adds a raster image in model space and rotates the image.
    ;; One rotation is done without angle limits, one is done with ShowRotation,
    ;; which limits rotations to 90 degrees
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the sample
    ;; directory. If you do not have this image, or it is located
    ;; in a different directory, insert a valid path and file name
    ;; for the imageName variable below.
    
    ;; Define Raster object
    (setq insertionPoint (vlax-3d-point 5 5 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotationAngle 0)
    
    ;; Loads a raster image into model space
    (if (/= (findfile imageName) nil)
        (progn
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq rasterObj (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotationAngle))
        
            ;; Limit the raster image rotations to 90 degrees
            (vla-put-ShowRotation rasterObj :vlax-true)
    
            ;; Rotate the raster image 180 degrees
            (vla-Rotate rasterObj insertionPoint 180)
            (vla-ZoomExtents acadObj)
        )
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("SliceDepth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-956F69DE-8EB6-42C9-AA44-9EF81C2E862C"
              "
SliceDepth Property (ActiveX)
Specifies the thickness of a section plane.
Supported platforms: Windows only
Signature
VBA:
object.SliceDepth
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
The thickness of the section plane is valid only when the section type is set to slice. Use the State2 property to determine the type of the section object.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SnapBasePoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-94EF4ADD-56B9-4C09-ABC4-45DBE18ACA6B"
                 "
SnapBasePoint Property (ActiveX)
Specifies the snap base point for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.SnapBasePoint
object
    Type: PViewport, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (two-element array of doubles)
A 2D WCS coordinate representing the snap base point for the viewport.
Remarks
You cannot change the snap base point for the active paper space viewport.
Changes to this property are not reflected in the display until a call to either the Update or Regen method is performed.
Note: The value of this property is stored in the SNAPBASE system variable.
Examples
VBA:
Sub Example_SnapBasePoint()
    ' This example changes the snap base point for a
    ' model space and paper space viewport.
    
    ' Create a new model space viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.Viewports.Add(\"NewViewport\")
    
    ' Find the current snap base point
    Dim currSnapPnt As Variant
    currSnapPnt = viewportObj.SnapBasePoint
    MsgBox \"The current model space snap base point is \" & viewportObj.SnapBasePoint(0) & \", \" & viewportObj.SnapBasePoint(1), , \"SnapBasePoint Example\"
    
    ' Change the snap base point
    Dim newSnapPnt(0 To 1) As Double
    newSnapPnt(0) = 5#: newSnapPnt(1) = 5#
    viewportObj.SnapBasePoint = newSnapPnt
    MsgBox \"The new model space snap base point is \" & viewportObj.SnapBasePoint(0) & \", \" & viewportObj.SnapBasePoint(1), , \"SnapBasePoint Example\"
    
    ' Create a new paper space viewport
    Dim pviewportObj As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40
    height = 40
    ThisDrawing.ActiveSpace = acPaperSpace
    Set pviewportObj = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    
    ' Find the current snap base point
    currSnapPnt = pviewportObj.SnapBasePoint
    MsgBox \"The current paper space snap base point is \" & pviewportObj.SnapBasePoint(0) & \", \" & pviewportObj.SnapBasePoint(1), , \"SnapBasePoint Example\"
    
    ' Change the snap base point
    newSnapPnt(0) = 2#: newSnapPnt(1) = 2#
    pviewportObj.SnapBasePoint = newSnapPnt
    MsgBox \"The new paper space snap base point is \" & pviewportObj.SnapBasePoint(0) & \", \" & pviewportObj.SnapBasePoint(1), , \"SnapBasePoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SnapBasePoint()
    ;; This example changes the snap base point for a
    ;; model space and paper space viewport.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new model space viewport
    (setq viewportObj (vla-Add (vla-get-Viewports doc) \"NewViewport\"))
    
    ;; Find the current snap base point
    (setq currSnapPnt (vlax-variant-value (vla-get-SnapBasePoint viewportObj)))
    (alert (strcat \"The current model space snap base point is \" (rtos (vlax-safearray-get-element currSnapPnt 0) 2) \", \"
                                                                 (rtos (vlax-safearray-get-element currSnapPnt 1) 2)))
    ;; Change the snap base point
    (setq newSnapPnt (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-fill newSnapPnt '(5 5)) 
    (vla-put-SnapBasePoint viewportObj newSnapPnt)
    (alert (strcat \"The new model space snap base point is \" (rtos (vlax-safearray-get-element newSnapPnt 0) 2) \", \"
                                                             (rtos (vlax-safearray-get-element newSnapPnt 1) 2)))
    ;; Create a new paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
	         height 40)
    (vla-put-ActiveSpace doc acPaperSpace)
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj (vla-AddPViewport paperSpace center width height))
    
    ;; Find the current snap base point
    (setq currSnapPnt (vlax-variant-value (vla-get-SnapBasePoint pviewportObj)))
    (alert (strcat \"The current paper space snap base point is \" (rtos (vlax-safearray-get-element currSnapPnt 0) 2) \", \"
                                                                 (rtos (vlax-safearray-get-element currSnapPnt 1) 2)))
    
    ;; Change the snap base point
    (setq newSnapPnt (vlax-make-safearray vlax-vbDouble '(0 . 1)))
    (vlax-safearray-fill newSnapPnt '(2 2)) 
    (vla-put-SnapBasePoint pviewportObj newSnapPnt)
    (alert (strcat \"The new paper space snap base point is \" (rtos (vlax-safearray-get-element newSnapPnt 0) 2) \", \"
                                                             (rtos (vlax-safearray-get-element newSnapPnt 1) 2)))
)
")
("SnapOn" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-ADDC90FE-71F9-40DC-8345-0AA0B589845B"
"
SnapOn Property (ActiveX)
Specifies the status of snap.
Supported platforms: Windows only
Signature
VBA:
object.SnapOn
object
    Type: PViewport, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Snap is on.
    False: Snap is off.
Remarks
SnapOn activates Snap mode using the current snap grid resolution, rotation, and style. To change the snap grid resolution, use the SetSnapSpacing method. To change the snap rotation, use the SnapRotationAngle property.
The snap grid is invisible. Use the GridOn property to display a separate visible grid.
AutoCAD ignores the Snap mode in perspective views.
Note: The value of this property is stored in the SNAPMODE system variable. To change the snap style, use the SNAPSTYL system variable.
Examples
VBA:
Sub Example_SnapOn()
    ' This example toggles the setting of SnapOn.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Display the current setting of SnapOn
    MsgBox \"Snap mode is: \" & IIf(viewportObj.SnapOn, \"On\", \"Off\"), , \"SnapOn Example\"
    ' Toggle the setting of SnapOn
    viewportObj.SnapOn = Not (viewportObj.SnapOn)
    
    ' Reset the active viewport to see the change on the AutoCAD status bar
    ThisDrawing.ActiveViewport = viewportObj
    
    MsgBox \"Snap mode is now: \" & IIf(viewportObj.SnapOn, \"On\", \"Off\"), , \"SnapOn Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SnapOn()
    ;; This example toggles the setting of SnapOn.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Display the current setting of SnapOn
    (alert (strcat \"Snap mode is: \" (if (= (vla-get-SnapOn viewportObj) :vlax-true) \"On\" \"Off\")))
    ;; Toggle the setting of SnapOn
    (vla-put-SnapOn viewportObj (if (= (vla-get-SnapOn viewportObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Reset the active viewport to see the change on the AutoCAD status bar
    (vla-put-ActiveViewport doc viewportObj)
    
    (alert (strcat \"Snap mode is now: \" (if (= (vla-get-SnapOn viewportObj) :vlax-true) \"On\" \"Off\")))
)
")
("SnapRotationAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-082AC07A-DF56-4E92-B9FD-473A53A5659E"
"
SnapRotationAngle Property (ActiveX)
Specifies the snap rotation angle of the viewport relative to the current UCS.
Supported platforms: Windows only
Signature
VBA:
object.SnapRotationAngle
object
    Type: PViewport, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The angle in radians. The valid range is 0 to 6.28.
Remarks
You cannot change the snap base point for the active paper space viewport.
Changes to this property are not reflected in the drawing until a call to either the Update or Regen method is performed.
Note: The value of this property is stored in the SNAPANG system variable.
Examples
VBA:
Sub Example_SnapRotationAngle()
    ' This example changes the snap rotation angle for a
    ' model space and paper space viewport.
    
    ' Create a new model space viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.Viewports.Add(\"NewViewport\")
    
    ' Find the current snap rotation angle
    Dim currSnapAngle As Double
    currSnapAngle = viewportObj.SnapRotationAngle
    MsgBox \"The current model space snap rotation angle is \" & viewportObj.SnapRotationAngle, , \"SnapRotationAngle Example\"
    
    ' Change the snap rotation angle
    viewportObj.SnapRotationAngle = 1.5
    MsgBox \"The new model space snap rotation angle is \" & viewportObj.SnapRotationAngle, , \"SnapRotationAngle Example\"
    
    ' Create a new paper space viewport
    Dim pviewportObj As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40
    height = 40
    ThisDrawing.ActiveSpace = acPaperSpace
    Set pviewportObj = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    
    ' Find the current snap rotation angle
    currSnapAngle = pviewportObj.SnapRotationAngle
    MsgBox \"The current paper space snap rotation angle is \" & pviewportObj.SnapRotationAngle, , \"SnapRotationAngle Example\"
    
    ' Change the snap rotation angle
    pviewportObj.SnapRotationAngle = 1.5
    MsgBox \"The new paper space snap base point is \" & pviewportObj.SnapRotationAngle, , \"SnapRotationAngle Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SnapRotationAngle()
    ;; This example changes the snap rotation angle for a
    ;; model space and paper space viewport.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new model space viewport
    (setq viewportObj (vla-Add (vla-get-Viewports doc) \"NewViewport\"))
    
    ;; Find the current snap rotation angle
    (setq currSnapAngle (vla-get-SnapRotationAngle viewportObj))
    (alert (strcat \"The current model space snap rotation angle is \" (rtos currSnapAngle 2)))
    
    ;; Change the snap rotation angle
    (vla-put-SnapRotationAngle viewportObj 1.5)
    (alert (strcat \"The new model space snap rotation angle is \" (rtos (vla-get-SnapRotationAngle viewportObj) 2)))
    
    ;; Create a new paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
	         height 40)
    
    (vla-put-ActiveSpace doc acPaperSpace)
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj (vla-AddPViewport paperSpace center width height))
    
    ;; Find the current snap rotation angle
    (setq currSnapAngle (vla-get-SnapRotationAngle pviewportObj))
    (alert (strcat \"The current paper space snap rotation angle is \" (rtos currSnapAngle 2)))
    
    ;; Change the snap rotation angle
    (vla-put-SnapRotationAngle pviewportObj 1.5)
    (alert (strcat \"The new paper space snap base point is \" (rtos (vla-get-SnapRotationAngle pviewportObj) 2)))
)
")
("SolidFill" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E9030C60-5EA3-4E72-AF40-47C2364442E6"
             "
SolidFill Property (ActiveX)
Specifies if traces, solids, all hatches (including solid-fill), and wide polylines are filled in.
Supported platforms: Windows only
Signature
VBA:
object.SolidFill
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Displays solid fills.
    False: Does not display solid fills.
Remarks
The initial value of this property is True.
Note: The value of this property is stored in the FILLMODE system variable.
Examples
VBA:
Sub Example_SolidFill()
    ' This example reads and modifies the preference value that controls
    ' whether multilines, traces, solids, all hatches (including solid-fill)
    ' and wide polylines are filled in.
    '
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.Preferences
    
    ' Read and display the original value
    originalValue = ACADPref.SolidFill
    MsgBox \"The SolidFill preference is set to: \" & originalValue
    ' Modify the SolidFill preference by toggling the value
    ACADPref.SolidFill = Not (ACADPref.SolidFill)
    newValue = ACADPref.SolidFill
    MsgBox \"The SolidFill preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.SolidFill = originalValue
    MsgBox \"The SolidFill preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SolidFill()
    ;; This example reads and modifies the preference value that controls
    ;; whether multilines, traces, solids, all hatches (including solid-fill)
    ;; and wide polylines are filled in.
    ;;
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))  
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-SolidFill preferences))
    (alert (strcat \"The SolidFill preference is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the SolidFill preference by toggling the value
    (vla-put-SolidFill preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (setq newValue (vla-get-SolidFill preferences))
    (alert (strcat \"The SolidFill preference has been set to: \" (if (= newValue :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-SolidFill preferences originalValue)
    (alert (strcat \"The SolidFill preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("SolidType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C5DFFC5C-33EC-406C-BC14-B17F0EE4DCF0"
             "
SolidType Property (ActiveX)
Indicates the type of solid.
Supported platforms: Windows only
Signature
VBA:
object.SolidType
object
    Type: 3DSolid
    The object to which this property applies.
Property Value
Read-only: Yes / No
Type: String
The type of solid.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SplineFrame" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6BC79A53-1559-436E-9830-34B786305DCA"
               "
SplineFrame Property (ActiveX)
Specifies the display of the control vertices (CVs) for a spline.
Supported platforms: Windows only
Signature
VBA:
object.SplineFrame
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: AcSplineFrameType enum
    acHide
    acShow
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SplineMethod" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0A581675-FCDB-4501-8570-5190A69EC1A7"
"
SplineMethod Property (ActiveX)
Specifies the type of the spline.
Supported platforms: Windows only
Signature
VBA:
object.SplineMethod
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: AcSplineMethodType enum
    acFit
    acControlVertices
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("StandardScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E8D9D4F5-24C1-4C89-924E-DF57C7F0CF5F"
"
StandardScale Property (ActiveX)
Specifies the standard scale for the layout, viewport, or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.StandardScale
object
    Type: Layout, PlotConfiguration, PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: acPlotScale enum; Layout and PlotConfiguration objects, acViewportScale enum; PViewport objects
    acPlotScale enum
    acScaleToFit: Scale to Fit
    ac1_128in_1ft: 1/128\"= 1'
    ac1_64in_1ft: 1/64\"= 1'
    ac1_32in_1ft: 1/32\"= 1'
    ac1_16in_1ft: 1/16\"= 1'
    ac3_32in_1ft: 3/32\"= 1'
    ac1_8in_1ft: 1/8\" = 1'
    ac3_16in_1ft: 3/16\"= 1'
    ac1_4in_1ft: 1/4\" = 1'
    ac3_8in_1ft: 3/8\" = 1'
    ac1_2in_1ft: 1/2\" = 1'
    ac3_4in_1ft: 3/4\" = 1'
    ac1in_1ft: 1\"= 1'
    ac3in_1ft: 3\"= 1'
    ac6in_1ft: 6\"= 1'
    ac1ft_1ft: 1'= 1'
    ac1_1: 1:1
    ac1_2: 1:2
    ac1_4: 1:4
    ac1_8: 1:8
    ac1_10: 1:10
    ac1_16: 1:16
    ac1_20: 1:20
    ac1_30: 1:30
    ac1_40: 1:40
    ac1_50: 1:50
    ac1_100: 1:100
    ac2_1: 2:1
    ac4_1: 4:1
    ac8_1: 8:1
    ac10_1: 10:1
    ac100_1: 100:1
    acViewportScale enum
    acVpScaleToFit: Scale to fit
    acVpCustomScale: Custom
    acVp1_128in_1ft: 1/128\"= 1'
    acVp1_64in_1ft: 1/64\"= 1'
    acVp1_32in_1ft: 1/32\"= 1'
    acVp1_16in_1ft: 1/16\"= 1'
    acVp3_32in_1ft: 3/32\"= 1'
    acVp1_8in_1ft: 1/8\" = 1'
    acVp3_16in_1ft: 3/16\"= 1'
    acVp1_4in_1ft: 1/4\" = 1'
    acVp3_8in_1ft: 3/8\" = 1'
    acVp1_2in_1ft: 1/2\" = 1'
    acVp3_4in_1ft: 3/4\" = 1'
    acVp1and1_2in_1ft: 1-1/2\"= 1'
    acVp3in_1ft: 3\"= 1'
    acVp6in_1ft: 6\"= 1'
    acVp1ft_1ft: 1'= 1'
    acVp1_1: 1:1
    acVp1_2: 1:2
    acVp1_4: 1:4
    acVp1_8: 1:8
    acVp1_10: 1:10
    acVp1_16: 1:16
    acVp1_20: 1:20
    acVp1_30: 1:30
    acVp1_40: 1:40
    acVp1_50: 1:50
    acVp1_100: 1:100
    acVp2_1: 2:1
    acVp4_1: 4:1
    acVp8_1: 8:1
    acVp10_1: 10:1
    acVp100_1: 100:1
Remarks
To set the viewport to a custom scale, set this property to acVpCustomScale and then use the CustomScale property to define the custom scale value.
Changes to this property will not be visible until after a regeneration of the drawing. Use the Regen method to regenerate the drawing.
Examples
VBA:
Sub Example_StandardScale()
    ' This example will access the active layout for the current drawing
    ' and list the standard scale for that Layout.
    ' It then changes the standard scale for the layout, and finally
    ' resets the scale back to its original value.
    Dim Layout As ACADLayout
    Dim currScale As Integer
    
    ' Get the activeLayout
    Set Layout = ThisDrawing.ActiveLayout
    
    ' Find the current standard scale
    currScale = Layout.StandardScale
    MsgBox \"The current standard scale is : \" & Layout.StandardScale
    
    ' Change the standard scale to 100:1
    Layout.StandardScale = ac100_1
    MsgBox \"The new standard scale is : \" & Layout.StandardScale
    
    ' Reset the original standard scale
    Layout.StandardScale = currScale
    MsgBox \"The new standard scale is : \" & Layout.StandardScale
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StandardScale()
    ;; This example will access the active layout for the current drawing
    ;; and list the standard scale for that Layout.
    ;; It then changes the standard scale for the layout, and finally
    ;; resets the scale back to its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the activeLayout
    (setq Layout (vla-get-ActiveLayout doc))
    
    ;; Find the current standard scale
    (setq currScale (vla-get-StandardScale Layout))
    (alert (strcat \"The current standard scale is : \" (itoa currScale)))
    
    ;; Change the standard scale to 100:1
    (vla-put-StandardScale Layout ac100_1)
    (alert (strcat \"The new standard scale is : \" (itoa (vla-get-StandardScale Layout))))
    
    ;; Reset the original standard scale
    (vla-put-StandardScale Layout currScale)
    (alert (strcat \"The new standard scale is : \" (itoa (vla-get-StandardScale Layout))))
)
")
("StandardScale2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E13E2CC3-A80B-48B8-B952-16E58DEDA96F"
"
StandardScale2 Property (ActiveX)
Specifies a standard scale for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.StandardScale2
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Long
A standard scale value of the viewport.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_StandardScale()
    ' This example will access the active layout for the current drawing
    ' and list the standard scale for that Layout.
    ' It then changes the standard scale for the layout, and finally
    ' resets the scale back to its original value.
    Dim Layout As ACADLayout
    Dim currScale As Integer
    
    ' Get the activeLayout
    Set Layout = ThisDrawing.ActiveLayout
    
    ' Find the current standard scale
    currScale = Layout.StandardScale
    MsgBox \"The current standard scale is : \" & Layout.StandardScale
    
    ' Change the standard scale to 100:1
    Layout.StandardScale = ac100_1
    MsgBox \"The new standard scale is : \" & Layout.StandardScale
    
    ' Reset the original standard scale
    Layout.StandardScale = currScale
    MsgBox \"The new standard scale is : \" & Layout.StandardScale
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StandardScale()
    ;; This example will access the active layout for the current drawing
    ;; and list the standard scale for that Layout.
    ;; It then changes the standard scale for the layout, and finally
    ;; resets the scale back to its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get the activeLayout
    (setq Layout (vla-get-ActiveLayout doc))
    
    ;; Find the current standard scale
    (setq currScale (vla-get-StandardScale Layout))
    (alert (strcat \"The current standard scale is : \" (itoa currScale)))
    
    ;; Change the standard scale to 100:1
    (vla-put-StandardScale Layout ac100_1)
    (alert (strcat \"The new standard scale is : \" (itoa (vla-get-StandardScale Layout))))
    
    ;; Reset the original standard scale
    (vla-put-StandardScale Layout currScale)
    (alert (strcat \"The new standard scale is : \" (itoa (vla-get-StandardScale Layout))))
)
")
("StartAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7D7F6071-105F-45C4-ABA5-F1EE8618A139"
"
StartAngle Property (ActiveX)
Specifies the start angle of an arc or an ellipse.
Supported platforms: Windows only
Signature
VBA:
object.StartAngle
object
    Type: Arc, Ellipse
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The start angle in radians.
Remarks
Examples
VBA:
Sub Example_StartAngle()
    ' This example creates an ellipse and enters the start and
    ' end angles to create an elliptical arc.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    
    'Enter a start angle of 45 degrees, and an end angle of 270 degrees
    ellObj.startAngle = 45 * (3.14 / 180)
    ellObj.endAngle = 270 * (3.14 / 180)
    ZoomAll
    MsgBox \"The ellipse has a start angle of \" & ellObj.startAngle * (180 / 3.14) & \" and the end angle of \" & ellObj.endAngle * (180 / 3.14) & \" degrees.\", vbInformation, \"StartAngle Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StartAngle()
    ;; This example creates an ellipse and enters the start and
    ;; end angles to create an elliptical arc.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    
    ;; Enter a start angle of 45 degrees, and an end angle of 270 degrees
    (vla-put-StartAngle ellObj (* 45 (/ 3.14 180)))
    (vla-put-EndAngle ellObj (* 270 (/ 3.14 180)))
    (vla-ZoomAll acadObj)
    (alert (strcat \"This ellipse has a start angle of \" (rtos (* (vla-get-StartAngle ellObj) (/ 180 3.14)) 2) \" and the end angle of \" (rtos (* (vla-get-EndAngle ellObj) (/ 180 3.14)) 2) \" degrees.\"))
)
")
("StartDraftAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BC66F75A-4323-45A0-9666-B2BEB8340579"
                   "
StartDraftAngle Property (ActiveX)
Specifies the draft angle of the surface for the first cross section.
Supported platforms: Windows only
Signature
VBA:
object.StartDraftAngle
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The draft angle of the first cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("StartDraftMagnitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4627CC32-D8F6-440F-AD5C-2F2531B6A8CB"
                       "
StartDraftMagnitude Property (ActiveX)
Specifies the draft magnitude of the surface for the first cross section.
Supported platforms: Windows only
Signature
VBA:
object.StartDraftMagnitude
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The draft magnitude of the first cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("StartParameter" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E7C085E0-22CA-4E96-83A5-F8672277340E"
"
StartParameter Property (ActiveX)
Specifies the start parameter for an ellipse.
Supported platforms: Windows only
Signature
VBA:
object.StartParameter
object
    Type: Ellipse
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The valid range is 0 to 2*PI.
Remarks
The start and end parameters of the ellipse are calculated based on the following equation:
P(Theta) = A * cos(Theta) + B * sin(Theta)
where A and B are the semimajor and -minor axes respectively.
For example, if your start angle is Theta1, the corresponding start parameter is P(Theta1) calculated based on the above formula. Similarly, if your end angle is Theta2, the corresponding end parameter is P(Theta2) calculated based on the above formula.
You can use either angle or parameter to create the ellipse.
Examples
VBA:
Sub Example_StartParameter()
    ' This example creates an ellipse and enters the start and
    ' end parameters to create an elliptical arc.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    
    ' Enter a start parameter of 1.57, and an end parameter of 6.28
    ellObj.StartParameter = 1.57
    ellObj.EndParameter = 6.28
    ZoomAll
    
    ' Find the start and end parameters for the ellipse
    MsgBox \"The ellipse has a start parameter of \" & ellObj.StartParameter & \" and an end parameter of \" & ellObj.EndParameter, vbInformation, \"StartParameter Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StartParameter()
    ;; This example creates an ellipse and enters the start and
    ;; end parameters to create an elliptical arc.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
  
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    
    ;; Enter a start parameter of 1.57, and an end parameter of 6.28
    (vla-put-StartParameter ellObj 1.57)
    (vla-put-EndParameter ellObj 6.28)
    (vla-ZoomAll acadObj)
    
    ;; Find the start and end parameters for the ellipse
    (alert (strcat \"The ellipse has a start parameter of \" (rtos (vla-get-StartParameter ellObj) 2) \" and an end parameter of \" (rtos (vla-get-EndParameter ellObj) 2)))
)
")
("StartPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7EE4F705-D287-4165-AEB7-AA56C36F1789"
              "
StartPoint Property (ActiveX)
Specifies the start point for the arc, line, or ellipse.
Supported platforms: Windows only
Signature
VBA:
object.StartPoint
object
    Type: Arc, Ellipse, Line
    The objects this property applies to.
Property Value
Read-only: Yes, except the Line object which is read-write
Type: Variant (three-element array of doubles)
A 3D coordinate representing the start point of the object.
Remarks
The start point for an arc, ellipse, and line
You cannot change the start point of an arc or ellipse. To edit an arc, use the EndAngle and Radius properties. To edit an ellipse, use the EndAngle, MajorAxis, and RadiusRatio properties.
Examples
VBA:
Sub Example_StartPoint()
    ' This example creates an elliptical arc and then
    ' finds the coordinates of its start point and endpoint.
    Dim ellObj As AcadEllipse
    Dim majAxis(0 To 2) As Double
    Dim center(0 To 2) As Double
    Dim radRatio As Double
    Dim startPoint As Variant
    Dim endPoint As Variant
    
    ' Create an ellipse in model space
    center(0) = 5#: center(1) = 5#: center(2) = 0#
    majAxis(0) = 10: majAxis(1) = 20#: majAxis(2) = 0#
    radRatio = 0.3
    Set ellObj = ThisDrawing.ModelSpace.AddEllipse(center, majAxis, radRatio)
    
    ' Enter a start angle of 45 degrees, and an end angle of 270 degrees
    ellObj.startAngle = 45 * (3.14 / 180)
    ellObj.endAngle = 270 * (3.14 / 180)
    ZoomAll
    
    ' Find the start and endpoints for the ellipse
    startPoint = ellObj.startPoint
    endPoint = ellObj.endPoint
    MsgBox \"This ellipse has a start point of \" & _
           startPoint(0) & \", \" & startPoint(1) & \", \" & _
           startPoint(2) & \" and an endpoint of \" & _
           endPoint(0) & \", \" & endPoint(1) & \", \" & _
           endPoint(2), vbInformation, \"StartPoint Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StartPoint()
    ;; This example creates an elliptical arc and then
    ;; finds the coordinates of its start and end points.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Create an ellipse in model space
    (setq center (vlax-3d-point 5 5 0)
          majAxis (vlax-3d-point 10 20 0)
          radRatio 0.3)
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq ellObj (vla-AddEllipse modelSpace center majAxis radRatio))
    
    ;; Enter a start angle of 45 degrees, and an end angle of 270 degrees
    (vla-put-StartAngle ellObj (* 45 (/ 3.14 180)))
    (vla-put-EndAngle ellObj (* 270 (/ 3.14 180)))
    (vla-ZoomAll acadObj)
    
    ;; Find the start and endpoints for the ellipse
    (setq startPoint (vlax-safearray->list (vlax-variant-value (vla-get-StartPoint ellObj))))
    (setq endPoint (vlax-safearray->list (vlax-variant-value (vla-get-EndPoint ellObj))))
    (alert (strcat \"This ellipse has a start point of \" (rtos (nth 0 startPoint) 2) \", \"
		                                        (rtos (nth 1 startPoint) 2) \", \"
		                                        (rtos (nth 2 startPoint) 2) \" and an endpoint of \"
		                                        (rtos (nth 0 endPoint) 2) \", \"
		                                        (rtos (nth 1 endPoint) 2) \", \"
		                                        (rtos (nth 2 endPoint) 2)))
)
")
("StartSmoothContinuity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9F2583F0-516D-49D8-87DD-DB4E06A1D311"
"
StartSmoothContinuity Property (ActiveX)
Specifies the tangency and curvature of the first cross section.
Supported platforms: Windows only
Signature
VBA:
object.StartSmoothContinuity
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
The tangency and curvature of the first cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("StartSmoothMagnitude" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9C007593-F090-4F36-B5E7-ACA302541262"
                        "
StartSmoothMagnitude Property (ActiveX)
Specifies the size of the curve of the first cross section.
Supported platforms: Windows only
Signature
VBA:
object.StartSmoothMagnitude
object
    Type: LoftedSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Double
The size of the curve of the first cross section.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("StartTangent" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-828484FF-AFF2-45D3-AD90-B29AC242F1B9"
"
StartTangent Property (ActiveX)
Specifies the start tangent for the spline.
Supported platforms: Windows only
Signature
VBA:
object.StartTangent
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A directional vector representing the start tangent of the spline.
Remarks
When a spline is elevated, it is converted from an interpolated (fit) spline to a control point spline. This means that after elevation, the spline no longer has fit tangents, and the StartTangent and EndTangent properties for the spline are no longer accessible. The only way to edit a control point spline is through the ControlPoints property, or the SetControlPoint or GetControlPoint methods.
Examples
VBA:
Sub Example_StartTangent()
    ' This example creates a spline. It then queries the current setting for
    ' the StartTangent, and then changes the StartTangent to a new value.
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double
    Dim endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim msg As String
    
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 1: fitPoints(1) = 1: fitPoints(2) = 0
    fitPoints(3) = 5: fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ThisDrawing.Regen True
    GoSub GETPOINTS
    MsgBox \"The StartTangent for the spline is  \" & msg, vbInformation, \"StartTangent Example\"
    Dim newTan(0 To 2) As Double
    newTan(0) = 1.5: newTan(1) = 0.707: newTan(2) = 2
    
    ' Change the start tangent of Spline to (1.5, 0.707, 2)
    splineObj.EndTangent = newTan
    
    ThisDrawing.Regen True
    GoSub GETPOINTS
    MsgBox \"The StartTangent has been changed to \" & msg, vbInformation, \"StartTangent Example\"
    Exit Sub
GETPOINTS:
    Dim count As Integer
    msg = \"\"
    ' Get the coordinates from the start tangent
    For count = 0 To 2
        msg = msg & Format(splineObj.StartTangent(count), \"0.###\") & \", \"
    Next
    msg = VBA.Left(msg, Len(msg) - 2)
    Return
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StartTangent()
    ;; This example creates a spline. It then queries the current setting for
    ;; the StartTangent, and then changes the StartTangent to a new value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Create the spline
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
          fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(1 1 0
				                                 5 5 0
				                                 10 0 0
				                                )
    )
    
    ;; Create the spline
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
    (setq msg \"\")
    ;; Get the coordinates from the start tangent
    (setq startTangent (vlax-safearray->list (vlax-variant-value (vla-get-StartTangent splineObj))))
    (setq msg (strcat msg (rtos (nth 0 startTangent) 2 3) \",\"
		                        (rtos (nth 1 startTangent) 2 3) \",\"
		                        (rtos (nth 2 startTangent) 2 3)))
    (alert (strcat \"The StartTangent for the spline is \" msg))
    ;; Change the start tangent of Spline to (1.5,0.707,2)
    (setq newTan (vlax-3d-point 1.5 0.707 2))
    (vla-put-StartTangent splineObj newTan)
    (vla-Regen doc :vlax-true)
    (setq msg \"\")
    (setq startTangent (vlax-safearray->list (vlax-variant-value (vla-get-StartTangent splineObj))))
    (setq msg (strcat msg (rtos (nth 0 startTangent) 2 3) \",\"
		                        (rtos (nth 1 startTangent) 2 3) \",\"
		                        (rtos (nth 2 startTangent) 2 3)))
    (alert (strcat \"The StartTangent has been changed to \" msg))
)
")
("State" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-58DFA39B-5EA5-4963-A339-FB6F5B87D279"
         "
State Property (ActiveX)
Specifies section object type.
Supported platforms: Windows only
Signature
VBA:
object.State
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: AcSectionState enum
    acSectionStateBoundary
    acSectionStatePlane
    acSectionStateVolume
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("State2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7C4BDDC1-8F67-49BF-8DAC-3E3BAF3C4030"
          "
State2 Property (ActiveX)
Specifies section object type.
Supported platforms: Windows only
Signature
VBA:
object.State2
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: AcSectionState2 enum
    acSectionState2Boundary
    acSectionState2Plane
    acSectionState2Slice
    acSectionState2Volume
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("StatusID" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-09EA11FE-DE59-4153-BCF3-137ECCFB7C8B"
"
StatusID Property (ActiveX)
Gets the current active status of the viewport.
Supported platforms: Windows only
Signature
VBA:
object.StatusID(VportObj)
object
    Type: Application
    The object this property applies to.
VportObj
    Type: Viewport
    The viewport to query the status of.
Property Value
Read-only: Yes
Type: Boolean
    True: The specified viewport is the current active viewport.
    False: The specified viewport is not the current active viewport.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_StatusID()
    ' This example displays the setting of StatusID.
    Dim currStatusID As Boolean
    
    ' Display the current setting of statusID
    currStatusID = ThisDrawing.Application.statusID(ThisDrawing.ActiveViewport)
    MsgBox \"The statusID of the active viewport is: \" & currStatusID, , \"StatusID Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StatusID()
    ;; This example displays the setting of StatusID.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Display the current setting of statusID
    (setq currStatusID (vla-get-statusID acadObj (vla-get-ActiveViewport doc)))
    (alert (strcat \"The statusID of the active viewport is: \" (if (= currStatusID :vlax-true) \"True\" \"False\")))
)
")
("StyleName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F70A2F76-B986-4742-9863-4A9693C8DA0A"
"
StyleName Property (ActiveX)
Specifies the name of the style used with the object.
Supported platforms: Windows only
Signature
VBA:
object.StyleName
object
    Type: Attribute, AttributeReference, Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Leader, MLeader, MLine, MText, Table, Text, Tolerance
    The objects this property applies to.
Property Value
Read-only: No; except MLine objects which are read-only
Type: String
The default equals the current style.
Remarks
Use the TextStyle object to change the attributes of a given text style. Use the DimStyle object to change the attributes of a given dimension style.
The name given must already be defined in the drawing.
Note: For dimensions, the value of this property is stored in the DIMSTYLE system variable.
Examples
VBA:
Sub Example_StyleName()
    ' This example creates an aligned dimension and then changes the
    ' StyleName property for that dimension.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim currStyleName As String
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 3#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 3#: point2(2) = 0#
    location(0) = 7.5: location(1) = 5#: location(2) = 0#
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
    currStyleName = dimObj.styleName
    MsgBox \"The initial StyleName for the dimension is \" & dimObj.styleName, vbInformation, \"TextString Example\"
    
    ' Create a new dimension style
    ThisDrawing.DimStyles.Add (\"NewDimensionStyle\")
    
    ' Change the text string for the dimension
    dimObj.styleName = \"NewDimensionStyle\"
    dimObj.Update
    MsgBox \"The new StyleName for the dimension is \" & dimObj.styleName, vbInformation, \"TextString Example\"
    
    ' Reset the text string for the dimension
    dimObj.styleName = currStyleName
    dimObj.Update
    MsgBox \"The StyleName for the dimension has been reset to \" & dimObj.styleName, vbInformation, \"TextString Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StyleName()
    ;; This example creates an aligned dimension and then changes the
    ;; StyleName property for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 3 0)
          point2 (vlax-3d-point 10 3 0)
          location (vlax-3d-point 7.5 5 0))
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    (setq currStyleName (vla-get-StyleName dimObj))
    (alert (strcat \"The initial StyleName for the dimension is \" currStyleName))
    
    ;; Create a new dimension style
    (vla-Add (vla-get-DimStyles doc) \"NewDimensionStyle\")
    
    ;; Change the text string for the dimension
    (vla-put-StyleName dimObj \"NewDimensionStyle\")
    (vla-Update dimObj)
    (alert (strcat \"The new StyleName for the dimension is \" (vla-get-StyleName dimObj)))
    
    ;; Reset the text string for the dimension
    (vla-put-StyleName dimObj currStyleName)
    (vla-Update dimObj)
    (alert (strcat \"The StyleName for the dimension has been reset to \" (vla-get-StyleName dimObj)))
)
")
("StyleSheet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5C46D875-11BB-47C1-95EC-095D6EBCBE8F"
              "
StyleSheet Property (ActiveX)
Specifies the style sheet for the layout or plot configuration.
Supported platforms: Windows only
Signature
VBA:
object.StyleSheet
object
    Type: Layout, PlotConfiguration
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The name of the style sheet.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_StyleSheet()
    ' This example finds the name of the style sheet for the active layout
    
    Dim styleSheetName As String
    styleSheetName = ThisDrawing.ActiveLayout.StyleSheet
    
    If styleSheetName = \"\" Then
        MsgBox \"There is no style sheet set for the active layout.\"
    Else
        MsgBox \"The style sheet for the active layout is: \" & styleSheetName
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_StyleSheet()
    ;; This example finds the name of the plot style for the active layout
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq styleSheetName (vla-get-StyleSheet (vla-get-ActiveLayout doc)))
    
    (if (= styleSheetName \"\")
        (alert \"There is no style sheet set for the active layout.\")
        (alert (strcat \"The style sheet for the active layout is: \" styleSheetName))
    )
)
")
("Stylization" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8DCAF979-896D-4DB8-8649-42C4A3506E1C"
               "
Stylization Property (ActiveX)
Specifies color stylization for selected point cloud.
Supported platforms: Windows only
Signature
VBA:
object.Stylization
object
    Type: PointCloud, PointCloudEx
    The object this property applies to.
Property Value
Read-only: No
Type: AcPointCloudStylizationType enum; PointCloud objects or AcPointCloudExStylizationType enum; PointCloudEx objects
AcPointCloudStylizationType enum
    acIntensity
    acNormal
    acObjectColor
    acScanColor
AcPointCloudExStylizationType enum
    acClassification
    acElevation
    acIntensities
    acNormals
    acObject
    acRGB
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SubUnitsFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8254963B-E5CB-4931-8C95-AD283E8AD7A9"
                  "
SubUnitsFactor Property (ActiveX)
Specifies the sub-units scale factor for dimension when unit changes to sub-unit.
Supported platforms: Windows only
Signature
VBA:
object.SubUnitsFactor
object
    Type: DimAligned, DimArcLength, DimOrdinate, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The sub-units scale factor.
Remarks
The SubUnitsFactor property will only take affect when leading zeros are suppressed.
SubUnitsFactor affects all linear dimension types that allow a suffix. The sub-unit scale factor replaces the dimension scale factor when unit changes to sub-unit. When units are less than 1, the sub-units factor controls the location of the decimal separator.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("SubUnitsSuffix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B7CEA648-733A-4758-8937-B266DA89A040"
"
SubUnitsSuffix Property (ActiveX)
Specifies the sub-units suffix for dimensions when unit changes to sub-unit.
Supported platforms: Windows only
Signature
VBA:
object.SubUnitsSuffix
object
    Type: DimAligned, DimArcLength, DimOrdinate, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: String
The sub-units suffix.
Remarks
The SubUnitsSuffix property will only take affect when leading zeros are suppressed.
SubUnitsSuffix affects all linear dimension types that allow a suffix. The sub-unit suffix replaces the dimension suffix when unit changes to sub-unit.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Subject" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-00744E45-CB72-4DCE-85BE-B38C798D7908"
"
Subject Property (ActiveX)
Specifies the subject name of the digital ID (certificate) or drawing.
Supported platforms: Windows only
Signature
VBA:
object.Subject
object
    Type: SecurityParams, SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The subject name of the digital certificate or drawing.
Remarks
SummaryInfo: You can use the subject name to group drawings that have the same subject.
Examples
VBA:
Sub Example_AddCustomInfoSubject()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Sub Example_DigitalSignatureSubject()
    ' This example attaches a digital signature and accompanying data to a file,
    ' and saves the file.
    Dim sp As AcadSecurityParams
    Set sp = GetInterfaceObject(\"AutoCAD.SecurityParams.\" + Left(AcadApplication.Version, 2))
    
    ' Attach a digital signature and timestamp it
    sp.Action = AcadSecurityParamsType.ACADSECURITYPARAMS_SIGN_DATA _
                + AcadSecurityParamsType.ACADSECURITYPARAMS_ADD_TIMESTAMP
    
    ' Certificate details follow
    sp.Subject = \"Thawte Freemail Member\"
    sp.Issuer = \"Personal Freemail RSA 2000.8.30\"
    sp.SerialNumber = \"073848\"
    sp.Comment = \"This is now signed\"
    sp.TimeServer = \"NIST(time.nist.gov)\"
    
    ThisDrawing.SaveAs \"C:\MyDrawing.dwg\", , sp
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_AddCustomInfoSubject()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
(defun c:Example_DigitalSignatureSubject()
    ;; This example attaches a digital signature and accompanying data to a file,
    ;; and saves the file.
    (setq acadObj (vlax-get-acad-object))
    (setq sp (vlax-create-object (strcat \"AutoCAD.SecurityParams.\" (substr (getvar \"ACADVER\") 1 2))))
  
    (vla-put-Visible acadObj :vlax-true)
    
    ;; Attach a digital signature and timestamp it
    (vla-put-Action sp (+ ACADSECURITYPARAMS_SIGN_DATA ACADSECURITYPARAMS_ADD_TIMESTAMP))
    
    ;; Certificate details follow
    (vla-put-Subject sp \"Thawte Freemail Member\")
    (vla-put-Issuer sp \"Personal Freemail RSA 2000.8.30\")
    (vla-put-SerialNumber sp \"073848\")
    (vla-put-Comment sp \"This is now signed\")
    (vla-put-TimeServer sp \"NIST(time.nist.gov)\")
    
    (setq doc (vla-get-ActiveDocument acadObj))
    (vla-SaveAs doc \"C:\\MyDrawing.dwg\" acNative sp)
  
    (vlax-release-object sp)
)
")
("SummaryInfo" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B1AB773D-8EA7-4DA6-95BB-38DAF1F34DEC"
"
SummaryInfo Property (ActiveX)
Specifies the properties of a drawing.
Supported platforms: Windows only
Signature
VBA:
object.SummaryInfo
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: SummaryInfo
The SummaryInfo object of the drawing.
Remarks
This property is used to change the properties of a drawing.
Examples
VBA:
Sub Example_SummaryInfo()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SummaryInfo()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("SuppressLeadingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3EC6040A-50EF-4080-999A-FA85595C0A72"
"
SuppressLeadingZeros Property (ActiveX)
Specifies the suppression of leading zeros in dimension values.
Supported platforms: Windows only
Signature
VBA:
object.SuppressLeadingZeros
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress leading zeros in decimal dimensions. For example, 0.5000 becomes .5000.
    False: Do not suppress leading zeros in decimal dimensions.
Remarks
The initial value for this property is False.
Note: This value overrides the value for the DIMZIN system variable.
Examples
VBA:
Sub Example_SuppressLeadingZeros()
   ' This example creates an aligned dimension in model space and
   ' uses the SuppressLeadingZeros property to toggle the display of leading zeros
   ' in the dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of leading zeros in the dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of leading zeros for the dimension value
            dimObj.SuppressLeadingZeros = Not (dimObj.SuppressLeadingZeros)
            ThisDrawing.Regen acAllViewports
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SuppressLeadingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses the SuppressLeadingZeros property to toggle the display of leading zeros
    ;; in the dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.01 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Toggle the display of leading zeros for the dimension value
    (vla-put-SuppressLeadingZeros dimObj (if (= (vla-get-SuppressLeadingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of leading zeros toggled.\")
    ;; Toggle the display of leading zeros for the dimension value back to previous state
    (vla-put-SuppressLeadingZeros dimObj (if (= (vla-get-SuppressLeadingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of leading zeros toggled back.\")
)
")
("SuppressTrailingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-61E14F43-98EA-4F76-AAC3-BB0EACBCEC78"
                         "
SuppressTrailingZeros Property (ActiveX)
Specifies the suppression of trailing zeros in dimension values.
Supported platforms: Windows only
Signature
VBA:
object.SuppressTrailingZeros
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress trailing zeros in decimal dimensions. For example, 12.5000 becomes 12.5.
    False: Do not suppress trailing zeros in decimal dimensions.
Remarks
The initial value for this property is False.
Note: This value overrides the value for the DIMZIN system variable.
Examples
VBA:
Sub Example_SuppressTrailingZeros()
   ' This example creates an aligned dimension in model space and
   ' uses the SuppressTrailingZeros property to toggle the display of trailing zeros
   ' in the dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 7: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of trailing zeros in the dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of trailing zeros for the dimension value
            dimObj.SuppressTrailingZeros = Not (dimObj.SuppressTrailingZeros)
            ThisDrawing.Regen acAllViewports
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SuppressTrailingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses the SuppressTrailingZeros property to toggle the display of trailing zeros
    ;; in the dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 7 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Toggle the display of trailing zeros for the dimension value
    (vla-put-SuppressTrailingZeros dimObj (if (= (vla-get-SuppressTrailingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of trailing zeros toggled.\")
    ;; Toggle the display of trailing zeros for the dimension value back to previous state
    (vla-put-SuppressTrailingZeros dimObj (if (= (vla-get-SuppressTrailingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of trailing zeros toggled back.\")
)
")
("SuppressZeroFeet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C98361E3-08E2-467C-8ECF-C455FAC454A8"
                    "
SuppressZeroFeet Property (ActiveX)
Specifies the suppression of a zero foot measurement in dimension values.
Supported platforms: Windows only
Signature
VBA:
object.SuppressZeroFeet
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero foot measurement.
    False: Do not suppress the display of a zero foot measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMZIN system variable for the given dimension.
Examples
VBA:
Sub Example_SuppressZeroFeet()
   ' This example creates an aligned dimension in model space and
   ' uses SuppressZeroFeet to suppress or view the display of
   ' zero feet in the alternate dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Set the dimension display to a style that works with SuppressZeroFeet
    dimObj.UnitsFormat = acDimLArchitectural
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to suppress or view the display of zero feet in the dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero feet for the dimension value
            dimObj.SuppressZeroFeet = Not (dimObj.SuppressZeroFeet)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SuppressZeroFeet()
    ;; This example creates an aligned dimension in model space and
    ;; uses SuppressZeroFeet to suppress or view the display of
    ;; zero feet in the alternate dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Set the dimension display to a style that works with SuppressZeroFeet
    (vla-put-UnitsFormat dimObj acDimLArchitectural)
    ;; Toggle the display of zero feet for the dimension value
    (vla-put-SuppressZeroFeet dimObj (if (= (vla-get-SuppressZeroFeet dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero feet toggled.\")
    ;; Toggle the display of zero feet for the dimension value back to previous state
    (vla-put-SuppressZeroFeet dimObj (if (= (vla-get-SuppressZeroFeet dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero feet toggled back.\")
)
")
("SuppressZeroInches" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-56A443E9-2A46-4775-B0BB-F43FD143C33E"
                      "
SuppressZeroInches Property (ActiveX)
Specifies the suppression of a zero inch measurement in dimension values.
Supported platforms: Windows only
Signature
VBA:
object.SuppressZeroInches
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero inch measurement.
    False: Do not suppress the display of a zero inch measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMZIN system variable for the given dimension.
Examples
VBA:
Sub Example_SuppressZeroInches()
   ' This example creates an aligned dimension in model space and
   ' uses SuppressZeroInches to suppress or view the display of
   ' zero inches in the dimension display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 12: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Set the dimension display to a style that works with SuppressZeroInches
    dimObj.UnitsFormat = acDimLArchitectural
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to suppress or view the display of zero inches in the dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero inches for the dimension value
            dimObj.SuppressZeroInches = Not (dimObj.SuppressZeroInches)
            ThisDrawing.Regen acAllViewports
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_SuppressZeroInches()
    ;; This example creates an aligned dimension in model space and
    ;; uses SuppressZeroInches to suppress or view the display of
    ;; zero inches in the dimension display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 12 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Set the dimension display to a style that works with SuppressZeroInches
    (vla-put-UnitsFormat dimObj acDimLArchitectural)
    ;; Toggle the display of zero inches for the dimension value
    (vla-put-SuppressZeroInches dimObj (if (= (vla-get-SuppressZeroInches dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero inches toggled.\")
    ;; Toggle the display of zero inches for the dimension value back to previous state
    (vla-put-SuppressZeroInches dimObj (if (= (vla-get-SuppressZeroInches dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero inches toggled back.\")
)
")
("SurfTrimAssociativity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D49BBA98-D9DC-4263-AE67-B938A5088F2B"
"
SurfTrimAssociativity Property (ActiveX)
Specifies if associativity is maintained between the surface and the objects used to trim the object.
Supported platforms: Windows only
Signature
VBA:
object.SurfTrimAssociativity
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant
    True: Associativity is maintained between the surface and the trim objects.
    False: Associativity is not maintained between the surface and the trim objects.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("SurfaceNormals" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8318D259-D322-40F0-A9D2-F378A764E979"
                  "
SurfaceNormals Property (ActiveX)
Specifies for which cross-section curves the surface is normal to the cross section.
Supported platforms: Windows only
Signature
VBA:
object.SurfaceNormals
object
    Type: LoftedSurface
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The cross-section curves that are normal to the surface.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("SurfaceType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-70802F5D-DFBA-4061-B336-BD3716F97BC2"
"
SurfaceType Property (ActiveX)
Indicates the type of surface.
Supported platforms: Windows only
Signature
VBA:
object.SurfaceType
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The objects this property applies to.
Property Value
Read-only: Yes
Type: String
    AcadExtrudedSurface: Extrusion
    AcadRevolvedSurface: Revolve
    AcadLoftedSurface: Loft with cross sections only
    AcadLoftedSurface: Loft with guide curves
    AcadLoftedSurface: Loft with path
    AcadSweptSurface: Sweep
    AcadPlaneSurface: Planar
    AcadNetworkSurface: Network
    AcadNurbSurface: NURBS
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("SymbolPosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16B76881-7C0C-44F5-ABAB-BE7D0522C166"
                  "
SymbolPosition Property (ActiveX)
Specifies placement of the arc length dimension symbol.
Supported platforms: Windows only
Signature
VBA:
object.SymbolPosition
object
    Type: DimArcLength
    The object this property applies to.
Property Value
Read-only: No
Type: AcDimArcLengthSymbol enum
    acSymAbove
    acSymInFront
    acSymNone
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TabOrder" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F1825AD5-8E40-4566-B062-7B20DD1A98A7"
            "
TabOrder Property (ActiveX)
Specifies the tab order of a layout.
Supported platforms: Windows only
Signature
VBA:
object.TabOrder
object
    Type: Layout
    The object this property applies to.
Property Value
Read-only: No
Type: Long
The tab order for the layout.
Remarks
This property controls the order in which the layouts are displayed in the tab control. The tab order should be unique and sequential among all layouts in the database.
The model space tab must have a tab order of zero (0). Paper space tabs must have a tab order of 1 or greater.
Examples
VBA:
Sub Example_TabOrder()
    ' This example creates two new Layouts, sets the TabOrder of the Layouts to be
    ' in alphabetic order, and displays a list of Layouts in the order they appear
    ' in the tabs.
    
    Dim Layout1 As ACADLayout, Layout2 As ACADLayout
    Dim SortLayoutRight As ACADLayout, SortLayoutLeft As ACADLayout
    Dim SortIt As New Collection
    Dim TabCount As Long, SortCount As Long, TabOrder As Long
    Dim TabName As String, SortText As String, msg As String
    Dim tempLayout As ACADLayout
    Dim AddedTab As Boolean
        
    ' Create new Layouts
    On Error Resume Next
    Set Layout1 = ThisDrawing.Layouts.Add(\"Z VIEW\")
    Set Layout2 = ThisDrawing.Layouts.Add(\"A VIEW\")
    On Error GoTo 0
    
    ' Alphabetize internally
    For TabCount = 0 To (ThisDrawing.Layouts.count - 1)
        AddedTab = False
        
        TabName = ThisDrawing.Layouts(TabCount).name
        
        If TabName = \"Model\" Then GoTo SKIP                 ' Skip modelspace
        
        If SortIt.count = 0 Then
            SortIt.Add TabName                              ' Add to beginning of list
        Else
            For SortCount = 1 To SortIt.count               ' Add to list by string
                SortText = SortIt(SortCount)
                If StrComp(TabName, SortText, vbTextCompare) = -1 Then
                    If SortCount = 1 Then
                        SortIt.Add TabName                  ' Add as first item
                    Else
                        SortIt.Add TabName, , SortCount     ' Add as previous item
                    End If
                    AddedTab = True
                    Exit For
                End If
            Next
            
            If Not (AddedTab) Then SortIt.Add TabName, , , SortIt.count  ' Add if we haven't yet
        End If
SKIP:
    Next
    
    ' Write new ACAD tab order
    For SortCount = 1 To SortIt.count
        Set tempLayout = ThisDrawing.Layouts(SortIt(SortCount))
        tempLayout.TabOrder = SortCount
    Next
    
    '-------------------------------
    ' Read and display New Tab Order
    '-------------------------------
    msg = \"The tab order is now set to: \" & vbCrLf & vbCrLf
    For TabCount = 0 To (ThisDrawing.Layouts.count - 1)
        TabName = ThisDrawing.Layouts(TabCount).name
        If TabName = \"Model\" Then GoTo SKIP2                ' Don't show modelspace
        TabOrder = ThisDrawing.Layouts(TabCount).TabOrder
        msg = msg & \"(\" & TabOrder & \")\" & vbTab & TabName & vbCrLf
SKIP2:
    Next
    
    MsgBox msg, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TabOrder()
    ;; This example creates two new Layouts, sets the TabOrder of the Layouts to be
    ;; in alphabetic order, and displays a list of Layouts in the order they appear
    ;; in the tabs.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
        
    ;; Create new Layouts
    (setq Layout1 (vla-Add (vla-get-Layouts doc) \"Z VIEW\"))
    (setq Layout2 (vla-Add (vla-get-Layouts doc) \"A VIEW\"))
    (setq SortIt (list)
          TabCount 0)
    ;; Alphabetize internally
    (while (>= (1- (vla-get-Count (vla-get-Layouts doc))) TabCount)
        (setq AddedTab :vlax-false)
        
        (setq TabName (vla-get-Name (vla-Item (vla-get-Layouts doc) TabCount)))
        
        (if (/= (strcase TabName) \"MODEL\")                  ;; Skip modelspace
            (progn
	               (setq SortIt (append SortIt (list TabName)))        ;; Add to beginning of list
            )
        )
        (setq TabCount (1+ TabCount))
    )
    ;; Sort layout names
    (setq SortIt (acad_strlsort SortIt)
          SortCount 1)
    ;; Update tab order
    (foreach name SortIt
        (progn
            (setq tempLayout (vla-Item (vla-get-Layouts doc) name))
            (vla-put-TabOrder tempLayout SortCount)
            (setq SortCount (1+ SortCount))
        )
    )
    
    ;;-------------------------------
    ;; Read and display New Tab Order
    ;;-------------------------------
    (setq msg \"The tab order is now set to: \n\"
          TabCount 0)
    (while (>= (1- (vla-get-Count (vla-get-Layouts doc))) TabCount)
        (setq TabName (vla-get-Name (vla-Item (vla-get-Layouts doc) TabCount)))
        
        (if (/= (strcase TabName) \"MODEL\")                  ;; Skip modelspace
            (progn
                (setq TabOrder (vla-get-TabOrder (vla-Item (vla-get-Layouts doc) TabCount)))
                (setq msg (strcat msg \"(\" (itoa TabOrder) \")    \" TabName \"\n\"))
            )
        )
        (setq TabCount (1+ TabCount))
    )
    
    (alert msg)
)
")
("TableBreakFlowDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-02573DA8-EEA4-419E-A6DA-1F97873F4E3B"
"
TableBreakFlowDirection Property (ActiveX)
Determines the direction that parts of the table flow.
Supported platforms: Windows only
Signature
VBA:
object.TableBreakFlowDirection
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: AcTableFlowDirection enum
    acTableFlowDownOrUp
    acTableFlowLeft
    acTableFlowRight
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TableBreakHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3A9B60BE-C4E9-4F6F-BD8D-DADE071008B6"
                    "
TableBreakHeight Property (ActiveX)
Sets the breaking height for the initial table part and any other table parts that do not have manual heights set.
Supported platforms: Windows only
Signature
VBA:
object.TableBreakHeight
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Value for the break height.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_BreakHeight()
    ' This example creates a table object and then breaks it into
    ' two tables.
    
    ' Create a new table objetc in model space
    Dim pt(2) As Double
    
    Dim modelSpace As AcadModelSpace
    Set modelSpace = ThisDrawing.modelSpace
    
    Dim table As AcadTable
    Set table = modelSpace.AddTable(pt, 5, 5, 10, 30)
    
    table.EnableBreak = True
    table.BreakSpacing = 3.5
    table.TableBreakHeight = 35#
    table.AllowManualHeights = True
    table.SetBreakHeight 0, 20#
    table.SetBreakHeight 1, 35#
    
    ZoomExtents
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_BreakHeight()
    ;; This example creates a table object and then breaks it into
    ;; two tables.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new table objetc in model space
    (setq pt (vlax-3d-point 0 0 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq table (vla-Addtable modelSpace pt 5 5 10 30))
    (vla-put-EnableBreak table :vlax-true)
    (vla-put-BreakSpacing table 3.5)
    (vla-put-TableBreakHeight table 35.0)
    (vla-put-AllowManualHeights table :vlax-true)
    (vla-SetBreakHeight table 0 20.0)
    (vla-SetBreakHeight table 1 35.0)
    (vla-ZoomExtents acadObj)
)
")
("TableStyleOverrides" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0632BC19-5BBD-4B7B-A9EB-7B93D273D443"
"
TableStyleOverrides Property (ActiveX)
Specifies the table style overrides.
Supported platforms: Windows only
Signature
VBA:
object.TableStyleOverrides
object
    Type: Table
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant; acTableStyleOverrides enum
    acCellAlign
    acCellBackgroundColor
    acCellBackgroundFillNone
    acCellBottomGridColor
    acCellBottomGridLineWeight
    acCellBottomVisibility
    acCellContentColor
    acCellDataType
    acCellLeftGridColor
    acCellLeftGridLineWeight
    acCellLeftVisibility
    acCellRightGridColor
    acCellRightGridLineWeight
    acCellRightVisibility
    acCellTextHeight
    acCellTextStyle
    acCellTopGridColor
    acCellTopGridLineWeight
    acCellTopVisibility
    acDataHorzBottomColor
    acDataHorzBottomLineWeight
    acDataHorzBottomVisibility
    acDataHorzInsideColor
    acDataHorzInsideLineWeight
    acDataHorzInsideVisibility
    acDataHorzTopColor
    acDataHorzTopLineWeight
    acDataHorzTopVisibility
    acDataRowAlignment
    acDataRowColor
    acDataRowDataType
    acDataRowFillColor
    acDataRowFillNone
    acDataRowTextHeight
    acDataRowTextStyle
    acDataVertInsideColor
    acDataVertInsideLineWeight
    acDataVertInsideVisibility
    acDataVertLeftColor
    acDataVertLeftLineWeight
    acDataVertLeftVisibility
    acDataVertRightColor
    acDataVertRightLineWeight
    acDataVertRightVisibility
    acFlowDirection
    acHeaderHorzBottomColor
    acHeaderHorzBottomLineWeight
    acHeaderHorzBottomVisibility
    acHeaderHorzInsideColor
    acHeaderHorzInsideLineWeight
    acHeaderHorzInsideVisibility
    acHeaderHorzTopColor
    acHeaderHorzTopLineWeight
    acHeaderHorzTopVisibility
    acHeaderRowAlignment
    acHeaderRowColor
    acHeaderRowDataType
    acHeaderRowFillColor
    acHeaderRowFillNone
    acHeaderRowTextHeight
    acHeaderRowTextStyle
    acHeaderSuppressed
    acHeaderVertInsideColor
    acHeaderVertInsideLineWeight
    acHeaderVertInsideVisibility
    acHeaderVertLeftColor
    acHeaderVertLeftLineWeight
    acHeaderVertLeftVisibility
    acHeaderVertRightColor
    acHeaderVertRightLineWeight
    acHeaderVertRightVisibility
    acHorzCellMargin
    acTitleHorzBottomColor
    acTitleHorzBottomLineWeight
    acTitleHorzBottomVisibility
    acTitleHorzInsideColor
    acTitleHorzInsideLineWeight
    acTitleHorzInsideVisibility
    acTitleHorzTopColor
    acTitleHorzTopLineWeight
    acTitleHorzTopVisibility
    acTitleRowAlignment
    acTitleRowColor
    acTitleRowDataType
    acTitleRowFillColor
    acTitleRowFillNone
    acTitleRowTextHeight
    acTitleRowTextStyle
    acTitleSuppressed
    acTitleVertInsideColor
    acTitleVertInsideLineWeight
    acTitleVertInsideVisibility
    acTitleVertLeftColor
    acTitleVertLeftLineWeight
    acTitleVertLeftVisibility
    acTitleVertRightColor
    acTitleVertRightLineWeight
    acTitleVertRightVisibility
    acVertCellMargin
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TagString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1F539FFB-F623-459A-926D-DD8D78147856"
             "
TagString Property (ActiveX)
Specifies the tag string of the object.
Supported platforms: Windows only
Signature
VBA:
object.TagString
object
    Type: Attribute, AttributeReference, PopupMenu, PopupMenuItem, Toolbar, ToolbarItem
    The objects this property applies to.
Property Value
Read-only: No; except for PopupMenu and Toolbar objects
Type: String
The tag string of the object.
Remarks
Attribute, AttributeReference: This string identifies each occurrence of the attribute. Enter any characters except spaces or exclamation points. AutoCAD changes lowercase letters to uppercase.
PopupMenu, PopupMenuItem, Toolbar, ToolbarItem: A tag, or name tag, is a string consisting of alphanumeric and underscore (_) characters. This string uniquely identifies the item within a given customization file. This string is automatically assigned when the object is created and is used internally by AutoCAD for toolbar and menu identification. Most developers do not need this level of identification and can safely ignore the TagString property.
Examples
VBA:
Sub Example_TagString()
    ' This example creates an attribute definition in model space.
    ' It then queries the tag string for the attribute, changes
    ' the tag string, and displays the new tag string.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"NEW_TAG\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
    ' Find the current tag string for the attribute
    tag = attributeObj.TagString
    MsgBox \"The current tag string for the attribute is \" & tag, , \"TagString Example\"
    
    ' Change the tag string for the attribute
    attributeObj.TagString = \"UPDATED_TAG\"
    attributeObj.Update
    tag = attributeObj.TagString
    MsgBox \"The new tag string for the attribute is \" & tag, , \"TagString Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TagString()
    ;; This example creates an attribute definition in model space.
    ;; It then queries the tag string for the attribute, changes
    ;; the tag string, and displays the new tag string.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0) 
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"NEW_TAG\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
    
    ;; Find the current tag string for the attribute
    (setq tag (vla-get-TagString attributeObj))
    (alert (strcat \"The current tag string for the attribute is \" tag))
    
    ;; Change the tag string for the attribute
    (vla-put-TagString attributeObj \"UPDATED_TAG\")
    (vla-Update attributeObj)
    (setq tag (vla-get-TagString attributeObj))
    (alert (strcat \"The new tag string for the attribute is \" tag))
)
")
("TaperAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-05414541-4946-44C8-93E3-EE36AF4F4D28"
              "
TaperAngle Property (ActiveX)
Specifies the taper angle of the extrusion.
Supported platforms: Windows only
Signature
VBA:
object.TaperAngle
object
    Type: ExtrudedSurface
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_ANGLE
The taper angle of the extrusion.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("Target" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F85C09CF-FA62-4579-9274-BB6B40AF6728"
"
Target Property (ActiveX)
Specifies the target point for the view or viewport.
Supported platforms: Windows only
Signature
VBA:
object.Target
object
    Type: PViewport, View, Viewport
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D WCS coordinate representing the target point.
Remarks
The line of sight is drawn from the center to the target point.
Examples
VBA:
Sub Example_Target()
    ' This example changes the target for a model space viewport.
    
    ' Create a new model space viewport
    Dim viewportObj As AcadViewport
    Set viewportObj = ThisDrawing.Viewports.Add(\"NewViewport\")
    
    ' Add a circle
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 0: center(1) = 0: center(2) = 0
    radius = 1
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(center, radius)
    
    ' Find the current target
    Dim currTarget As Variant
    currTarget = viewportObj.target
    MsgBox \"The current target is \" & viewportObj.target(0) & \", \" & viewportObj.target(1) & \", \" & viewportObj.target(2), , \"Target Example\"
    
    ' Change the target
    Dim newTarget(0 To 2) As Double
    newTarget(0) = 2#: newTarget(1) = 2#: newTarget(2) = 0
    viewportObj.target = newTarget
    ThisDrawing.ActiveViewport = viewportObj
    ThisDrawing.Regen acAllViewports
    MsgBox \"The new target is \" & viewportObj.target(0) & \", \" & viewportObj.target(1) & \", \" & viewportObj.target(2), , \"Target Example\"
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Target()
    ;; This example changes the target for a model space viewport.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create a new model space viewport
    (setq viewportObj (vla-Add (vla-get-Viewports doc) \"NewViewport\"))
    
    ;; Add a circle
    (setq center (vlax-3d-point 0 0 0)
          radius 1)
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq circleObj (vla-AddCircle modelSpace center radius))
    
    ;; Find the current target
    (setq currTarget (vlax-variant-value (vla-get-Target viewportObj)))
    (alert (strcat \"The current target is \" (rtos (vlax-safearray-get-element currTarget 0) 2) \", \"
                                            (rtos (vlax-safearray-get-element currTarget 1) 2) \", \"
                                            (rtos (vlax-safearray-get-element currTarget 2) 2)))
    
    ;; Change the target
    (setq newTarget (vlax-3d-point 2 2 0))
    (vla-put-Target viewportObj newTarget)
    (vla-put-ActiveViewport doc viewportObj)
    (vla-Regen doc acAllViewports)
    (setq currTarget (vlax-variant-value (vla-get-Target viewportObj)))
    (alert (strcat \"The new target is \" (rtos (vlax-safearray-get-element currTarget 0) 2) \", \"
                                        (rtos (vlax-safearray-get-element currTarget 1) 2) \", \"
                                        (rtos (vlax-safearray-get-element currTarget 2) 2)))
)
")
("TemplateId" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1063242A-F40B-4B07-8C7D-82DD57615B0F"
              "
TemplateId Property (ActiveX)
Specifies the template ID for the table style.
Supported platforms: Windows only
Signature
VBA:
object.TemplateId
object
    Type: TableStyle
    The object this property applies to.
Property Value
Read-only: No
Type: LONG_PTR
The template ID for the table style.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextAlignmentPoint" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-13212A9D-A3B9-4957-B1B7-E1A77E092582"
                      "
TextAlignmentPoint Property (ActiveX)
Specifies the alignment point for text and attributes.
Supported platforms: Windows only
Signature
VBA:
object.TextAlignmentPoint
object
    Type: Attribute, AttributeReference, Text
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D WCS coordinate representing the alignment point of the object.
Remarks
Text: This property will be reset to 0, 0, 0 and will become read-only when the Alignment property is set to acAlignmentLeft. To position text whose justification is left, fit, or aligned, use the InsertionPoint property.
Examples
VBA:
Sub Example_TextAlignmentPoint()
    ' This example creates a text object in model space.
    ' It then changes the TextAlignmentPoint and HorizontalAlignment
    ' properties of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    MsgBox \"The TextAlignmentPoint is set to the default \" & _
           textObj.TextAlignmentPoint(0) & \", \" & _
           textObj.TextAlignmentPoint(1) & \", \" & _
           textObj.TextAlignmentPoint(2), vbInformation, _
           \"TextAlignmentPoint Example\"
    
    ' Change the value of the HorizontalAlignment and
    ' TextAlignmentPoint properties.
    ' Note that the HorizontalAlignment property must be changed first,
    ' and to a value that requires the TextAlignmentPoint, before the
    ' TextAlignmentPoint property will allow a value to be set.
    Dim alignmentPoint(0 To 2) As Double
    alignmentPoint(0) = 5: alignmentPoint(1) = 3: alignmentPoint(2) = 0
    textObj.HorizontalAlignment = acHorizontalAlignmentFit
    textObj.TextAlignmentPoint = alignmentPoint
    ZoomAll
    MsgBox \"The TextAlignmentPoint is set to \" & _
           textObj.TextAlignmentPoint(0) & \", \" & _
           textObj.TextAlignmentPoint(1) & \", \" & _
           textObj.TextAlignmentPoint(2) & vbCrLf & _
           \"The HorizontalAlignment is set to acHorizontalAlignmentFit\", _
           vbInformation, \"TextAlignmentPoint Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextAlignmentPoint()
    ;; This example creates a text object in model space.
    ;; It then changes the TextAlignmentPoint and HorizontalAlignment
    ;; properties of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 3 3 0)  
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))  
    (vla-ZoomAll acadObj)
    (setq alignmentPoint (vlax-variant-value (vla-get-TextAlignmentPoint textObj)))
    (alert (strcat \"The TextAlignmentPoint is set to the default \" (rtos (vlax-safearray-get-element alignmentPoint 0) 2) \", \"
                                                                   (rtos (vlax-safearray-get-element alignmentPoint 1) 2) \", \"
                                                                   (rtos (vlax-safearray-get-element alignmentPoint 2) 2)))
    
    ;; Change the value of the HorizontalAlignment and
    ;; TextAlignmentPoint properties.
    ;; Note that the HorizontalAlignment property must be changed first,
    ;; and to a value that requires the TextAlignmentPoint, before the
    ;; TextAlignmentPoint property will allow a value to be set.
    (setq alignmentPoint (vlax-3d-point 5 3 0))
    (vla-put-Alignment textObj acHorizontalAlignmentFit)
    (vla-put-TextAlignmentPoint textObj alignmentPoint)
    (vla-ZoomAll acadObj)
    (setq alignmentPoint (vlax-variant-value (vla-get-TextAlignmentPoint textObj)))
    (alert (strcat \"The TextAlignmentPoint is set to \" (rtos (vlax-safearray-get-element alignmentPoint 0) 2) \", \"
                                                       (rtos (vlax-safearray-get-element alignmentPoint 1) 2) \", \"
                                                       (rtos (vlax-safearray-get-element alignmentPoint 2) 2)))
)
")
("TextAlignmentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-469593B2-AA9D-4069-A301-1E25108BBD29"
"
TextAlignmentType Property (ActiveX)
Specifies the text alignment type of the mleader style.
Supported platforms: Windows only
Signature
VBA:
object.TextAlignmentType
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcTextAlignmentType enum
The text alignment type.
    acCenterAlignment
    acLeftAlignment
    acRightAlignment
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextAngleType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1F067E52-9811-43E9-BE82-1D3104C4B30C"
                 "
TextAngleType Property (ActiveX)
Specifies the TextAngleType of the mleaderstyle.
Supported platforms: Windows only
Signature
VBA:
object.TextAngleType
object
    Type: MLeaderStyle
    The object this property applies to.
Property Value
Read-only: No
Type: AcTextAngleType enum
The text angle type.
    acAlwaysRightReadingAngle
    acHorizontalAngle
    acInsertAngle
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextAttachmentDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D8CB606-2288-4B2D-9669-E1330F71CF56"
"
TextAttachmentDirection Property (ActiveX)
Specifies if the text content uses a horizontal or vertical attachment direction.
Supported platforms: Windows only
Signature
VBA:
object.TextAttachmentDirection
object
    Type: MLeader, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: AcTextAttachmentDirection enum
    acAttachmentHorizontal: Horizontal attachment inserts the leader to the left or right of the text content. A horizontal attachment includes a landing line between the text and the leader.
    acAttachmentVertical: Inserts the leader at the top or bottom of the text content. A vertical attachment does not include a landing line between the text and the leader.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
				                              1 2 0
				                              2 2 0
				                              3 2 0
				                              4 4 0
				                             )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextBackgroundFill" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6BBAC0FF-9A52-4D8F-9944-61D108E18DF6"
"
TextBackgroundFill Property (ActiveX)
Specifies if background mask ought to be used.
Supported platforms: Windows only
Signature
VBA:
object.TextBackgroundFill
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Background mask is applied.
    False: Background mask is not applied.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
				                              1 2 0
				                              2 2 0
				                              3 2 0
				                              4 4 0
				                             )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextBottomAttachmentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-955DB76A-5A54-4ABF-B2AD-8FC5732EDC40"
                            "
TextBottomAttachmentType Property (ActiveX)
Specifies the attachment of the leader to the bottom of the text content.
Supported platforms: Windows only
Signature
VBA:
object.TextBottomAttachmentType
object
    Type: MLeader, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: AcVerticalTextAttachmentType enum
    acAttachmentCenter: Leader attachment is centered with the text content
    acAttachmentLinedCenter: Inserts an underline between the leader attachment and the text content
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-36320A64-4513-4249-9FF0-ECF19C0B6EC1"
             "
TextColor Property (ActiveX)
Specifies the color of the text for dimension and tolerance objects.
Supported platforms: Windows only
Signature
VBA:
object.TextColor
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, MLeaderStyle, Tolerance
    The objects this property applies to.
Property Value
Read-only: No
Type: acColor enum
Use a color index number from 0 to 256, or one of the constants listed here:
    acByBlock
    acByLayer
    acRed
    acYellow
    acGreen
    acCyan
    acBlue
    acMagenta
    acWhite
Remarks
Colors can be set and read as numeric index values ranging from 0 to 256. Constants have been provided for the standard seven colors, as well as the BYBLOCK and BYLAYER designations.
If you use acByBlock, AutoCAD draws new objects in the default color (white or black, depending on your configuration) until they are grouped into the block. When the block is inserted in the drawing, the objects in the block inherit the current setting of the color property.
If you use acByLayer, new objects assume the color of the layer upon which they are drawn.
Note: This property overrides the value of the DIMCLRT system variable for the given dimension or tolerance object.
Examples
VBA:
Sub Example_TextColor()
   ' This example creates an aligned dimension in model space and
   ' uses the TextColor property to toggle the dimension text color to red
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 7: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current dimension text color
    MsgBox \"The dimension text color for this object is currently set to: \" & dimObj.TextColor
    ' Change the dimension text color
    dimObj.TextColor = acRed
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current dimension text color
    MsgBox \"The dimension text color for this object is now set to: \" & dimObj.TextColor & \" (Red)\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextColor()
    ;; This example creates an aligned dimension in model space and
    ;; uses the TextColor property to toggle the dimension text color to red
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 7 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current dimension text color
    (alert (strcat \"The dimension text color for this object is currently set to: \" (itoa (vla-get-TextColor dimObj))))
    ;; Change the dimension text color
    (vla-put-TextColor dimObj acRed)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current dimension text color
    (alert (strcat \"The dimension text color for this object is now set to: \" (itoa (vla-get-TextColor dimObj)) \" (Red)\"))
)
")
("TextDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A1206235-CDA8-4BCB-B542-F531286858E7"
"
TextDirection Property (ActiveX)
Specifies the drawing direction of the MText.
Supported platforms: Windows only
Signature
VBA:
object.TextDirection
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: AcDrawingDirection enum
    acBottomToTop
    acByStyle
    acLeftToRight
    acRightToLeft
    acTopToBottom
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextFill" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7FF42A72-A5EE-4841-9B03-41B3967FD1F4"
"
TextFill Property (ActiveX)
Sets fill color on or off.
Supported platforms: Windows only
Signature
VBA:
object.TextFill
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Fill color is enabled
    False: Fill color is disabled
Remarks
Note: This property overrides the value of the DIMTFILL system variable.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextFillColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8A68AE6B-B5A3-436D-A787-CDF60D5D99DE"
                 "
TextFillColor Property (ActiveX)
Sets text fill color.
Supported platforms: Windows only
Signature
VBA:
object.TextFillColor
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: ACAD_COLOR
The text fill color assigned to the object.
Remarks
Note: This property overrides the value of the DIMTFILLCLR system variable.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextFrameDisplay" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-64ECDCFA-2CF2-4787-8722-595F6B2E1677"
"
TextFrameDisplay Property (ActiveX)
Toggles the display of frames around the multileader text content with a text box or for text objects instead of displaying the text itself.
Supported platforms: Windows only
Signature
VBA:
object.TextFrameDisplay
object
    Type: DatabasePreferences, GeoPositionMarker, MLeader
    The objects this property applies to.
Property Value - DatabasePreferences
Read-only: No
Type: Boolean
    True: Displays the frame around the extents of the text, but does not display the text itself.
    False: Displays the full text.
Property Value - GeoPositionMarker, MLeader
Read-only: No
Type: Boolean
    True: Frame is displayed
    False: Frame is not displayed
Remarks
The initial value for this property is False.
DatabasePreferences: After you enable or disable this option, you must use the Regen method to update the display.
Note: The value of this property for the DatabasePreferences object is stored in the QTEXTMODE system variable.
Examples
VBA:
Sub Example_TextFrameDisplay()
    ' This example returns the current setting of
    ' TextFrameDisplay. It then changes the value, and finally
    ' it resets the value back to the original setting.
    
    Dim currTextFrameDisplay As Boolean
    
    ' Retrieve the current TextFrameDisplay value
    currTextFrameDisplay = ThisDrawing.Preferences.TextFrameDisplay
    MsgBox \"The current value for TextFrameDisplay is \" & Preferences.TextFrameDisplay, vbInformation, \"TextFrameDisplay Example\"
    
    ' Change the value for TextFrameDisplay
    ThisDrawing.Preferences.TextFrameDisplay = Not (currTextFrameDisplay)
    MsgBox \"The new value for TextFrameDisplay is \" & Preferences.TextFrameDisplay, vbInformation, \"TextFrameDisplay Example\"
    
    ' Reset TextFrameDisplay to its original value
    ThisDrawing.Preferences.TextFrameDisplay = currTextFrameDisplay
    MsgBox \"The TextFrameDisplay value is reset to \" & Preferences.TextFrameDisplay, vbInformation, \"TextFrameDisplay Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextFrameDisplay()
    ;; This example returns the current setting of
    ;; TextFrameDisplay. It then changes the value, and finally
    ;; it resets the value back to the original setting.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
    
    ;; Retrieve the current TextFrameDisplay value
    (setq currTextFrameDisplay (vla-get-TextFrameDisplay preferences))
    (alert (strcat \"The current value for TextFrameDisplay is \" (if (= currTextFrameDisplay :vlax-true) \"True\" \"False\")))
    
    ;; Change the value for TextFrameDisplay
    (vla-put-TextFrameDisplay preferences (if (= currTextFrameDisplay :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The new value for TextFrameDisplay is \" (if (= (vla-get-TextFrameDisplay preferences) :vlax-true) \"True\" \"False\")))
    
    ;; Reset TextFrameDisplay to its original value
    (vla-put-TextFrameDisplay preferences currTextFrameDisplay)
    (alert (strcat \"The TextFrameDisplay value is reset to \" (if (= (vla-get-TextFrameDisplay preferences) :vlax-true) \"True\" \"False\")))
)
")
("TextGap" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C9C31690-D036-42A8-871B-7577CBB3427D"
"
TextGap Property (ActiveX)
Specifies the distance between the dimension text and the dimension line when you break the dimension line to accommodate dimension text.
Supported platforms: Windows only
Signature
VBA:
object.TextGap
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Leader
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
A real number specifying the gap distance.
Remarks
This property also sets the gap between the annotation and a hook line on a Leader object.
A negative value creates basic dimensioning (dimension text with a box around the text).
Note: This property overrides the value of the DIMGAP system variable for the given dimension.
Examples
VBA:
Sub Example_TextGap()
   ' This example creates an aligned dimension in model space and
   ' uses the TextGap property to increase the distance between the
   ' dimension line and the dimension text
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current dimension gap
    MsgBox \"The dimension gap for this object is currently set to: \" & dimObj.TextGap
    ' Increase the distance of the dimension gap
    dimObj.TextGap = 0.5
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current dimension gap
    MsgBox \"The dimension gap for this object is now set to: \" & dimObj.TextGap
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextGap()
    ;; This example creates an aligned dimension in model space and
    ;; uses the TextGap property to increase the distance between the
    ;; dimension line and the dimension text
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current dimension gap
    (alert (strcat \"The dimension gap for this object is currently set to: \" (rtos (vla-get-TextGap dimObj) 2)))
    ;; Increase the distance of the dimension gap
    (vla-put-TextGap dimObj 0.5)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current dimension gap
    (alert (strcat \"The dimension gap for this object is now set to: \" (rtos (vla-get-TextGap dimObj) 2)))
)
")
("TextGenerationFlag" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5CF97D09-694B-4560-BA20-7981D7B3E5FF"
                      "
TextGenerationFlag Property (ActiveX)
Specifies the attribute text generation flag.
Supported platforms: Windows only
Signature
VBA:
object.TextGenerationFlag
object
    Type: Attribute, AttributeReference, Text, TextStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: acTextGenerationFlag enum
    acTextFlagBackward
    acTextFlagUpsideDown
Remarks
To specify both flags, add them together.
Examples
VBA:
Sub Example_TextGenerationFlag()
    ' This example creates a text object in model space.
    ' It then changes the TextGenerationFlag of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    MsgBox \"The TextGenerationFlag has not been set.\", vbInformation, \"TextGenerationFlag Example\"
    
    ' Change the value of the TextGenerationFlag
    textObj.TextGenerationFlag = acTextFlagBackward
    ZoomAll
    MsgBox \"The TextGenerationFlag is set to acTextFlagBackward.\", vbInformation, \"TextGenerationFlag Example\"
    
    textObj.TextGenerationFlag = acTextFlagUpsideDown
    ZoomAll
    MsgBox \"The TextGenerationFlag is set to acTextFlagUpsideDown.\", vbInformation, \"TextGenerationFlag Example\"
    
    textObj.TextGenerationFlag = acTextFlagBackward + acTextFlagUpsideDown
    ZoomAll
    MsgBox \"The TextGenerationFlag is set to acTextFlagBackward + acTextFlagUpsideDown.\", vbInformation, \"TextGenerationFlag Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextGenerationFlag()
    ;; This example creates a text object in model space.
    ;; It then changes the TextGenerationFlag of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 3 3 0)  
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))  
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag has not been set.\")
    
    ;; Change the value of the TextGenerationFlag
    (vla-put-TextGenerationFlag textObj acTextFlagBackward)
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag is set to acTextFlagBackward.\")
    
    (vla-put-TextGenerationFlag textObj acTextFlagUpsideDown)
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag is set to acTextFlagUpsideDown.\")
    
    (vla-put-TextGenerationFlag textObj (+ acTextFlagBackward acTextFlagUpsideDown))
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag is set to acTextFlagBackward + acTextFlagUpsideDown.\")
)
")
("TextHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-24195201-FDD5-4C34-A3D4-2DDC21163B90"
              "
TextGenerationFlag Property (ActiveX)
Specifies the attribute text generation flag.
Supported platforms: Windows only
Signature
VBA:
object.TextGenerationFlag
object
    Type: Attribute, AttributeReference, Text, TextStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: acTextGenerationFlag enum
    acTextFlagBackward
    acTextFlagUpsideDown
Remarks
To specify both flags, add them together.
Examples
VBA:
Sub Example_TextGenerationFlag()
    ' This example creates a text object in model space.
    ' It then changes the TextGenerationFlag of the text object.
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    ZoomAll
    MsgBox \"The TextGenerationFlag has not been set.\", vbInformation, \"TextGenerationFlag Example\"
    
    ' Change the value of the TextGenerationFlag
    textObj.TextGenerationFlag = acTextFlagBackward
    ZoomAll
    MsgBox \"The TextGenerationFlag is set to acTextFlagBackward.\", vbInformation, \"TextGenerationFlag Example\"
    
    textObj.TextGenerationFlag = acTextFlagUpsideDown
    ZoomAll
    MsgBox \"The TextGenerationFlag is set to acTextFlagUpsideDown.\", vbInformation, \"TextGenerationFlag Example\"
    
    textObj.TextGenerationFlag = acTextFlagBackward + acTextFlagUpsideDown
    ZoomAll
    MsgBox \"The TextGenerationFlag is set to acTextFlagBackward + acTextFlagUpsideDown.\", vbInformation, \"TextGenerationFlag Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextGenerationFlag()
    ;; This example creates a text object in model space.
    ;; It then changes the TextGenerationFlag of the text object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 3 3 0)  
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))  
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag has not been set.\")
    
    ;; Change the value of the TextGenerationFlag
    (vla-put-TextGenerationFlag textObj acTextFlagBackward)
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag is set to acTextFlagBackward.\")
    
    (vla-put-TextGenerationFlag textObj acTextFlagUpsideDown)
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag is set to acTextFlagUpsideDown.\")
    
    (vla-put-TextGenerationFlag textObj (+ acTextFlagBackward acTextFlagUpsideDown))
    (vla-ZoomAll acadObj)
    (alert \"The TextGenerationFlag is set to acTextFlagBackward + acTextFlagUpsideDown.\")
)
")
("TextInside" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-83FABE16-536B-4ED3-B24C-CBF60B3052F8"
              "
TextInside Property (ActiveX)
Specifies if the dimension text is to be drawn inside the extension lines.
Supported platforms: Windows only
Signature
VBA:
object.TextInside
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Force the dimension text between the extension lines.
    False: Draw dimension text inside the extension lines only if there is sufficient room.
Remarks
The initial value for this property is True.
Setting this property to False has varying results. For linear and angular dimensions, AutoCAD places text inside the extension lines if there is sufficient room. For radius and diameter dimensions that do not fit inside the circle or arc, this property has no effect and always forces the text outside the circle or arc.
Note: This property overrides the value of the DIMTIX system variable for the given dimension.
Examples
VBA:
Sub Example_TextInside()
    ' This example creates an aligned dimension in model space and
    ' allows the user to toggle, forcing the dimension text between the extension lines
    ' using the TextInside property
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentValue As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
Toggle:
    Select Case MsgBox(\"Press OK to toggle forcing the dimension text inside the extension lines\", vbOKCancel)
        Case vbOK
            ' Toggle forcing the dimension text inside the extension lines
            dimObj.TextInside = Not (dimObj.TextInside)
            ThisDrawing.Regen acAllViewports
            
            ' Read and display the new dimension TextInside value
            CurrentValue = IIf(dimObj.TextInside, \"is now\", \"is not\")
            MsgBox \"The dimension text \" & CurrentValue & \" forced inside the extension lines\"
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextInside()
    ;; This example creates an aligned dimension in model space and
    ;; allows the user to toggle, forcing the dimension text between the extension lines
    ;; using the TextInside property
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Toggle forcing the dimension text inside the extension lines
    (vla-put-TextInside dimObj (if (= (vla-get-TextInside dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
            
    ;; Read and display the new dimension TextInside value
    (setq CurrentValue (if (= (vla-get-TextInside dimObj) :vlax-true) \"is now\" \"is not\"))
    (alert (strcat \"The dimension text \" CurrentValue \" forced inside the extension lines\"))
    ;; Toggle forcing the dimension text inside the extension lines
    (vla-put-TextInside dimObj (if (= (vla-get-TextInside dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
            
    ;; Read and display the new dimension TextInside value
    (setq CurrentValue (if (= (vla-get-TextInside dimObj) :vlax-true) \"is now\" \"is not\"))
    (alert (strcat \"The dimension text \" CurrentValue \" forced inside the extension lines\"))
)
")
("TextInsideAlign" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-65DB8C65-CB53-4D2A-98B6-66F299A40297"
"
TextInsideAlign Property (ActiveX)
Specifies the position of dimension text inside the extension lines for all dimension types except ordinate.
Supported platforms: Windows only
Signature
VBA:
object.TextInsideAlign
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Align the text horizontally.
    False: Align the text with the dimension line.
Remarks
The initial value for this property is True.
This property is only available when the TextInside property is set to True.
Note: This property overrides the value of the DIMTIH system variable for the given dimension.
Examples
VBA:
Sub Example_TextInsideAlign()
    ' This example creates an aligned dimension in model space and
    ' allows the user to toggle the TextInsideAlign value for the dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 6: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    dimObj.TextInside = True    ' The TextInsideAlign property will only work
                                ' when this property is active
    
    ThisDrawing.Application.ZoomAll
Toggle:
    Select Case MsgBox(\"Press OK to toggle the TextInsideAlign value for this dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the TextInsideAlign value for this dimension
            dimObj.TextInsideAlign = Not (dimObj.TextInsideAlign)
            ThisDrawing.Regen acAllViewports
            
            ' Read and display the new dimension TextInsideAlign value
            MsgBox \"TextInsideAlign is currently set to: \" & dimObj.TextInsideAlign
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextInsideAlign()
    ;; This example creates an aligned dimension in model space and
    ;; allows the user to toggle the TextInsideAlign value for the dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 6 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    (vla-put-TextInside dimObj :vlax-true)    ;; The TextInsideAlign property will only work
                                              ;; when this property is active
    
    (vla-ZoomAll acadObj)
    ;; Toggle the TextInsideAlign value for this dimension
    (vla-put-TextInsideAlign dimObj (if (= (vla-get-TextInsideAlign dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
            
    ;; Read and display the new dimension TextInsideAlign value
    (alert (strcat \"TextInsideAlign is currently set to: \" (if (= (vla-get-TextInsideAlign dimObj) :vlax-true) \"True\" \"False\")))
    ;; Toggle the TextInsideAlign value for this dimension
    (vla-put-TextInsideAlign dimObj (if (= (vla-get-TextInsideAlign dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
            
    ;; Read and display the new dimension TextInsideAlign value
    (alert (strcat \"TextInsideAlign is currently set to: \" (if (= (vla-get-TextInsideAlign dimObj) :vlax-true) \"True\" \"False\")))
)
")
("TextJustify" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FB4F61A2-86F9-4174-8B4B-29E8DF255CE7"
               "
TextJustify Property (ActiveX)
Specifies the attachment point of the MText.
Supported platforms: Windows only
Signature
VBA:
object.TextJustify
object
    Type: GeoPositionMarker, MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: AcAttachmentPoint enum
    acAttachmentPointBottomCenter
    acAttachmentPointBottomLeft
    acAttachmentPointBottomRight
    acAttachmentPointMiddleCenter
    acAttachmentPointMiddleLeft
    acAttachmentPointMiddleRight
    acAttachmentPointTopCenter
    acAttachmentPointTopLeft
    acAttachmentPointTopRight
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextLeftAttachmentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3A9A5A13-3637-4196-B7C0-AE638488FB63"
                          "
TextLeftAttachmentType Property (ActiveX)
Specify how leaders on the left side connect with the text.
Supported platforms: Windows only
Signature
VBA:
object.TextLeftAttachmentType
object
    Type: MLeader, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: AcTextAttachmentType enum
    acAttachmentAllLine
    acAttachmentBottomLine
    acAttachmentBottomOfBottom
    acAttachmentBottomOfTop
    acAttachmentBottomOfTopLine
    acAttachmentMiddle
    acAttachmentMiddleOfBottom
    acAttachmentMiddleOfTop
    acAttachmentTopOfTop
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextLineSpacingDistance" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2774C8A1-ED35-464E-AFCE-876ADABB76C1"
                           "
TextLineSpacingDistance Property (ActiveX)
Specifies the line spacing distance of the MText content in the multileader object.
Supported platforms: Windows only
Signature
VBA:
object.TextLineSpacingDistance
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The line spacing distance of the MText content.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextLineSpacingFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D3999237-4C41-4A89-B97D-F8E841FBD32F"
                         "
TextLineSpacingFactor Property (ActiveX)
Specifies the line spacing factor of the MText content in the multileader object.
Supported platforms: Windows only
Signature
VBA:
object.TextLineSpacingFactor
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The line spacing factor of the MText content.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextLineSpacingStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-107D304C-38D4-4F79-8518-C7C57B5F40E7"
"
TextLineSpacingStyle Property (ActiveX)
Specifies the line spacing style of the MText content in the multileader object.
Supported platforms: Windows only
Signature
VBA:
object.TextLineSpacingStyle
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: AcLineSpacingStyle enum
The line spacing style of the MText content.
    acLineSpacingStyleAtLeast
    acLineSpacingStyleExactly
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextMovement" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BD0CF26B-A928-4C51-AE8A-04C6CBC4012D"
                "
TextMovement Property (ActiveX)
Specifies how dimension text is drawn when text is moved.
Supported platforms: Windows only
Signature
VBA:
object.TextMovement
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimTextMovement enum
    acDimLineWithText: The dimension line follows the text.
    acMoveTextAddLeader: The text moves independently of the dimension line, with a leader drawn from the text to the dimension line.
    acMoveTextNoLeader: The text moves independently of the dimension line, with no leader drawn from the text to the dimension line.
Remarks
The initial value for this property is acMoveTextNoLeader.
Note: This property overrides the value of the DIMTMOVE system variable for the given dimension.
Examples
VBA:
Sub Example_TextMovement()
    ' This example creates two aligned dimensions in model space and
    ' sets the TextMovement property of each one differently to allow
    ' the user to see the differences this property makes when moving
    ' dimension text
    '
    ' To see the effects of this property:
    ' 1) Run this sample
    ' 2) Enter the drawing and move the dimension text of the leftmost object
    '    on the screen with the mouse or keyboard.
    ' 3) Notice the position of the dimension lines
    ' 4) Repeat with the rightmost object
   
    Dim dimObj1 As AcadDimAligned, dimObj2 As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim point3(0 To 2) As Double, point4(0 To 2) As Double
    Dim location1(0 To 2) As Double, location2(0 To 2) As Double
        
    ' Define the two dimensions
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 6: point2(1) = 5: point2(2) = 0
    location1(0) = 5: location1(1) = 7: location1(2) = 0
    
    point3(0) = 7: point3(1) = 5: point3(2) = 0
    point4(0) = 8: point4(1) = 5: point4(2) = 0
    location2(0) = 5: location2(1) = 7: location2(2) = 0
    
    ' Create the aligned dimension objects in model space
    Set dimObj1 = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location1)
    Set dimObj2 = ThisDrawing.ModelSpace.AddDimAligned(point3, point4, location2)
    
    ThisDrawing.Application.ZoomAll
    ' Set the text movement of the new dimensions to different values
    dimObj1.TextMovement = acMoveTextNoLeader
    location1(0) = 5.5: location1(1) = 7.5: location1(2) = 0
    dimObj1.TextPosition = location1
    dimObj2.TextMovement = acDimLineWithText
    location2(0) = 7.5: location2(1) = 7.5: location2(2) = 0
    dimObj2.TextPosition = location2
       
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextMovement()
    ;; This example creates two aligned dimensions in model space and
    ;; sets the TextMovement property of each one differently to allow
    ;; the user to see the differences this property makes when moving
    ;; dimension text
    ;;
    ;; To see the effects of this property:
    ;; 1) Run this sample
    ;; 2) Enter the drawing and move the dimension text of the leftmost object
    ;;    on the screen with the mouse or keyboard.
    ;; 3) Notice the position of the dimension lines
    ;; 4) Repeat with the rightmost object
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
          
    ;; Define the two dimensions
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 6 5 0)
          location1 (vlax-3d-point 5 7 0))
    (setq point3 (vlax-3d-point 7 5 0)
          point4 (vlax-3d-point 8 5 0)
          location2 (vlax-3d-point 5 7 0))
    
    ;; Create the aligned dimension objects in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj1 (vla-AddDimAligned modelSpace point1 point2 location1))
    (setq dimObj2 (vla-AddDimAligned modelSpace point3 point4 location2))
    (vla-ZoomAll acadObj)
    ;; Set the text movement of the new dimensions to different values
    (vla-put-TextMovement dimObj1 acMoveTextNoLeader)
    (setq location1 (vlax-3d-point 5.5 7.5 0))
    (vla-put-TextPosition dimObj1 location1)
    (vla-put-TextMovement dimObj2 acDimLineWithText)
    (setq location2 (vlax-3d-point 7.5 7.5 0))
    (vla-put-TextPosition dimObj2 location2)
)
")
("TextOutsideAlign" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0EEDA221-35E6-41D2-9881-F99E6CB3D012"
                    "
TextOutsideAlign Property (ActiveX)
Specifies the position of dimension text outside the extension lines for all dimension types except ordinate.
Supported platforms: Windows only
Signature
VBA:
object.TextOutsideAlign
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Align the text horizontally.
    False: Align the text with the dimension line.
Remarks
The initial value for this property is True.
Note: This property overrides the value of the DIMTOH system variable for the given dimension.
Examples
VBA:
Sub Example_TextOutsideAlign()
    ' This example creates an aligned dimension in model space and
    ' allows the user to toggle the TextOutsideAlign value for the dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5.5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ThisDrawing.Application.ZoomAll
Toggle:
    Select Case MsgBox(\"Press OK to toggle the TextOutsideAlign value for this dimension\", vbOKCancel)
        Case vbOK
            ' Toggle the TextOutsideAlign value for this dimension
            dimObj.TextOutsideAlign = Not (dimObj.TextOutsideAlign)
            dimObj.Update
            ThisDrawing.Regen acActiveViewport
            
            ' Read and display the new dimension TextOutsideAlign value
            MsgBox \"TextOutsideAlign is currently set to: \" & dimObj.TextOutsideAlign
            
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
   
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextOutsideAlign()
    ;; This example creates an aligned dimension in model space and
    ;; allows the user to toggle the TextOutsideAlign value for the dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5.5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    (vla-ZoomAll acadObj)
    ;; Toggle the TextOutsideAlign value for this dimension
    (vla-put-TextOutsideAlign dimObj (if (= (vla-get-TextOutsideAlign dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Update dimObj)
    (vla-Regen doc acActiveViewport)
    ;; Read and display the new dimension TextOutsideAlign value
    (alert (strcat \"TextOutsideAlign is currently set to: \" (if (= (vla-get-TextOutsideAlign dimObj) :vlax-true) \"True\" \"False\")))
    ;; Toggle the TextOutsideAlign value for this dimension
    (vla-put-TextOutsideAlign dimObj (if (= (vla-get-TextOutsideAlign dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Update dimObj)
    (vla-Regen doc acActiveViewport)
    ;; Read and display the new dimension TextOutsideAlign value
    (alert (strcat \"TextOutsideAlign is currently set to: \" (if (= (vla-get-TextOutsideAlign dimObj) :vlax-true) \"True\" \"False\")))
)
")
("TextOverride" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B2576004-E3DA-4E90-9E5B-0DB166AAD008"
                "
TextOverride Property (ActiveX)
Specifies the text string for the dimension.
Supported platforms: Windows only
Signature
VBA:
object.TextOverride
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The maximum length is 256 characters.
Remarks
The user string replaces the calculated dimension value. You can revert to the calculated dimension value by setting the text to a NULL string (\"\"). You can append or prefix text to the primary dimension value by using a closed set of brackets (<>) to represent the value. The primary dimension value will replace the brackets when the string is displayed. For example, TextString = \"<> mm\" will result in a displayed string of \"3.5 mm\" where the value of the dimension is 3.5. You can also include the secondary dimension value using square brackets ( [] ).
Examples
VBA:
Sub Example_TextOverride()
    ' This example creates an aligned dimension and then changes the
    ' TextOverride property for that dimension.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 3#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 3#: point2(2) = 0#
    location(0) = 7.5: location(1) = 5#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
    MsgBox \"The initial text string for the dimension contains only the dimension value.\", vbInformation, \"TextOverride Example\"
    
    ' Change the text string for the dimension
    dimObj.TextOverride = \"The value is <>\"
    dimObj.Update
    MsgBox \"The text string for the dimension has been replaced. However, the dimension value is still represented.\", vbInformation, \"TextOverride Example\"
    
    ' Reset the text string for the dimension
    dimObj.TextOverride = \"\"
    dimObj.Update
        
    MsgBox \"The text string for the dimension is reset.\", vbInformation, \"TextOverride Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextOverride()
    ;; This example creates an aligned dimension and then changes the
    ;; TextOverride property for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 3 0)
          point2 (vlax-3d-point 10 3 0)
          location (vlax-3d-point 7.5 5 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    (alert \"The initial text string for the dimension contains only the dimension value.\")
    
    ;; Change the text string for the dimension
    (vla-put-TextOverride dimObj \"The value is <>\")
    (vla-Update dimObj)
    (alert \"The text string for the dimension has been replaced. However, the dimension value is still represented.\")
    
    ;; Reset the text string for the dimension
    (vla-put-TextOverride dimObj \"\")
    (vla-Update dimObj)
        
    (alert \"The text string for the dimension is reset.\")
)
")
("TextPosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E39FFEDE-FF81-4071-81E9-02D9C376D918"
                "
TextPosition Property (ActiveX)
Specifies the dimension text position.
Supported platforms: Windows only
Signature
VBA:
object.TextPosition
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A 3D WCS coordinate representing the text position of the dimension.
Remarks
Examples
VBA:
Sub Example_TextPosition()
    ' This example creates an aligned dimension and then changes the
    ' TextPosition property for that dimension.
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 3#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 3#: point2(2) = 0#
    location(0) = 7.5: location(1) = 5#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
    MsgBox \"The current text position for the dimension is \" & dimObj.TextPosition(0) & \", \" & dimObj.TextPosition(1) & \", \" & dimObj.TextPosition(2), vbInformation, \"TextPosition Example\"
    
    ' Change the text position location
    location(0) = 8.5: location(1) = 7: location(2) = 0
    dimObj.TextPosition = location
    dimObj.Update
    
    ' Return the endpoint of the first extension line
    ' Note that the return value is a Variant
    Dim retPoint As Variant
    retPoint = dimObj.TextPosition
    
    MsgBox \"The new text position for the dimension is \" & dimObj.TextPosition(0) & \", \" & dimObj.TextPosition(1) & \", \" & dimObj.TextPosition(2), vbInformation, \"TextPosition Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextPosition()
    ;; This example creates an aligned dimension and then changes the
    ;; TextPosition property for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 3 0)
          point2 (vlax-3d-point 10 3 0)
          location (vlax-3d-point 7.5 5 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    (setq textPosition (vlax-variant-value (vla-get-TextPosition dimObj)))
    (alert (strcat \"The current text position for the dimension is \" (rtos (vlax-safearray-get-element textPosition 0) 2) \", \"
                                                                     (rtos (vlax-safearray-get-element textPosition 1) 2) \", \"
                                                                     (rtos (vlax-safearray-get-element textPosition 2) 2)))
    
    ;; Change the text position location
    (setq location (vlax-3d-point 8.5 7 0))
    (vla-put-TextPosition dimObj location)
    (vla-Update dimObj)
    
    ;; Return the endpoint of the first extension line
    ;; Note that the return value is a Variant
    (setq retPoint (vlax-variant-value (vla-get-TextPosition dimObj)))
    (alert (strcat \"The new text position for the dimension is \" (rtos (vlax-safearray-get-element retPoint 0) 2) \", \"
                                                                 (rtos (vlax-safearray-get-element retPoint 1) 2) \", \"
                                                                 (rtos (vlax-safearray-get-element retPoint 2) 2)))
)
")
("TextPrecision" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-AC37A73B-CB8A-4869-BC05-EF4D30BF3E2E"
"
TextPrecision Property (ActiveX)
Specifies the precision of angular dimension text.
Supported platforms: Windows only
Signature
VBA:
object.TextPrecision
object
    Type: Dim3PointAngular, DimAngular
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimPrecision enum
    acDimPrecisionZero: 0.
    acDimPrecisionOne: 0.0
    acDimPrecisionTwo: 0.00
    acDimPrecisionThree: 0.000
    acDimPrecisionFour: 0.0000
    acDimPrecisionFive: 0.00000
    acDimPrecisionSix: 0.000000
    acDimPrecisionSeven: 0.0000000
    acDimPrecisionEight: 0.00000000
Remarks
Note: This property overrides the value of the DIMADEC system variable for the given dimension.
Examples
VBA:
Sub Example_TextPrecision()
    ' This example creates a Dim3PointAngular object in model space and
    ' uses the TextPrecision property to set the precision of
    ' the dimension text to 4 decimal places
    Dim DimPointAngularObj As AcadDim3PointAngular
    Dim AngleVertex(0 To 2) As Double
    Dim FirstPoint(0 To 2) As Double, SecondPoint(0 To 2) As Double
    Dim TextPoint(0 To 2) As Double
    
    ' Define the new Dim3PointAngular object
    AngleVertex(0) = 0: AngleVertex(1) = 0: AngleVertex(2) = 0
    FirstPoint(0) = 2: FirstPoint(1) = 2: FirstPoint(2) = 0
    SecondPoint(0) = 1: SecondPoint(1) = 4: SecondPoint(2) = 0
    TextPoint(0) = 6: TextPoint(1) = 6: TextPoint(2) = 0
    ' Create the new Dim3PointAngular object in model space
    Set DimPointAngularObj = ThisDrawing.ModelSpace.AddDim3PointAngular(AngleVertex, FirstPoint, SecondPoint, TextPoint)
    ThisDrawing.Application.ZoomAll
    ' Read and display current dimension text precision
    MsgBox \"The dimension text precision is currently set to: \" & DimPointAngularObj.TextPrecision
    ' Increase the distance of the dimension gap
    DimPointAngularObj.TextPrecision = acDimPrecisionFour
    ThisDrawing.Regen acAllViewports
    
    ' Read and display current dimension text precision
    MsgBox \"The dimension text precision is now set to: \" & DimPointAngularObj.TextPrecision
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextPrecision()
    ;; This example creates a Dim3PointAngular object in model space and
    ;; uses the TextPrecision property to set the precision of
    ;; the dimension text to 4 decimal places
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Dim3PointAngular object
    (setq AngleVertex (vlax-3d-point 0 0 0)
          FirstPoint (vlax-3d-point 2 2 0)
          SecondPoint (vlax-3d-point 1 4 0)
          TextPoint (vlax-3d-point 6 6 0))
    ;; Create the new Dim3PointAngular object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimPointAngularObj (vla-AddDim3PointAngular modelSpace AngleVertex FirstPoint SecondPoint TextPoint))
    (vla-ZoomAll acadObj)
    ;; Read and display current dimension text precision
    (alert (strcat \"The dimension text precision is currently set to: \" (itoa (vla-get-TextPrecision dimPointAngularObj))))
    ;; Increase the distance of the dimension gap
    (vla-put-TextPrecision dimPointAngularObj acDimPrecisionFour)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display current dimension text precision
    (alert (strcat \"The dimension text precision is now set to: \" (rtos (vla-get-TextPrecision dimPointAngularObj) 2)))
)
")
("TextPrefix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DFDB7CE3-159C-498D-822C-E1F64878F534"
              "
TextPrefix Property (ActiveX)
Specifies the dimension value prefix.
Supported platforms: Windows only
Signature
VBA:
object.TextPrefix
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The prefix for the dimension value.
Remarks
The initial value for this property is \"\".
Note: This property overrides the value of the DIMPOST system variable for the given dimension.
Examples
VBA:
Sub Example_TextPrefix()
    ' This example creates an aligned dimension in model space and
    ' uses TextPrefix to allow the user to change the text prefix for the
    ' dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim prefix As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ThisDrawing.Application.ZoomAll
    ' Allow the user to change the text prefix for the dimension
    prefix = InputBox(\"Enter a new text prefix for the dimension\", \"Set Dimension Prefix\", \"PREFIX:\")
    dimObj.TextPrefix = prefix   ' Commit changes to prefix
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the dimension text prefix
    prefix = dimObj.TextPrefix
    If prefix <> \"\" Then
        MsgBox \"The prefix of the dimension has been changed to: \" & prefix
    Else
        MsgBox \"The prefix of the dimension has been removed\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextPrefix()
    ;; This example creates an aligned dimension in model space and
    ;; uses TextPrefix to allow the user to change the text prefix for the
    ;; dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    (vla-ZoomAll acadObj)
    ;; Allow the user to change the text prefix for the dimension
    (setq prefix (vla-GetString (vla-get-Utility doc) :vlax-false \"\nEnter a new text prefix for the dimension: \"))
    (vla-put-TextPrefix dimObj prefix)   ;; Commit changes to prefix
    
    (vla-Regen doc acAllViewports)
    
    ;; Read back and display the dimension text prefix
    (setq prefix (vla-get-TextPrefix dimObj))
    (if (/= prefix \"\")
        (alert (strcat \"The prefix of the dimension has been changed to: \" prefix))
        (alert \"The prefix of the dimension has been removed\")
    )
)
")
("TextRightAttachmentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1AF580BE-D7CA-497B-B6D4-F44BAE56AB35"
                           "
TextRightAttachmentType Property (ActiveX)
Specify how leaders on the right side connect with the text.
Supported platforms: Windows only
Signature
VBA:
object.TextRightAttachmentType
object
    Type: MLeader, MLeaderStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: AcTextAttachmentType enum
    acAttachmentAllLine
    acAttachmentBottomLine
    acAttachmentBottomOfBottom
    acAttachmentBottomOfTop
    acAttachmentBottomOfTopLine
    acAttachmentMiddle
    acAttachmentMiddleOfBottom
    acAttachmentMiddleOfTop
    acAttachmentTopOfTop
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextRotation" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EB9C76B1-4CCD-4080-BB04-30A496DA4E09"
                "
TextRotation Property (ActiveX)
Specifies the rotation angle of the dimension text.
Supported platforms: Windows only
Signature
VBA:
object.TextRotation
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, MLeader
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The angle in radians of the dimension text. The valid range is 0 to 6.28.
Remarks
By default, this value is equal to either 0 degrees, or to the Rotation property, as specified by the dimension style.
Text with 0 degree angle
Text with angle equal to the dimension rotation
Examples
VBA:
Sub Example_TextRotation()
    ' This example creates an aligned dimension and then changes the
    ' TextRotation property for that dimension.
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double
    Dim point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5#: point1(1) = 3#: point1(2) = 0#
    point2(0) = 10#: point2(1) = 3#: point2(2) = 0#
    location(0) = 7.5: location(1) = 5#: location(2) = 0#
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ZoomAll
    MsgBox \"The current text rotation angle for the dimension is \" & dimObj.TextRotation & \" radians.\", vbInformation, \"TextRotation Example\"
    
    ' Change the text rotation angle to 45 degrees (.707 radians)
    dimObj.TextRotation = 0.707
    dimObj.Update
        
    MsgBox \"The new text rotation angle for the dimension is \" & dimObj.TextRotation & \" radians.\", vbInformation, \"TextRotation Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextRotation()
    ;; This example creates an aligned dimension and then changes the
    ;; TextRotation property for that dimension.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 3 0)
          point2 (vlax-3d-point 10 3 0)
          location (vlax-3d-point 7.5 5 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The current text rotation angle for the dimension is \" (rtos (vla-get-TextRotation dimObj) 2) \" radians.\"))
    
    ;; Change the text rotation angle to 45 degrees (.707 radians)
    (vla-put-TextRotation dimObj 0.707)
    (vla-Update dimObj)
        
    (alert (strcat \"The new text rotation angle for the dimension is \" (rtos (vla-get-TextRotation dimObj) 2) \" radians.\"))
)
")
("TextString" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E54B1951-5BF5-4524-97E6-DFB4E4A20109"
              "
TextString Property (ActiveX)
Specifies the text string for the entity.
Supported platforms: Windows only
Signature
VBA:
object.TextString
object
    Type: Attribute, AttributeReference, GeoPositionMarker, MLeader, MLeaderStyle, MText, Text, Tolerance
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The maximum length is 256 characters.
Remarks
AttributeReference: This is equivalent to the value of the attribute in AutoCAD.
GeoPositionMarker, MText: The text string may contain format codes. You can underline, add a line over text, and create stacked text. You can also change color, font, and text height. You can change the spaces between text characters or increase the width of the characters themselves. To apply formatting, or parse existing text strings for their formatting.
Examples
VBA:
Sub Example_TextString()
    ' This example creates a text object in model space.
    ' It then returns the text string for that object.
    
    Dim textObj As AcadText
    Dim text As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the text object
    text = \"Hello, World.\"
    insertionPoint(0) = 2: insertionPoint(1) = 2: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(text, insertionPoint, height)
    ZoomAll
    
    ' Return the current text string for the object
    text = textObj.textString
    MsgBox \"The TextString property equals: \" & text, vbInformation, \"TextString Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextString()
    ;; This example creates a text object in model space.
    ;; It then returns the text string for that object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the text object
    (setq insertionPoint (vlax-3d-point 2 2 0)
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    (vla-ZoomAll acadObj)
    
    ;; Return the current text string for the object
    (setq text (vla-get-TextString textObj))
    (alert (strcat \"The TextString property equals: \" text))
)
")
("TextStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-31E4C32F-89DA-4452-A7A6-2A6A10F15B38"
"
TextStyle Property (ActiveX)
Specifies the text style for the dimension or tolerance text.
Supported platforms: Windows only
Signature
VBA:
object.TextStyle
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, MLeaderStyle, Tolerance
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The style for the dimension value.
Remarks
The initial value for this property is STANDARD.
Note: This property overrides the value of the DIMTXSTY system variable for the given dimension.
Examples
VBA:
Sub Example_TextStyle()
    ' This example creates an aligned dimension in model space and
    ' creates a new system text style.  The new text style is then assigned to
    ' the new dimension
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Create new text style
    Set newText = ThisDrawing.TextStyles.Add(\"MYSTYLE\")
    newText.height = 0.5    ' Just set the height of the new style so we can differentiate
    
    ThisDrawing.Application.ZoomAll
    
    ' Read and display the current text style for this dimension
    MsgBox \"The text style is currently set to: \" & dimObj.textStyle
    
    ' Change the text style to use the new style we created
    dimObj.textStyle = \"MYSTYLE\"
    ThisDrawing.Regen acAllViewports
    
    ' Read and display the current text style for this dimension
    MsgBox \"The text style is now set to: \" & dimObj.textStyle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextStyle()
    ;; This example creates an aligned dimension in model space and
    ;; creates a new system text style.  The new text style is then assigned to
    ;; the new dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Create new text style
    (setq newText (vla-Add (vla-get-TextStyles doc) \"MYSTYLE\"))
    (vla-put-Height newText 0.5)    ;; Just set the height of the new style so we can differentiate
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the current text style for this dimension
    (alert (strcat \"The text style is currently set to: \" (vla-get-TextStyle dimObj)))
    
    ;; Change the text style to use the new style we created
    (vla-put-TextStyle dimObj \"MYSTYLE\")
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the current text style for this dimension
    (alert (strcat \"The text style is now set to: \" (vla-get-TextStyle dimObj)))
)
")
("TextStyleName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3BDB85B9-BA03-4666-8E57-CF5BB9C80F04"
                 "
TextStyleName Property (ActiveX)
Specifies the style name of the MText.
Supported platforms: Windows only
Signature
VBA:
object.TextStyleName
object
    Type: GeoPositionMarker, MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: String
The name of the style for the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("TextStyles" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-37275969-EA77-4358-A559-FB804EA5179F"
              "
TextStyles Property (ActiveX)
Gets the TextStyles collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.TextStyles
object
    Type: Database, Document
    The objects this property applies to.
Property Value
Read-only: Yes
Type: TextStyles
The TextStyles collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextStyles()
    ' This example finds the current Textstyles collection and
    ' adds a new Text style to that collection.
    
    Dim TextColl As AcadTextStyles
    Set TextColl = ThisDrawing.TextStyles
    
    ' Create a Text style named \"TEST\" in the current drawing
    Dim textStyle As AcadTextStyle
    Set textStyle = TextColl.Add(\"TEST\")
    MsgBox \"A new Text style called \" & textStyle.name & \" has been added to the Textstyles collection.\", vbInformation, \"Textstyles Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextStyles()
    ;; This example finds the current Textstyles collection and
    ;; adds a new Text style to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq TextColl (vla-get-TextStyles doc))
    
    ;; Create a Text style named \"TEST\" in the current drawing
    (setq textStyle (vla-Add TextColl \"TEST\"))
    (alert (strcat \"A new Text style called \" (vla-get-Name textStyle) \" has been added to the Textstyles collection.\"))
)
")
("TextSuffix" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A8889FE5-EF98-4C8C-82E9-D0AE4C6DFACE"
              "
TextSuffix Property (ActiveX)
Specifies the dimension value suffix.
Supported platforms: Windows only
Signature
VBA:
object.TextSuffix
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: String
The suffix for the dimension value.
Remarks
The initial value for this property is \"\".
Note: This property overrides the value of the DIMPOST system variable for the given dimension.
Examples
VBA:
Sub Example_TextSuffix()
    ' This example creates an aligned dimension in model space and
    ' uses TextSuffix to allow the user to change the text suffix for the
    ' dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim suffix As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ThisDrawing.Application.ZoomAll
    ' Allow the user to change the text suffix for the dimension
    suffix = InputBox(\"Enter a new text suffix for the dimension\", \"Set Dimension Suffix\", \":SUFFIX\")
    dimObj.TextSuffix = suffix   ' Commit changes to suffix
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the dimension text suffix
    suffix = dimObj.TextSuffix
    If suffix <> \"\" Then
        MsgBox \"The suffix of the dimension has been changed to: \" & suffix
    Else
        MsgBox \"The suffix of the dimension has been removed\"
    End If
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextSuffix()
    ;; This example creates an aligned dimension in model space and
    ;; uses TextSuffix to allow the user to change the text suffix for the
    ;; dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    (vla-ZoomAll acadObj)
    ;; Allow the user to change the text suffix for the dimension
    (setq suffix (vla-GetString (vla-get-Utility doc) :vlax-false \"\nEnter a new text suffix for the dimension: \"))
    (vla-put-TextSuffix dimObj suffix)   ;; Commit changes to suffix
    
    (vla-Regen doc acAllViewports)
    
    ;; Read back and display the dimension text suffix
    (setq suffix (vla-get-TextSuffix dimObj))
    (if (/= suffix \"\")
        (alert (strcat \"The suffix of the dimension has been changed to: \" suffix))
        (alert \"The suffix of the dimension has been removed\")
    )
)
")
("TextTopAttachmentType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-27F0D9CA-B042-489D-96FC-B9277C20C178"
                         "
TextTopAttachmentType Property (ActiveX)
Specifies the attachment of the leader to the top center of the text content.
Supported platforms: Windows only
Signature
VBA:
object.TextTopAttachmentType
object
    Type: MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: AcVerticalTextAttachmentType enum
    acAttachmentCenter: Leader attachment is centered with the text content.
    acAttachmentLinedCenter: Insert an overline between the leader attachment and the text content.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TextWidth" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-710C7711-AE15-4758-AB5A-E31D506FFAA8"
             "
TextWidth Property (ActiveX)
Specifies the width of the MText.
Supported platforms: Windows only
Signature
VBA:
object.TextWidth
object
    Type: GeoPositionMarker, MLeader
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The boundary width of the object.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TextManipulation()
    Dim oML As AcadMLeader
    Dim points(0 To 14) As Double
    ' Define the leader points
    points(0) = 1: points(1) = 1: points(2) = 0
    points(3) = 1: points(4) = 2: points(5) = 0
    points(6) = 2: points(7) = 2: points(8) = 0
    points(9) = 3: points(10) = 2: points(11) = 0
    points(12) = 4: points(13) = 4: points(14) = 0
    Dim i As Long
    Set oML = ThisDrawing.ModelSpace.AddMLeader(points, i)
    
    oML.TextLeftAttachmentType = acAttachmentBottomLine
    oML.TextRightAttachmentType = acAttachmentMiddleOfBottom
    oML.TextBackgroundFill = False
    oML.TextDirection = acLeftToRight
    oML.TextHeight = 2.3
    oML.TextJustify = acAttachmentPointMiddleLeft
    oML.TextLineSpacingDistance = 2.4
    oML.TextLineSpacingFactor = 1.2
    oML.TextLineSpacingStyle = acLineSpacingStyleExactly
    oML.TextWidth = 7.4
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TextManipulation()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; Define the leader points
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 14)))
    (vlax-safearray-fill points '(1 1 0
                                  1 2 0
                                  2 2 0
                                  3 2 0
                                  4 4 0
                                 )
    )
    (setq i 0)
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq oML (vla-AddMLeader modelSpace points i))
    
    (vla-put-TextLeftAttachmentType oML acAttachmentBottomLine)
    (vla-put-TextRightAttachmentType oML acAttachmentMiddleOfBottom)
    (vla-put-TextBackgroundFill oML :vlax-false)
    (vla-put-TextDirection oML acLeftToRight)
    (vla-put-TextHeight oML 2.3)
    (vla-put-TextJustify oML acAttachmentPointMiddleLeft)
    (vla-put-TextLineSpacingDistance oML 2.4)
    (vla-put-TextLineSpacingFactor oML 1.2)
    (vla-put-TextLineSpacingStyle oML acLineSpacingStyleExactly)
    (vla-put-TextWidth oML 7.4)
)
")
("Thickness" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0DFEAA18-C0FE-4B60-B103-39D52E939D63"
"
Thickness Property (ActiveX)
Specifies the distance a 2D AutoCAD object is extruded above or below its elevation.
Supported platforms: Windows only
Signature
VBA:
object.Thickness
object
    Type: Arc, Attribute, AttributeReference, Circle, Line, LWPolyline, Point, Polyline, Shape, Solid, Text, Trace
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The default is 0.0.
Remarks
Changing the thickness of an object changes its Z direction thickness.
Changing the thickness of a 3D polyline, dimension, or floating viewport has no effect.
Examples
VBA:
Sub Example_Thickness()
    ' This example creates a circle in model space
    ' and changes the thickness of the circle.
   
    Dim circleObj As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    
    ' Define the circle
    centerPoint(0) = 0#: centerPoint(1) = 0#: centerPoint(2) = 0#
    radius = 5#
    
    ' Create the Circle object in model space
    Set circleObj = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius)
    ZoomAll
    
    ' Find the current thickness of the circle
    Dim currThickness As Double
    currThickness = circleObj.Thickness
    MsgBox \"The thickness of the circle is \" & circleObj.Thickness, vbInformation, \"Thickness Example\"
    
    ' Change the thickness of the circle
    circleObj.Thickness = currThickness + 3
    circleObj.Update
    
    ' Change the direction of the viewport so that you can
    ' view the change made to the thickness. Once you change
    ' the direction, you must reset the active viewport.
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    MsgBox \"The thickness of the circle is now \" & circleObj.Thickness, vbInformation, \"Thickness Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Thickness()
    ;; This example creates a circle in model space
    ;; and changes the thickness of the circle.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the circle
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5)
    
    ;; Create the Circle object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj (vla-AddCircle modelSpace centerPoint radius))
    (vla-ZoomAll acadObj)
    
    ;; Find the current thickness of the circle
    (setq currThickness (vla-get-Thickness circleObj))
    (alert (strcat \"The thickness of the circle is \" (rtos currThickness 2)))
    
    ;; Change the thickness of the circle
    (vla-put-Thickness circleObj (+ currThickness 3))
    (vla-Update circleObj)
    
    ;; Change the direction of the viewport so that you can
    ;; view the change made to the thickness. Once you change
    ;; the direction, you must reset the active viewport.
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    (alert (strcat \"The thickness of the circle is now \" (rtos (vla-get-Thickness circleObj) 2)))
    
)
")
("Title" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F8081228-4163-4EF0-BFF5-73B81DF0E6BF"
         "
Title Property (ActiveX)
Specifies the title you want to use to locate the drawing.
Supported platforms: Windows only
Signature
VBA:
object.Title
object
    Type: SummaryInfo
    The object this property applies to.
Property Value
Read-only: No
Type: String
The Title property of a drawing.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Title()
    ' This example shows how to access drawing properties
            
    ' Add and display standard properties
    ThisDrawing.SummaryInfo.Author = \"John Doe\"
    ThisDrawing.SummaryInfo.Comments = \"Includes all ten levels of Building Five\"
    ThisDrawing.SummaryInfo.HyperlinkBase = \"https://www.autodesk.com\"
    ThisDrawing.SummaryInfo.Keywords = \"Building Complex\"
    ThisDrawing.SummaryInfo.LastSavedBy = \"JD\"
    ThisDrawing.SummaryInfo.RevisionNumber = \"4\"
    ThisDrawing.SummaryInfo.Subject = \"Plan for Building Five\"
    ThisDrawing.SummaryInfo.Title = \"Building Five\"
    Author = ThisDrawing.SummaryInfo.Author
    Comments = ThisDrawing.SummaryInfo.Comments
    HLB = ThisDrawing.SummaryInfo.HyperlinkBase
    KW = ThisDrawing.SummaryInfo.Keywords
    LSB = ThisDrawing.SummaryInfo.LastSavedBy
    RN = ThisDrawing.SummaryInfo.RevisionNumber
    Subject = ThisDrawing.SummaryInfo.Subject
    Title = ThisDrawing.SummaryInfo.Title
    MsgBox \"The standard drawing properties are \" & vbCrLf & _
           \"Author = \" & Author & vbCrLf & _
           \"Comments = \" & Comments & vbCrLf & _
           \"HyperlinkBase = \" & HLB & vbCrLf & _
           \"Keywords = \" & KW & vbCrLf & _
           \"LastSavedBy = \" & LSB & vbCrLf & _
           \"RevisionNumber = \" & RN & vbCrLf & _
           \"Subject = \" & Subject & vbCrLf & _
           \"Title = \" & Title & vbCrLf
    ' Add and display custom properties
    Dim Key0 As String
    Dim Value0 As String
    Dim Key1 As String
    Dim Value1 As String
    Dim CustomPropertyBranch As String
    Dim PropertyBranchValue As String
    Dim CustomPropertyZone As String
    Dim PropertyZoneValue As String
    CustomPropertyBranch = \"Branch\"
    PropertyBranchValue = \"Main\"
    CustomPropertyZone = \"Zone\"
    PropertyZoneValue = \"Industrial\"
    ' Add custom properties
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 1) Then
        ThisDrawing.SummaryInfo.SetCustomByIndex 0, CustomPropertyBranch, PropertyBranchValue
    Else
        ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyBranch, PropertyBranchValue
    End If
    If (ThisDrawing.SummaryInfo.NumCustomInfo >= 2) Then
         ThisDrawing.SummaryInfo.SetCustomByKey CustomPropertyBranch, \"Satellite\"
    Else
         ThisDrawing.SummaryInfo.AddCustomInfo CustomPropertyZone, PropertyZoneValue
    End If
    'Get custom properties
    ThisDrawing.SummaryInfo.GetCustomByIndex 0, Key0, Value0
    Key1 = CustomPropertyZone
    ThisDrawing.SummaryInfo.GetCustomByKey Key1, Value1
    MsgBox \"The custom drawing properties are \" & vbCrLf & _
           \"First property name = \" & Key0 & vbCrLf & _
           \"First property value = \" & Value0 & vbCrLf & _
           \"Second property name = \" & Key1 & vbCrLf & _
           \"Second property value = \" & Value1 & vbCrLf
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Title()
    ;; This example shows how to access drawing properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq summaryInfo (vla-get-SummaryInfo doc))
  
    ;; Add and display standard properties
    (vla-put-Author summaryInfo \"John Doe\")
    (vla-put-Comments summaryInfo \"Includes all ten levels of Building Five\")
    (vla-put-HyperlinkBase summaryInfo \"https://www.autodesk.com\")
    (vla-put-Keywords summaryInfo \"Building Complex\")
    (vla-put-LastSavedBy summaryInfo \"JD\")
    (vla-put-RevisionNumber summaryInfo \"4\")
    (vla-put-Subject summaryInfo \"Plan for Building Five\")
    (vla-put-Title summaryInfo \"Building Five\")
    (setq author (vla-get-Author summaryInfo))
    (setq comments (vla-get-Comments summaryInfo))
    (setq HLB (vla-get-HyperlinkBase summaryInfo))
    (setq KW (vla-get-Keywords summaryInfo))
    (setq LSB (vla-get-LastSavedBy summaryInfo))
    (setq RN (vla-get-RevisionNumber summaryInfo))
    (setq subject (vla-get-Subject summaryInfo))
    (setq Title (vla-get-Title summaryInfo))
    (alert (strcat \"The standard drawing properties are \"
                   \"\nAuthor = \" author
                   \"\nComments = \" comments
                   \"\nHyperlinkBase = \" HLB
                   \"\nKeywords = \" KW
                   \"\nLastSavedBy = \" LSB
                   \"\nRevisionNumber = \" RN
                   \"\nSubject = \" Subject
                   \"\nTitle = \" Title
           )
    )
  
    ;; Add and display custom properties
    (setq CustomPropertyBranch \"Branch\")
    (setq PropertyBranchValue \"Main\")
    (setq CustomPropertyZone \"Zone\")
    (setq PropertyZoneValue \"Industrial\")
    ;; Add custom properties
    (if (>= (vla-NumCustomInfo summaryInfo) 1)
        (vla-SetCustomByIndex summaryInfo 0 CustomPropertyBranch PropertyBranchValue)
        (vla-AddCustomInfo summaryInfo CustomPropertyBranch PropertyBranchValue)
    )
    (if (>= (vla-NumCustomInfo summaryInfo) 2)
        (vla-SetCustomByKey summaryInfo CustomPropertyBranch \"Satellite\")
        (vla-AddCustomInfo summaryInfo CustomPropertyZone PropertyZoneValue)
    )
    ;; Get custom properties
    (vla-GetCustomByIndex summaryInfo 0 'Key0 'Value0)
    (setq Key1 CustomPropertyZone)
    (vla-GetCustomByKey summaryInfo Key1 'Value1)
  
    (alert (strcat \"The custom drawing properties are \"
                   \"\nFirst property name = \" Key0
                   \"\nFirst property value = \" Value0
                   \"\nSecond property name = \" Key1
                   \"\nSecond property value = \" Value1
           )
    )
)
")
("TitleSuppressed" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6B7BC1CC-6331-4385-9FCA-258A7C97316F"
                   "
TitleSuppressed Property (ActiveX)
Specifies whether the title of the table is suppressed.
Supported platforms: Windows only
Signature
VBA:
object.TitleSuppressed
object
    Type: Table, TableStyle
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The title of the table is suppressed.
    False: The title of the table is not suppressed.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TitleSuppressed()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed & vbCrLf & _
           \"Title Suppression = \" & customObj.TitleSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TitleSuppressed()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	                  \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	                  \"\nTitle Suppression = \" (if (= (vla-get-TitleSuppressed customObj) :vlax-true) \"True\" \"False\")
	          )
    )
    (vlax-release-object col)
)
")
("ToleranceDisplay" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2A8E8FA8-EFA7-4F9E-95A3-2145CD92038A"
                    "
ToleranceDisplay Property (ActiveX)
Specifies if tolerances are displayed with the dimension text.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceDisplay
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: acDimToleranceMethod enum
    acTolNone
    acTolSymmetrical
    acTolDeviation
    acTolLimits
    acTolBasic
Remarks
The initial value for this property is acTolNone.
Note: This property overrides the value of the DIMTOL system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceDisplay()
    ' This example creates an aligned dimension in model space and
    ' turns on the tolerance display for the new dimension
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentDisplay As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ThisDrawing.Application.ZoomAll
    
    ' Read and display the current tolerance display for this dimension
    CurrentDisplay = IIf(dimObj.ToleranceDisplay = acTolNone, \"Hidden\", \"Visible\")
    MsgBox \"The tolerance display is currently: \" & CurrentDisplay
    
    ' Toggle the tolerance display for this dimension
    If dimObj.ToleranceDisplay = acTolNone Then
        dimObj.ToleranceDisplay = acTolSymmetrical
        CurrentDisplay = \"Symmetrical\"
    Else
        dimObj.ToleranceDisplay = acTolNone
        CurrentDisplay = \"None\"
    End If
    
    ThisDrawing.Regen acAllViewports
    
    ' Display the current tolerance display for this dimension
    MsgBox \"The tolerance display is now set to: \" & CurrentDisplay
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceDisplay()
    ;; This example creates an aligned dimension in model space and
    ;; turns on the tolerance display for the new dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    (vla-ZoomAll acadObj)
    
    ;; Read and display the current tolerance display for this dimension
    (setq currentDisplay (if (= (vla-get-ToleranceDisplay dimObj) acTolNone) \"Hidden\" \"Visible\"))
    (alert (strcat \"The tolerance display is currently: \" currentDisplay))
    
    ;; Toggle the tolerance display for this dimension
    (if (= (vla-get-ToleranceDisplay dimObj) acTolNone)
        (progn
            (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
            (setq currentDisplay \"Symmetrical\")
        )
        (progn
            (vla-put-ToleranceDisplay dimObj acTolNone)
            (setq currentDisplay \"None\")
        )
    )
    
    (vla-Regen doc acAllViewports)
    
    ;; Display the current tolerance display for this dimension
    (alert (strcat \"The tolerance display is now set to: \" currentDisplay))
)
")
("ToleranceHeightScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FEA03827-FC73-4033-AB08-BD1E79E46F90"
"
ToleranceHeightScale Property (ActiveX)
Specifies a scale factor for the text height of tolerance values relative to the dimension text height.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceHeightScale
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The scale factor for the tolerance values.
Remarks
The initial value for this property is 1.0000.
This property is only available when the ToleranceDisplay property is set to any value other than acTolNone.
Use this property for plus and minus tolerance strings when DIMTOL is on and DIMTM is not equal to DIMTP, or when DIMLIM is on.
Note: This property overrides the value of the DIMTFAC system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceHeightScale()
    ' This example creates an aligned dimension in model space and
    ' turns on the tolerance display for the new dimension.  The height
    ' of the tolerance text can then be adjusted by the user
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentScale As Integer
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Turn on the tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    
    ThisDrawing.Application.ZoomAll
    
Increase:
    ' Read and display the current tolerance height scale for this dimension
    If MsgBox(\"The tolerance height scale is currently set to: \" & dimObj.ToleranceHeightScale & vbCrLf & _
              \"Press OK to increase, or cancel to finish\", vbOKCancel) = vbCancel Then
        
        Exit Sub
    End If
    
    ' Increase the tolerance height scale for this dimension
    dimObj.ToleranceHeightScale = dimObj.ToleranceHeightScale + 1
    
    ThisDrawing.Regen acAllViewports
    
    GoTo Increase
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceHeightScale()
    ;; This example creates an aligned dimension in model space and
    ;; turns on the tolerance display for the new dimension.  The height
    ;; of the tolerance text can then be adjusted by the user
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Turn on the tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the current tolerance height scale for this dimension
    (alert (strcat \"The tolerance height scale is currently set to: \" (rtos (vla-get-ToleranceHeightScale dimObj) 2)))
    
    ;; Increase the tolerance height scale for this dimension
    (vla-put-ToleranceHeightScale dimObj (1+ (vla-get-ToleranceHeightScale dimObj)))
    
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the current tolerance height scale for this dimension
    (alert (strcat \"The tolerance height scale is now set to: \" (rtos (vla-get-ToleranceHeightScale dimObj) 2)))
)
")
("ToleranceJustification" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CCB5AF2E-8F53-4F6E-92DA-3C2B6430D76E"
                          "
ToleranceJustification Property (ActiveX)
Specifies the vertical justification of tolerance values relative to the nominal dimension text.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceJustification
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimToleranceJustify enum
    acTolTop
    acTolMiddle
    acTolBottom
Remarks
The initial value for this property is acTolMiddle.
This property is only available when the ToleranceDisplay property is set to any value other than acTolNone.
Note: This property overrides the value of the DIMTOLJ system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceJustification()
    ' This example creates an aligned dimension in model space and
    ' sets the tolerance justification for the dimension to
    ' a couple of common values
    '
    ' * Note the vertical position of the tolerance text
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentDisplay As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Turn on tolerance display and increase the dimension text height,
    ' so the alignment of the tolerance is visible
    dimObj.ToleranceDisplay = acTolSymmetrical
    dimObj.textHeight = 1
    dimObj.ToleranceHeightScale = 0.25
    
    ThisDrawing.Application.ZoomAll
    
    ' Read and display the current tolerance justification for this dimension
    Select Case dimObj.ToleranceJustification
        Case acTolBottom: CurrentDisplay = \"Bottom\"
        Case acTolTop: CurrentDisplay = \"Top\"
        Case acTolMiddle: CurrentDisplay = \"Middle\"
    End Select
    
    MsgBox \"The tolerance justification is currently: \" & CurrentDisplay
    
    ' Set the tolerance justification for this dimension
    dimObj.ToleranceJustification = acTolBottom
    
    ThisDrawing.Regen acAllViewports
    
    ' Display the current tolerance justification for this dimension
    MsgBox \"The tolerance display is now set to: Bottom\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceJustification()
    ;; This example creates an aligned dimension in model space and
    ;; sets the tolerance justification for the dimension to
    ;; a couple of common values
    ;;
    ;; * Note the vertical position of the tolerance text
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Turn on tolerance display and increase the dimension text height,
    ;; so the alignment of the tolerance is visible
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    (vla-put-TextHeight dimObj 1)
    (vla-put-ToleranceHeightScale dimObj 0.25)
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the current tolerance justification for this dimension
    (setq currentDisplay (cond
                             ((= (vla-get-ToleranceJustification dimObj) acTolBottom) \"Bottom\")
                             ((= (vla-get-ToleranceJustification dimObj) acTolTop) \"Top\")
                             ((= (vla-get-ToleranceJustification dimObj) acTolMiddle) \"Middle\")
                         ))
    
    (alert (strcat \"The tolerance justification is currently: \" currentDisplay))
    
    ;; Set the tolerance justification for this dimension
    (vla-put-ToleranceJustification dimObj acTolBottom)
    
    (vla-Regen doc acAllViewports)
    
    ;; Display the current tolerance justification for this dimension
    (alert \"The tolerance display is now set to: Bottom\")
)
")
("ToleranceLowerLimit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6FCC3D9C-290D-4D4D-9230-9D30CE656F74"
                       "
ToleranceLowerLimit Property (ActiveX)
Specifies the minimum tolerance limit for dimension text.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceLowerLimit
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The tolerance lower limit.
Remarks
The initial value for this property is 0.0000.
This property is only available when the ToleranceDisplay property is set to acTolDeviation or acTolLimits.
Note: This property overrides the value of the DIMTM system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceLowerLimit()
    ' This example creates an aligned dimension in model space and
    ' sets the tolerance limits using the ToleranceLowerLimit and
    ' ToleranceUpperLimit properties
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Turn on tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    
    ThisDrawing.Application.ZoomAll
    
    ' Read and display the tolerance limits for the dimension
    MsgBox \"The tolerance lower limit is set to: \" & dimObj.ToleranceLowerLimit & vbCrLf & _
           \"The tolerance upper limit is set to: \" & dimObj.ToleranceUpperLimit
    
    ' Adjust the tolerance limits for this dimension
    dimObj.ToleranceLowerLimit = 0.0001
    dimObj.ToleranceUpperLimit = 0.005
    
    ThisDrawing.Regen acAllViewports
    
    ' Read and display the tolerance limits for the dimension
    MsgBox \"The tolerance lower limit is now set to: \" & dimObj.ToleranceLowerLimit & vbCrLf & _
           \"The tolerance upper limit is now set to: \" & dimObj.ToleranceUpperLimit
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceLowerLimit()
    ;; This example creates an aligned dimension in model space and
    ;; sets the tolerance limits using the ToleranceLowerLimit and
    ;; ToleranceUpperLimit properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    ;; Turn on tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the tolerance limits for the dimension
    (alert (strcat \"The tolerance lower limit is set to: \" (rtos (vla-get-ToleranceLowerLimit dimObj) 2)
                   \"\nThe tolerance upper limit is set to: \" (rtos (vla-get-ToleranceUpperLimit dimObj) 2)))
    
    ;; Adjust the tolerance limits for this dimension
    (vla-put-ToleranceLowerLimit dimObj 0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.005)
    
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the tolerance limits for the dimension
    (alert (strcat \"The tolerance lower limit is now set to: \" (rtos (vla-get-ToleranceLowerLimit dimObj) 2)
                   \"\nThe tolerance upper limit is now set to: \" (rtos (vla-get-ToleranceUpperLimit dimObj) 2)))
)
")
("TolerancePrecision" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A87F2C4A-997B-4314-9C0C-6AE10AC08EAC"
                      "
TolerancePrecision Property (ActiveX)
Specifies the precision of tolerance values in primary dimensions.
Supported platforms: Windows only
Signature
VBA:
object.TolerancePrecision
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: acDimPrecision enum
    acDimPrecisionZero: 0.
    acDimPrecisionOne: 0.0
    acDimPrecisionTwo: 0.00
    acDimPrecisionThree: 0.000
    acDimPrecisionFour: 0.0000
    acDimPrecisionFive: 0.00000
    acDimPrecisionSix: 0.000000
    acDimPrecisionSeven: 0.0000000
    acDimPrecisionEight: 0.00000000
Remarks
The initial value for this property is acDimPrecisionFour.
This property is only available when the ToleranceDisplay property is set to any value other than acTolNone.
Note: This property overrides the value of the DIMTDEC system variable for the given dimension.
Examples
VBA:
Sub Example_TolerancePrecision()
    ' This example creates an aligned dimension in model space and
    ' uses TolerancePrecision to allow the user to change the
    ' precision of the dimension tolerance
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim oldTolerance As String, newTolerance As String
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5.12345678: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable and setup tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    dimObj.ToleranceLowerLimit = -0.0001
    dimObj.ToleranceUpperLimit = 0.005
    
    ThisDrawing.Application.ZoomAll
    ' Store old tolerance value as default for input box
    oldTolerance = dimObj.TolerancePrecision
    
    ' Allow the user to change the precision for the dimension tolerance
    newTolerance = InputBox(\"Enter a new tolerance precision for the dimension.  The value must range from 0 to 8.\", \"Dimension Tolerance Precision\", oldTolerance)
    
    Select Case newTolerance
        Case 0: newTolerance = acDimPrecisionZero
        Case 1: newTolerance = acDimPrecisionOne
        Case 2: newTolerance = acDimPrecisionTwo
        Case 3: newTolerance = acDimPrecisionThree
        Case 4: newTolerance = acDimPrecisionFour
        Case 5: newTolerance = acDimPrecisionFive
        Case 6: newTolerance = acDimPrecisionSix
        Case 7: newTolerance = acDimPrecisionSeven
        Case 8: newTolerance = acDimPrecisionEight
        Case Else
            MsgBox \"The tolerance precision has not been changed.\"
            Exit Sub
    End Select
    
    dimObj.TolerancePrecision = newTolerance   ' Commit changes to tolerance precision
    
    ThisDrawing.Regen acAllViewports
    
    ' Read back and display the dimension tolerance precision
    newTolerance = dimObj.TolerancePrecision
    MsgBox \"The tolerance precision has been set to \" & newTolerance & \" decimal places\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TolerancePrecision()
    ;; This example creates an aligned dimension in model space and
    ;; uses TolerancePrecision to allow the user to change the
    ;; precision of the dimension tolerance
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5.12345678 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable and setup tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    (vla-put-ToleranceLowerLimit dimObj -0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.005)
    
    (vla-ZoomAll acadObj)
    ;; Store old tolerance value as default for input box
    (setq oldTolerance (vla-get-TolerancePrecision dimObj))
    
    ;; Allow the user to change the precision for the dimension tolerance
    (setq newTolerance (vla-GetInteger (vla-get-Utility doc) (strcat \"\nEnter a new tolerance precision for the dimension (0 to 8) <\" (itoa oldTolerance) \">: \")))
    (if (= newTolerance nil) (setq newTolerance oldTolerance))
    (setq newTolerance (cond
                           ((= newTolerance 0) acDimPrecisionZero)
                           ((= newTolerance 1) acDimPrecisionOne)
                           ((= newTolerance 2) acDimPrecisionTwo)
                           ((= newTolerance 3) acDimPrecisionThree)
                           ((= newTolerance 4) acDimPrecisionFour)
                           ((= newTolerance 5) acDimPrecisionFive)
                           ((= newTolerance 6) acDimPrecisionSix)
                           ((= newTolerance 7) acDimPrecisionSeven)
                           ((= newTolerance 8) acDimPrecisionEight)
                           (progn (setq newTolerance nil) (alert \"The tolerance precision has not been changed.\"))
                       ))
    (if (/= newTolerance nil)
        (progn
            (vla-put-TolerancePrecision dimObj newTolerance)   ;; Commit changes to tolerance precision
	    
            (vla-Regen doc acAllViewports)
	    
            ;; Read back and display the dimension tolerance precision
            (alert (strcat \"The tolerance precision has been set to \" (itoa (vla-get-TolerancePrecision dimObj)) \" decimal places\"))
        )
    )
)
")
("ToleranceSuppressLeadingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B30EC7F1-211E-4E6D-B577-3055F4E35E0E"
"
ToleranceSuppressLeadingZeros Property (ActiveX)
Specifies the suppression of leading zeros in tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceSuppressLeadingZeros
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress leading zeros in decimal values. For example, 0.5000 becomes .5000.
    False: Do not suppress leading zeros in decimal values.
Remarks
The initial value for this property is False.
Note: This value overrides the value for the DIMTZIN system variable.
Examples
VBA:
Sub Example_ToleranceSuppressLeadingZeros()
    ' This example creates an aligned dimension in model space and
    ' uses ToleranceSuppressLeadingZeros to toggle the display of leading zeros
    ' in the dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable and setup tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    dimObj.ToleranceLowerLimit = -0.0001: dimObj.ToleranceUpperLimit = 0.005
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of leading zeros in the dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of leading zeros for the dimension tolerance value
            dimObj.ToleranceSuppressLeadingZeros = Not (dimObj.ToleranceSuppressLeadingZeros)
            ThisDrawing.Regen acAllViewports
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceSuppressLeadingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses ToleranceSuppressLeadingZeros to toggle the display of leading zeros
    ;; in the dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.01 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable and setup tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    (vla-put-ToleranceLowerLimit dimObj -0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.005)
    (vla-ZoomAll acadObj)
    ;; Toggle the display of leading zeros for the dimension tolerance value
    (vla-put-ToleranceSuppressLeadingZeros dimObj (if (= (vla-get-ToleranceSuppressLeadingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of leading zeros toggled.\")
    ;; Toggle the display of leading zeros for the dimension tolerance value back to previous state
    (vla-put-ToleranceSuppressLeadingZeros dimObj (if (= (vla-get-ToleranceSuppressLeadingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of leading zeros toggled back.\")
)
")
("ToleranceSuppressTrailingZeros" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E1D82AE6-C9C3-4C1D-9013-03F2F803F2A4"
                                  "
ToleranceSuppressTrailingZeros Property (ActiveX)
Specifies the suppression of trailing zeros in dimension values.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceSuppressTrailingZeros
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress trailing zeros in decimal values. For example, 12.5000 becomes 12.5.
    False: Do not suppress trailing zeros in decimal values.
Remarks
The initial value for this property is False.
Note: This value overrides the value for the DIMTZIN system variable.
Examples
VBA:
Sub Example_ToleranceSuppressTrailingZeros()
    ' This example creates an aligned dimension in model space and
    ' uses ToleranceSuppressTrailingZeros to toggle the display of trailing zeros
    ' in the dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Enable and setup tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    dimObj.ToleranceLowerLimit = -0.0001: dimObj.ToleranceUpperLimit = 0.005
    
    ThisDrawing.Application.ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of trailing zeros in the dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of trailing zeros for the dimension tolerance value
            dimObj.ToleranceSuppressTrailingZeros = Not (dimObj.ToleranceSuppressTrailingZeros)
            ThisDrawing.Regen acAllViewports
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceSuppressTrailingZeros()
    ;; This example creates an aligned dimension in model space and
    ;; uses ToleranceSuppressTrailingZeros to toggle the display of trailing zeros
    ;; in the dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.01 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    
    ;; Enable and setup tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    (vla-put-ToleranceLowerLimit dimObj -0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.005)
    (vla-ZoomAll acadObj)
    ;; Toggle the display of trailing zeros for the dimension tolerance value
    (vla-put-ToleranceSuppressTrailingZeros dimObj (if (= (vla-get-ToleranceSuppressTrailingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of trailing zeros toggled.\")
    ;; Toggle the display of trailing zeros for the dimension tolerance value back to previous state
    (vla-put-ToleranceSuppressTrailingZeros dimObj (if (= (vla-get-ToleranceSuppressTrailingZeros dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of trailing zeros toggled back.\")
)
")
("ToleranceSuppressZeroFeet" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-45DBA1FA-E96F-4A85-AD80-68318BCBED05"
                             "
ToleranceSuppressZeroFeet Property (ActiveX)
Specifies the suppression of a zero foot measurement in tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceSuppressZeroFeet
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero foot measurement.
    False: Do not suppress the display of a zero foot measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMTZIN system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceSuppressZeroFeet()
    ' This example creates an aligned dimension in model space and
    ' uses ToleranceSuppressZeroFeet to toggle the display of zeros feet
    ' in the dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 6.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 8: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    dimObj.UnitsFormat = acDimLArchitectural
    
    ' Enable and setup tolerance display
    dimObj.ToleranceDisplay = acTolLimits
    dimObj.ToleranceLowerLimit = -0.0001: dimObj.ToleranceUpperLimit = 0.0001
    
    ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of zero feet in the dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero feet for the dimension tolerance value
            dimObj.ToleranceSuppressZeroFeet = Not (dimObj.ToleranceSuppressZeroFeet)
            ThisDrawing.Regen acAllViewports
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceSuppressZeroFeet()
    ;; This example creates an aligned dimension in model space and
    ;; uses ToleranceSuppressZeroFeet to toggle the display of zeros feet
    ;; in the dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 6.01 5 0)
          location (vlax-3d-point 5 8 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-put-UnitsFormat dimObj acDimLArchitectural)
    
    ;; Enable and setup tolerance display
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    (vla-put-ToleranceLowerLimit dimObj -0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.0001)
    (vla-ZoomAll acadObj)
    ;; Toggle the display of zero feet for the dimension tolerance value
    (vla-put-ToleranceSuppressZeroFeet dimObj (if (= (vla-get-ToleranceSuppressZeroFeet dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero feet toggled.\")
    ;; Toggle the display of zero feet for the dimension tolerance value back to previous state
    (vla-put-ToleranceSuppressZeroFeet dimObj (if (= (vla-get-ToleranceSuppressZeroFeet dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero feet toggled back.\")
)
")
("ToleranceSuppressZeroInches" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-96A5AD6B-B726-46DF-B276-1B7F765D9A17"
                               "
ToleranceSuppressZeroInches Property (ActiveX)
Specifies the suppression of a zero inch measurement in tolerance values.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceSuppressZeroInches
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Suppress the display of a zero inch measurement.
    False: Do not suppress the display of a zero inch measurement.
Remarks
The initial value for this property is False.
Note: This property overrides the value for the DIMTZIN system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceSuppressZeroInches()
    ' This example creates an aligned dimension in model space and
    ' uses ToleranceSuppressZeroInches to toggle the display of zeros inches
    ' in the dimension tolerance display
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 6.01: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 8: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    dimObj.UnitsFormat = acDimLArchitectural
    
    ' Enable and setup tolerance display
    dimObj.ToleranceDisplay = acTolLimits
    dimObj.ToleranceLowerLimit = -95#: dimObj.ToleranceUpperLimit = 95#
    
    ZoomAll
    
Toggle:
    Select Case MsgBox(\"Press OK to toggle the display of zero inches in the dimension tolerance\", vbOKCancel)
        Case vbOK
            ' Toggle the display of zero inches for the dimension tolerance value
            dimObj.ToleranceSuppressZeroInches = Not (dimObj.ToleranceSuppressZeroInches)
            ThisDrawing.Regen acAllViewports
        
        Case vbCancel
            Exit Sub
    End Select
    
    GoTo Toggle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceSuppressZeroInches()
    ;; This example creates an aligned dimension in model space and
    ;; uses ToleranceSuppressZeroInches to toggle the display of zeros inches
    ;; in the dimension tolerance display
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 6.01 5 0)
          location (vlax-3d-point 5 8 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-put-UnitsFormat dimObj acDimLArchitectural)
    
    ;; Enable and setup tolerance display
    (vla-put-ToleranceDisplay dimObj acTolLimits)
    (vla-put-ToleranceLowerLimit dimObj -95)
    (vla-put-ToleranceUpperLimit dimObj 95)
  
    (vla-ZoomAll acadObj)
    ;; Toggle the display of zero inches for the dimension tolerance value
    (vla-put-ToleranceSuppressZeroInches dimObj (if (= (vla-get-ToleranceSuppressZeroInches dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero inches toggled.\")
    ;; Toggle the display of zero inches for the dimension tolerance value back to previous state
    (vla-put-ToleranceSuppressZeroInches dimObj (if (= (vla-get-ToleranceSuppressZeroInches dimObj) :vlax-true) :vlax-false :vlax-true))
    (vla-Regen doc acAllViewports)
    (alert \"Suppression of zero inches toggled back.\")
)
")
("ToleranceUpperLimit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-99AA0BC0-5612-4434-88ED-DD55D6937450"
"
ToleranceUpperLimit Property (ActiveX)
Specifies the maximum tolerance limit for dimension text.
Supported platforms: Windows only
Signature
VBA:
object.ToleranceUpperLimit
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The objects this property applies to.
Property Value
Read-only: No
Type: Double
The tolerance lower limit.
Remarks
The initial value for this property is 0.0000.
This property is only available when the ToleranceDisplay property is set to acTolSymmetrical, acTolDeviation, or acTolLimits.
Note: This property overrides the value of the DIMTP system variable for the given dimension.
Examples
VBA:
Sub Example_ToleranceLowerLimit()
    ' This example creates an aligned dimension in model space and
    ' sets the tolerance limits using the ToleranceLowerLimit and
    ' ToleranceUpperLimit properties
    Dim dimObj As AcadDimAligned
    Dim newText As AcadTextStyle
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 5.5: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    
    ' Turn on tolerance display
    dimObj.ToleranceDisplay = acTolSymmetrical
    
    ThisDrawing.Application.ZoomAll
    
    ' Read and display the tolerance limits for the dimension
    MsgBox \"The tolerance lower limit is set to: \" & dimObj.ToleranceLowerLimit & vbCrLf & _
           \"The tolerance upper limit is set to: \" & dimObj.ToleranceUpperLimit
    
    ' Adjust the tolerance limits for this dimension
    dimObj.ToleranceLowerLimit = 0.0001
    dimObj.ToleranceUpperLimit = 0.005
    
    ThisDrawing.Regen acAllViewports
    
    ' Read and display the tolerance limits for the dimension
    MsgBox \"The tolerance lower limit is now set to: \" & dimObj.ToleranceLowerLimit & vbCrLf & _
           \"The tolerance upper limit is now set to: \" & dimObj.ToleranceUpperLimit
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ToleranceLowerLimit()
    ;; This example creates an aligned dimension in model space and
    ;; sets the tolerance limits using the ToleranceLowerLimit and
    ;; ToleranceUpperLimit properties
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 5.5 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    ;; Turn on tolerance display
    (vla-put-ToleranceDisplay dimObj acTolSymmetrical)
    
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the tolerance limits for the dimension
    (alert (strcat \"The tolerance lower limit is set to: \" (rtos (vla-get-ToleranceLowerLimit dimObj) 2)
                   \"\nThe tolerance upper limit is set to: \" (rtos (vla-get-ToleranceUpperLimit dimObj) 2)))
    
    ;; Adjust the tolerance limits for this dimension
    (vla-put-ToleranceLowerLimit dimObj 0.0001)
    (vla-put-ToleranceUpperLimit dimObj 0.005)
    
    (vla-Regen doc acAllViewports)
    
    ;; Read and display the tolerance limits for the dimension
    (alert (strcat \"The tolerance lower limit is now set to: \" (rtos (vla-get-ToleranceLowerLimit dimObj) 2)
                   \"\nThe tolerance upper limit is now set to: \" (rtos (vla-get-ToleranceUpperLimit dimObj) 2)))
)
")
("TopHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-130517DA-F073-4816-B60D-0EFF59AE270E"
             "
TopHeight Property (ActiveX)
Specifies elevation of section plane top extents relative to the object’s elevation.
Supported platforms: Windows only
Signature
VBA:
object.TopHeight
object
    Type: Section
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Height of the section plane's top.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TopRadius" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-23C12F46-55FC-43F2-BE86-EB6A74C2EF36"
             "
TopRadius Property (ActiveX)
Specifies the top radius of the helix.
Supported platforms: Windows only
Signature
VBA:
object.TopRadius
object
    Type: Helix
    The object this property applies to.
Property Value
Read-only: No
Type: Double
Radius of the helix object's top.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("TotalAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F9FB52AA-0F9A-409D-B334-A1687FF8CA26"
"
TotalAngle Property (ActiveX)
Gets the total angle for the arc.
Supported platforms: Windows only
Signature
VBA:
object.TotalAngle
object
    Type: Arc
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The total length of the arc in radians.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TotalAngle()
    ' This example creates an Arc in model space and
    ' returns the total angle of the new Arc
    
    Dim arcObj As AcadArc
    Dim centerPoint(0 To 2) As Double
    Dim radius As Double
    Dim startAngleInDegree As Double, endAngleInDegree As Double
    Dim startAngleInRadian As Double, endAngleInRadian As Double
    
    ' Define the Arc
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius = 5#
    startAngleInDegree = 10#: endAngleInDegree = 230#
    ' Convert the angles in degrees to angles in radians
    startAngleInRadian = startAngleInDegree * 3.141592 / 180#
    endAngleInRadian = endAngleInDegree * 3.141592 / 180#
    
    ' Create the arc object in model space
    Set arcObj = ThisDrawing.ModelSpace.AddArc(centerPoint, radius, startAngleInRadian, endAngleInRadian)
    ThisDrawing.Application.ZoomAll
    
    ' Return length of new arc
    MsgBox \"The total angle of the new Arc is: \" & arcObj.TotalAngle
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TotalAngle()
    ;; This example creates an Arc in model space and
    ;; returns the total angle of the new Arc
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the arc
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius 5
          startAngleInDegree 10
          endAngleInDegree 230)
    
    ;; Convert the angles in degrees to angles in radians
    (setq startAngleInRadian (/ (* startAngleInDegree 3.141592) 180))
    (setq endAngleInRadian (/ (* endAngleInDegree 3.141592) 180))
    
    ;; Create the arc object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq arcObj (vla-AddArc modelSpace centerPoint radius startAngleInRadian endAngleInRadian))
    (vla-ZoomAll acadObj)
    
    ;; Return length of new arc
    (alert (strcat \"The total angle of the new Arc is: \" (rtos (vla-get-TotalAngle arcObj) 2)))
)
")
("TotalLength" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EE94A912-2BE8-49A1-80F2-AB520FF52D76"
"
TotalLength Property (ActiveX)
Specifies the total length of the helix.
Supported platforms: Windows only
Signature
VBA:
object.TotalLength
object
    Type: Helix
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The total length of the helix.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
")
("TranslateIDs" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-59BD5654-63AB-4780-9E0F-DEEED5068E94"
                "
TranslateIDs Property (ActiveX)
Specifies the translation of any contained object IDs during deepClone or wblockClone operations.
Supported platforms: Windows only
Signature
VBA:
object.TranslateIDs
object
    Type: XRecord
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Translate contained IDs during deepClone and wblockClone operations.
    False: Do not translate contained IDs during deepClone and wblockClone operations.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_TranslateIDs()
    ' This example creates a new XRecord if one doesn't exist,
    ' and toggles the setting for TranslateIDs
    
    Dim TrackingDictionary As AcadDictionary, TrackingXRecord As AcadXRecord
    Dim XRecordDataType As Variant, XRecordData As Variant
    Dim ArraySize As Long, iCount As Long
    Dim DataType As Integer, Data As String, msg As String
    
    ' Unique identifiers to distinguish our XRecordData from other XRecordData
    Const TYPE_STRING = 1
    Const TAG_DICTIONARY_NAME = \"ObjectTrackerDictionary\"
    Const TAG_XRECORD_NAME = \"ObjectTrackerXRecord\"
    ' Connect to the dictionary we store the XRecord in
    On Error GoTo CREATE
    Set TrackingDictionary = ThisDrawing.Dictionaries(TAG_DICTIONARY_NAME)
    Set TrackingXRecord = TrackingDictionary.GetObject(TAG_XRECORD_NAME)
    On Error GoTo 0
    
    ' Get current XRecordData
    TrackingXRecord.GetXRecordData XRecordDataType, XRecordData
    
    ' If we don't have an array already then create one
    If VarType(XRecordDataType) And vbArray = vbArray Then
        ArraySize = UBound(XRecordDataType) + 1       ' Get the size of the data elements returned
        ArraySize = ArraySize + 1                        ' Increase to hold new data
    
        ReDim Preserve XRecordDataType(0 To ArraySize)
        ReDim Preserve XRecordData(0 To ArraySize)
    Else
        ArraySize = 0
        ReDim XRecordDataType(0 To ArraySize) As Integer
        ReDim XRecordData(0 To ArraySize) As Variant
    End If
    
    ' Find the current value of TranslateIDs
    Dim currXlate As Boolean
    currXlate = TrackingXRecord.TranslateIDs
    MsgBox \"The current setting of the TranslateIDs is \" & currXlate
    
    ' Toggle the setting
    TrackingXRecord.TranslateIDs = Not currXlate
    MsgBox \"The new setting for the TranslateIDs is \" & TrackingXRecord.TranslateIDs
    
    ' Reset the value
    TrackingXRecord.TranslateIDs = currXlate
    MsgBox \"TranslateIDs has been reset to \" & TrackingXRecord.TranslateIDs
    
    Exit Sub
CREATE:
    ' Create the entities that hold our XRecordData
    If TrackingDictionary Is Nothing Then  ' Make sure we have our tracking object
        Set TrackingDictionary = ThisDrawing.Dictionaries.Add(TAG_DICTIONARY_NAME)
        Set TrackingXRecord = TrackingDictionary.AddXRecord(TAG_XRECORD_NAME)
    End If
    
    Resume
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TranslateIDs()
    ;; This example creates a new XRecord if one doesn't exist,
    ;; and toggles the setting for TranslateIDs
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Unique identifiers to distinguish our XRecordData from other XRecordData
    (setq TYPE_STRING 1
          TAG_DICTIONARY_NAME \"ObjectTrackerDictionary\"
          TAG_XRECORD_NAME \"ObjectTrackerXRecord\")
    ;; Connect to the dictionary we store the XRecord in
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq TrackingDictionary (vl-catch-all-apply 'vla-Item (list dictionaries TAG_DICTIONARY_NAME)))
    ;; (= (vl-catch-all-error-message TrackingDictionary) \"Automation Error. Key not found\")
  
    (if (= (type TrackingDictionary) 'VLA-OBJECT)
        (setq TrackingXRecord (vla-GetObject TrackingDictionary TAG_XRECORD_NAME))
        (progn
            ;; Create the objects that hold this XRecordData
            (setq TrackingDictionary (vla-Add dictionaries TAG_DICTIONARY_NAME))
            (setq TrackingXRecord  (vla-AddXRecord TrackingDictionary TAG_XRECORD_NAME))
	       )
    )
    ;; Get current XRecordData
    (vla-GetXRecordData TrackingXRecord 'temp-XRecordDataType 'temp-XRecordData)
    
    ;; If we don't have an array already then create one
    (setq ArraySize 0)
    (if (/= temp-XRecordDataType nil)
        (progn
	    (setq ArraySize (vlax-safearray-get-u-bound temp-XRecordDataType 1))
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger (cons 0 (1+ ArraySize))))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant (cons 0 (1+ ArraySize))))
            (setq iCount 0)
            (while (>= ArraySize iCount)
                ;; Get information for this element
                (setq DataType (vlax-safearray-get-element temp-XRecordDataType iCount))
                (setq Data (vlax-variant-value (vlax-safearray-get-element temp-XRecordData iCount)))
                (vlax-safearray-put-element XRecordDataType iCount DataType)
                (vlax-safearray-put-element XRecordData iCount Data)
	      
                (setq iCount (1+ iCount))
            )
	       )
        (progn
            (setq XRecordDataType (vlax-make-safearray vlax-vbInteger '(0 . 0)))
            (setq XRecordData (vlax-make-safearray vlax-vbVariant '(0 . 0)))
	       )
    )
    
    ;; Find the current value of TranslateIDs
    (setq currXlate (vla-get-TranslateIDs TrackingXRecord))
    (alert (strcat \"The current setting of the TranslateIDs is \" (if (= currXlate :vlax-true) \"True\" \"False\")))
    
    ;; Toggle the setting
    (vla-put-TranslateIDs TrackingXRecord (if (= currXlate :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The new setting for the TranslateIDs is \" (if (= (vla-get-TranslateIDs TrackingXRecord) :vlax-true) \"True\" \"False\")))
    
    ;; Reset the value
    (vla-put-TranslateIDs TrackingXRecord currXlate)
    (alert (strcat \"TranslateIDs has been reset to \" (if (= (vla-get-TranslateIDs TrackingXRecord) :vlax-true) \"True\" \"False\")))
)
")
("Transparency" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9854CD06-75D8-4024-BB67-BA80ED00ABE5"
"
Transparency Property (ActiveX)
Specifies if the transparency for a particular bitonal image is on or off.
Supported platforms: Windows only
Signature
VBA:
object.Transparency
object
    Type: GeomapImage, RasterImage, Wipeout
    The objects this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Transparency is on.
    False: Transparency is off.
Remarks
Bitonal raster images are images consisting only of a foreground and a background color. When you attach a bitonal image, the entire image inherits current layer settings for color. In addition to the modifications you can make to any attached image, you can modify bitonal images by turning the transparency of the background on and off.
Note: Bitonal images and bitonal image boundaries are always the same color.
Examples
VBA:
Sub Example_Transparency()
    ' This example inserts a raster image and finds the current status
    ' of Transparency for the image. It then changes the Transparency
    ' status of the image.
    
    ' This example uses the \"2d Projected Polylines.jpg\" found in the sample
    ' directory. If you do not have the image, or it is located
    ' in a different directory, insert a valid path and name for the
    ' imageName variable below.
    Dim insertionPoint(0 To 2) As Double
    Dim scalefactor As Double
    Dim rotAngleInDegree As Double, rotAngle As Double
    Dim imageName As String
    Dim raster As AcadRasterImage
    imageName = \"C:\AutoCAD\sample\2d Projected Polylines.jpg\"
    insertionPoint(0) = 2#: insertionPoint(1) = 2#: insertionPoint(2) = 0#
    scalefactor = 1#
    rotAngleInDegree = 0#
    rotAngle = rotAngleInDegree * 3.141592 / 180#
    
    On Error Resume Next
    
    ' Creates a raster image in model space
    Set raster = ThisDrawing.ModelSpace.AddRaster(imageName, insertionPoint, scalefactor, rotAngle)
    If Err.Description = \"Filer error\" Then
        MsgBox imageName & \" could not be found.\"
        Exit Sub
    End If
    ' Find the current Transparency
    ThisDrawing.Regen True
    MsgBox \"The Transparency is currently set to: \" & raster.transparency, vbInformation
    
    ' Change the Transparency
    If (raster.transparency) Then
        raster.transparency = False
    Else
        raster.transparency = True
    End If
    ThisDrawing.Regen True
    MsgBox \"The Transparency is now set to: \" & raster.transparency, vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Transparency()
    ;; This example inserts a raster image and finds the current status
    ;; of Transparency for the image. It then changes the Transparency
    ;; status of the image.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    ;; This example uses the \"2d Projected Polylines.jpg\" found in the sample
    ;; directory. If you do not have the image, or it is located
    ;; in a different directory, insert a valid path and name for the
    ;; imageName variable below.
    (setq insertionPoint (vlax-3d-point 2 2 0)
          imageName \".\\Sample\\VBA\\2d Projected Polylines.jpg\"
          scalefactor 1
          rotAngle (/ (* 0 3.141592) 180))
    
    (if (/= (findfile imageName) nil)
        (progn
            ;; Creates a raster image in model space
            (setq modelSpace (vla-get-ModelSpace doc))
            (setq raster (vla-AddRaster modelSpace (findfile imageName) insertionPoint scalefactor rotAngle))
            (vla-ZoomExtents acadObj)
            ;; Find the current Transparency
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The Transparency is currently set to: \" (if (= (vla-get-Transparency raster) :vlax-true) \"True\" \"False\")))
    
            ;; Change the Transparency
            (vla-put-Transparency raster (if (= (vla-get-Transparency raster) :vlax-true) :vlax-false :vlax-true))
            (vla-Regen doc :vlax-true)
            (alert (strcat \"The Transparency is currently now set to: \" (if (= (vla-get-Transparency raster) :vlax-true) \"True\" \"False\")))
	       )
        (alert (strcat imageName \" could not be found.\"))
    )
)
")
("TrueColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E5F6DDEB-1856-4D42-B31D-DFB757D74466"
             "
TrueColor Property (ActiveX)
Specifies the True Color of an object.
Supported platforms: Windows only
Signature
VBA:
object.TrueColor
object
    Type: All drawing objects, AttributeReference, Dimension, Group, Layer
    The objects this property applies to.
Property Value
Read-only: No
Type: AcCmColor
The True Color object of the object.
Remarks
This property is used to change an object's color. Colors are identified by an AcCmColor object. This object can hold an RGB value, an ACI number (an integer from 1 to 255), or a named color. Using an RGB value, you can choose from millions of colors.
Examples
VBA:
Sub Example_TrueColor()
    ' This example draws a line and returns the RGB values
    Dim color As AcadAcCmColor
    Set color = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    color.SetRGB 80, 100, 244
    
    Dim line As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
        
    startPoint(0) = 1#: startPoint(1) = 1#: startPoint(2) = 0#
    endPoint(0) = 5#: endPoint(1) = 5#: endPoint(2) = 0#
        
    Set line = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    line.TrueColor = color
    Dim retcolor As AcadAcCmColor
    Set retcolor = line.TrueColor
    
    MsgBox \"Red = \" & retcolor.Red & vbLf & _
           \"Green = \" & retcolor.Green & vbLf & _
           \"Blue = \" & retcolor.Blue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TrueColor()
    ;; This example draws a line and returns the RGB values
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq color (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB color 80 100 244)
    
    (setq startPoint (vlax-3d-point 1 1 0)
          endPoint (vlax-3d-point 5 5 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    
    (vla-put-TrueColor lineObj color)
    (setq retcolor (vla-get-TrueColor lineObj))
    
    (alert (strcat \"Red = \" (itoa (vla-get-Red retcolor))
                   \"\nGreen = \" (itoa (vla-get-Green retcolor))
                   \"\nBlue = \" (itoa (vla-get-Blue retcolor))))
)
")
("TurnHeight" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F248411C-BCE8-4AE0-934A-C83D78456870"
              "
TurnHeight Property (ActiveX)
Specifies the height of one full turn for the helix.
Supported platforms: Windows only
Signature
VBA:
object.TurnHeight
object
    Type: Helix
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The height of one full turn.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
")
("TurnSlope" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BFB79B8A-8AA1-449D-974D-A068F39DB8C5"
             "
TurnSlope Property (ActiveX)
Displays the constant incline angle for the helix path.
Supported platforms: Windows only
Signature
VBA:
object.TurnSlope
object
    Type: Helix
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_ANGLE
The constant incline angle.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
")
("Turns" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-89A7D36A-D531-4300-9BA0-8406099419BB"
"
Turns Property (ActiveX)
Specifies the number of turns for the helix.
Supported platforms: Windows only
Signature
VBA:
object.Turns
object
    Type: Helix
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_NOUNITS
The number of turns.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
")
("Twist" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-429E767E-C2BF-4A73-AEAF-F0792BA5F0D4"
         "
Twist Property (ActiveX)
Controls the twist direction of the helix or specifies the amount of rotation along the entire length of the sweep path.
Supported platforms: Windows only
Signature
VBA:
object.Twist
object
    Type: Helix, SweptSurface
    The objects this property applies to.
Property Value - Helix
Read-only: No
Type: AcHelixTwistType enum
The twist direction.
    acCCW: Counterclockwise
    acCW: Clockwise
Property Value - SweptSurface
Read-only: No
Type: ACAD_ANGLE
The amount of rotation along the swept path.
Remarks
No additional remarks.
Examples - Helix
VBA:
Sub Example_Helix_BaseRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.BaseRadius = helix.BaseRadius * 2
            MsgBox \"Baseradius of helix is doubled to \" & helix.BaseRadius * 2
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TopRadius()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.TopRadius = helix.TopRadius * 0.5
            MsgBox \"Top radius of helix is halved to \" & helix.TopRadius * 0.5
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Direction()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            If helix.Twist = acCCW Then
                helix.Twist = acCW
            Else
                helix.Twist = acCCW
            End If
            MsgBox \"Direction is reversed\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Height()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acHeight
            helix.height = helix.height * 2
            MsgBox \"Height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_Turns()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurns
            helix.Turns = helix.Turns * 2
            MsgBox \"Turns doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Sub Example_Helix_TurnHeight()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"TEST_HELIX\")
    Dim mode As Integer
    
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    
    Dim obj As AcadEntity
    Dim helix As AcadHelix
    Dim helixBaseRadius As Double
    Dim objName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
            If TypeOf obj Is AcadHelix Then
            Set helix = obj
            helix.Constrain = acTurnHeight
            helix.TurnHeight = helix.TurnHeight * 2
            MsgBox \"Turns height doubled\"
            End If
    Next
    ssetObj.Delete
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Helix_BaseRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-BaseRadius helix (* (vla-get-BaseRadius helix) 2))
                (alert (strcat \"Baseradius of helix is doubled to \" (rtos (vla-get-BaseRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TopRadius()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-TopRadius helix (* (vla-get-TopRadius helix) 0.5))
                (alert (strcat \"Top radius of helix is halved to \" (rtos (vla-get-TopRadius helix) 2)))
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Direction()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
	        (if (= (vla-get-Twist helix) acCCW)
	            (vla-put-Twist helix acCW)
	            (vla-put-Twist helix acCCW)
	        )
                (alert \"Direction is reversed\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Height()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acHeight)
                (vla-put-Height helix (* (vla-get-Height helix) 2))
                (alert \"Height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_Turns()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurns)
                (vla-put-Turns helix (* (vla-get-Turns helix) 2))
                (alert \"Turns doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
(defun c:Example_Helix_TurnHeight()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"TEST_HELIX\"))
    (vla-SelectOnScreen ssetObj)
    
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (if (= objName \"AcDbHelix\")
            (progn
                (setq helix obj)
                (vla-put-Constrain helix acTurnHeight)
                (vla-put-TurnHeight helix (* (vla-get-TurnHeight helix) 2))
                (alert \"Turns height doubled\")
            )
        )
    )
    (vla-Delete ssetObj)
)
Examples - SweptSurface
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("TwistAngle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-37481065-7A7F-46D7-84E5-B1BB072CFF36"
"
TwistAngle Property (ActiveX)
Specifies the twist angle for the viewport.
Supported platforms: Windows only
Signature
VBA:
object.TwistAngle
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The twist angle in radians.
Remarks
This method twists or tilts the view around the line of sight. AutoCAD measures the twist angle counterclockwise, with 0 degrees to the right.
Examples
VBA:
Sub Example_TwistAngle()
    ' This example creates a new paper space viewport.
    ' It then displays the twist angle of the viewport.
    
    Dim pviewportObj As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the pviewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 40
    height = 40
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    ' Create the pviewport
    Set pviewportObj = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    pviewportObj.Display True
    ThisDrawing.MSpace = True
    ThisDrawing.ActivePViewport = pviewportObj
    ThisDrawing.Regen acAllViewports
    
    ' Find the twist angle for the viewport
    Dim twistAngle As Double
    twistAngle = pviewportObj.TwistAngle
    MsgBox \"The twist angle of the paper space viewport is \" & pviewportObj.twistAngle, , \"TwistAngle Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_TwistAngle()
    ;; This example creates a new paper space viewport.
    ;; It then displays the twist angle of the viewport.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the pviewport
    (setq center (vlax-3d-point 3 3 0)
          width 40
          height 40)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    ;; Create the pviewport
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj (vla-AddPViewport paperSpace center width height))
    (vla-Display pviewportObj :vlax-true)
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc pviewportObj)
    (vla-Regen doc acAllViewports)
    
    ;; Find the twist angle for the viewport
    (setq twistAngle (vla-get-TwistAngle pviewportObj))
    (alert (strcat \"The twist angle of the paper space viewport is \" (rtos twistAngle 2)))
)
")
("Type" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-60D723A4-F1AD-4FF5-B448-268108A2BEDA"
"
Type Property (ActiveX)
Specifies type of a Leader, MenuGroup, PopupMenuItem, ToolbarItem, Polyline, or PolygonMesh object.
Supported platforms: Windows only
Signature
VBA:
object.Type
object
    Type: 3DPolyline, Leader, MenuGroup, PolygonMesh, Polyline, PopupMenuItem, ToolbarItem
    The object this property applies to.
Property Value - 3DPolyline
Read-only: No
Type: ac3DPolylineType enum
    acSimple3DPoly: A simple polyline.
    acQuadSpline3DPoly: A quadratic B-spline polyline.
    acCubicSpline3DPoly: A cubic B-spline polyline.
Property Value - Leader
Read-only: No
Type: acLeaderType enum
    acLineNoArrow: A line with no arrow.
    acLineWithArrow: A line with arrow.
    acSplineNoArrow: A spline with no arrow.
    acSplineWithArrow: A spline with arrow.
Property Value - MenuGroup
Read-only: Yes
Type: acMenuGroupType enum
    acBaseMenuGroup: The base menu group.
    acPartialMenuGroup: A partial menu group.
Property Value - PolygonMesh
Read-only: No
Type: acPolymeshType enum
    acSimpleMesh: A simple mesh with no surface fitting or smoothing.
    acQuadSurfaceMesh: A quadratic B-spline surface fit.
    acCubicSurfaceMesh: A cubic B-spline surface fit.
    acBezierSurfaceMesh: A Bezier surface fit.
Property Value - Polyline
Read-only: No
Type: acPolylineType enum
    acSimplePoly: A simple polyline.
    acFitCurvePoly: A fit curve polyline.
    acQuadSplinePoly: A quadratic B-spline polyline.
    acCubicSplinePoly: A cubic B-spline polyline.
Property Value - PopupMenuItem
Read-only: Yes
Type: acMenuItemType enum
    acMenuItem: A menu item.
    acMenuSeparator: A menu separator.
    acMenuSubMenu: A sub menu.
Property Value - ToolbarItem
Read-only: Yes
Type: acToolbarItemType enum
    acToolbarButton: A generic button.
    acToolbarFlyout: A flyout button.
    acToolbarControl: A control button.
    acToolbarSeparator: A separator.
Remarks
PolygonMesh: If the PolygonMesh type is set to acSimpleMesh then the M and N vertex count values will be used for vertex row column sizes. For any other PolygonMesh type, the M and N density values will be used as the row and column sizes.
Examples
VBA:
Sub Example_Type()
    ' This example creates a leader in model space.
    ' It then changes the type of the leader.
   
    Dim leaderObj As AcadLeader
    Dim points(0 To 8) As Double
    Dim leaderType As Integer
    Dim annotationObject As AcadEntity
    
    points(0) = 0: points(1) = 2: points(2) = 0
    points(3) = 4: points(4) = 4: points(5) = 0
    points(6) = 4: points(7) = 2: points(8) = 0
    leaderType = acLineNoArrow
    Set annotationObject = Nothing
        
    ' Create the leader object in model space
    Set leaderObj = ThisDrawing.ModelSpace.AddLeader(points, annotationObject, leaderType)
    ZoomAll
    
    ' Find the current leader type
    leaderType = leaderObj.Type
    MsgBox \"The leader type is \" & Choose(leaderObj.Type + 1, \"acLineNoArrow.\", \"acSplineNoArrow.\", \"acLineWithArrow.\", \"acSplineWithArrow.\"), , \"Type Example\"
    
    ' Change the leader type
    leaderObj.Type = acLineWithArrow
    leaderObj.Update
    MsgBox \"The leader type is \" & Choose(leaderObj.Type + 1, \"acLineNoArrow.\", \"acSplineNoArrow.\", \"acLineWithArrow.\", \"acSplineWithArrow.\"), , \"Type Example\"
    
    ' Change the leader type
    leaderObj.Type = acSplineNoArrow
    leaderObj.Update
    MsgBox \"The leader type is \" & Choose(leaderObj.Type + 1, \"acLineNoArrow.\", \"acSplineNoArrow.\", \"acLineWithArrow.\", \"acSplineWithArrow.\"), , \"Type Example\"
    
    ' Change the leader type
    leaderObj.Type = acSplineWithArrow
    leaderObj.Update
    MsgBox \"The leader type is \" & Choose(leaderObj.Type + 1, \"acLineNoArrow.\", \"acSplineNoArrow.\", \"acLineWithArrow.\", \"acSplineWithArrow.\"), , \"Type Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Type()
    ;; This example creates a leader in model space.
    ;; It then changes the type of the leader.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq points (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill points '(0 2 0
                                  4 4 0
				  4 2 0
				 )
    )
    (setq leaderType acLineNoArrow)
    (setq point (vlax-3d-point 4 2 0))
    (setq annotationObject (vla-AddMText modelSpace point 1 \"\"))  
        
    ;; Create the leader object in model space
    (setq leaderObj (vla-AddLeader modelSpace points annotationObject leaderType))
    ;; Remove the temporary annotaion object and adjust the last coordinate of the leader
    (vla-Erase annotationObject)
    (vla-put-Coordinate leaderObj 2 (vlax-3D-point 4 2 0))
    (vla-ZoomAll acadObj)
    
    ;; Find the current leader type
    (setq leaderType (vla-get-Type leaderObj))
    (alert (strcat \"The leader type is \" (cond
                                             ((= leaderType acLineNoArrow) \"acLineNoArrow.\")
                                             ((= leaderType acSplineNoArrow) \"acSplineNoArrow.\")
                                             ((= leaderType acLineWithArrow) \"acLineWithArrow.\")
                                             ((= leaderType acSplineWithArrow) \"acSplineWithArrow.\")
                                         )))
    
    ;; Change the leader type
    (vla-put-Type leaderObj acLineWithArrow)
    (vla-Update leaderObj)
    (setq leaderType (vla-get-Type leaderObj))
    (alert (strcat \"The leader type is \" (cond
                                             ((= leaderType acLineNoArrow) \"acLineNoArrow.\")
                                             ((= leaderType acSplineNoArrow) \"acSplineNoArrow.\")
                                             ((= leaderType acLineWithArrow) \"acLineWithArrow.\")
                                             ((= leaderType acSplineWithArrow) \"acSplineWithArrow.\")
                                         )))
    
    ;; Change the leader type
    (vla-put-Type leaderObj acSplineNoArrow)
    (vla-Update leaderObj)
    (setq leaderType (vla-get-Type leaderObj))
    (alert (strcat \"The leader type is \" (cond
                                             ((= leaderType acLineNoArrow) \"acLineNoArrow.\")
                                             ((= leaderType acSplineNoArrow) \"acSplineNoArrow.\")
                                             ((= leaderType acLineWithArrow) \"acLineWithArrow.\")
                                             ((= leaderType acSplineWithArrow) \"acSplineWithArrow.\")
                                         )))
    ;; Change the leader type
    (vla-put-Type leaderObj acSplineWithArrow)
    (vla-Update leaderObj)
    (setq leaderType (vla-get-Type leaderObj))
    (alert (strcat \"The leader type is \" (cond
                                             ((= leaderType acLineNoArrow) \"acLineNoArrow.\")
                                             ((= leaderType acSplineNoArrow) \"acSplineNoArrow.\")
                                             ((= leaderType acLineWithArrow) \"acLineWithArrow.\")
                                             ((= leaderType acSplineWithArrow) \"acSplineWithArrow.\")
                                         )))
)
")
("UCSIconAtOrigin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-40DB819D-38DE-4C78-9D94-035F66BD6FAA"
                   "
UCSIconAtOrigin Property (ActiveX)
Specifies if the UCS icon is displayed at the origin.
Supported platforms: Windows only
Signature
VBA:
object.UCSIconAtOrigin
object
    Type: PViewport, Viewport
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The UCS icon is displayed at the origin.
    False: The UCS icon is not displayed at the origin.
Remarks
If the UCS icon is on (see the UCSIconOn property) and is not displayed at the origin, it is displayed at the WCS coordinate defined by the UCSORG system variable.
Examples
VBA:
Sub Example_UCSIconAtOrigin()
    ' This example toggles the setting of UCSIconAtOrigin.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Make sure the UCS Icon is on, and a new UCS is defined.
    ' The new UCS defines the origin for the icon. When the icon
    ' is not displayed at the origin, it is displayed at the
    ' lower-left corner of the display.
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPoint(0 To 2) As Double
    Dim yAxisPoint(0 To 2) As Double
    origin(0) = 2: origin(1) = 2: origin(2) = 0
    xAxisPoint(0) = 3: xAxisPoint(1) = 2: xAxisPoint(2) = 0
    yAxisPoint(0) = 2: yAxisPoint(1) = 3: yAxisPoint(2) = 0
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPoint, yAxisPoint, \"UCS1\")
    ThisDrawing.ActiveUCS = ucsObj
    viewportObj.UCSIconOn = True
    
    ' Display the current setting of UCSIconAtOrigin
    MsgBox \"UCSIconAtOrigin is: \" & IIf(viewportObj.UCSIconAtOrigin, \"On\", \"Off\"), , \"UCSIconAtOrigin Example\"
    ' Toggle the setting of UCSIconAtOrigin
    viewportObj.UCSIconAtOrigin = Not (viewportObj.UCSIconAtOrigin)
    
    ' Reset the active viewport to see the change
    ThisDrawing.ActiveViewport = viewportObj
    
    MsgBox \"UCSIconAtOrigin is now: \" & IIf(viewportObj.UCSIconAtOrigin, \"On\", \"Off\"), , \"UCSIconAtOrigin Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UCSIconAtOrigin()
    ;; This example toggles the setting of UCSIconAtOrigin.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Make sure the UCS Icon is on, and a new UCS is defined.
    ;; The new UCS defines the origin for the icon. When the icon
    ;; is not displayed at the origin, it is displayed at the
    ;; lower-left corner of the display.
    (setq origin (vlax-3d-point 2 2 0)
          xAxisPoint (vlax-3d-point 3 2 0)
          yAxisPoint (vlax-3d-point 2 3 0))
    (setq ucsObj (vla-Add (vla-get-UserCoordinateSystems doc) origin xAxisPoint yAxisPoint \"UCS1\"))
    (vla-put-ActiveUCS doc ucsObj)
    (vla-put-UCSIconOn viewportObj :vlax-true)
    
    ;; Display the current setting of UCSIconAtOrigin
    (alert (strcat \"UCSIconAtOrigin is: \" (if (= (vla-get-UCSIconAtOrigin viewportObj) :vlax-true) \"On\" \"Off\")))
    ;; Toggle the setting of UCSIconAtOrigin
    (vla-put-UCSIconAtOrigin viewportObj (if (= (vla-get-UCSIconAtOrigin viewportObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Reset the active viewport to see the change
    (vla-put-ActiveViewport doc viewportObj)
    
    (alert (strcat \"UCSIconAtOrigin is now: \" (if (= (vla-get-UCSIconAtOrigin viewportObj) :vlax-true) \"On\" \"Off\")))
)
")
("UCSIconOn" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9D286342-ECA2-4A87-8CF4-BFF1A765C8D9"
             "
UCSIconOn Property (ActiveX)
Specifies if the UCS icon is on.
Supported platforms: Windows only
Signature
VBA:
object.UCSIconOn
object
    Type: PViewport, Viewport
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The UCS icon is on.
    False: The UCS icon is off.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_UCSIconOn()
    ' This example toggles the setting of UCSIconOn.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Display the current setting of UCSIconOn
    MsgBox \"UCSIcon is: \" & IIf(viewportObj.UCSIconOn, \"On\", \"Off\"), , \"UCSIconOn Example\"
    ' Toggle the setting of UCSIconOn
    viewportObj.UCSIconOn = Not (viewportObj.UCSIconOn)
    
    ' Reset the active viewport to see the change
    ThisDrawing.ActiveViewport = viewportObj
    
    MsgBox \"UCSIcon is now: \" & IIf(viewportObj.UCSIconOn, \"On\", \"Off\"), , \"UCSIconOn Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UCSIconOn()
    ;; This example toggles the setting of UCSIconOn.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Display the current setting of UCSIconOn
    (alert (strcat \"UCSIcon is: \" (if (= (vla-get-UCSIconOn viewportObj) :vlax-true) \"On\" \"Off\")))
    ;; Toggle the setting of UCSIconOn
    (vla-put-UCSIconOn viewportObj (if (= (vla-get-UCSIconOn viewportObj) :vlax-true) :vlax-false :vlax-true))
    
    ;; Reset the active viewport to see the change
    (vla-put-ActiveViewport doc viewportObj)
    
    (alert (strcat \"UCSIcon is now: \" (if (= (vla-get-UCSIconOn viewportObj) :vlax-true) \"On\" \"Off\")))
)
")
("UCSPerViewport" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4A1716CB-F994-4254-A25B-B938B243BC9A"
                  "
UCSPerViewport Property (ActiveX)
Specifies if the UCS is saved with the viewport.
Supported platforms: Windows only
Signature
VBA:
object.UCSPerViewport
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The UCS is saved with the viewport.
    False: The UCS is not saved with the viewport.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ViewportOn()
    ' This example creates two new paper space viewports.
    ' It then checks the status of the viewports.
    
    Dim pviewportObj1 As AcadPViewport
    Dim pviewportObj2 As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the paper space viewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 10
    height = 10
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    
    ' Create the paper space viewports
    Set pviewportObj1 = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    center(0) = 8: center(1) = 8: center(2) = 0
    width = 10
    height = 10
    Set pviewportObj2 = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    
    ' Before making a paper space viewport active,
    ' the mspace property needs to be True
    pviewportObj1.DISPLAY (True)
    ThisDrawing.mspace = True
    ThisDrawing.ActivePViewport = pviewportObj1
    ThisDrawing.Regen acAllViewports
    
    MsgBox \"pviewportObj1 is \" & (IIf(pviewportObj1.ViewportOn, \"on.\", \"not on.\")) & vbCrLf & _
           \"pviewportObj2 is \" & (IIf(pviewportObj2.ViewportOn, \"on.\", \"not on.\"))
    
    ' Now turn on pviewportObj2 as well
    pviewportObj2.DISPLAY (True)
    MsgBox \"pviewportObj1 is \" & (IIf(pviewportObj1.ViewportOn, \"on.\", \"not on.\")) & vbCrLf & _
           \"pviewportObj2 is \" & (IIf(pviewportObj2.ViewportOn, \"on.\", \"not on.\"))
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ViewportOn()
    ;; This example creates two new paper space viewports.
    ;; It then checks the status of the viewports.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 10
          height 10)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    
    ;; Create the paper space viewports
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj1 (vla-AddPViewport paperSpace center width height))
  
    (setq center (vlax-3d-point 8 8 0)
          width 10
          height 10)
    (setq pviewportObj2 (vla-AddPViewport paperSpace center width height))
    
    ;; Before making a paper space viewport active,
    ;; the mspace property needs to be True
    (vla-Display pviewportObj1 :vlax-true)
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc pviewportObj1)
    (vla-Regen doc acAllViewports)
    
    (alert (strcat \"pviewportObj1 is \" (if (= (vla-get-ViewportOn pviewportObj1) :vlax-true) \"on.\" \"not on.\")
                   \"\npviewportObj2 is \" (if (= (vla-get-ViewportOn pviewportObj2) :vlax-true) \"on.\" \"not on.\")))
    
    ;; Now turn on pviewportObj2 as well
    (vla-Display pviewportObj2 :vlax-true)
    (alert (strcat \"pviewportObj1 is \" (if (= (vla-get-ViewportOn pviewportObj1) :vlax-true) \"on.\" \"not on.\")
                   \"\npviewportObj2 is \" (if (= (vla-get-ViewportOn pviewportObj2) :vlax-true) \"on.\" \"not on.\")))
)
")
("UIsolineDensity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-5E9037B6-2166-4CEE-A201-114BC4B1EE48"
"
UIsolineDensity Property (ActiveX)
Specifies the number of U isolines that are displayed.
Supported platforms: Windows only
Signature
VBA:
object.UIsolineDensity
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
Number of isolines that the object displays in the U direction.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("UnderlayLayerOverrideApplied" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-55B962F2-FB10-485A-BD67-838F351D39F8"
                                "
UnderlayLayerOverrideApplied Property (ActiveX)
Determines whether underlay layer overrides are applied or not.
Supported platforms: Windows only
Signature
VBA:
object.UnderlayLayerOverrideApplied
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Layer overrides are applied.
    False: Layer overrides are not applied.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("UnderlayName" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-03430E86-F5ED-49EA-BC30-F8489D3CDAD1"
                "
UnderlayName Property (ActiveX)
Specifies the name of the underlay file.
Supported platforms: Windows only
Signature
VBA:
object.UnderlayName
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: String
The file name of the underlay.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("UnderlayVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DE856DB8-B0A7-4B59-A311-36446BE3BF20"
"
UnderlayVisibility Property (ActiveX)
Specifies the visibility of the underlay file.
Supported platforms: Windows only
Signature
VBA:
object.UnderlayVisibility
object
    Type: DgnUnderlay, DwfUnderlay, PdfUnderlay
    The object to which this property applies.
Property Value
Read-only: No
Type: Boolean
    True: Underlay is visible.
    False: Underlay is not visible.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Unit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B964A616-4B0A-4341-8A41-017AB429FF70"
"
Unit Property (ActiveX)
Gets the unit of the point cloud file.
Supported platforms: Windows only
Signature
VBA:
object.Unit
object
    Type: PointCloud, PointCloudEx
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
A string representing the unit of the point cloud file.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("UnitFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-A3C7BE76-143D-427A-B0F1-AC83476AF967"
"
UnitFactor Property (ActiveX)
Gets the insertion unit factor of the point cloud file.
Supported platforms: Windows only
Signature
VBA:
object.UnitFactor
object
    Type: PointCloud, PointCloudEx
    The object this property applies to.
Property Value
Read-only: Yes
Type: ACAD_NOUNITS
The insertion unit factor for the point cloud.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Units" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-19E4BDA0-CFA2-419D-A9F3-4AA1AF709EA7"
"
Units Property (ActiveX)
Specifies the native units of measure for the block.
Supported platforms: Windows only
Signature
VBA:
object.Units
object
    Type: Block
    The object this property applies to.
Property Value
Read-only: No
Type: acInsertUnits enum
    acInsertUnitsAngstroms
    acInsertUnitsAstronomicalUnits
    acInsertUnitsCentimeters
    acInsertUnitsDecameters
    acInsertUnitsDecimeters
    acInsertUnitsFeet
    acInsertUnitsGigameters
    acInsertUnitsHectometers
    acInsertUnitsInches
    acInsertUnitsKilometers
    acInsertUnitsLightYears
    acInsertUnitsMeters
    acInsertUnitsMicroinches
    acInsertUnitsMicrons
    acInsertUnitsMiles
    acInsertUnitsMillimeters
    acInsertUnitsMils
    acInsertUnitsNanometers
    acInsertUnitsParsecs
    acInsertUnitsUnitless
    acInsertUnitsUSSurveyFeet
    acInsertUnitsUSSurveyInch
    acInsertUnitsUSSurveyMile
    acInsertUnitsUSSurveyYard
    acInsertUnitsYards
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("UnitsFormat" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-427FBCE3-A903-44C4-988A-10A30860079E"
"
UnitsFormat Property (ActiveX)
Specifies the unit format for all dimensions except angular.
Supported platforms: Windows only
Signature
VBA:
object.UnitsFormat
object
    Type: DimAligned, DimArcLength, DimDiametric, DimOrdinate, DimRadial, DimRadialLarge, DimRotated
    The object this property applies to.
Property Value
Read-only: No
Type: acDimLUnits enum
    acDimLScientific
    acDimLDecimal
    acDimLEngineering
    acDimLArchitectural
    acDimLFractional
    acDimLWindowsDesktop
Remarks
The initial value for this property is acDimLDecimal.
If this property is set to acDimLDecimal, the format specified by the DecimalSeparator and PrimaryUnitsPrecision properties will be used to format the decimal value.
To create a stacked architectural or fractional unit format, use the FractionFormat property.
Note: This property overrides the value of the DIMLUNIT system variable for the given dimension.
Examples
VBA:
Sub Example_UnitsFormat()
   ' This example creates an aligned dimension in model space and
   ' uses UnitsFormat to cycle through some common unit formats
   ' for the dimension
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    
    ' Define the dimension
    point1(0) = 0: point1(1) = 5: point1(2) = 0
    point2(0) = 5.12345678: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    
    ' Cycle through common unit formats
    
    dimObj.UnitsFormat = acDimLScientific     ' Change format to Scientific
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension units are now set to Scientific\"
    
    dimObj.UnitsFormat = acDimLDecimal        ' Change format to Decimal
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension units are now set to Decimal\"
    
    dimObj.UnitsFormat = acDimLArchitectural  ' Change format to Architectural
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension units are now set to Architectural\"
    
    dimObj.UnitsFormat = acDimLWindowsDesktop ' Change format to WindowsDesktop
    ThisDrawing.Regen acAllViewports
    MsgBox \"The dimension units are now set to Windows Desktop\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UnitsFormat()
    ;; This example creates an aligned dimension in model space and
    ;; uses UnitsFormat to cycle through some common unit formats
    ;; for the dimension
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 0 5 0)
          point2 (vlax-3d-point 5.12345678 5 0)
          location (vlax-3d-point 5 7 0))
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    
    ;; Cycle through common unit formats
    (vla-put-UnitsFormat dimObj acDimLScientific)     ;; Change format to Scientific
    (vla-Regen doc acAllViewports)
    (alert \"The dimension units are now set to Scientific\")
    
    (vla-put-UnitsFormat dimObj acDimLDecimal)        ;; Change format to Decimal
    (vla-Regen doc acAllViewports)
    (alert \"The dimension units are now set to Decimal\")
    
    (vla-put-UnitsFormat dimObj acDimLArchitectural)  ;; Change format to Architectural
    (vla-Regen doc acAllViewports)
    (alert \"The dimension units are now set to Architectural\")
    
    (vla-put-UnitsFormat dimObj acDimLWindowsDesktop) ;; Change format to WindowsDesktop
    (vla-Regen doc acAllViewports)
    (alert \"The dimension units are now set to Windows Desktop\")
)
")
("UnitsType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-37E1E675-571B-4D03-96B6-EA5CB0F737FD"
"
UnitsType Property (ActiveX)
Specifies the current display units type for the property.
Supported platforms: Windows only
Signature
VBA:
object.UnitsType
object
    Type: DynamicBlockReferenceProperty
    The object this property applies to.
Property Value
Read-only: Yes
Type: acDynamicBlockReferencePropertyUnitsType enum
    acNoUnits
    acAngular
    acDistance
    acArea
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("UpperRightCorner" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-FCD44D2E-0668-45E7-985B-16B9F8E43F88"
                    "
UpperRightCorner Property (ActiveX)
Gets the upper-right corner of the current active viewport.
Supported platforms: Windows only
Signature
VBA:
object.UpperRightCorner
object
    Type: Viewport
    The object this property applies to.
Property Value
Read-only: Yes
Type: Variant (two element array of doubles)
A 2D coordinate representing the upper-right corner of the current active viewport.
Remarks
The LowerLeftCorner and UpperRightCorner properties represent the graphic placement of the viewport on the display. These properties are defined as follows:
Viewport 1—LowerLeftCorner = (0, .5), UpperRightCorner = (.5, 1)
Viewport 2—LowerLeftCorner = (.5, .5), UpperRightCorner = (1, 1)
Viewport 3—LowerLeftCorner = (0, 0), UpperRightCorner = (.5, .5)
Viewport 4—LowerLeftCorner = (.5, 0), UpperRightCorner = (1, .5)
Examples
VBA:
Sub Example_UpperRightCorner()
    ' This example creates a new viewport and makes it active.
    ' Then it splits the viewport into 4 windows.
    ' It then takes finds the upper right corner of each of the
    ' windows.
    Dim newViewport As AcadViewport
       
    ' Create a new viewport and make it active
    Set newViewport = ThisDrawing.Viewports.Add(\"TESTVIEWPORT\")
    ThisDrawing.ActiveViewport = newViewport
    
    ' Split the viewport in 4 windows
    newViewport.Split acViewport4
    
    ' Make the newly split viewport active
    ThisDrawing.ActiveViewport = newViewport
    
    ' Iterate through the viewports. For each viewport,
    ' make that viewport active and display the coordinates
    ' of the upper right corner.
    Dim entry As AcadViewport
    Dim UpperRight As Variant
    For Each entry In ThisDrawing.Viewports
        entry.GridOn = True
        ThisDrawing.ActiveViewport = entry
        UpperRight = entry.UpperRightCorner
        MsgBox \"The upper right corner of this viewport is \" & UpperRight(0) & \", \" & UpperRight(1), , \"UpperRightCorner Example\"
        entry.GridOn = False
    Next
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UpperRightCorner()
    ;; This example creates a new viewport and makes it active.
    ;; Then it splits the viewport into four windows.
    ;; It then finds the lower-left corner of each of the
    ;; windows.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
       
    ;; Create a new viewport and make it active
    (setq newViewport (vla-Add (vla-get-Viewports doc) \"TESTVIEWPORT\"))
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Split the viewport in four windows
    (vla-Split newViewport acViewport4)
    
    ;; Make the newly split viewport active
    (vla-put-ActiveViewport doc newViewport)
    
    ;; Iterate through the viewports. For each viewport,
    ;; make that viewport active and display the coordinates
    ;; of the upper right corner.
    (vlax-for entry (vla-get-Viewports doc)
        (vla-put-GridOn entry :vlax-true)
        (vla-put-ActiveViewport doc entry)
        (setq upperRight (vlax-safearray->list (vlax-variant-value (vla-get-UpperRightCorner entry))))
        (alert (strcat \"The upper right corner of this viewport is \" (rtos (nth 0 upperRight) 2) \", \" (rtos (nth 1 upperRight) 2)))
        (vla-put-GridOn entry :vlax-false)
    )
)
")
("UpsideDown" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-48E13661-CC33-45CF-BDA2-7EE538EC72DF"
"
UpsideDown Property (ActiveX)
Specifies the direction of text.
Supported platforms: Windows only
Signature
VBA:
object.UpsideDown
object
    Type: Attribute, AttributeReference, Text
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The text is upside down.
    False: The text is not upside down.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_UpsideDown()
    ' This example creates a text object in model space and
    ' uses the UpsideDown property to flip the text vertically
   
    Dim textObj As AcadText
    Dim textString As String
    Dim insertionPoint(0 To 2) As Double
    Dim height As Double
    
    ' Define the new Text object
    textString = \"Hello, World.\"
    insertionPoint(0) = 3: insertionPoint(1) = 3: insertionPoint(2) = 0
    height = 0.5
    
    ' Create the Text object in model space
    Set textObj = ThisDrawing.ModelSpace.AddText(textString, insertionPoint, height)
    
    ThisDrawing.Application.ZoomAll
    
    MsgBox \"The Text oject is now right side up\"
    
    textObj.UpsideDown = True
    ThisDrawing.Regen acActiveViewport
    
    MsgBox \"The Text object is now upside down\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UpsideDown()
    ;; This example creates a text object in model space and
    ;; uses the UpsideDown property to flip the text vertically
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the new Text object
    (setq insertionPoint (vlax-3d-point 3 3 0)
          textString \"Hello, World.\"
          height 0.5)
    
    ;; Create the Text object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq textObj (vla-AddText modelSpace textString insertionPoint height))
    
    (vla-ZoomAll acadObj)
    
    (alert \"The Text oject is now right side up\")
    
    (vla-put-UpsideDown textObj :vlax-true)
    (vla-Regen doc acActiveViewport)
    
    (alert \"The Text object is now upside down\")
)
")
("UseEntityColor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-16529720-E2F6-4365-BCE1-14F48ED21E50"
"
UseEntityColor Property (ActiveX)
Specifies the color source for the point cloud.
Supported platforms: Windows only
Signature
VBA:
object.UseEntityColor
object
    Type: PointCloud
    The object this property applies to.
Property Value
Read-only: No
Type: AcPointCloudColorType enum
    acTrueColor
    acByColor
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("UseStandardScale" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-BCDB772B-D2E5-456E-A180-2398BC434883"
                    "
UseStandardScale Property (ActiveX)
Specifies if the plot is to use a standard or custom scale.
Supported platforms: Windows only
Signature
VBA:
object.UseStandardScale
object
    Type: Layout, PlotConfiguration
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Plot with the standard scale.
    False: Plot with a custom scale.
Remarks
To specify the standard scale to use in the plot, use the StandardScale property. To specify a custom scale, use the SetCustomScale method.
Examples
VBA:
Sub Example_UseStandardScale()
    ' This example will access the Layouts collection for the current drawing
    ' and list the status of UseStandardScale for each Layout.
    Dim Layouts As AcadLayouts, Layout As ACADLayout
    Dim msg As String
    
    ' Get layouts collection from document object
    Set Layouts = ThisDrawing.Layouts
    
    msg = \"\"
    
    ' Get the UseStandardScale information of every layout in this drawing
    For Each Layout In Layouts
        If Layout.UseStandardScale Then
            msg = msg & Layout.name & \" uses the standard scale.\" & vbCrLf
        Else
            msg = msg & Layout.name & \" uses a custom scale.\" & vbCrLf
        End If
    Next
    
    ' Display the information
    MsgBox msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UseStandardScale()
    ;; This example will access the Layouts collection for the current drawing
    ;; and list the status of UseStandardScale for each Layout.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get layouts collection from document object
    (setq Layouts (vla-get-Layouts doc)
          msg \"\")
    
    ;; Get the UseStandardScale information of every layout in this drawing
    (vlax-for Layout Layouts
        (if (= (vla-get-UseStandardScale Layout) :vlax-true)
            (setq msg (strcat msg (vla-get-Name Layout) \" uses the standard scale.\n\"))
            (setq msg (strcat msg (vla-get-Name Layout) \" uses a custom scale.\n\"))
        )
    )
    
    ;; Display the information
    (alert msg)
)
")
("Used" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C71CFC92-7F83-44BF-9FF7-B42F1AE0EBA1"
"
Used Property (ActiveX)
Specifies whether a layer is in use.
Supported platforms: Windows only
Signature
VBA:
object.Used
object
    Type: Layer
    The object this property applies to.
Property Value
Read-only: Yes
Type: Boolean
    True: The layer is in use.
    False: The layer is not in use.
Remarks
This property specifies whether a layer is in use when the GenerateUsageData method is called.
Examples
VBA:
Sub Example_Used()
    ' This example provides usage information for the layers
    ' in a drawing
    Dim MyLayers As AcadLayers
    Set MyLayers = ThisDrawing.Layers
    MyLayers.GenerateUsageData
    
    Dim MyLayerObj As AcadLayer
    For Each MyLayerObj In ThisDrawing.Layers
        MyLayerObj.Description = \"Test\"
        MsgBox (MyLayerObj.Used)
    Next MyLayerObj
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Used()
    ;; This example provides usage information for the layers
    ;; in a drawing
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq MyLayers (vla-get-Layers doc))
    (vla-GenerateUsageData MyLayers)
    (vlax-for MyLayerObj (vla-get-Layers doc)
        (alert (strcat \"Layer \" (vla-get-Name MyLayerObj) (if (= (vla-get-Used MyLayerObj) :vlax-true) \" is used.\" \" is not used.\")))
    )
)
")
("UserCoordinateSystems" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1121D09A-27D8-4289-8D8C-03A3339D95BA"
                         "
UserCoordinateSystems Property (ActiveX)
Gets the UCSs collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.UserCoordinateSystems
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: UCSs
The UCSs collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_UserCoordinateSystems()
    ' This example finds the current UserCoordinateSystems collection and
    ' adds a new UCS to that collection.
    
    Dim UCSColl As AcadUCSs
    Set UCSColl = ThisDrawing.UserCoordinateSystems
    
    ' Create a UCS named \"TEST\" in the current drawing
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPnt(0 To 2) As Double
    Dim yAxisPnt(0 To 2) As Double
    
    ' Define the UCS
    origin(0) = 4#: origin(1) = 5#: origin(2) = 3#
    xAxisPnt(0) = 5#: xAxisPnt(1) = 5#: xAxisPnt(2) = 3#
    yAxisPnt(0) = 4#: yAxisPnt(1) = 6#: yAxisPnt(2) = 3#
    
    ' Add the UCS to the UserCoordinatesSystems collection
    Set ucsObj = UCSColl.Add(origin, xAxisPnt, yAxisPnt, \"TEST\")
    
    MsgBox \"A new UCS called \" & ucsObj.name & \" has been added to the UserCoordinateSystems collection.\", vbInformation, \"UserCoordinateSystems Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_UserCoordinateSystems()
    ;; This example finds the current UserCoordinateSystems collection and
    ;; adds a new UCS to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq UCSColl (vla-get-UserCoordinateSystems doc))
    
    ;; Create a UCS named \"TEST\" in the current drawing
    ;; Define the UCS
    (setq origin (vlax-3d-point 4 5 3)
          xAxisPnt (vlax-3d-point 5 5 3)
          yAxisPnt (vlax-3d-point 4 6 3))
    
    ;; Add the UCS to the UserCoordinatesSystems collection
    (setq ucsObj (vla-Add UCSColl origin xAxisPnt yAxisPnt \"TEST\"))
    
    (alert (strcat \"A new UCS called \" (vla-get-Name ucsObj) \" has been added to the UserCoordinateSystems collection.\"))
)
")
("Utility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E1B12A7D-2BCA-4743-AE01-F9106ED4D982"
           "
Utility Property (ActiveX)
Gets the Utility object for the document.
Supported platforms: Windows only
Signature
VBA:
object.Utility
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Utility
The Utility object for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Utility()
    ' This example creates a spline in model space using the
    ' CreateTypedArray method off of the utility object.
        
    ' Create the spline
    Dim splineObj As AcadSpline
    Dim startTan As Variant
    Dim endTan As Variant
    Dim fitPoints As Variant
    Dim utilObj As Object   ' CreateTypedArray needs to be a late bound object
    Set utilObj = ThisDrawing.Utility
    
    utilObj.CreateTypedArray startTan, vbDouble, 0.5, 0.5, 0
    utilObj.CreateTypedArray endTan, vbDouble, 0.5, 0.5, 0
    utilObj.CreateTypedArray fitPoints, vbDouble, 1, 1, 0, 5, 5, 0, 10, 0, 0
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
    
    ZoomAll
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Utility()
    ;; This example creates a spline in model space using the
    ;; CreateTypedArray method off of the utility object.
        
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
   
    ;; Create the spline
    (setq utilObj (vla-get-Utility doc))
    
    (vla-CreateTypedArray utilObj 'startTan vlax-vbDouble 0.5 0.5 0)
    (vla-CreateTypedArray utilObj 'endTan vlax-vbDouble 0.5 0.5 0)
    (vla-CreateTypedArray utilObj 'fitPoints vlax-vbDouble 0 0 0 5 5 0 10 0 0)
    
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
)
")
("VBE" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-37FA3505-7663-4DF5-9BAC-AD17EE62172E"
       "
VBE Property (ActiveX)
Gets the VBAIDE extensibility object.
Supported platforms: Windows only
Signature
VBA:
object.VBE
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: Yes
Type: Microsoft VBE object
The VBAIDE extensibility object.
Remarks
This property allows you to access the VBA IDE object model from AutoCAD's object model. The property will throw an exception if the VBAIDE is not available. For example, the VBAIDE is not available if the acvba.arx app has not been loaded.
The following line of code returns the name of the active VBA project description string:
ThisDrawing.Application.VBE.ActiveVBProject.Description
Examples
VBA:
Sub Example_VBE()
    ' This example uses the VBA IDE extensibility model to dynamically
    ' create a VBA subroutine. After running this example, see the first line of code
    ' in the VBA IDE code window to see a new subroutine. Then 
    ' remove the new subroutine before continuing.
    Dim VBEModel As Object
    Dim newRoutine As String
    
    Set VBEModel = VBE  ' Get the VBE object
    
    ' Define new subroutine to be added. This could be created dynamically from user feedback.
    newRoutine = \"Sub Dynamic_Procedure()\" & vbCrLf
    newRoutine = newRoutine & vbTab & \"MsgBox \"\"New subroutine.\"\"\" & vbCrLf
    newRoutine = newRoutine & \"End Sub\" & vbCrLf
    
    ' Insert new subroutine
    VBEModel.CodePanes(1).CodeModule.InsertLines 1, newRoutine
    
    MsgBox \"A new subroutine was added called Dynamic_Procedure.\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_VBE()
    ;; This example uses the VBA IDE extensibility model to dynamically
    ;; create a VBA subroutine. After running this example, see the first line of code
    ;; in the VBA IDE code window to see a new subroutine. Then 
    ;; remove the new subroutine before continuing.
    ;; Note: You might need to add a code module to the default project first.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq VBEModel (vla-get-VBE acadObj))  ;; Get the VBE object
    
    ;; Define new subroutine to be added. This could be created dynamically from user feedback.
    (setq newRoutine (strcat \"Sub Dynamic_Procedure()\"
                             \"\n    MsgBox \"New subroutine.\"\"
                             \"\nEnd Sub\"))
    
    ;; Insert new subroutine
    (vlax-invoke-method (vlax-get-property (vlax-invoke-method (vlax-get-property VBEModel 'CodePanes) 'Item 1) 'CodeModule) 'InsertLines 1 newRoutine)
    
    (alert \"A new subroutine was added called Dynamic_Procedure.\")
)
")
("VIsolineDensity" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DEB993A6-CF3C-4C99-AB9E-B0B527C22C47"
                   "
VIsolineDensity Property (ActiveX)
Specifies the number of V isolines that are displayed.
Supported platforms: Windows only
Signature
VBA:
object.VIsolineDensity
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The object to which this property applies.
Property Value
Read-only: No
Type: Long
Number of isolines that the object displays in the V direction.
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("Value" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-2FFB80CC-12DB-4B31-BDD0-18A565B15A02"
"
Value Property (ActiveX)
Specifies the current value for the property, or the object ID of the newly created cloned object.
Supported platforms: Windows only
Signature
VBA:
object.Value
object
    Type: DynamicBlockReferenceProperty, IDPair
    The object this property applies to.
Property Value
Read-only: No (DynamicBlockReferenceProperty), Yes (IDPair)
Type: Variant (DynamicBlockReferenceProperty), Long_PTR (IDPair)
DynamicBlockReferenceProperty: The current value for the property.
IDPair: The object ID of the newly created cloned object in the CopyObjects operation.
Remarks
DynamicBlockReferenceProperty: No error is returned if the specified property value could not be set. For example, if the property has a list of allowable values or a minimum-maximum range, and the value provided is not in the list or is out of range, no error is returned.
IDPair: Use the Key property to get the object ID of the source object.
Examples
VBA:
Sub Example_Value()
    ' This example creates two Circle objects and uses the CopyObjects
    ' method to copy them. It then returns the object IDs
    ' of the new objects using the Value property and uses the
    ' object IDs to remove the new (target) objects
    Dim circleObj1 As AcadCircle, circleObj2 As AcadCircle
    Dim circleObj1Copy As AcadCircle, circleObj2Copy As AcadCircle
    Dim centerPoint(0 To 2) As Double
    Dim radius1 As Double, radius2 As Double
    Dim radius1Copy As Double, radius2Copy As Double
    Dim objCollection(0 To 1) As Object
    Dim retObjects As Variant
    Dim IDPairs As Variant
    Dim TargetObject As AcadObject
    
    ' Define the Circle object
    centerPoint(0) = 0: centerPoint(1) = 0: centerPoint(2) = 0
    radius1 = 5#: radius2 = 7#
    radius1Copy = 1#: radius2Copy = 2#
    
    ' Add two circles to the drawing
    Set circleObj1 = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius1)
    Set circleObj2 = ThisDrawing.ModelSpace.AddCircle(centerPoint, radius2)
    ThisDrawing.Application.ZoomAll
    
    ' Copy objects
    '
    ' First put the objects to be copied into a form compatible with CopyObjects
    Set objCollection(0) = circleObj1
    Set objCollection(1) = circleObj2
    
    ' Copy object and get back a collection of the new objects (copies)
    retObjects = ThisDrawing.CopyObjects(objCollection, , IDPairs)
    
    ' Get newly created object and apply new properties to the copies
    Set circleObj1Copy = retObjects(0)
    Set circleObj2Copy = retObjects(1)
    
    circleObj1Copy.radius = radius1Copy
    circleObj2Copy.radius = radius2Copy
        
    ThisDrawing.Application.ZoomAll
    ThisDrawing.Regen acAllViewports
    
    ' Display the object IDs of the source objects used for the copy
    MsgBox \"The first target object ID is: \" & IDPairs(0).Value & vbCrLf & _
           \"The second target object ID is: \" & IDPairs(1).Value
    ' This key can be used with objectIDtoObject to reference the source objects,
    ' which is useful if the user manually selected the source objects.
    '
    ' Here we delete the source objects from the ID obtained
    Set TargetObject = ThisDrawing.ObjectIdToObject(IDPairs(0).Value)
    TargetObject.Delete
    Set TargetObject = ThisDrawing.ObjectIdToObject(IDPairs(1).Value)
    TargetObject.Delete
    
    ThisDrawing.Regen acAllViewports
    
    MsgBox \"The target objects have been deleted!\", vbInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Value()
    ;; This example creates two Circle objects and uses the CopyObjects
    ;; method to copy them. It then returns the object IDs
    ;; of the new objects using the Value property and uses the
    ;; object IDs to remove the new (target) objects
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the Circle object
    (setq centerPoint (vlax-3d-point 0 0 0)  
          radius1 5
          radius2 7
          radius1Copy 1
          radius2Copy 2)
    
    ;; Add two circles to the drawing
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq circleObj1 (vla-AddCircle modelSpace centerPoint radius1))
    (setq circleObj2 (vla-AddCircle modelSpace centerPoint radius2))
    (vla-ZoomAll acadObj)
    
    ;; Copy objects
    ;;
    ;; First put the objects to be copied into a form compatible with CopyObjects
    (setq objCollection (vlax-make-safearray vlax-vbObject '(0 . 1)))
    (vlax-safearray-put-element objCollection 0 circleObj1)
    (vlax-safearray-put-element objCollection 1 circleObj2)
    
    ;; Copy object and get back a collection of the new objects (copies)
    (setq retObjects (vlax-variant-value (vla-CopyObjects doc objCollection nil 'IDPairs)))
          
    ;; Get newly created object and apply new properties to the copies
    (setq circleObj1Copy (vlax-safearray-get-element retObjects 0))
    (setq circleObj2Copy (vlax-safearray-get-element retObjects 1))
    
    (vla-put-Radius circleObj1Copy radius1Copy)
    (vla-put-Radius circleObj2Copy radius2Copy)
        
    (vla-ZoomAll acadObj)
    (vla-Regen doc acAllViewports)
    
    ;; Display the object IDs of the source objects used for the copy
    (alert (strcat \"The first target object ID is: \" (itoa (vla-get-Value (vlax-safearray-get-element IDPairs 0)))
                   \"\nThe second target object ID is: \" (itoa (vla-get-Value (vlax-safearray-get-element IDPairs 1)))))
    ;; This key can be used with objectIDtoObject to reference the source objects,
    ;; which is useful if the user manually selected the source objects.
    ;;
    ;; Here we delete the source objects from the ID obtained
    (setq TargetObject (vla-ObjectIdToObject doc (vla-get-Value (vlax-safearray-get-element IDPairs 0))))
    (vla-Delete TargetObject)
    (setq TargetObject (vla-ObjectIdToObject doc (vla-get-Value (vlax-safearray-get-element IDPairs 1))))
    (vla-Delete TargetObject)
    
    (vla-Regen doc acAllViewports)
    
    (alert \"The target objects have been deleted!\")
)
")
("Verify" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9F4D88AF-2B7A-4D5E-BAFF-A87E30C064DF"
          "
Verify Property (ActiveX)
Specifies if the attribute is set for verification.
Supported platforms: Windows only
Signature
VBA:
object.Verify
object
    Type: Attribute
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The attribute is set to verify.
    False: The attribute is not set to verify.
Remarks
An attribute set to verify prompts the user for verification that the attribute value is correct when inserting the block.
An attribute may exist as only one of four optional modes: constant, preset, invisible, or verify. The AFLAGS system variable stores the current mode settings. You can query the current mode using the Mode property.
Examples
VBA:
Sub Example_Verify()
    ' This example creates an attribute definition in model space.
    ' It then sets the definition to be verify, and queries the mode.
    
    Dim attributeObj As AcadAttribute
    Dim height As Double
    Dim mode As Long
    Dim prompt As String
    Dim insertionPoint(0 To 2) As Double
    Dim tag As String
    Dim value As String
    
    ' Define the attribute definition
    height = 1#
    mode = acAttributeModeVerify
    prompt = \"New Prompt\"
    insertionPoint(0) = 5#: insertionPoint(1) = 5#: insertionPoint(2) = 0
    tag = \"New_Tag\"
    value = \"New Value\"
    
    ' Create the attribute definition object in model space
    Set attributeObj = ThisDrawing.ModelSpace.AddAttribute(height, mode, prompt, insertionPoint, tag, value)
    ZoomAll
    
    ' Change the mode to be verify
    attributeObj.mode = acAttributeModeVerify
    attributeObj.Update
    
    ' Check to see if the attribute is set to verify
    MsgBox (IIf(attributeObj.Verify, \"The attribute is set to verify\", \"The attribute is not set to verify\"))
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Verify()
    ;; This example creates an attribute definition in model space.
    ;; It then sets the definition to be verify, and queries the mode.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the attribute definition
    (setq insertionPoint (vlax-3d-point 5 5 0)
          attHeight 1
          attMode acAttributeModeVerify
          attPrompt \"New Prompt\"
          attTag \"New_Tag\"
          attValue \"New Value\")
    
    ;; Create the attribute definition object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq attributeObj (vla-AddAttribute modelSpace attHeight attMode attPrompt insertionPoint attTag attValue))
    (vla-ZoomAll acadObj)
    
    ;; Change the mode to be verify
    (vla-put-Mode attributeObj acAttributeModeVerify)
    (vla-Update attributeObj)
    
    ;; Check to see if the attribute is set to verify
    (alert (if (= (vla-get-Verify attributeObj) :vlax-true) \"The attribute is set to verify\" \"The attribute is not set to verify\"))
)
")
("Version" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EF73B1E4-DC20-416B-8462-DD2F60ACF1AD"
"
Version Property (ActiveX)
Gets the version of the AutoCAD application you are using.
Supported platforms: Windows only
Signature
VBA:
object.Version
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
The version of AutoCAD that you are using.
Remarks
Note: The value of this property is stored in the ACADVER system variable.
Examples
VBA:
Sub Example_Version()
    ' This example returns AutoCAD version as a string
    
    Dim version As String
    version = ThisDrawing.Application.version
    MsgBox \"This is AutoCAD Version \" & version, , \"Version Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Version()
    ;; This example returns AutoCAD version as a string
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    (setq version (vla-get-Version acadObj))
    (alert (strcat \"This is AutoCAD Version \" version))
)
")
("VertCellMargin" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-7C39E8AF-0B6B-4F01-B777-AEA628FAACB1"
                  "
VertCellMargin Property (ActiveX)
Specifies the value of the vertical margin of cells.
Supported platforms: Windows only
Signature
VBA:
object.VertCellMargin
object
    Type: Table, TableStyle
    The object this property applies to.
Property Value
Read-only: No
Type: Double
The vertical margin applied to each table cell.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_VertCellMargin()
    ' This example creates a TableStyle object and sets values for
    ' the style name and other attributes.
    
    Dim dictionaries As AcadDictionaries
    Set dictionaries = ThisDrawing.Database.dictionaries
  
    Dim dictObj As AcadDictionary
    Set dictObj = dictionaries.Item(\"acad_tablestyle\")
  
    ' Create the custom TableStyle object in the dictionary
    Dim keyName As String
    Dim className As String
    Dim customObj As AcadTableStyle
    keyName = \"NewStyle\"
    className = \"AcDbTableStyle\"
    Set customObj = dictObj.AddObject(keyName, className)
      
    customObj.Name = \"NewStyle\"
    customObj.Description = \"New Style for My Tables\"
  
    customObj.FlowDirection = acTableBottomToTop
    customObj.HorzCellMargin = 0.22
    customObj.VertCellMargin = 0.22
    customObj.BitFlags = 1
    customObj.SetTextHeight AcRowType.acDataRow + AcRowType.acTitleRow, 1.3
    customObj.SetTextStyle AcRowType.acDataRow + AcRowType.acTitleRow, \"Standard\"
  
    Dim col As AcadAcCmColor
    Set col = AcadApplication.GetInterfaceObject(\"AutoCAD.AcCmColor.\" & Left(AcadApplication.Version, 2))
    col.SetRGB 12, 23, 45
    customObj.SetBackgroundColor AcRowType.acDataRow + AcRowType.acTitleRow, col
    customObj.SetGridVisibility AcGridLineType.acHorzInside + AcGridLineType.acHorzTop _
                                , AcRowType.acDataRow + AcRowType.acTitleRow, True
  
    customObj.SetAlignment AcRowType.acDataRow + AcRowType.acTitleRow, acBottomRight
    col.SetRGB 244, 0, 0
    customObj.SetGridColor 3, 1, col
      
    MsgBox \"Table Style Name = \" & customObj.Name & vbCrLf & _
           \"Style Description = \" & customObj.Description & vbCrLf & _
           \"Flow Direction = \" & customObj.FlowDirection & vbCrLf & _
           \"Horzontal Cell Margin = \" & customObj.HorzCellMargin & vbCrLf & _
           \"Vertical Cell Margin = \" & customObj.VertCellMargin & vbCrLf & _
           \"Bit Flags = \" & customObj.BitFlags & vbCrLf & _
           \"Title Row Text Height = \" & customObj.GetTextHeight(acTitleRow) & vbCrLf & _
           \"Title Row Text Style = \" & customObj.GetTextStyle(acTitleRow) & vbCrLf & _
           \"Grid Visibility for HorizontalBottom TitleRow  = \" & customObj.GetGridVisibility(acHorzBottom, acTitleRow) & vbCrLf & _
           \"Title Row Alignment = \" & customObj.GetAlignment(acTitleRow) & vbCrLf & _
           \"Header Suppression = \" & customObj.HeaderSuppressed
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_HorzCellMargin()
    ;; This example creates a TableStyle object and sets values for 
    ;; the style name and other attributes.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
  
    (setq dictionaries (vla-get-Dictionaries doc))
    (setq dictObj (vla-Item dictionaries \"acad_tablestyle\"))
    
    ;; Create the custom TableStyle object in the dictionary
    (setq keyName \"NewStyle\"
          className \"AcDbTableStyle\")
  
    (setq customObj (vla-AddObject dictObj keyName className))
      
    (vla-put-Name customObj \"NewStyle\")
    (vla-put-Description customObj \"New Style for My Tables\")
  
    (vla-put-FlowDirection customObj acTableBottomToTop)
    (vla-put-HorzCellMargin customObj 0.22)
    (vla-put-VertCellMargin customObj 0.22)
    (vla-put-BitFlags customObj 1)
    (vla-SetTextHeight customObj (+ acDataRow acTitleRow) 1.3)
    (vla-SetTextStyle customObj (+ acDataRow acTitleRow) \"Standard\")
    (setq col (vlax-create-object (strcat \"AutoCAD.AcCmColor.\" (substr (getvar \"ACADVER\") 1 2))))
    (vla-SetRGB col 12 23 45)
  
    (vla-SetBackgroundColor customObj (+ acDataRow acTitleRow) col)
    (vla-SetGridVisibility customObj (+ acHorzInside acHorzTop) (+ acDataRow acTitleRow) :vlax-true)
    (vla-SetAlignment customObj (+ acDataRow acTitleRow) acBottomRight)
    (vla-SetRGB col 244 0 0)
    (vla-SetGridColor customObj (+ acHorzTop acHorzInside) acDataRow col)
      
    (alert (strcat \"Table Style Name = \" (vla-get-Name customObj)
                   \"\nStyle Description = \" (vla-get-Description customObj)
                   \"\nFlow Direction = \" (itoa (vla-get-FlowDirection customObj))
                   \"\nHorzontal Cell Margin = \" (rtos (vla-get-HorzCellMargin customObj) 2)
                   \"\nVertical Cell Margin = \" (rtos (vla-get-VertCellMargin customObj) 2)
                   \"\nBit Flags = \" (itoa (vla-get-BitFlags customObj))
                   \"\nTitle Row Text Height = \" (rtos (vla-GetTextHeight customObj acTitleRow) 2)
                   \"\nTitle Row Text Style = \" (vla-GetTextStyle customObj acTitleRow)
                   \"\nGrid Visibility for HorizontalBottom TitleRow  = \" (if (= (vla-GetGridVisibility customObj acHorzBottom acTitleRow) :vlax-true) \"True\" \"False\")
                   \"\nTitle Row Alignment = \" (itoa (vla-GetAlignment customObj acTitleRow))
	           \"\nHeader Suppression = \" (if (= (vla-get-HeaderSuppressed customObj) :vlax-true) \"True\" \"False\")
	   )
    )
    (vlax-release-object col)
)
")
("VerticalDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-EB4475A1-AEDF-4F82-ABBE-52F7B6F54F1C"
                     "
VerticalDirection Property (ActiveX)
Specifies the vertical direction for the section plane.
Supported platforms: Windows only
Signature
VBA:
object.VerticalDirection
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Variant
Vertical direction of the section plane.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("VerticalTextPosition" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4BAA4370-EDB7-4E65-B0C3-2EC38F648A2E"
                        "
VerticalTextPosition Property (ActiveX)
Specifies the vertical position of text in relation to the dimension line.
Supported platforms: Windows only
Signature
VBA:
object.VerticalTextPosition
object
    Type: Dim3PointAngular, DimAligned, DimAngular, DimArcLength, DimDiametric, Dimension, DimOrdinate, DimRadial, DimRadialLarge, DimRotated, Leader
    The object this property applies to.
Property Value
Read-only: No
Type: acDimVerticalJustification enum
    acVertCentered: Centers the dimension text between the extension lines.
    acAbove: Places the dimension text above the dimension line except when the dimension line is not horizontal and text inside the extension lines is forced horizontal (DIMTIH = 1). The distance from the dimension line to the baseline of the lowest line of text is the current DIMGAP value.
    acUnder: Places the dimension text below the dimension line except when the dimension line is not horizontal and text inside the extension lines is forced horizontal (DIMTIH = 1). The distance from the dimension line to the baseline of the lowest line of text is the current DIMGAP value.
    acOutside: Places the dimension text on the side of the dimension line farthest from the defining points.
    acJIS: Places the dimension text to conform to Japanese Industrial Standards (JIS).
Remarks
The initial value for this property is acVertCentered.
Note: This property overrides the value of the DIMTAD system variable for the given dimension, leader, or tolerance object.
Examples
VBA:
Sub Example_VerticalTextPosition()
    ' This example creates an aligned dimension in model space
    ' and cycles the dimension text through a couple of different
    ' vertical alignments
    
    Dim dimObj As AcadDimAligned
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double
    Dim location(0 To 2) As Double
    Dim CurrentValue As String
    
    ' Define the dimension
    point1(0) = 5: point1(1) = 5: point1(2) = 0
    point2(0) = 9: point2(1) = 5: point2(2) = 0
    location(0) = 5: location(1) = 7: location(2) = 0
    
    ' Create an aligned dimension object in model space
    Set dimObj = ThisDrawing.ModelSpace.AddDimAligned(point1, point2, location)
    ThisDrawing.Application.ZoomAll
    ' Read and display current text position
    Select Case dimObj.VerticalTextPosition
        Case acVertCentered:    CurrentValue = \"centered\"
        Case acAbove:           CurrentValue = \"above\"
        Case acOutside:         CurrentValue = \"outside\"
        Case acJIS:             CurrentValue = \"to Japanesee industrial standards\"
    End Select
    MsgBox \"The vertical position of the dimension is: \" & CurrentValue
    ' Change the position of the dimension text to be above the extesnion lines
    dimObj.VerticalTextPosition = acAbove
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension text is now aligned above extension lines\"
   
    ' Change the position of the dimension text to be centered with the extension lines
    dimObj.VerticalTextPosition = acVertCentered
    ThisDrawing.Regen acAllViewports
    MsgBox \"Dimension text is now centered with the extension lines\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_VerticalTextPosition()
    ;; This example creates an aligned dimension in model space
    ;; and cycles the dimension text through a couple of different
    ;; vertical alignments
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the dimension
    (setq point1 (vlax-3d-point 5 5 0)
          point2 (vlax-3d-point 9 5 0)
          location (vlax-3d-point 5 7 0))  
    
    ;; Create an aligned dimension object in model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq dimObj (vla-AddDimAligned modelSpace point1 point2 location))
    (vla-ZoomAll acadObj)
    ;; Read and display current text position
    (setq CurrentValue (cond
                           ((= (vla-get-VerticalTextPosition dimObj) acVertCentered) \"centered\")
                           ((= (vla-get-VerticalTextPosition dimObj) acAbove) \"above\")
                           ((= (vla-get-VerticalTextPosition dimObj) acOutside) \"outside\")
                           ((= (vla-get-VerticalTextPosition dimObj) acJIS) \"to Japanesee industrial standards\")
                       ))
    
    (alert (strcat \"The vertical position of the dimension is: \" CurrentValue))
    ;; Change the position of the dimension text to be above the extesnion lines
    (vla-put-VerticalTextPosition dimObj acAbove)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension text is now aligned above extension lines\")
   
    ;; Change the position of the dimension text to be centered with the extension lines
    (vla-put-VerticalTextPosition dimObj acVertCentered)
    (vla-Regen doc acAllViewports)
    (alert \"Dimension text is now centered with the extension lines\")
)
")
("Vertices" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6C6A7723-47F0-4019-B373-44B510339006"
"
Vertices Property (ActiveX)
Gets the vertices in the section line.
Supported platforms: Windows only
Signature
VBA:
object.Vertices
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Variant
Array of vertices that define the section line.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ViewToPlot" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E66C049C-5907-404A-BB25-2CAF3B464DAB"
              "
ViewToPlot Property (ActiveX)
Specifies the name of the view to plot.
Supported platforms: Windows only
Signature
VBA:
object.ViewToPlot
object
    Type: Layout, PlotConfiguration
    The object this property applies to.
Property Value
Read-only: No
Type: String
The name of the view to plot.
Remarks
To specify a plot to a view, set the PlotType property for the layout or plot configuration to acView.
Examples
VBA:
Sub Example_ViewToPlot()
    ' This example reads a list of available Named Views and displays a plot preview
    ' of the view selected by the user.  The current view to plot,
    ' if set, if preceded by an '*'
    '
    ' * Note: After previewing the plot, you will have to exit the
    ' plot preview before the VBA example will stop and control will be returned
    
    Dim ViewList As New Collection
    Dim View As AcadView
    Dim iCount As Long
    Dim msg As String
    Dim ViewName As String, ViewNum As String
    
    ' Get list of views available to plot
    For Each View In ThisDrawing.Views
        ViewList.Add View
    Next
    
    ' Are there any named views to plot
    If ViewList.count = 0 Then
        MsgBox \"There are no named views to plot.\", vbInformation
        Exit Sub
    End If
    
    ' Read and display the current plot style table path
    For iCount = 1 To ViewList.count
        ViewName = ViewList(iCount).Name
        
        If ViewName = ThisDrawing.ActiveLayout.ViewToPlot Then  ' Is this the current view to plot
            ViewNum = iCount
            ViewName = \"*\" & ViewName
        End If
        
        msg = msg & \"(\" & iCount & \") \" & vbTab & ViewName & vbCrLf
    Next
    
    ' Prompt user for the view to plot
RETRY:
    ViewNum = InputBox(\"Which view would you like to plot?\" & vbCrLf & vbCrLf & msg, \"View To Plot\", ViewNum)
    
    If Trim(ViewNum) = \"\" Then
        Exit Sub
    End If
    
    If Not (IsNumeric(ViewNum)) Then
        MsgBox \"You must supply a numeric value corresponding to one of the views listed above.\", vbExclamation
        GoTo RETRY
    End If
    
    ' Tell the drawing which view to plot
    ThisDrawing.ActiveLayout.ViewToPlot = ViewList(CLng(ViewNum)).Name
    
    ' Make sure you tell the drawing to plot a view, not some other plot style
    ThisDrawing.ActiveLayout.PlotType = acView
    
    ' Send Plot To Window
    ThisDrawing.ActiveLayout.ConfigName = \"DWG to PDF.pc3\"
    ThisDrawing.Plot.DisplayPlotPreview acFullPreview
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ViewToPlot()
    ;; This example reads a list of available Named Views and displays a plot preview
    ;; of the view selected by the user.  The current view to plot,
    ;; if set, if preceded by an '*'
    ;;
    ;; * Note: After previewing the plot, you will have to exit the
    ;; plot preview before the VBA example will stop and control will be returned
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Get list of views available to plot
    (setq viewList (vlax-make-safearray vlax-vbObject (cons 0 (vla-get-Count (vla-get-Views doc))))
          cnt 0)
  
    (vlax-for view (vla-get-Views doc)
        (vlax-safearray-put-element viewList cnt view)
        (setq cnt (1+ cnt))
    )
    
    ;; Are there any named views to plot
    (if (> (vla-get-Count (vla-get-Views doc)) 0)
        (progn
            ;; Read and display the current plot style table path
            (setq iCount 0
                  msg \"\")
            (while (> (vla-get-Count (vla-get-Views doc)) iCount)
                (setq viewName (vla-get-Name (vlax-safearray-get-element ViewList iCount)))
        
                (if (= viewName (vla-get-ViewToPlot (vla-get-ActiveLayout doc)))  ;; Is this the current view to plot
                    (setq ViewNum (1+ iCount)
                          ViewName (strcat \"*\" ViewName))
                )
        
                (setq iCount (1+ iCount)
                      msg (strcat msg \"(\" (itoa iCount) \")   \" viewName \"\n\"))
            )
    
            ;; Prompt user for the view to plot
            (setq viewNum (vla-GetInteger (vla-get-Utility doc) (strcat \"\nWhich view would you like to plot?\n\" msg)))
    
            (if (and (<= viewNum (vla-get-Count (vla-get-Views doc)))
                     (> viewNum 0))
                (progn
                    ;; Tell the drawing which view to plot
                    (vla-put-ViewToPlot (vla-get-ActiveLayout doc) (vla-get-Name (vlax-safearray-get-element ViewList (1- viewNum))))
    
                    ;; Make sure you tell the drawing to plot a view, not some other plot style
                    (vla-put-PlotType (vla-get-ActiveLayout doc) acView)
                    (vla-put-ConfigName (vla-get-ActiveLayout doc) \"DWF6 ePlot.pc3\")
                  
                    ;; Send Plot To Window
                    (vla-DisplayPlotPreview (vla-get-Plot doc) acFullPreview)
                )
                (alert \"The view number entered is not valid.\")
            )
        )
        (alert \"There are no named views to plot.\")
    )
)
")
("ViewingDirection" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D9071E62-7818-473D-B00E-260D86AD6E5C"
"
ViewingDirection Property (ActiveX)
Specifies the viewing direction for the section plane.
Supported platforms: Windows only
Signature
VBA:
object.ViewingDirection
object
    Type: Section
    The object to which this property applies.
Property Value
Read-only: No
Type: Variant
Viewing direction of the section plane.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ViewportDefault" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E09F81FB-D659-438D-B209-EF57DE9B26B8"
                   "
ViewportDefault Property (ActiveX)
Specifies if the layer is to be frozen in new viewports.
Supported platforms: Windows only
Signature
VBA:
object.ViewportDefault
object
    Type: Layer
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The layer is frozen in new viewports.
    False: The layer is not frozen in new viewports.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_ViewportDefault()
    ' This example creates a new layer called \"New_Layer\".  It then uses
    ' the ViewportDefault property of each Layer to display whether or not that layer
    ' is frozen in new viewports.  The user has the ability to toggle whether or not
    ' each layer will be frozen in new viewports, and the final ViewportDefault status
    ' for all layers is displayed.
    
    Dim layerObj As AcadLayer, tempLayer As AcadLayer
    Dim msg As String
    ' Add the layer to the layers collection
    Set layerObj = ThisDrawing.Layers.Add(\"New_Layer\")
    
    ' Make the new layer the active layer for the drawing
    ThisDrawing.ActiveLayer = layerObj
    
    ' Cycle through the layers and allow user to make them frozen in new viewports or not
    
    For Each tempLayer In ThisDrawing.Layers
        If tempLayer.ViewportDefault Then     ' Determine if this layer is fozen in new viewports
            If MsgBox(\"The layer '\" & tempLayer.name & \"' will be frozen in new viewports.  Would you like to make this layer unfrozen in new viewports?\", vbYesNo & vbQuestion) = vbYes Then
                tempLayer.ViewportDefault = False     ' Change frozen state
            End If
        Else
            If MsgBox(\"The layer '\" & tempLayer.name & \"' will not be frozen in new viewports.  Would you like to make this layer frozen in new viewports?\", vbYesNo & vbQuestion) = vbYes Then
                tempLayer.ViewportDefault = True      ' Change frozen state
            End If
        End If
    Next
    
    ' Display the new viewport freeze status of the layers in this drawing
    
    For Each tempLayer In ThisDrawing.Layers
        ' Determine if this layer is frozen in new viewports
        If tempLayer.ViewportDefault Then
            msg = msg & \"The layer '\" & tempLayer.name & \"' will be frozen in new viewports.\" & vbCrLf
        Else
            msg = msg & \"The layer '\" & tempLayer.name & \"' will not be frozen in new viewports.\" & vbCrLf
        End If
    Next
    MsgBox msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ViewportDefault()
    ;; This example creates a new layer called \"New_Layer\".  It then uses
    ;; the ViewportDefault property of each Layer to display whether or not that layer
    ;; is frozen in new viewports.  The user has the ability to toggle whether or not
    ;; each layer will be frozen in new viewports, and the final ViewportDefault status
    ;; for all layers is displayed.
    ;; Add the layer to the layers collection
    (setq layerObj (vla-Add (vla-get-Layers doc) \"New_Layer\"))
    
    ;; Make the new layer the active layer for the drawing
    (vla-put-ActiveLayer doc layerObj)
    
    ;; Cycle through the layers and allow user to make them frozen in new viewports or not 
    (vlax-for tempLayer (vla-get-Layers doc)
        ;; Display the current new viewports layer state
        (if (= (vla-get-ViewportDefault tempLayer) :vlax-true)
            (alert (strcat \"The layer '\" (vla-get-Name tempLayer) \"' is frozen for new viewports. Toggling state now.\"))
            (alert (strcat \"The layer '\" (vla-get-Name tempLayer) \"' is not frozen for new viewports. Toggling state now.\"))
        )
        (vla-put-ViewportDefault tempLayer (if (= (vla-get-ViewportDefault tempLayer) :vlax-true) :vlax-false :vlax-true))
    )
    
    ;; Display the new viewport freeze status of the layers in this drawing
    (setq msg \"\")
    (vlax-for tempLayer (vla-get-Layers doc)
        ;; Determine if this layer is frozen in new viewports
        (if (= (vla-get-ViewportDefault tempLayer) :vlax-true)
            (setq msg (strcat msg \"The layer '\" (vla-get-Name tempLayer) \"' will be frozen in new viewports.\n\"))
            (setq msg (strcat msg \"The layer '\" (vla-get-Name tempLayer) \"' will not be frozen in new viewports.\n\"))
        )
    )
    (alert msg)
)
")
("ViewportOn" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B3BE2B59-CDAF-4718-BD67-A39AE2F37186"
"
ViewportOn Property (ActiveX)
Specifies the display status of the viewport.
Supported platforms: Windows only
Signature
VBA:
object.ViewportOn
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The viewport is on.
    False: The viewport is off.
Remarks
To turn the display control of a viewport on or off use the Display method.
Examples
VBA:
Sub Example_ViewportOn()
    ' This example creates two new paper space viewports.
    ' It then checks the status of the viewports.
    
    Dim pviewportObj1 As AcadPViewport
    Dim pviewportObj2 As AcadPViewport
    Dim center(0 To 2) As Double
    Dim width As Double
    Dim height As Double
    
    ' Define the paper space viewport
    center(0) = 3: center(1) = 3: center(2) = 0
    width = 10
    height = 10
    
    ' Change from model space to paper space
    ThisDrawing.ActiveSpace = acPaperSpace
    
    ' Create the paper space viewports
    Set pviewportObj1 = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    center(0) = 8: center(1) = 8: center(2) = 0
    width = 10
    height = 10
    Set pviewportObj2 = ThisDrawing.PaperSpace.AddPViewport(center, width, height)
    
    ' Before making a paper space viewport active,
    ' the mspace property needs to be True
    pviewportObj1.DISPLAY (True)
    ThisDrawing.mspace = True
    ThisDrawing.ActivePViewport = pviewportObj1
    ThisDrawing.Regen acAllViewports
    
    MsgBox \"pviewportObj1 is \" & (IIf(pviewportObj1.ViewportOn, \"on.\", \"not on.\")) & vbCrLf & _
           \"pviewportObj2 is \" & (IIf(pviewportObj2.ViewportOn, \"on.\", \"not on.\"))
    
    ' Now turn on pviewportObj2 as well
    pviewportObj2.DISPLAY (True)
    MsgBox \"pviewportObj1 is \" & (IIf(pviewportObj1.ViewportOn, \"on.\", \"not on.\")) & vbCrLf & _
           \"pviewportObj2 is \" & (IIf(pviewportObj2.ViewportOn, \"on.\", \"not on.\"))
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_ViewportOn()
    ;; This example creates two new paper space viewports.
    ;; It then checks the status of the viewports.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the paper space viewport
    (setq center (vlax-3d-point 3 3 0)
          width 10
          height 10)
    
    ;; Change from model space to paper space
    (vla-put-ActiveSpace doc acPaperSpace)
    
    ;; Create the paper space viewports
    (setq paperSpace (vla-get-PaperSpace doc))
    (setq pviewportObj1 (vla-AddPViewport paperSpace center width height))
  
    (setq center (vlax-3d-point 8 8 0)
          width 10
          height 10)
    (setq pviewportObj2 (vla-AddPViewport paperSpace center width height))
    
    ;; Before making a paper space viewport active,
    ;; the mspace property needs to be True
    (vla-Display pviewportObj1 :vlax-true)
    (vla-put-MSpace doc :vlax-true)
    (vla-put-ActivePViewport doc pviewportObj1)
    (vla-Regen doc acAllViewports)
    
    (alert (strcat \"pviewportObj1 is \" (if (= (vla-get-ViewportOn pviewportObj1) :vlax-true) \"on.\" \"not on.\")
                   \"\npviewportObj2 is \" (if (= (vla-get-ViewportOn pviewportObj2) :vlax-true) \"on.\" \"not on.\")))
    
    ;; Now turn on pviewportObj2 as well
    (vla-Display pviewportObj2 :vlax-true)
    (alert (strcat \"pviewportObj1 is \" (if (= (vla-get-ViewportOn pviewportObj1) :vlax-true) \"on.\" \"not on.\")
                   \"\npviewportObj2 is \" (if (= (vla-get-ViewportOn pviewportObj2) :vlax-true) \"on.\" \"not on.\")))
)
")
("Viewports" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1DA1A71A-DEA1-4136-B057-A6EE915EF001"
             "
Viewports Property (ActiveX)
Gets the Viewports collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Viewports
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Viewports
The Viewports collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Viewports()
    ' This example finds the current Viewports collection and
    ' adds a new viewport to that collection.
    
    Dim viewportColl As AcadViewports
    Set viewportColl = ThisDrawing.Viewports
    
    ' Create a viewport named \"TEST\" in the current drawing
    Dim viewportObj As AcadViewport
    Set viewportObj = viewportColl.Add(\"TEST\")
    MsgBox \"A new viewport called \" & viewportObj.name & \" has been added to the Viewports collection.\", vbInformation, \"Viewports Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Viewports()
    ;; This example finds the current Viewports collection and
    ;; adds a new viewport to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq viewportColl (vla-get-Viewports doc))
    
    ;; Create a viewport named \"TEST\" in the current drawing
    (setq viewportObj (vla-Add viewportColl \"TEST\"))
    (alert (strcat \"A new viewport called \" (vla-get-Name viewportObj) \" has been added to the Viewports collection.\"))
)
")
("Views" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DD4ED21D-EF6A-4FAD-99C5-3A08BEF12101"
         "
Views Property (ActiveX)
Gets the Views collection for the document.
Supported platforms: Windows only
Signature
VBA:
object.Views
object
    Type: Database, Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: Views
The Views collection for the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Views()
    ' This example finds the current views collection and
    ' adds a new view to that collection.
    
    Dim viewColl As AcadViews
    Set viewColl = ThisDrawing.Views
    
    ' Create a view named \"TEST\" in the current drawing
    Dim viewObj As AcadView
    Set viewObj = viewColl.Add(\"TEST\")
    MsgBox \"A new view called \" & viewObj.name & \" has been added to the views collection.\", vbInformation, \"Views Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Views()
    ;; This example finds the current views collection and
    ;; adds a new view to that collection.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq viewColl (vla-get-Views doc))
    
    ;; Create a view named \"TEST\" in the current drawing
    (setq viewObj (vla-Add viewColl \"TEST\"))
    (alert (strcat \"A new view called \" (vla-get-Name viewObj) \" has been added to the views collection.\"))
)
")
("VisibilityEdge1" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-1878AB7A-A06A-48B2-9952-A46EC12F8189"
"
VisibilityEdge1 Property (ActiveX)
Specifies the visibility of a 3DFace edge 1.
Supported platforms: Windows only
Signature
VBA:
object.VisibilityEdge1
object
    Type: 3DFace
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The edge is visible.
    False: The edge is invisible.
Remarks
You can also use the GetInvisibleEdge and SetInvisibleEdge methods to query or set the visibility of an edge. Because these methods use an index to specify the edge, they are useful when iterating through all the edges of a face.
Examples
VBA:
Sub Example_VisibilityEdge1()
    ' This example creates a 3D Face in model space and allows the user to
    ' control the visibility of the edges
    
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double, _
        point3(0 To 2) As Double, point4(0 To 2) As Double
    Dim Edge1Msg As String, Edge2Msg As String, _
        Edge3Msg As String, Edge4Msg As String
    
    ' Define the four coordinates of the face
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 5: point2(1) = 0: point2(2) = 1
    point3(0) = 1: point3(1) = 10: point3(2) = 0
    point4(0) = 5: point4(1) = 5: point4(2) = 1
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the visibility of the edges for this object
DisplayEdgeInformation:
    Edge1Msg = IIf(faceObj.VisibilityEdge1, \"Edge1 of the new 3DFace is visible\", \"Edge1 of the new 3DFace is not visible\")
    Edge2Msg = IIf(faceObj.VisibilityEdge2, \"Edge2 of the new 3DFace is visible\", \"Edge2 of the new 3DFace is not visible\")
    Edge3Msg = IIf(faceObj.VisibilityEdge3, \"Edge3 of the new 3DFace is visible\", \"Edge3 of the new 3DFace is not visible\")
    Edge4Msg = IIf(faceObj.VisibilityEdge4, \"Edge4 of the new 3DFace is visible\", \"Edge4 of the new 3DFace is not visible\")
    
    MsgBox Edge1Msg & vbCrLf & _
           Edge2Msg & vbCrLf & _
           Edge3Msg & vbCrLf & _
           Edge4Msg
            
    ' Allow user to toggle the visibility of one of the edges
    Select Case InputBox(\"Which edge of the 3DFace would you like to toggle the visibility of?\", \"Toggle Edge Visibility\", 1)
        Case \"1\": faceObj.VisibilityEdge1 = Not (faceObj.VisibilityEdge1)
        Case \"2\": faceObj.VisibilityEdge2 = Not (faceObj.VisibilityEdge2)
        Case \"3\": faceObj.VisibilityEdge3 = Not (faceObj.VisibilityEdge3)
        Case \"4\": faceObj.VisibilityEdge4 = Not (faceObj.VisibilityEdge4)
        Case \"\":  Exit Sub
        Case Else: MsgBox \"You must enter the number of an edge (1-4)\", vbInformation
    End Select
            
    ' Refresh view
    ThisDrawing.Regen acAllViewports
    
    ' Return to display information about the edges
    GoTo DisplayEdgeInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_VisibilityEdge1()
    ;; This example creates a 3D Face in model space and allows the user to
    ;; control the visibility of the edges
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 5 0 1)
          point3 (vlax-3d-point 5 5 1)
          point4 (vlax-3d-point 1 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
    
    ;; Display information about the visibility of the edges for this object
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is visible\" \"Edge1 of the new 3DFace is not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is visible\" \"Edge2 of the new 3DFace is not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is visible\" \"Edge3 of the new 3DFace is not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is visible\" \"Edge4 of the new 3DFace is not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
            
    ;; Allow user to toggle the visibility of one of the edges
    (setq faceNum (vla-GetInteger (vla-get-Utility doc) \"\nWhich edge of the 3DFace would you like to toggle the visibility of? (1 to 4)\n\"))
    (cond
        ((= faceNum 1)(vla-put-VisibilityEdge1 faceObj (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 2)(vla-put-VisibilityEdge2 faceObj (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 3)(vla-put-VisibilityEdge3 faceObj (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 4)(vla-put-VisibilityEdge4 faceObj (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) :vlax-false :vlax-true)))
        (alert \"You must enter the number of an edge (1-4)\")
    )
            
    ;; Refresh view
    (vla-Regen doc acAllViewports)
    
    ;; Return to display information about the edges
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is now visible\" \"Edge1 of the new 3DFace is now not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is now visible\" \"Edge2 of the new 3DFace is now not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is now visible\" \"Edge3 of the new 3DFace is now not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is now visible\" \"Edge4 of the new 3DFace is now not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
)
")
("VisibilityEdge2" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-961076DD-BA1B-4C32-B7C0-702B5D758986"
                   "
VisibilityEdge2 Property (ActiveX)
Specifies the visibility of a 3DFace edge 2.
Supported platforms: Windows only
Signature
VBA:
object.VisibilityEdge2
object
    Type: 3DFace
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The edge is visible.
    False: The edge is invisible.
Remarks
You can also use the GetInvisibleEdge and SetInvisibleEdge methods to query or set the visibility of an edge. Because these methods use an index to specify the edge, they are useful when iterating through all the edges of a face.
Examples
VBA:
Sub Example_VisibilityEdge2()
    ' This example creates a 3D Face in model space and allows the user to
    ' control the visibility of the edges
    
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double, _
        point3(0 To 2) As Double, point4(0 To 2) As Double
    Dim Edge1Msg As String, Edge2Msg As String, _
        Edge3Msg As String, Edge4Msg As String
    
    ' Define the four coordinates of the face
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 5: point2(1) = 0: point2(2) = 1
    point3(0) = 1: point3(1) = 10: point3(2) = 0
    point4(0) = 5: point4(1) = 5: point4(2) = 1
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the visibility of the edges for this object
DisplayEdgeInformation:
    Edge1Msg = IIf(faceObj.VisibilityEdge1, \"Edge1 of the new 3DFace is visible\", \"Edge1 of the new 3DFace is not visible\")
    Edge2Msg = IIf(faceObj.VisibilityEdge2, \"Edge2 of the new 3DFace is visible\", \"Edge2 of the new 3DFace is not visible\")
    Edge3Msg = IIf(faceObj.VisibilityEdge3, \"Edge3 of the new 3DFace is visible\", \"Edge3 of the new 3DFace is not visible\")
    Edge4Msg = IIf(faceObj.VisibilityEdge4, \"Edge4 of the new 3DFace is visible\", \"Edge4 of the new 3DFace is not visible\")
    
    MsgBox Edge1Msg & vbCrLf & _
           Edge2Msg & vbCrLf & _
           Edge3Msg & vbCrLf & _
           Edge4Msg
            
    ' Allow user to toggle the visibility of one of the edges
    Select Case InputBox(\"Which edge of the 3DFace would you like to toggle the visibility of?\", \"Toggle Edge Visibility\", 1)
        Case \"1\": faceObj.VisibilityEdge1 = Not (faceObj.VisibilityEdge1)
        Case \"2\": faceObj.VisibilityEdge2 = Not (faceObj.VisibilityEdge2)
        Case \"3\": faceObj.VisibilityEdge3 = Not (faceObj.VisibilityEdge3)
        Case \"4\": faceObj.VisibilityEdge4 = Not (faceObj.VisibilityEdge4)
        Case \"\":  Exit Sub
        Case Else: MsgBox \"You must enter the number of an edge (1-4)\", vbInformation
    End Select
            
    ' Refresh view
    ThisDrawing.Regen acAllViewports
    
    ' Return to display information about the edges
    GoTo DisplayEdgeInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_VisibilityEdge2()
    ;; This example creates a 3D Face in model space and allows the user to
    ;; control the visibility of the edges
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 5 0 1)
          point3 (vlax-3d-point 5 5 1)
          point4 (vlax-3d-point 1 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
    
    ;; Display information about the visibility of the edges for this object
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is visible\" \"Edge1 of the new 3DFace is not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is visible\" \"Edge2 of the new 3DFace is not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is visible\" \"Edge3 of the new 3DFace is not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is visible\" \"Edge4 of the new 3DFace is not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
            
    ;; Allow user to toggle the visibility of one of the edges
    (setq faceNum (vla-GetInteger (vla-get-Utility doc) \"\nWhich edge of the 3DFace would you like to toggle the visibility of? (1 to 4)\n\"))
    (cond
        ((= faceNum 1)(vla-put-VisibilityEdge1 faceObj (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 2)(vla-put-VisibilityEdge2 faceObj (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 3)(vla-put-VisibilityEdge3 faceObj (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 4)(vla-put-VisibilityEdge4 faceObj (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) :vlax-false :vlax-true)))
        (alert \"You must enter the number of an edge (1-4)\")
    )
            
    ;; Refresh view
    (vla-Regen doc acAllViewports)
    
    ;; Return to display information about the edges
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is now visible\" \"Edge1 of the new 3DFace is now not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is now visible\" \"Edge2 of the new 3DFace is now not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is now visible\" \"Edge3 of the new 3DFace is now not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is now visible\" \"Edge4 of the new 3DFace is now not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
)
")
("VisibilityEdge3" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3CAEB3FF-FBEA-4D7F-85F0-7397C2CBA457"
                   "
VisibilityEdge3 Property (ActiveX)
Specifies the visibility of a 3DFace edge 3.
Supported platforms: Windows only
Signature
VBA:
object.VisibilityEdge3
object
    Type: 3DFace
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The edge is visible.
    False: The edge is invisible.
Remarks
You can also use the GetInvisibleEdge and SetInvisibleEdge methods to query or set the visibility of an edge. Because these methods use an index to specify the edge, they are useful when iterating through all the edges of a face.
Examples
VBA:
Sub Example_VisibilityEdge3()
    ' This example creates a 3D Face in model space and allows the user to
    ' control the visibility of the edges
    
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double, _
        point3(0 To 2) As Double, point4(0 To 2) As Double
    Dim Edge1Msg As String, Edge2Msg As String, _
        Edge3Msg As String, Edge4Msg As String
    
    ' Define the four coordinates of the face
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 5: point2(1) = 0: point2(2) = 1
    point3(0) = 1: point3(1) = 10: point3(2) = 0
    point4(0) = 5: point4(1) = 5: point4(2) = 1
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the visibility of the edges for this object
DisplayEdgeInformation:
    Edge1Msg = IIf(faceObj.VisibilityEdge1, \"Edge1 of the new 3DFace is visible\", \"Edge1 of the new 3DFace is not visible\")
    Edge2Msg = IIf(faceObj.VisibilityEdge2, \"Edge2 of the new 3DFace is visible\", \"Edge2 of the new 3DFace is not visible\")
    Edge3Msg = IIf(faceObj.VisibilityEdge3, \"Edge3 of the new 3DFace is visible\", \"Edge3 of the new 3DFace is not visible\")
    Edge4Msg = IIf(faceObj.VisibilityEdge4, \"Edge4 of the new 3DFace is visible\", \"Edge4 of the new 3DFace is not visible\")
    
    MsgBox Edge1Msg & vbCrLf & _
           Edge2Msg & vbCrLf & _
           Edge3Msg & vbCrLf & _
           Edge4Msg
            
    ' Allow user to toggle the visibility of one of the edges
    Select Case InputBox(\"Which edge of the 3DFace would you like to toggle the visibility of?\", \"Toggle Edge Visibility\", 1)
        Case \"1\": faceObj.VisibilityEdge1 = Not (faceObj.VisibilityEdge1)
        Case \"2\": faceObj.VisibilityEdge2 = Not (faceObj.VisibilityEdge2)
        Case \"3\": faceObj.VisibilityEdge3 = Not (faceObj.VisibilityEdge3)
        Case \"4\": faceObj.VisibilityEdge4 = Not (faceObj.VisibilityEdge4)
        Case \"\":  Exit Sub
        Case Else: MsgBox \"You must enter the number of an edge (1-4)\", vbInformation
    End Select
            
    ' Refresh view
    ThisDrawing.Regen acAllViewports
    
    ' Return to display information about the edges
    GoTo DisplayEdgeInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_VisibilityEdge3()
    ;; This example creates a 3D Face in model space and allows the user to
    ;; control the visibility of the edges
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 5 0 1)
          point3 (vlax-3d-point 5 5 1)
          point4 (vlax-3d-point 1 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
    
    ;; Display information about the visibility of the edges for this object
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is visible\" \"Edge1 of the new 3DFace is not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is visible\" \"Edge2 of the new 3DFace is not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is visible\" \"Edge3 of the new 3DFace is not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is visible\" \"Edge4 of the new 3DFace is not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
            
    ;; Allow user to toggle the visibility of one of the edges
    (setq faceNum (vla-GetInteger (vla-get-Utility doc) \"\nWhich edge of the 3DFace would you like to toggle the visibility of? (1 to 4)\n\"))
    (cond
        ((= faceNum 1)(vla-put-VisibilityEdge1 faceObj (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 2)(vla-put-VisibilityEdge2 faceObj (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 3)(vla-put-VisibilityEdge3 faceObj (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 4)(vla-put-VisibilityEdge4 faceObj (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) :vlax-false :vlax-true)))
        (alert \"You must enter the number of an edge (1-4)\")
    )
            
    ;; Refresh view
    (vla-Regen doc acAllViewports)
    
    ;; Return to display information about the edges
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is now visible\" \"Edge1 of the new 3DFace is now not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is now visible\" \"Edge2 of the new 3DFace is now not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is now visible\" \"Edge3 of the new 3DFace is now not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is now visible\" \"Edge4 of the new 3DFace is now not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
)
")
("VisibilityEdge4" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8D0F0136-D1D9-45E0-85E0-2FB07F90F83D"
                   "
VisibilityEdge4 Property (ActiveX)
Specifies the visibility of a 3DFace edge 4.
Supported platforms: Windows only
Signature
VBA:
object.VisibilityEdge4
object
    Type: 3DFace
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: The edge is visible.
    False: The edge is invisible.
Remarks
You can also use the GetInvisibleEdge and SetInvisibleEdge methods to query or set the visibility of an edge. Because these methods use an index to specify the edge, they are useful when iterating through all the edges of a face.
Examples
VBA:
Sub Example_VisibilityEdge4()
    ' This example creates a 3D Face in model space and allows the user to
    ' control the visibility of the edges
    
    Dim faceObj As Acad3DFace
    Dim point1(0 To 2) As Double, point2(0 To 2) As Double, _
        point3(0 To 2) As Double, point4(0 To 2) As Double
    Dim Edge1Msg As String, Edge2Msg As String, _
        Edge3Msg As String, Edge4Msg As String
    
    ' Define the four coordinates of the face
    point1(0) = 0: point1(1) = 0: point1(2) = 0
    point2(0) = 5: point2(1) = 0: point2(2) = 1
    point3(0) = 1: point3(1) = 10: point3(2) = 0
    point4(0) = 5: point4(1) = 5: point4(2) = 1
    
    ' Create the 3DFace object in model space
    Set faceObj = ThisDrawing.ModelSpace.Add3DFace(point1, point2, point3, point4)
    ThisDrawing.Application.ZoomAll
    
    ' Display information about the visibility of the edges for this object
DisplayEdgeInformation:
    Edge1Msg = IIf(faceObj.VisibilityEdge1, \"Edge1 of the new 3DFace is visible\", \"Edge1 of the new 3DFace is not visible\")
    Edge2Msg = IIf(faceObj.VisibilityEdge2, \"Edge2 of the new 3DFace is visible\", \"Edge2 of the new 3DFace is not visible\")
    Edge3Msg = IIf(faceObj.VisibilityEdge3, \"Edge3 of the new 3DFace is visible\", \"Edge3 of the new 3DFace is not visible\")
    Edge4Msg = IIf(faceObj.VisibilityEdge4, \"Edge4 of the new 3DFace is visible\", \"Edge4 of the new 3DFace is not visible\")
    
    MsgBox Edge1Msg & vbCrLf & _
           Edge2Msg & vbCrLf & _
           Edge3Msg & vbCrLf & _
           Edge4Msg
            
    ' Allow user to toggle the visibility of one of the edges
    Select Case InputBox(\"Which edge of the 3DFace would you like to toggle the visibility of?\", \"Toggle Edge Visibility\", 1)
        Case \"1\": faceObj.VisibilityEdge1 = Not (faceObj.VisibilityEdge1)
        Case \"2\": faceObj.VisibilityEdge2 = Not (faceObj.VisibilityEdge2)
        Case \"3\": faceObj.VisibilityEdge3 = Not (faceObj.VisibilityEdge3)
        Case \"4\": faceObj.VisibilityEdge4 = Not (faceObj.VisibilityEdge4)
        Case \"\":  Exit Sub
        Case Else: MsgBox \"You must enter the number of an edge (1-4)\", vbInformation
    End Select
            
    ' Refresh view
    ThisDrawing.Regen acAllViewports
    
    ' Return to display information about the edges
    GoTo DisplayEdgeInformation
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_VisibilityEdge4()
    ;; This example creates a 3D Face in model space and allows the user to
    ;; control the visibility of the edges
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the four coordinates of the face
    (setq point1 (vlax-3d-point 0 0 0)
          point2 (vlax-3d-point 5 0 1)
          point3 (vlax-3d-point 5 5 1)
          point4 (vlax-3d-point 1 10 0))
    
    ;; Create the 3DFace object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq faceObj (vla-Add3DFace modelSpace point1 point2 point3 point4))
    (vla-ZoomAll acadObj)
    
    ;; Display information about the visibility of the edges for this object
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is visible\" \"Edge1 of the new 3DFace is not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is visible\" \"Edge2 of the new 3DFace is not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is visible\" \"Edge3 of the new 3DFace is not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is visible\" \"Edge4 of the new 3DFace is not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
            
    ;; Allow user to toggle the visibility of one of the edges
    (setq faceNum (vla-GetInteger (vla-get-Utility doc) \"\nWhich edge of the 3DFace would you like to toggle the visibility of? (1 to 4)\n\"))
    (cond
        ((= faceNum 1)(vla-put-VisibilityEdge1 faceObj (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 2)(vla-put-VisibilityEdge2 faceObj (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 3)(vla-put-VisibilityEdge3 faceObj (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) :vlax-false :vlax-true)))
        ((= faceNum 4)(vla-put-VisibilityEdge4 faceObj (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) :vlax-false :vlax-true)))
        (alert \"You must enter the number of an edge (1-4)\")
    )
            
    ;; Refresh view
    (vla-Regen doc acAllViewports)
    
    ;; Return to display information about the edges
    (setq edge1Msg (if (= (vla-get-VisibilityEdge1 faceObj) :vlax-true) \"Edge1 of the new 3DFace is now visible\" \"Edge1 of the new 3DFace is now not visible\"))
    (setq edge2Msg (if (= (vla-get-VisibilityEdge2 faceObj) :vlax-true) \"Edge2 of the new 3DFace is now visible\" \"Edge2 of the new 3DFace is now not visible\"))
    (setq edge3Msg (if (= (vla-get-VisibilityEdge3 faceObj) :vlax-true) \"Edge3 of the new 3DFace is now visible\" \"Edge3 of the new 3DFace is now not visible\"))
    (setq edge4Msg (if (= (vla-get-VisibilityEdge4 faceObj) :vlax-true) \"Edge4 of the new 3DFace is now visible\" \"Edge4 of the new 3DFace is now not visible\"))
    
    (alert (strcat Edge1Msg
                   \"\n\" Edge2Msg
                   \"\n\" Edge3Msg
                   \"\n\" Edge4Msg))
)
")
("Visible" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-8161BA70-820D-47EA-8D14-1E8B8AEF3315"
"
Visible Property (ActiveX)
Specifies the visibility of an object or the application.
Supported platforms: Windows only
Signature
VBA:
object.Visible
object
    Type: All drawing objects, Application, AttributeReference, Group, Toolbar
    The objects this property applies to
Property Value
Read-only: No (except for a Group object which is write-only)
Type: Boolean
    True: The object or application is visible.
    False: The object or application is not visible.
Remarks
If you specify an object to be invisible, it will be invisible regardless of the application visible setting. Other factors can also cause an object to be invisible; for example, an object will not be displayed if its layer is off or frozen.
Specifying the application to be invisible allows you to run tasks in the background without having to see the component.
Examples
VBA:
Sub Example_Visible()
    ' This example creates a line in model space.
    ' It then turns visibility of the line on or off, depending
    ' on the user's choice.
    
    Dim lineObj As AcadLine
    Dim startPoint(0 To 2) As Double
    Dim endPoint(0 To 2) As Double
    ' Create the line
    startPoint(0) = 2#: startPoint(1) = 2#: startPoint(2) = 0#
    endPoint(0) = 4#: endPoint(1) = 4#: endPoint(2) = 0#
    Set lineObj = ThisDrawing.ModelSpace.AddLine(startPoint, endPoint)
    ZoomAll
    
    Dim response As Integer
    response = MsgBox(\"Do you want the new line to be visible?\", vbYesNoCancel + vbQuestion)
    Select Case response
    Case vbYes
        lineObj.Visible = True
    Case vbNo
        lineObj.Visible = False
    Case vbCancel
        Exit Sub
    End Select
    
    ThisDrawing.Regen True
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Visible()
    ;; This example creates a line in model space.
    ;; It then turns visibility of the line on or off, depending
    ;; on the user's choice.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the line
    (setq startPoint (vlax-3d-point 2 2 0)
          endPoint (vlax-3d-point 4 4 0))
  
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq lineObj (vla-AddLine modelSpace startPoint endPoint))
    (vla-ZoomAll acadObj)
    (setq kwordList \"Yes No\")
    (vla-InitializeUserInput (vla-get-Utility doc) 1 kwordList)
    (setq response (vla-GetKeyword (vla-get-Utility doc) \"Do you want the new line to be visible? [Yes/No]: \"))
    (cond
        ((= response \"Yes\") (vla-put-Visible lineObj :vlax-true))
        ((= response \"No\") (vla-put-Visible lineObj :vlax-false))
    )
    
    (vla-Regen doc :vlax-true)
)
")
("VisualStyle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-DF56CD1D-0371-4527-8172-A2725E73EB51"
               "
VisualStyle Property (ActiveX)
Specifies the visual style for a viewport.
Supported platforms: Windows only
Signature
VBA:
object.VisualStyle
object
    Type: PViewport
    The object this property applies to.
Property Value
Read-only: No
Type: Long
ID of the visual style that should be assigned to the paper space viewport.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("Volume" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6BA4339E-5F59-4061-90F9-35B487E9BEC3"
          "
Volume Property (ActiveX)
Gets the volume of the solid.
Supported platforms: Windows only
Signature
VBA:
object.Volume
object
    Type: 3DSolid
    The object this property applies to.
Property Value
Read-only: Yes
Type: Double
The volume of the solid.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Volume()
    ' This example creates a box in model space.
    ' It then returns the Volume for that box.
    
    Dim boxObj As Acad3DSolid
    Dim length As Double, width As Double, height As Double
    Dim center(0 To 2) As Double
    
    ' Define the box
    center(0) = 5#: center(1) = 5#: center(2) = 0
    length = 5#: width = 7: height = 10#
    
    ' Create the box (3DSolid) object in model space
    Set boxObj = ThisDrawing.ModelSpace.AddBox(center, length, width, height)
    
    ' Change the viewing direction of the viewport to better see the box
    Dim NewDirection(0 To 2) As Double
    NewDirection(0) = -1: NewDirection(1) = -1: NewDirection(2) = 1
    ThisDrawing.ActiveViewport.direction = NewDirection
    ThisDrawing.ActiveViewport = ThisDrawing.ActiveViewport
    ZoomAll
    
    ' Return the Volume for the box
    Dim Volume As Double
    Volume = boxObj.Volume
    MsgBox \"The Volume for the box is \" & Volume, , \"Volume Example\"
        
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Volume()
    ;; This example creates a box in model space.
    ;; It then returns the Volume for that box.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define the box
    (setq center (vlax-3d-point 5 5 0)
          boxLength 5
	  boxWidth 7
	  boxHeight 10)
    
    ;; Create the box (3DSolid) object in model space
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq boxObj (vla-AddBox modelSpace center boxLength boxWidth boxHeight))
    
    ;; Change the viewing direction of the viewport to better see the box
    (setq NewDirection (vlax-3d-point -1 -1 1))
    (setq activeViewport (vla-get-ActiveViewport doc))
    (vla-put-Direction activeViewport NewDirection)
    (vla-put-ActiveViewport doc activeViewport)
    (vla-ZoomAll acadObj)
    
    ;; Return the Volume for the box
    (setq volume (vla-get-Volume boxObj))
    (alert (strcat \"The Volume for the box is \" (rtos volume 2)))
)
")
("Weights" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E0706FEE-2B0F-4A9D-B2B7-7872CE79A6AB"
"
Weights Property (ActiveX)
Gets the weight vector for spline.
Supported platforms: Windows only
Signature
VBA:
object.Weights
object
    Type: Spline
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
The weight vector of the spline.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_Weights()
    ' This example creates a Spline object in model space and
    ' returns the weight vector for the new Spline
    Dim splineObj As AcadSpline
    Dim startTan(0 To 2) As Double, endTan(0 To 2) As Double
    Dim fitPoints(0 To 8) As Double
    Dim weightVector As Variant
    ' Define the Spline object
    startTan(0) = 0.5: startTan(1) = 0.5: startTan(2) = 0
    endTan(0) = 0.5: endTan(1) = 0.5: endTan(2) = 0
    fitPoints(0) = 0: fitPoints(1) = 0: fitPoints(2) = 0
    fitPoints(3) = 5:    fitPoints(4) = 5: fitPoints(5) = 0
    fitPoints(6) = 10: fitPoints(7) = 0: fitPoints(8) = 0
    
    ' Create new Spline object
    Set splineObj = ThisDrawing.ModelSpace.AddSpline(fitPoints, startTan, endTan)
        
    ' Add weights to the Spline
    splineObj.SetWeight 0, 1.5
    splineObj.SetWeight 1, 2
    splineObj.SetWeight 2, 4.5
    
    ThisDrawing.Application.ZoomAll
    
    ' Display the weight vector of the new Spline
    weightVector = splineObj.Weights
    MsgBox \"The weight vector of the new Spline is: \" & vbCrLf & _
           weightVector(0) & vbCrLf & _
           weightVector(1) & vbCrLf & _
           weightVector(2)
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Weights()
    ;; This example creates a Spline object in model space and
    ;; returns the weight vector for the new Spline
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Define the Spline object
    (setq startTan (vlax-3d-point 0.5 0.5 0)
          endTan (vlax-3d-point 0.5 0.5 0)
         fitPoints (vlax-make-safearray vlax-vbDouble '(0 . 8)))
    (vlax-safearray-fill fitPoints '(0 0 0
				     5 5 0
				     10 0 0
				    )
    )
    
    ;; Create new Spline object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq splineObj (vla-AddSpline modelSpace fitPoints startTan endTan))
    (vla-ZoomAll acadObj)
        
    ;; Add weights to the Spline
    (vla-SetWeight splineObj 0 1.5)
    (vla-SetWeight splineObj 1 2)
    (vla-SetWeight splineObj 2 4.5)
    
    (vla-ZoomAll acadObj)
    
    ;; Display the weight vector of the new Spline
    (setq weightVector (vlax-variant-value (vla-get-Weights splineObj)))
    (alert (strcat \"The weight vector of the new Spline is: \"
                   \"\n\" (rtos (vlax-safearray-get-element weightVector 0) 2)
                   \"\n\" (rtos (vlax-safearray-get-element weightVector 1) 2)
                   \"\n\" (rtos (vlax-safearray-get-element weightVector 2) 2)))
)
")
("Width" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-023FE356-8A2C-4E3F-ADFB-85BCFCCCA6EA"
         "
Width Property (ActiveX)
Specifies the width of the object.
Supported platforms: Windows only
Signature
VBA:
object.Width
object
    Type: Application, DgnUnderlay, Document, DwfUnderlay, GeomapImage, MText, OLE, PdfUnderlay, PointCloud, PViewport, RasterImage, Table, TextStyle, Toolbar, View, Viewport, Wipeout
    The objects this property applies to.
Property Value
Read-only: No (except for the GeomapImage, RasterImage and Toolbar objects which are read-only)
Type: Double
The width of the given object. This value must be a positive, non-negative number.
Remarks
MText: Specifies the width of the text boundary in the current units. AutoCAD wraps the text within the text boundary, therefore the width must be a positive number large enough to accommodate the text. If the width is not large enough, the text may be difficult to read or may not be visible at all.
OLE: The width of an OLE object is the X axis measurement of the frame.
Table: The width of a table is the X axis measurement of the table.
TextStyle: Sets the character spacing. Entering a value of less than 1.0 condenses the text. Entering a value of greater than 1.0 expands it. The maximum value is 100.
Viewport: The width of a viewport is the X axis measurement of the viewport frame.
View: The width of a view is the X axis measurement of the area within a viewport that is used to display the model.
Raster: The width of the raster image in pixels.
Examples
VBA:
Sub Example_Width()
    ' This example creates an MText object in model space.
    ' It then changes the width of the MText object.
    
    Dim MTextObj As AcadMText
    Dim corner(0 To 2) As Double
    Dim width As Double
    Dim text As String
    corner(0) = 0: corner(1) = 5: corner(2) = 0
    width = 10
    text = \"This is the text String for the mtext Object\"
    ' Creates the mtext Object
    Set MTextObj = ThisDrawing.ModelSpace.AddMText(corner, width, text)
    ZoomAll
    
    ' Find the current width of the mtext object
    width = MTextObj.width
    MsgBox \"The current width of the mtext object is \" & MTextObj.width, , \"Width Example\"
    
    ' Change the width of the mtext object
    MTextObj.width = width / 2
    MTextObj.Update
    MsgBox \"The new width of the mtext object is \" & MTextObj.width, , \"Width Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_Width()
    ;; This example creates an MText object in model space.
    ;; It then changes the width of the MText object.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq corner (vlax-3d-point 0 5 0)
          width 10
          text \"This is the text String for the mtext Object\")
    ;; Creates the mtext Object
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq MTextObj (vla-AddMText modelSpace corner width text))
    (vla-ZoomAll acadObj)
    
    ;; Find the current width of the mtext object
    (setq width (vla-get-width MTextObj))
    (alert (strcat \"The current width of the mtext object is \" (rtos width 2)))
    
    ;; Change the width of the mtext object
    (vla-put-width MTextObj (/ width 2))
    (vla-Update MTextObj)
    (alert (strcat \"The new width of the mtext object is \" (rtos (vla-get-width MTextObj) 2)))
)
")
("WindowLeft" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-72ECCC21-7AD2-4F08-B43F-EFFEB473699E"
"
WindowLeft Property (ActiveX)
Specifies the left edge of the application window.
Supported platforms: Windows only
Signature
VBA:
object.WindowLeft
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: No
Type: Integer
The left edge of the application window.
Remarks
The left edge of the application is represented by the distance between the left edge of the main application window and the left edge of the screen.
This distance will establish the X coordinate of the upper-left corner of the application. Note that the origin (0, 0) is the top, left corner.
Examples
VBA:
Sub Example_WindowLeft()
    ' This example finds the WindowLeft (X coordinate) of the top of the
    ' AutoCAD window. It then changes that position to be 100 more
    ' than it currently is. Finally, it resets the window to the
    ' original value.
    
    ' Find the current value of the WindowLeft property
    Dim currWindowLeft As Integer
    currWindowLeft = ThisDrawing.Application.WindowLeft
    MsgBox \"The current value of WindowLeft is \" & ThisDrawing.Application.WindowLeft, , \"WindowLeft Example\"
    
    ' Change the value of WindowLeft
    ThisDrawing.Application.WindowLeft = currWindowLeft + 100
    MsgBox \"The new value of WindowLeft is \" & ThisDrawing.Application.WindowLeft, , \"WindowLeft Example\"
    
    ' Reset the value of WindowLeft
    ThisDrawing.Application.WindowLeft = currWindowLeft
    MsgBox \"The value of WindowLeft has been reset to \" & ThisDrawing.Application.WindowLeft, , \"WindowLeft Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_WindowLeft()
    ;; This example finds the WindowLeft (X coordinate) of the top of the
    ;; AutoCAD window. It then changes that position to be 100 more
    ;; than it currently is. Finally, it resets the window to the
    ;; original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Find the current value of the WindowLeft property
    (setq currWindowLeft (vla-get-WindowLeft acadObj))
    (alert (strcat \"The current value of WindowLeft is \" (itoa currWindowLeft)))
    
    ;; Change the value of WindowLeft
    (vla-put-WindowLeft acadObj (+ currWindowLeft 100))
    (alert (strcat \"The new value of WindowLeft is \" (itoa (vla-get-WindowLeft acadObj))))
    
    ;; Reset the value of WindowLeft
    (vla-put-WindowLeft acadObj currWindowLeft)
    (alert (strcat \"The value of WindowLeft has been reset to \" (itoa (vla-get-WindowLeft acadObj))))
)
")
("WindowState" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-C89AA1E8-A976-4C3D-B901-75B852E9BE71"
               "
WindowState Property (ActiveX)
Specifies the state of the application or document window.
Supported platforms: Windows only
Signature
VBA:
object.WindowState
object
    Type: Application, Document
    The object this property applies to.
Property Value
Read-only: No
Type: acWindowState enum
    acMin: The window is minimized.
    acMax: The window is maximized.
    acNorm: The window is normal (neither minimized nor maximized).
Remarks
No additional remarks.
Examples
VBA:
Sub Example_WindowState()
    ' This example reads and displays the current window state of the AutoCAD application.
    Dim CurrentState As String
    
    ' Use the \"WindowState\" variable to determine the window state of AutoCAD
    Select Case WindowState
        Case acMin: CurrentState = \"Minimized\"
        Case acMax: CurrentState = \"Maximized\"
        Case acNorm: CurrentState = \"Normal Size\"
    End Select
    ' Display window state
    MsgBox \"AutoCAD is now: \" & CurrentState
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_WindowState()
    ;; This example reads and displays the current window state of the AutoCAD application.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Use the \"WindowState\" variable to determine the window state of AutoCAD
    (setq CurrentState (cond 
                           ((= (vla-get-WindowState acadObj) acMin) \"Minimized\")
                           ((= (vla-get-WindowState acadObj) acMax) \"Maximized\")
                           ((= (vla-get-WindowState acadObj) acNorm) \"Normal Size\")
                       ))
    ;; Display window state
    (alert (strcat \"AutoCAD is now: \" CurrentState))
)
")
("WindowTitle" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-D3ABE51D-929E-4907-A822-EDC3D8986E7D"
               "
WindowTitle Property (ActiveX)
Gets the title of the document window.
Supported platforms: Windows only
Signature
VBA:
object.WindowTitle
object
    Type: Document
    The object this property applies to.
Property Value
Read-only: Yes
Type: String
The window title of the document.
Remarks
No additional remarks.
Examples
VBA:
Sub Example_WindowTitle()
    ' This example cycles through the documents collection
    ' and uses the WindowTitle property to create a list of all open documents.
    Dim DOC As AcadDocument
    Dim msg As String
    
    ' If there are no open documents, then exit
    If Documents.count = 0 Then
        MsgBox \"There are no open documents!\"
        Exit Sub
    End If
    
    msg = vbCrLf    ' Start with a space
    
    ' Cycle through all open drawings and get the window title of each drawing
    For Each DOC In Documents
        msg = msg & DOC.WindowTitle
    Next
    
    ' Display a list of open drawings
    MsgBox \"The open drawing titles are: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_WindowTitle()
    ;; This example cycles through the documents collection
    ;; and uses the WindowTitle property to create a list of all open documents.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; If there are no open documents, then exit
    (if (> (vla-get-Count (vla-get-Documents acadObj)) 0)
        (progn
            (setq msg \"\")
	    
            ;; Cycle through all open drawings and get the window title of each drawing
            (vlax-for DOC (vla-get-Documents acadObj)
                (setq msg (strcat msg \"\n\" (vla-get-WindowTitle DOC)))
            )
	    
            ;; Display a list of open drawings
            (alert (strcat \"The open drawing titles are: \" msg))
        )
        (alert \"There are no open documents!\")
    )
)
")
("WindowTop" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-26DF2511-0F12-4573-9F47-BC876106CBB2"
             "
WindowTop Property (ActiveX)
Specifies the top edge of the application window.
Supported platforms: Windows only
Signature
VBA:
object.WindowTop
object
    Type: Application
    The object this property applies to.
Property Value
Read-only: No
Type: Integer
The top edge of the application window.
Remarks
The top edge of the application is determined by the distance from the top edge of the main application window to the top edge of the screen.
This distance will establish the Y coordinate of the upper-left corner of the application. Note that the origin (0, 0) is the top, left corner.
Examples
VBA:
Sub Example_WindowTop()
    ' This example finds the WindowTop (X coordinate) of the WindowTop of the
    ' AutoCAD window. It then changes that position to be 100 more
    ' than it currently is. Finally, it resets the window to the
    ' original value.
    
    ' Find the current value of the WindowTop property
    Dim currWindowTop As Integer
    currWindowTop = ThisDrawing.Application.WindowTop
    MsgBox \"The current value of WindowTop is \" & ThisDrawing.Application.WindowTop, , \"WindowTop Example\"
    
    ' Change the value of WindowTop
    ThisDrawing.Application.WindowTop = currWindowTop + 100
    MsgBox \"The new value of WindowTop is \" & ThisDrawing.Application.WindowTop, , \"WindowTop Example\"
    
    ' Reset the value of WindowTop
    ThisDrawing.Application.WindowTop = currWindowTop
    MsgBox \"The value of WindowTop has been reset to \" & ThisDrawing.Application.WindowTop, , \"WindowTop Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_WindowTop()
    ;; This example finds the WindowTop (X coordinate) of the WindowTop of the
    ;; AutoCAD window. It then changes that position to be 100 more
    ;; than it currently is. Finally, it resets the window to the
    ;; original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Find the current value of the WindowTop property
    (setq currWindowTop (vla-get-WindowTop acadObj))
    (alert (strcat \"The current value of WindowTop is \" (itoa currWindowTop)))
    
    ;; Change the value of WindowTop
    (vla-put-WindowTop acadObj (+ currWindowTop 100))
    (alert (strcat \"The new value of WindowTop is \" (itoa (vla-get-WindowTop acadObj))))
    
    ;; Reset the value of WindowTop
    (vla-put-WindowTop acadObj currWindowTop)
    (alert (strcat \"The value of WindowTop has been reset to \" (itoa (vla-get-WindowTop acadObj))))
)
")
("WireframeType" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-0EA12FAA-89F2-4863-AA25-4374B8CCEE84"
                 "
WireframeType Property (ActiveX)
Specifies the wireframe display type of the surface.
Supported platforms: Windows only
Signature
VBA:
object.WireframeType
object
    Type: ExtrudedSurface, LoftedSurface, NurbSurface, PlaneSurface, RevolvedSurface, Surface, SweptSurface
    The object this property applies to.
Property Value
Read-only: No
Type: acWireframeType enum
    acIsolines: Contour lines displayed on the curved surfaces of 3D solids and surfaces
    acIsoparms: Lines drawn along the U and V directions of the surface, reflecting the shape of the surface defined by its control vertices (CVs)
Remarks
No additional remarks.
Examples
VBA:
Sub SurfaceProperties()
    Dim ssetObj As AcadSelectionSet
    Set ssetObj = ThisDrawing.SelectionSets.Add(\"SURFACES2\")
    Dim mode As Integer
    AppActivate ThisDrawing.Application.Caption
    
    ssetObj.SelectOnScreen
    Dim obj As AcadEntity
    Dim extrude As AcadExtrudedSurface
    Dim objName As String
    Dim LayerName As String
    For Each obj In ssetObj
        objName = obj.ObjectName
        If TypeOf obj Is AcadExtrudedSurface Then
            ExtrudedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadRevolvedSurface Then
            RevolvedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadLoftedSurface Then
            LoftedSurfaceProperties obj
        ElseIf TypeOf obj Is AcadSweptSurface Then
            SweptSurfaceProperties obj
        ElseIf TypeOf obj Is AcadPlaneSurface Then
            PlaneSurfaceProperties obj
        End If
    Next
    ssetObj.Delete
End Sub
Private Sub ExtrudedSurfaceProperties(extrude As AcadExtrudedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox extrude
    MsgBox \"SurfaceType: \" & extrude.SurfaceType & vbCr & _
           \"Height: \" & extrude.height & vbCr & _
           \"TaperAngle: \" & extrude.TaperAngle & vbCr & _
           \"Direction: \" & extrude.Direction & vbCr & _
           \"Material: \" & extrude.Material & vbCr & _
           \"UIsolineDensity: \" & extrude.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & extrude.VIsolineDensity
    'Now change the configurable properties
    extrude.height = extrude.height * 1.5
    extrude.TaperAngle = extrude.TaperAngle * (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity * 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    extrude.height = extrude.height / 1.5
    extrude.TaperAngle = extrude.TaperAngle / (3.14 / 2)
    extrude.UIsolineDensity = extrude.UIsolineDensity / 2#
    extrude.VIsolineDensity = extrude.VIsolineDensity / 0.5
End Sub
Private Sub RevolvedSurfaceProperties(revolve As AcadRevolvedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox revolve
    MsgBox \"SurfaceType: \" & revolve.SurfaceType & vbCr & _
           \"RevolutionAngle: \" & revolve.RevolutionAngle & vbCr & _
           \"AxisPosition: \" & revolve.AxisPosition & vbCr & _
           \"AxisDirection: \" & revolve.AxisDirection & vbCr & _
           \"Material: \" & revolve.Material & vbCr & _
           \"UIsolineDensity: \" & revolve.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & revolve.VIsolineDensity
    'Now change the configurable properties
    revolve.RevolutionAngle = revolve.RevolutionAngle * (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity * 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    revolve.RevolutionAngle = revolve.RevolutionAngle / (3.14 / 2)
    revolve.UIsolineDensity = revolve.UIsolineDensity / 2#
    revolve.VIsolineDensity = revolve.VIsolineDensity / 0.5
End Sub
Private Sub LoftedSurfaceProperties(lofted As AcadLoftedSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox lofted
    MsgBox \"SurfaceType: \" & lofted.SurfaceType & vbCr & _
           \"NumCrossSections: \" & lofted.NumCrossSections & vbCr & _
           \"NumGuidePaths: \" & lofted.NumGuidePaths & vbCr & _
           \"SurfaceNormals: \" & lofted.SurfaceNormals & vbCr & _
           \"StartDraftAngle: \" & lofted.StartDraftAngle & vbCr & _
           \"StartDraftMagnitude: \" & lofted.StartDraftMagnitude & vbCr & _
           \"EndDraftAngle: \" & lofted.EndDraftAngle & vbCr & _
           \"EndDraftMagnitude: \" & lofted.EndDraftMagnitude & vbCr & _
           \"Closed: \" & lofted.Closed & vbCr & _
           \"Material: \" & lofted.Material & vbCr & _
           \"UIsolineDensity: \" & lofted.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & lofted.VIsolineDensity
    'Now change the configurable properties
    lofted.StartDraftAngle = lofted.StartDraftAngle * (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle * (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity * 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    lofted.StartDraftAngle = lofted.StartDraftAngle / (3.14 / 2)
    lofted.EndDraftAngle = lofted.EndDraftAngle / (3.14 / 4)
    lofted.UIsolineDensity = lofted.UIsolineDensity / 2#
    lofted.VIsolineDensity = lofted.VIsolineDensity / 0.5
End Sub
Private Sub SweptSurfaceProperties(swept As AcadSweptSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox swept
    MsgBox \"SurfaceType: \" & swept.SurfaceType & vbCr & _
           \"ProfileRotation: \" & swept.ProfileRotation & vbCr & _
           \"Bank: \" & swept.Bank & vbCr & _
           \"Twist: \" & swept.Twist & vbCr & _
           \"scale: \" & swept.scale & vbCr & _
           \"Length: \" & swept.length & vbCr & _
           \"Material: \" & swept.Material & vbCr & _
           \"UIsolineDensity: \" & swept.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & swept.VIsolineDensity
    swept.ProfileRotation = swept.ProfileRotation * 3.14 * 0.25
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist * 3.14 * -0.5
    swept.UIsolineDensity = swept.UIsolineDensity * 2#
    swept.VIsolineDensity = swept.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    swept.ProfileRotation = swept.ProfileRotation / (3.14 * 0.25)
    swept.Bank = Not swept.Bank
    swept.Twist = swept.Twist / (3.14 * -0.5)
    swept.UIsolineDensity = swept.UIsolineDensity / 2#
    swept.VIsolineDensity = swept.VIsolineDensity / 0.5
End Sub
Private Sub PlaneSurfaceProperties(planar As AcadPlaneSurface)
    AppActivate ThisDrawing.Application.Caption
    
    GetSurfaceBoundingBox planar
    MsgBox \"SurfaceType: \" & planar.SurfaceType & vbCr & _
           \"UIsolineDensity: \" & planar.UIsolineDensity & vbCr & _
           \"VIsolineDensity: \" & planar.VIsolineDensity
    planar.UIsolineDensity = planar.UIsolineDensity * 2#
    planar.VIsolineDensity = planar.VIsolineDensity * 0.5
    ThisDrawing.Regen acActiveViewport
    Utility.GetString 0, \"Press return to continue...\"
    'Now change the properties back to their original values
    planar.UIsolineDensity = planar.UIsolineDensity / 2#
    planar.VIsolineDensity = planar.VIsolineDensity / 0.5
End Sub
Private Sub GetSurfaceBoundingBox(surf As AcadSurface)
    Dim MinPoint As Variant
    Dim MaxPoint As Variant
    surf.GetBoundingBox MinPoint, MaxPoint
    ' Print the min and max extents
    MsgBox \"The extents of the bounding box for the surface are:\" & vbCrLf _
           & \"Min Point: \" & MinPoint(0) & \",\" & MinPoint(1) & \",\" & MinPoint(2) _
           & vbCrLf & \"Max Point: \" & MaxPoint(0) & \",\" & MaxPoint(1) & \",\" & MaxPoint(2), vbInformation, \"GetBoundingBox of Surface\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:SurfaceProperties()
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq ssetObj (vla-Add (vla-get-SelectionSets doc) \"SURFACES2\"))
    (vla-SelectOnScreen ssetObj)
    (vlax-for obj ssetObj
        (setq objName (vla-get-ObjectName obj))
        (cond
          ((= \"AcDb3dSolid\" objName)
            (cond
                ((= (vla-get-SolidType obj) \"Extrusion\") (alert \"Extruded solid selected.\"))
                ((= (vla-get-SolidType obj) \"Revolve\") (alert \"Revolved solid selected.\"))
                ((= (substr (vla-get-SolidType obj) 1 4) \"Loft\") (alert \"Lofted solid selected.\"))
                ((= (vla-get-SolidType obj) \"Sweep\") (alert \"Swept solid selected.\"))
            )
          )
          ((= \"AcDbExtrudedSurface\" objName) (ExtrudedSurfaceProperties obj))
          ((= \"AcDbRevolvedSurface\" objName) (RevolvedSurfaceProperties obj))
          ((= \"AcDbLoftedSurface\" objName) (LoftedSurfaceProperties obj))
          ((= \"AcDbSweptSurface\" objName) (SweptSurfaceProperties obj))
          ((= \"AcDbPlaneSurface\" objName) (PlaneSurfaceProperties obj))
        )      
    )
    (vla-Delete ssetObj)
)
(defun ExtrudedSurfaceProperties (extrude / )
    (GetSurfaceBoundingBox extrude)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType extrude)
                   \"\nHeight: \" (rtos (vla-get-Height extrude) 2)
                   \"\nTaperAngle: \" (rtos (vla-get-TaperAngle extrude) 2)
                   \"\nMaterial: \" (vla-get-Material extrude)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity extrude))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity extrude))))
    ;; Now change the configurable properties
    (vla-put-Height extrude (* (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (* (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (* (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (* (vla-get-VIsolineDensity extrude) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
  
    ;; Now change the properties back to their original values
    (vla-put-Height extrude (/ (vla-get-Height extrude) 1.5))
    (vla-put-TaperAngle extrude (/ (vla-get-TaperAngle extrude) (/ 3.14 2)))
    (vla-put-UIsolineDensity extrude (/ (vla-get-UIsolineDensity extrude) 2))
    (vla-put-VIsolineDensity extrude (/ (vla-get-VIsolineDensity extrude) 0.5))
)
(defun RevolvedSurfaceProperties (revolve / )
    (GetSurfaceBoundingBox revolve)
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType revolve)
                   \"\nRevolutionAngle: \" (rtos (vla-get-RevolutionAngle revolve) 2)
                   \"\nMaterial: \" (vla-get-Material revolve)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity revolve))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity revolve))))
  
    ;; Now change the configurable properties
    (vla-put-RevolutionAngle revolve (* (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (* (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (* (vla-get-VIsolineDensity revolve) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-RevolutionAngle revolve (/ (vla-get-RevolutionAngle revolve) (/ 3.14 2)))
    (vla-put-UIsolineDensity revolve (/ (vla-get-UIsolineDensity revolve) 2))
    (vla-put-VIsolineDensity revolve (/ (vla-get-VIsolineDensity revolve) 0.5))
)
(defun LoftedSurfaceProperties (lofted / )
    (GetSurfaceBoundingBox lofted) 
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType lofted)
                   \"\nNumCrossSections: \" (itoa (vla-get-NumCrossSections lofted))
                   \"\nNumGuidePaths: \" (itoa (vla-get-NumGuidePaths lofted))
                   \"\nSurfaceNormals: \" (itoa (vla-get-SurfaceNormals lofted))
                   \"\nStartDraftAngle: \" (rtos (vla-get-StartDraftAngle lofted) 2)
                   \"\nStartDraftMagnitude: \" (rtos (vla-get-StartDraftMagnitude lofted) 2)
                   \"\nEndDraftAngle: \" (rtos (vla-get-EndDraftAngle lofted) 2)
                   \"\nEndDraftMagnitude: \" (rtos (vla-get-EndDraftMagnitude lofted) 2)
                   \"\nClosed: \" (if (= (vla-get-Closed lofted) :vlax-true) \"True\" \"False\")
                   \"\nMaterial: \" (vla-get-Material lofted)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity lofted))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity lofted))))
    ;; Now change the configurable properties
    (vla-put-StartDraftAngle lofted (* (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (* (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (* (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (* (vla-get-VIsolineDensity lofted) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-StartDraftAngle lofted (/ (vla-get-StartDraftAngle lofted) (/ 3.14 2)))
    (vla-put-EndDraftAngle lofted (/ (vla-get-EndDraftAngle lofted) (/ 3.14 4)))
    (vla-put-UIsolineDensity lofted (/ (vla-get-UIsolineDensity lofted) 2))
    (vla-put-VIsolineDensity lofted (/ (vla-get-VIsolineDensity lofted) 0.5))
)
(defun SweptSurfaceProperties (swept / )
    (GetSurfaceBoundingBox swept)  
  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType swept)
                   \"\nProfileRotation: \" (rtos (vla-get-ProfileRotation swept) 2)
                   \"\nBank: \" (if (= (vla-get-Bank swept) :vlax-true) \"True\" \"False\")
                   \"\nTwist: \" (rtos (vla-get-Twist swept) 2)
                   \"\nscale: \" (rtos (vla-get-Scale swept) 2)
                   \"\nLength: \" (rtos (vla-get-Length swept) 2)
                   \"\nMaterial: \" (vla-get-Material swept)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity swept))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity swept))))
    (vla-put-ProfileRotation swept (* (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (* (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (* (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (* (vla-get-VIsolineDensity swept) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-ProfileRotation swept (/ (vla-get-ProfileRotation swept) (* 3.14 0.25)))
    (vla-put-Bank swept (if (= (vla-get-Bank swept) :vlax-true) :vlax-false :vlax-true))
    (vla-put-Twist swept (/ (vla-get-Twist swept) (* 3.14 -0.5)))
    (vla-put-UIsolineDensity swept (/ (vla-get-UIsolineDensity swept) 2))
    (vla-put-VIsolineDensity swept (/ (vla-get-VIsolineDensity swept) 0.5))
)
(defun PlaneSurfaceProperties (planar / )
    (GetSurfaceBoundingBox planar)  
    (alert (strcat \"SurfaceType: \" (vla-get-SurfaceType planar)
                   \"\nUIsolineDensity: \" (itoa (vla-get-UIsolineDensity planar))
                   \"\nVIsolineDensity: \" (itoa (vla-get-VIsolineDensity planar))))
    (vla-put-UIsolineDensity planar (* (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (* (vla-get-VIsolineDensity planar) 0.5))
    (vla-Regen doc acActiveViewport)
    (vla-GetString (vla-get-Utility doc) 0 \"Press return to continue...\")
    ;; Now change the properties back to their original values
    (vla-put-UIsolineDensity planar (/ (vla-get-UIsolineDensity planar) 2))
    (vla-put-VIsolineDensity planar (/ (vla-get-VIsolineDensity planar) 0.5))
)
(defun GetSurfaceBoundingBox (surf / )
    (vla-GetBoundingBox surf 'MinPoint 'MaxPoint)
    ;; Print the min and max extents
    (alert (strcat \"The extents of the bounding box for the surface are:\"
                   \"\nMin Point: \" (rtos (vlax-safearray-get-element MinPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MinPoint 2) 2)
                   \"\nMax Point: \" (rtos (vlax-safearray-get-element MaxPoint 0) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 1) 2) \",\"
                                   (rtos (vlax-safearray-get-element MaxPoint 2) 2)))
)
")
("XEffectiveScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-27A413B0-D586-4E28-A882-FF3D3E8BB43A"
                         "
XEffectiveScaleFactor Property (ActiveX)
Specifies the effective XScale factor of the block.
Supported platforms: Windows only
Signature
VBA:
object.XEffectiveScaleFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_NOUNITS
A non-zero real number.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("XRefDatabase" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E7D0AC97-5ECD-40E2-929F-EC1300F6502A"
"
XRefDatabase Property (ActiveX)
Gets the Database object that defines the contents of the block.
Supported platforms: Windows only
Signature
VBA:
object.XRefDatabase
object
    Type: Block
    The object this property applies to.
Property Value
Read-only: Yes
Type: Database
The Database object that defines the contents of the block.
Remarks
This property is only available if the IsXRef property for the block equals True.
Examples
VBA:
Sub Example_XRefDatabase()
    ' This example adds an external reference to the current drawing.
    ' It then cycles through each Block object in the drawing
    ' and determines the style of each Block by accessing the
    ' IsLayout and IsXRef properties of the Block. If the Block is an
    ' XRef Block, you obtain a reference to the external Database object
    ' for that Block and display the number of Blocks the Database contains.
    
    Dim InsertPoint(0 To 2) As Double
    Dim insertedBlock As AcadExternalReference
    Dim tempBlock As AcadBlock
    Dim msg As String, PathName As String
    
    ' Define external reference to be inserted
    InsertPoint(0) = 1: InsertPoint(1) = 1: InsertPoint(2) = 0
    PathName = \"c:\program files\autocad\sample\city map.dwg\"
    
    ' Add the external block to model space
    Set insertedBlock = ThisDrawing.ModelSpace.AttachExternalReference(PathName, \"XREF_IMAGE\", InsertPoint, 1, 1, 1, 0, False)
        
    ThisDrawing.Application.ZoomAll
    
    msg = vbCrLf & vbCrLf
    
    For Each tempBlock In ThisDrawing.Blocks
        If tempBlock.IsXRef Then
            ' Block is an external reference, so add it to list
            msg = msg & tempBlock.name & \" contains \" & _
            tempBlock.XRefDatabase.Blocks.count & \" blocks\"
            
            msg = msg & vbCrLf      ' Insert line
        End If
    Next
        
    ' Display Block information for the XRefDatabase
    MsgBox \"Externally referenced blocks attached to this drawing have the following block counts: \" & msg
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_XRefDatabase()
    ;; This example adds an external reference to the current drawing.
    ;; It then cycles through each Block object in the drawing
    ;; and determines the style of each Block by accessing the
    ;; IsLayout and IsXRef properties of the Block. If the Block is an
    ;; XRef Block, you obtain a reference to the external Database object
    ;; for that Block and display the number of Blocks the Database contains.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    
    ;; Define external reference to be inserted
    (setq InsertPoint (vlax-3d-point 1 1 0)
          pathName (findfile \".\\Sample\\Sheet Sets\\Architectural\\Res\\STAIR1.dwg\"))
    
    ;; Add the external block to model space
    (setq modelSpace (vla-get-ModelSpace doc))  
    (setq insertedBlock (vla-AttachExternalReference modelSpace pathName \"XREF_IMAGE\" InsertPoint 1 1 1 0 :vlax-false))
        
    (vla-ZoomAll acadObj)
    
    (setq msg \"\")
    (vlax-for tempBlock (vla-get-Blocks doc)
        (if (= (vla-get-IsXRef tempBlock) :vlax-true)
            (progn
                ;; Block is an external reference, so add it to list
                (setq msg (strcat msg (vla-get-Name tempBlock) \" contains \"
                                  (itoa (vla-get-Count (vla-get-Blocks (vla-get-XRefDatabase tempBlock)))) \" blocks\n\"))
            )
        )
    )
        
    ;; Display Block information for the XRefDatabase
    (alert (strcat \"Externally referenced blocks attached to this drawing have the following block counts: \" msg))
)
Если не указано другое, эта работа лицензируется в соответствии с условиями «Attribution-NonCommercial-ShareAlike» («Атрибуция — Некоммерческое использование — На тех же условиях») 3.0 Непортированная. Для получения дополнительной информации см. раздел вопросов и ответов Autodesk Creative Commons.
    Заявление о конфиденциальностиУсловия использованияСообщить о нарушении© 2023 Autodesk Inc. Все права защищены. 
")
("XRefEdit" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-68B29BDE-3704-4317-B179-4D11AE5CEAE3"
"
XRefEdit Property (ActiveX)
Determines if the current drawing can be edited in place when being referenced by another user.
Supported platforms: Windows only
Signature
VBA:
object.XRefEdit
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Allows in-place reference editing.
    False: Does not allow in-place reference editing.
Remarks
The initial value of this property is True.
Note: The value of this property is stored in the XEDIT system variable.
Examples
VBA:
Sub Example_XRefEdit()
    ' This example reads and modifies the preference value that controls
    ' whether the current drawing can be edited in place when being
    ' referenced by another user.
    '
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.XRefEdit
    MsgBox \"The XRefEdit preference is set to: \" & originalValue
    ' Modify the XRefEdit preference by toggling the value
    ACADPref.XRefEdit = Not (ACADPref.XRefEdit)
    newValue = ACADPref.XRefEdit
    MsgBox \"The XRefEdit preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.XRefEdit = originalValue
    MsgBox \"The XRefEdit preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_XRefEdit()
    ;; This example reads and modifies the preference value that controls
    ;; whether the current drawing can be edited in place when being
    ;; referenced by another user.
    ;;
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-XRefEdit preferences))
    (alert (strcat \"The XRefEdit preference is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the XRefEdit preference by toggling the value
    (vla-put-XRefEdit preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The XRefEdit preference has been set to: \" (if (= (vla-get-XRefEdit preferences) :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-XRefEdit preferences originalValue)
    (alert (strcat \"The XRefEdit preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("XRefLayerVisibility" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-F0671C01-FF50-4E8D-9AF6-BA9F74C97FF4"
                       "
XRefLayerVisibility Property (ActiveX)
Determines the visibility of xref-dependent layers and specifies if nested xref path changes are saved.
Supported platforms: Windows only
Signature
VBA:
object.XRefLayerVisibility
object
    Type: DatabasePreferences
    The object this property applies to.
Property Value
Read-only: No
Type: Boolean
    True: Xref-dependent layer changes made in the current drawing take precedence.
    False: The layer table, as stored in the reference drawing (xref) takes precedence.
Remarks
The initial value of this property is True.
When this property is set to True, layer settings are saved with the current drawing's layer table and persist from session to session. Nested xref path changes are saved with the current drawing and persist from session to session.
When this property is set to False, changes made to xref-dependent layers in the current drawing are valid in the current session only, but are not saved with the drawing. When the current drawing is reopened, the layer table is reloaded from the reference drawing and the current drawing reflects those settings. The layer settings affected are: On/Off, Freeze/Thaw, Color, and Linetype. This setting also specifies that changes made to the paths of nested xrefs are for the current session only and are not saved with the drawing.
Note: The value of this property is stored in the VISRETAIN system variable.
Examples
VBA:
Sub Example_XRefLayerVisibility()
    ' This example reads and modifies the preference value that controls
    ' the visibility of xref-dependent layers and specifies if nested xref
    ' path changes are saved.
    '
    ' When finished, this example resets the preference value back to
    ' its original value.
    
    Dim ACADPref As AcadDatabasePreferences
    Dim originalValue As Variant, newValue As Variant
    
    ' Get the user preferences object
    Set ACADPref = ThisDrawing.preferences
    
    ' Read and display the original value
    originalValue = ACADPref.XRefLayerVisibility
    MsgBox \"The XRefLayerVisibility preference is set to: \" & originalValue
    ' Modify the XRefLayerVisibility preference by toggling the value
    ACADPref.XRefLayerVisibility = Not (ACADPref.XRefLayerVisibility)
    newValue = ACADPref.XRefLayerVisibility
    MsgBox \"The XRefLayerVisibility preference has been set to: \" & newValue
    ' Reset the preference back to its original value
    '
    ' * Note: Comment out this last section to leave the change to
    '         this preference in effect
    ACADPref.XRefLayerVisibility = originalValue
    MsgBox \"The XRefLayerVisibility preference was reset back to: \" & originalValue
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_XRefLayerVisibility()
    ;; This example reads and modifies the preference value that controls
    ;; the visibility of xref-dependent layers and specifies if nested xref
    ;; path changes are saved.
    ;;
    ;; When finished, this example resets the preference value back to
    ;; its original value.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    (setq preferences (vla-get-Preferences doc))
    
    ;; Read and display the original value
    (setq originalValue (vla-get-XRefLayerVisibility preferences))
    (alert (strcat \"The XRefLayerVisibility preference is set to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
    ;; Modify the XRefLayerVisibility preference by toggling the value
    (vla-put-XRefLayerVisibility preferences (if (= originalValue :vlax-true) :vlax-false :vlax-true))
    (alert (strcat \"The XRefLayerVisibility preference has been set to: \" (if (= (vla-get-XRefLayerVisibility preferences) :vlax-true) \"True\" \"False\")))
    ;; Reset the preference back to its original value
    ;;
    ;; * Note: Comment out this last section to leave the change to
    ;;         this preference in effect
    (vla-put-XRefLayerVisibility preferences originalValue)
    (alert (strcat \"The XRefLayerVisibility preference was reset back to: \" (if (= originalValue :vlax-true) \"True\" \"False\")))
)
")
("XScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-4606037F-9B61-4320-98A4-AB0D4D511665"
                "
XScaleFactor Property (ActiveX)
Specifies the X scale factor for the block or external reference (xref).
Supported platforms: Windows only
Signature
VBA:
object.XScaleFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: Double
A non-zero real number.
Remarks
The initial scale factor is 1.0.
Examples
VBA:
Sub Example_XScaleFactor()
    ' This example creates a block containing a circle.
    ' It then inserts the block and changes the XScaleFactor.
    
    ' Create the block
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"CircleBlock\")
    
    ' Add a circle to the block
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 0: center(1) = 0: center(2) = 0
    radius = 1
    Set circleObj = blockObj.AddCircle(center, radius)
   
    ' Insert the block
    Dim blockRefObj As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"CircleBlock\", 1#, 1#, 1#, 0)
    
    ' Find the current XScaleFactor for the block reference
    Dim currXScaleFactor As Double
    currXScaleFactor = blockRefObj.XScaleFactor
    ZoomAll
    MsgBox \"The current XScaleFactor for the block reference is \" & blockRefObj.XScaleFactor, , \"XScaleFactor Example\"
    
    ' Change the XScaleFactor for the block reference
    blockRefObj.XScaleFactor = currXScaleFactor + 2
    ZoomAll
    MsgBox \"The new XScaleFactor for the block reference is \" & blockRefObj.XScaleFactor, , \"XScaleFactor Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_XScaleFactor()
    ;; This example creates a block containing a circle.
    ;; It then inserts the block and changes the XScaleFactor.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the block
    (setq insertionPnt (vlax-3d-point 0 0 0))
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"CircleBlock\"))
    
    ;; Add a circle to the block
    (setq center (vlax-3d-point 0 0 0)
          radius 1)
    (setq circleObj (vla-AddCircle blockObj center radius))
   
    ;; Insert the block
    (setq insertionPnt (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj (vla-InsertBlock modelSpace insertionPnt \"CircleBlock\" 1 1 1 0))
    
    ;; Find the current XScaleFactor for the block reference
    (setq currXScaleFactor (vla-get-XScaleFactor blockRefObj))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The current XScaleFactor for the block reference is \" (rtos (vla-get-XScaleFactor blockRefObj) 2)))
    
    ;; Change the XScaleFactor for the block reference
    (vla-put-XScaleFactor blockRefObj (+ currXScaleFactor 2))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The new XScaleFactor for the block reference is \" (rtos (vla-get-XScaleFactor blockRefObj) 2)))
)
")
("XVector" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-3FB215F3-EE89-43F4-BACF-1F8C2675B190"
           "
XVector Property (ActiveX)
Specifies the X direction of the given UCS.
Supported platforms: Windows only
Signature
VBA:
object.XVector
object
    Type: UCS
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A vector specifying the X direction of the given UCS.
Remarks
If you change the X vector value on the active UCS, you must reset the active UCS to see the changes. To reset the active UCS, use the ActiveUCS property.
Note: The value of this property is stored in the UCSXDIR system variable.
Examples
VBA:
Sub Example_XVector()
    ' This finds the current setting of XVector for a given UCS.
    ' It then changes the XVector and resets the UCS.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the activeviewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Define a new UCS and turn on the UCS icon at the origin.
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPoint(0 To 2) As Double
    Dim yAxisPoint(0 To 2) As Double
    
    origin(0) = 2: origin(1) = 2: origin(2) = 0
    xAxisPoint(0) = 3: xAxisPoint(1) = 2: xAxisPoint(2) = 0
    yAxisPoint(0) = 2: yAxisPoint(1) = 3: yAxisPoint(2) = 0
    
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPoint, yAxisPoint, \"UCS1\")
    ThisDrawing.ActiveUCS = ucsObj
    viewportObj.UCSIconOn = True
    viewportObj.UCSIconAtOrigin = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Display the current setting of the XVector
    MsgBox \"The current XVector is: \" _
           & ucsObj.XVector(0) & \", \" & ucsObj.XVector(1) & \", \" & ucsObj.XVector(2) & vbCrLf _
           & \"The current YVector is: \" _
           & ucsObj.YVector(0) & \", \" & ucsObj.YVector(1) & \", \" & ucsObj.YVector(2), , \"XVector Example\"
    ' Change the setting of XVector
    Dim newVector(0 To 2) As Double
    newVector(0) = 1: newVector(1) = 1: newVector(2) = 0
    ucsObj.XVector = newVector
    
    ' Reset the active UCS to see the change
    ThisDrawing.ActiveUCS = ucsObj
    
    MsgBox \"The new XVector is: \" _
           & ucsObj.XVector(0) & \", \" & ucsObj.XVector(1) & \", \" & ucsObj.XVector(2) & vbCrLf _
           & \"The YVector is: \" _
           & ucsObj.YVector(0) & \", \" & ucsObj.YVector(1) & \", \" & ucsObj.YVector(2), , \"XVector Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_XVector()
    ;; This finds the current setting of XVector for a given UCS.
    ;; It then changes the XVector and resets the UCS.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Define a new UCS and turn on the UCS icon at the origin.
    (setq origin (vlax-3d-point 2 2 0)
          xAxisPoint (vlax-3d-point 3 2 0)
          yAxisPoint (vlax-3d-point 2 3 0))
    (setq ucsObj (vla-Add (vla-get-UserCoordinateSystems doc) origin xAxisPoint yAxisPoint \"TEST\"))
    (vla-put-ActiveUCS doc ucsObj)
    (vla-put-UCSIconOn viewportObj :vlax-true)
    (vla-put-UCSIconAtOrigin viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Display the current setting of the XVector
    (alert (strcat \"The current XVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 2) 2)
                   \"\nThe current YVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 2) 2)))
    ;; Change the setting of XVector
    (setq newVector (vlax-3d-point 0.7071 0.7071 0))
    (vla-put-XVector ucsObj newVector)
    (setq newVector (vlax-3d-point -0.7071 0.7071 0))
    (vla-put-YVector ucsObj newVector)
    ;; Reset the active UCS to see the change
    (vla-put-ActiveUCS doc ucsObj)
    (alert (strcat \"The new XVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 2) 2)
                   \"\nThe new YVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 2) 2)))
)
")
("YEffectiveScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-6867ED2B-2635-4E62-B39D-4FFC57C6B265"
"
YEffectiveScaleFactor Property (ActiveX)
Specifies the effective YScale factor of the block.
Supported platforms: Windows only
Signature
VBA:
object.YEffectiveScaleFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_NOUNITS
A non-zero real number.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("YScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-CA689A80-DC02-4BBE-A67B-97B377159F9D"
                "
YScaleFactor Property (ActiveX)
Specifies the Y scale factor for the block or external reference (xref).
Supported platforms: Windows only
Signature
VBA:
object.YScaleFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: Double
A non-zero real number.
Remarks
The initial scale factor is 1.0.
Examples
VBA:
Sub Example_YScaleFactor()
    ' This example creates a block containing a circle.
    ' It then inserts the block and changes the YScaleFactor.
    
    ' Create the block
    Dim blockObj As AcadBlock
    Dim insertionPnt(0 To 2) As Double
    insertionPnt(0) = 0#: insertionPnt(1) = 0#: insertionPnt(2) = 0#
    Set blockObj = ThisDrawing.Blocks.Add(insertionPnt, \"CircleBlock\")
    
    ' Add a circle to the block
    Dim circleObj As AcadCircle
    Dim center(0 To 2) As Double
    Dim radius As Double
    center(0) = 0: center(1) = 0: center(2) = 0
    radius = 1
    Set circleObj = blockObj.AddCircle(center, radius)
   
    ' Insert the block
    Dim blockRefObj As AcadBlockReference
    insertionPnt(0) = 2#: insertionPnt(1) = 2#: insertionPnt(2) = 0
    Set blockRefObj = ThisDrawing.ModelSpace.InsertBlock(insertionPnt, \"CircleBlock\", 1#, 1#, 1#, 0)
    ZoomAll
    
    ' Find the current YScaleFactor for the block reference
    Dim currYScaleFactor As Double
    currYScaleFactor = blockRefObj.YScaleFactor
    MsgBox \"The current YScaleFactor for the block reference is \" & blockRefObj.YScaleFactor, , \"YScaleFactor Example\"
    
    ' Change the YScaleFactor for the block reference
    blockRefObj.YScaleFactor = currYScaleFactor + 2
    ZoomAll
    MsgBox \"The new YScaleFactor for the block reference is \" & blockRefObj.YScaleFactor, , \"YScaleFactor Example\"
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_YScaleFactor()
    ;; This example creates a block containing a circle.
    ;; It then inserts the block and changes the YScaleFactor.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Create the block
    (setq insertionPnt (vlax-3d-point 0 0 0))
    (setq blockObj (vla-Add (vla-get-Blocks doc) insertionPnt \"CircleBlock\"))
    
    ;; Add a circle to the block
    (setq center (vlax-3d-point 0 0 0)
          radius 1)
    (setq circleObj (vla-AddCircle blockObj center radius))
   
    ;; Insert the block
    (setq insertionPnt (vlax-3d-point 2 2 0))
    (setq modelSpace (vla-get-ModelSpace doc))
    (setq blockRefObj (vla-InsertBlock modelSpace insertionPnt \"CircleBlock\" 1 1 1 0))
    
    ;; Find the current YScaleFactor for the block reference
    (setq currYScaleFactor (vla-get-YScaleFactor blockRefObj))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The current YScaleFactor for the block reference is \" (rtos (vla-get-YScaleFactor blockRefObj) 2)))
    
    ;; Change the YScaleFactor for the block reference
    (vla-put-YScaleFactor blockRefObj (+ currYScaleFactor 2))
    (vla-ZoomAll acadObj)
    (alert (strcat \"The new YScaleFactor for the block reference is \" (rtos (vla-get-YScaleFactor blockRefObj) 2)))
)
")
("YVector" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-B68D37F9-1136-4A37-9919-EE4BD9AFA936"
"
YVector Property (ActiveX)
Specifies the Y direction of the given UCS.
Supported platforms: Windows only
Signature
VBA:
object.YVector
object
    Type: UCS
    The object this property applies to.
Property Value
Read-only: No
Type: Variant (three-element array of doubles)
A vector specifying the Y direction of the given UCS
Remarks
If you change the Y vector value on the active UCS, you must reset the active UCS to see the changes. To reset the active UCS, use the ActiveUCS property.
Note: The value of this property is stored in the UCSYDIR system variable.
Examples
VBA:
Sub Example_YVector()
    ' This finds the current setting of YVector for a given UCS.
    ' It then changes the YVector and resets the UCS.
    Dim viewportObj As AcadViewport
    
    ' Set the viewportObj variable to the active viewport
    Set viewportObj = ThisDrawing.ActiveViewport
    
    ' Define a new UCS and turn on the UCS icon at the origin.
    Dim ucsObj As AcadUCS
    Dim origin(0 To 2) As Double
    Dim xAxisPoint(0 To 2) As Double
    Dim yAxisPoint(0 To 2) As Double
    
    origin(0) = 2: origin(1) = 2: origin(2) = 0
    xAxisPoint(0) = 3: xAxisPoint(1) = 2: xAxisPoint(2) = 0
    yAxisPoint(0) = 2: yAxisPoint(1) = 3: yAxisPoint(2) = 0
    
    Set ucsObj = ThisDrawing.UserCoordinateSystems.Add(origin, xAxisPoint, yAxisPoint, \"UCS1\")
    ThisDrawing.ActiveUCS = ucsObj
    viewportObj.UCSIconOn = True
    viewportObj.UCSIconAtOrigin = True
    ThisDrawing.ActiveViewport = viewportObj
    
    ' Display the current setting of the vectors
    MsgBox \"The current XVector is: \" _
           & ucsObj.XVector(0) & \", \" & ucsObj.XVector(1) & \", \" & ucsObj.XVector(2) & vbCrLf _
           & \"The current YVector is: \" _
           & ucsObj.YVector(0) & \", \" & ucsObj.YVector(1) & \", \" & ucsObj.YVector(2), , \"YVector Example\"
    ' Change the setting of YVector
    Dim newVector(0 To 2) As Double
    newVector(0) = -1: newVector(1) = -1: newVector(2) = 0
    ucsObj.YVector = newVector
    
    ' Reset the active UCS to see the change
    ThisDrawing.ActiveUCS = ucsObj
    
    MsgBox \"The new XVector is: \" _
           & ucsObj.XVector(0) & \", \" & ucsObj.XVector(1) & \", \" & ucsObj.XVector(2) & vbCrLf _
           & \"The YVector is: \" _
           & ucsObj.YVector(0) & \", \" & ucsObj.YVector(1) & \", \" & ucsObj.YVector(2), , \"YVector Example\"
    
End Sub
Visual LISP:
(vl-load-com)
(defun c:Example_YVector()
    ;; This finds the current setting of XVector for a given UCS.
    ;; It then changes the XVector and resets the UCS.
    (setq acadObj (vlax-get-acad-object))
    (setq doc (vla-get-ActiveDocument acadObj))
    ;; Set the viewportObj variable to the activeviewport
    (setq viewportObj (vla-get-ActiveViewport doc))
    
    ;; Define a new UCS and turn on the UCS icon at the origin.
    (setq origin (vlax-3d-point 2 2 0)
          xAxisPoint (vlax-3d-point 3 2 0)
          yAxisPoint (vlax-3d-point 2 3 0))
    (setq ucsObj (vla-Add (vla-get-UserCoordinateSystems doc) origin xAxisPoint yAxisPoint \"TEST\"))
    (vla-put-ActiveUCS doc ucsObj)
    (vla-put-UCSIconOn viewportObj :vlax-true)
    (vla-put-UCSIconAtOrigin viewportObj :vlax-true)
    (vla-put-ActiveViewport doc viewportObj)
    
    ;; Display the current setting of the XVector
    (alert (strcat \"The current XVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 2) 2)
                   \"\nThe current YVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 2) 2)))
    ;; Change the setting of XVector
    (setq newVector (vlax-3d-point 0.7071 0.7071 0))
    (vla-put-XVector ucsObj newVector)
    (setq newVector (vlax-3d-point -0.7071 0.7071 0))
    (vla-put-YVector ucsObj newVector)
    ;; Reset the active UCS to see the change
    (vla-put-ActiveUCS doc ucsObj)
    (alert (strcat \"The new XVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-XVector ucsObj)) 2) 2)
                   \"\nThe new YVector is: \"
                   \"\n\" (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 0) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 1) 2) \", \"
                        (rtos (vlax-safearray-get-element (vlax-variant-value (vla-get-YVector ucsObj)) 2) 2)))
)
")
("ZEffectiveScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-E7A14E18-0AD7-41E9-A4D8-DA4264D2F499"
                         "
ZEffectiveScaleFactor Property (ActiveX)
Specifies the effective ZScale factor of the block.
Supported platforms: Windows only
Signature
VBA:
object.ZEffectiveScaleFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: ACAD_NOUNITS
A non-zero real number.
Remarks
No additional remarks.
Examples
VBA:
Not available
Visual LISP:
Not available
")
("ZScaleFactor" "https://help.autodesk.com/view/ACD/2022/RUS/?guid=GUID-9A22CC37-F59D-4CF6-99AD-9FA28058AB87"
                "
ZScaleFactor Property (ActiveX)
Specifies the Z scale factor for the block or external reference (xref).
Supported platforms: Windows only
Signature
VBA:
object.ZScaleFactor
object
    Type: BlockReference, ComparedReference, ExternalReference, MInsertBlock
    The object this property applies to.
Property Value
Read-only: No
Type: Double
A non-zero real number.
Remarks
The initial scale factor is 1.0.
Examples
VBA:
Not available
Visual LISP:
Not available
")
